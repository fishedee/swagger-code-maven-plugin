import 'package:trade_app/util/request.dart';

/*
* 设计目标
* 1. 支持后端Api升级以后，前端需要往后兼容新后端Api。包括，支持没有预定义的Enum，支持没有预定义的字段保存和透传
* 2. 最大化兼容不同格式的后端格式，例如以string来传递int，double或者bool字段
* 3. 数据不仅用来后端传递数据，也是前端表单的数据模型。所以，每个字段都需要允许为null，以保存用户暂时未填写的表单项
* 4. 前端表单的数据模型，需要为强类型的，避免在编写业务逻辑代码中使用不存在的字段，传入不匹配的类型。
* 5. 前端表单的数据模型，需要获取模型的field所有可能性，以保证在编译时进行校验field是否存在。
*/

abstract interface class IData {
  Object? operator [](String name);
  void operator []=(String name, Object? value);
}

abstract interface class IDataDynamic {
  Object encodeDynamic();
}

class BoolHelper {
  static bool? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is bool) {
      return data;
    } else if (data is String) {
      if (data.trim().toLowerCase() == 'true') {
        return true;
      } else if (data.trim().toLowerCase() == 'false') {
        return false;
      }
    }
    throw FormatException('can not parse to bool: [$data]');
  }

  static Object? toDynamic(bool? data) {
    return data;
  }
}

class IntHelper {
  static int? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is int) {
      return data;
    } else if (data is double) {
      return data.toInt();
    } else if (data is String) {
      return int.parse(data);
    }
    throw FormatException("can not parse to int: [$data]");
  }

  static Object? toDynamic(int? data) {
    return data;
  }
}

class DoubleHelper {
  static double? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is int) {
      return data.toDouble();
    } else if (data is double) {
      return data;
    } else if (data is String) {
      return double.parse(data);
    }
    throw FormatException('can not parse to double: [$data]');
  }

  static Object? toDynamic(double? data) {
    return data;
  }
}

class StringHelper {
  static String? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String ||
        data is int ||
        data is double ||
        data is bool) {
      return data.toString();
    }
    throw FormatException('can not parse to String: [$data]');
  }

  static Object? toDynamic(String? data) {
    return data;
  }
}

class ObjectHelper {
  static Object? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String ||
        data is int ||
        data is double ||
        data is bool) {
      return data;
    }
    throw FormatException('can not parse to Object: [$data]');
  }

  static Object? toDynamic(Object? data) {
    return data;
  }
}

class ListHelper {
  static List<T>? Function(Object? data) wrapFromDynamic<T>(
      T Function(Object? item) fromDynamicItem) {
    return (Object? data) {
      if (data == null) {
        return null;
      } else if (data is List) {
        return data.map((single) => fromDynamicItem(single)).toList();
      }
      throw FormatException('can not parse to list: [$data]');
    };
  }

  static Object? Function(List<T>? data) wrapToDynamic<T>(
      Object Function(T data) toDynamicItem) {
    return (List<T>? data) {
      if (data == null) {
        return null;
      }
      return data.map((single) => toDynamicItem(single)).toList();
    };
  }

  static bool equals<T>(List<T>? a, List<T>? b) {
    if (a == null) return b == null;
    if (b == null || a.length != b.length) return false;

    /// Check whether two references are to the same object.
    if (identical(a, b)) return true;
    for (var i = 0; i != a.length; i++) {
      if (a[i] != b[i]) {
        return false;
      }
    }
    return true;
  }
}

class MapHelper {
  static Map<String, T>? Function(Object? data) wrapFromDynamic<T>(
      T Function(Object? item) fromDynamicItem) {
    return (Object? data) {
      if (data == null) {
        return null;
      } else if (data is Map<String, Object?>) {
        final result = <String, T>{};
        data.forEach((key, value) {
          result[key] = fromDynamicItem(value);
        });
        return result;
      }
      throw FormatException('can not parse to map: [$data]');
    };
  }

  static Object? Function(Map<String, T>? data) wrapToDynamic<T>(
      Object Function(T data) toDynamicItem) {
    return (Map<String, T>? data) {
      if (data == null) {
        return null;
      }
      final result = <String, dynamic>{};
      data.forEach((key, value) {
        result[key] = toDynamicItem(value);
      });
      return result;
    };
  }

  static bool equals<T, U>(Map<T, U>? a, Map<T, U>? b) {
    if (a == null) return b == null;
    if (b == null || a.length != b.length) return false;

    /// Check whether two references are to the same object.
    if (identical(a, b)) return true;
    for (final T key in a.keys) {
      if (!b.containsKey(key) || b[key] != a[key]) {
        return false;
      }
    }
    return true;
  }
}

typedef GetterHandler<T> = Object? Function(T data);
typedef SetterHandler<T> = void Function(T data, Object? value);
typedef ToDynamicHandler<T> = Object? Function(T data);
typedef FromDynamicHandler<T> = void Function(T data, Object? value);
typedef FieldReflectInfo<T> = Map<
    String,
    ({
      GetterHandler<T> getter,
      SetterHandler<T> setter,
      ToDynamicHandler<T> toDynamic,
      FromDynamicHandler<T> fromDynamic
    })>;

abstract class IDataBasic implements IData {
  final Map<String, Object?> _externalFields = {};

  IDataBasic();

  Map<String, Object?> getExternalFields() {
    return _externalFields;
  }

  Object? getExternalField(String name) {
    return _externalFields[name];
  }

  @override
  Object? operator [](String name) {
    return _externalFields[name];
  }

  void setExternalField(String name, Object? value) {
    _externalFields[name] = value;
  }

  @override
  void operator []=(String name, Object? value) {
    _externalFields[name] = value;
  }
}

class IDataField {
  final String key;

  const IDataField(this.key);
}

class IDataEnum {
  final String value;

  final String label;

  const IDataEnum(this.value, this.label);

  @override
  int get hashCode {
    return value.hashCode;
  }

  @override
  bool operator ==(Object? other) {
    return other is IDataEnum &&
        runtimeType == other.runtimeType &&
        value == other.value;
  }

  @override
  String toString() {
    return '$runtimeType($value-$label)';
  }
}

class TypeEnumExcelHeaderType extends IDataEnum implements IDataDynamic{
  static const STRING = TypeEnumExcelHeaderType('STRING','字符串');

  static const NUMBER = TypeEnumExcelHeaderType('NUMBER','数字');

  static const values = {
     'STRING':STRING,
     'NUMBER':NUMBER,
  };

  const TypeEnumExcelHeaderType(super.value,super.label);

  static TypeEnumExcelHeaderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumExcelHeaderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumExcelHeaderType: [$data]');
  }

  static Object? toDynamic(TypeEnumExcelHeaderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumTenantStatePO extends IDataEnum implements IDataDynamic{
  static const INITIAL = TypeEnumTenantStatePO('INITIAL','初始化');

  static const TRIAL = TypeEnumTenantStatePO('TRIAL','试用中');

  static const SUBSCRIBE = TypeEnumTenantStatePO('SUBSCRIBE','订阅中');

  static const values = {
     'INITIAL':INITIAL,
     'TRIAL':TRIAL,
     'SUBSCRIBE':SUBSCRIBE,
  };

  const TypeEnumTenantStatePO(super.value,super.label);

  static TypeEnumTenantStatePO? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumTenantStatePO(data, data);
    }
    throw FormatException('can not parse to TypeEnumTenantStatePO: [$data]');
  }

  static Object? toDynamic(TypeEnumTenantStatePO? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumBackendTaskType extends IDataEnum implements IDataDynamic{
  static const IMPORT = TypeEnumBackendTaskType('IMPORT','导入');

  static const values = {
     'IMPORT':IMPORT,
  };

  const TypeEnumBackendTaskType(super.value,super.label);

  static TypeEnumBackendTaskType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskType(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskType: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterItemRegularType extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterItemRegularType('ALL','全部');

  static const REGULAR_TYPE = TypeEnumFilterItemRegularType('REGULAR_TYPE','备货款');

  static const NOT_REGULAR_TYPE = TypeEnumFilterItemRegularType('NOT_REGULAR_TYPE','订单款');

  static const values = {
     'ALL':ALL,
     'REGULAR_TYPE':REGULAR_TYPE,
     'NOT_REGULAR_TYPE':NOT_REGULAR_TYPE,
  };

  const TypeEnumFilterItemRegularType(super.value,super.label);

  static TypeEnumFilterItemRegularType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterItemRegularType(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterItemRegularType: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterItemRegularType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumResourceDuplicateNameStrategy extends IDataEnum implements IDataDynamic{
  static const NOT_ALLOW = TypeEnumResourceDuplicateNameStrategy('NOT_ALLOW','不允许重复');

  static const ALLOW = TypeEnumResourceDuplicateNameStrategy('ALLOW','允许重复');

  static const ALLOW_BUT_REMIND = TypeEnumResourceDuplicateNameStrategy('ALLOW_BUT_REMIND','重复时提醒');

  static const values = {
     'NOT_ALLOW':NOT_ALLOW,
     'ALLOW':ALLOW,
     'ALLOW_BUT_REMIND':ALLOW_BUT_REMIND,
  };

  const TypeEnumResourceDuplicateNameStrategy(super.value,super.label);

  static TypeEnumResourceDuplicateNameStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumResourceDuplicateNameStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumResourceDuplicateNameStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumResourceDuplicateNameStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderNumberDateType extends IDataEnum implements IDataDynamic{
  static const YEAR = TypeEnumOrderNumberDateType('YEAR','按年');

  static const MONTH = TypeEnumOrderNumberDateType('MONTH','按年月');

  static const DAY = TypeEnumOrderNumberDateType('DAY','按年月日');

  static const values = {
     'YEAR':YEAR,
     'MONTH':MONTH,
     'DAY':DAY,
  };

  const TypeEnumOrderNumberDateType(super.value,super.label);

  static TypeEnumOrderNumberDateType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderNumberDateType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderNumberDateType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderNumberDateType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumLiteItemImportWorkerFindingState extends IDataEnum implements IDataDynamic{
  static const LEFT_NUMBER = TypeEnumLiteItemImportWorkerFindingState('LEFT_NUMBER','左数字');

  static const LEFT_NAME = TypeEnumLiteItemImportWorkerFindingState('LEFT_NAME','左名称');

  static const RIGHT_NUMBER = TypeEnumLiteItemImportWorkerFindingState('RIGHT_NUMBER','右数字');

  static const RIGHT_NAME = TypeEnumLiteItemImportWorkerFindingState('RIGHT_NAME','右名称');

  static const values = {
     'LEFT_NUMBER':LEFT_NUMBER,
     'LEFT_NAME':LEFT_NAME,
     'RIGHT_NUMBER':RIGHT_NUMBER,
     'RIGHT_NAME':RIGHT_NAME,
  };

  const TypeEnumLiteItemImportWorkerFindingState(super.value,super.label);

  static TypeEnumLiteItemImportWorkerFindingState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumLiteItemImportWorkerFindingState(data, data);
    }
    throw FormatException('can not parse to TypeEnumLiteItemImportWorkerFindingState: [$data]');
  }

  static Object? toDynamic(TypeEnumLiteItemImportWorkerFindingState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderCustomInvoiceBackState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_BACK = TypeEnumOrderCustomInvoiceBackState('INVOICE_NOT_BACK','待回传');

  static const INVOICE_BACK = TypeEnumOrderCustomInvoiceBackState('INVOICE_BACK','已回传');

  static const values = {
     'INVOICE_NOT_BACK':INVOICE_NOT_BACK,
     'INVOICE_BACK':INVOICE_BACK,
  };

  const TypeEnumOrderCustomInvoiceBackState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceBackState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceBackState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceBackState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceBackState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumDateOrderType extends IDataEnum implements IDataDynamic{
  static const ORDER_DATE = TypeEnumDateOrderType('ORDER_DATE','单据日期');

  static const ENTRY_ACCOUNT_DATE = TypeEnumDateOrderType('ENTRY_ACCOUNT_DATE','入账日期');

  static const values = {
     'ORDER_DATE':ORDER_DATE,
     'ENTRY_ACCOUNT_DATE':ENTRY_ACCOUNT_DATE,
  };

  const TypeEnumDateOrderType(super.value,super.label);

  static TypeEnumDateOrderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumDateOrderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumDateOrderType: [$data]');
  }

  static Object? toDynamic(TypeEnumDateOrderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumMainErrorCode extends IDataEnum implements IDataDynamic{
  static const E1_NORMAL = TypeEnumMainErrorCode('E1_NORMAL','普通业务错误');

  static const E50001_ORDER_DUPLICATE = TypeEnumMainErrorCode('E50001_ORDER_DUPLICATE','请勿重复提交订单');

  static const values = {
     'E1_NORMAL':E1_NORMAL,
     'E50001_ORDER_DUPLICATE':E50001_ORDER_DUPLICATE,
  };

  const TypeEnumMainErrorCode(super.value,super.label);

  static TypeEnumMainErrorCode? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumMainErrorCode(data, data);
    }
    throw FormatException('can not parse to TypeEnumMainErrorCode: [$data]');
  }

  static Object? toDynamic(TypeEnumMainErrorCode? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterNumber extends IDataEnum implements IDataDynamic{
  static const GREATER_ZERO = TypeEnumFilterNumber('GREATER_ZERO','大于0');

  static const EQUAL_ZERO = TypeEnumFilterNumber('EQUAL_ZERO','等于0');

  static const LESS_ZERO = TypeEnumFilterNumber('LESS_ZERO','少于0');

  static const ALL = TypeEnumFilterNumber('ALL','全部');

  static const values = {
     'GREATER_ZERO':GREATER_ZERO,
     'EQUAL_ZERO':EQUAL_ZERO,
     'LESS_ZERO':LESS_ZERO,
     'ALL':ALL,
  };

  const TypeEnumFilterNumber(super.value,super.label);

  static TypeEnumFilterNumber? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterNumber(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterNumber: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterNumber? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderArapType extends IDataEnum implements IDataDynamic{
  static const ACCOUNT_RECEIVABLE = TypeEnumOrderArapType('ACCOUNT_RECEIVABLE','应收');

  static const ACCOUNT_PAYABLE = TypeEnumOrderArapType('ACCOUNT_PAYABLE','应付');

  static const values = {
     'ACCOUNT_RECEIVABLE':ACCOUNT_RECEIVABLE,
     'ACCOUNT_PAYABLE':ACCOUNT_PAYABLE,
  };

  const TypeEnumOrderArapType(super.value,super.label);

  static TypeEnumOrderArapType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderArapType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderArapType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderArapType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumReportGroupTimeType extends IDataEnum implements IDataDynamic{
  static const DAY = TypeEnumReportGroupTimeType('DAY','按日');

  static const WEEK = TypeEnumReportGroupTimeType('WEEK','按周');

  static const MONTH = TypeEnumReportGroupTimeType('MONTH','按月');

  static const values = {
     'DAY':DAY,
     'WEEK':WEEK,
     'MONTH':MONTH,
  };

  const TypeEnumReportGroupTimeType(super.value,super.label);

  static TypeEnumReportGroupTimeType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumReportGroupTimeType(data, data);
    }
    throw FormatException('can not parse to TypeEnumReportGroupTimeType: [$data]');
  }

  static Object? toDynamic(TypeEnumReportGroupTimeType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderSubType extends IDataEnum implements IDataDynamic{
  static const INVOICE_TAX = TypeEnumOrderSubType('INVOICE_TAX','发票税额');

  static const values = {
     'INVOICE_TAX':INVOICE_TAX,
  };

  const TypeEnumOrderSubType(super.value,super.label);

  static TypeEnumOrderSubType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderSubType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderSubType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderSubType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy extends IDataEnum implements IDataDynamic{
  static const ITEM_ID_AND_AMOUNT = TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy('ITEM_ID_AND_AMOUNT','商品数量和规格');

  static const ORDER_ITEM_ID = TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy('ORDER_ITEM_ID','单据商品ID');

  static const values = {
     'ITEM_ID_AND_AMOUNT':ITEM_ID_AND_AMOUNT,
     'ORDER_ITEM_ID':ORDER_ITEM_ID,
  };

  const TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy(super.value,super.label);

  static TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderItemPivotQueryOrderItemPivotField extends IDataEnum implements IDataDynamic{
  static const FEE_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('FEE_TOTAL','单据金额');

  static const PRE_TAX_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('PRE_TAX_TOTAL','税前金额');

  static const COST_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('COST_TOTAL','成本金额');

  static const PROFIT_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('PROFIT_TOTAL','毛利润');

  static const values = {
     'FEE_TOTAL':FEE_TOTAL,
     'PRE_TAX_TOTAL':PRE_TAX_TOTAL,
     'COST_TOTAL':COST_TOTAL,
     'PROFIT_TOTAL':PROFIT_TOTAL,
  };

  const TypeEnumOrderItemPivotQueryOrderItemPivotField(super.value,super.label);

  static TypeEnumOrderItemPivotQueryOrderItemPivotField? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderItemPivotQueryOrderItemPivotField(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderItemPivotQueryOrderItemPivotField: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderItemPivotQueryOrderItemPivotField? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumBatchChangeSupportOrder extends IDataEnum implements IDataDynamic{
  static const SALES_OUT = TypeEnumBatchChangeSupportOrder('SALES_OUT','销售出库单');

  static const PURCHASE_RETURN = TypeEnumBatchChangeSupportOrder('PURCHASE_RETURN','采购退货单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumBatchChangeSupportOrder('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_LOSS = TypeEnumBatchChangeSupportOrder('STOCK_LOSS','库存报损单');

  static const SUB_CONTRACT_IN = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_IN','委外加工成品入库单');

  static const SUB_CONTRACT_RETURN = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_RETURN','委外加工原料退库单');

  static const SUB_CONTRACT_OUT = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_OUT','委外加工原料出库单');

  static const INITIAL_STOCK = TypeEnumBatchChangeSupportOrder('INITIAL_STOCK','期初库存');

  static const PURCHASE_IN = TypeEnumBatchChangeSupportOrder('PURCHASE_IN','采购入库单');

  static const SALES_RETURN = TypeEnumBatchChangeSupportOrder('SALES_RETURN','销售退货单');

  static const STOCK_OTHER_INBOUND = TypeEnumBatchChangeSupportOrder('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OVERFLOW = TypeEnumBatchChangeSupportOrder('STOCK_OVERFLOW','库存报溢单');

  static const values = {
     'SALES_OUT':SALES_OUT,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_LOSS':STOCK_LOSS,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'INITIAL_STOCK':INITIAL_STOCK,
     'PURCHASE_IN':PURCHASE_IN,
     'SALES_RETURN':SALES_RETURN,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
  };

  const TypeEnumBatchChangeSupportOrder(super.value,super.label);

  static TypeEnumBatchChangeSupportOrder? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBatchChangeSupportOrder(data, data);
    }
    throw FormatException('can not parse to TypeEnumBatchChangeSupportOrder: [$data]');
  }

  static Object? toDynamic(TypeEnumBatchChangeSupportOrder? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterInvoiceBackState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceBackState('ALL','全部');

  static const INVOICE_NOT_BACK = TypeEnumFilterInvoiceBackState('INVOICE_NOT_BACK','待回传');

  static const INVOICE_BACK = TypeEnumFilterInvoiceBackState('INVOICE_BACK','已回传');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_BACK':INVOICE_NOT_BACK,
     'INVOICE_BACK':INVOICE_BACK,
  };

  const TypeEnumFilterInvoiceBackState(super.value,super.label);

  static TypeEnumFilterInvoiceBackState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceBackState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceBackState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceBackState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumItemCustomAbnormalState extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumItemCustomAbnormalState('NORMAL','正常');

  static const ABNORMAL_NOT_HANDLE = TypeEnumItemCustomAbnormalState('ABNORMAL_NOT_HANDLE','异常未处理');

  static const ABNORMAL_HANDLE = TypeEnumItemCustomAbnormalState('ABNORMAL_HANDLE','异常已处理');

  static const values = {
     'NORMAL':NORMAL,
     'ABNORMAL_NOT_HANDLE':ABNORMAL_NOT_HANDLE,
     'ABNORMAL_HANDLE':ABNORMAL_HANDLE,
  };

  const TypeEnumItemCustomAbnormalState(super.value,super.label);

  static TypeEnumItemCustomAbnormalState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumItemCustomAbnormalState(data, data);
    }
    throw FormatException('can not parse to TypeEnumItemCustomAbnormalState: [$data]');
  }

  static Object? toDynamic(TypeEnumItemCustomAbnormalState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumApiMethod extends IDataEnum implements IDataDynamic{
  static const GET = TypeEnumApiMethod('GET','GET');

  static const POST = TypeEnumApiMethod('POST','POST');

  static const values = {
     'GET':GET,
     'POST':POST,
  };

  const TypeEnumApiMethod(super.value,super.label);

  static TypeEnumApiMethod? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumApiMethod(data, data);
    }
    throw FormatException('can not parse to TypeEnumApiMethod: [$data]');
  }

  static Object? toDynamic(TypeEnumApiMethod? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumColumnValueType extends IDataEnum implements IDataDynamic{
  static const NUMBER = TypeEnumColumnValueType('NUMBER','数字');

  static const STRING = TypeEnumColumnValueType('STRING','字符串');

  static const BOOLEAN = TypeEnumColumnValueType('BOOLEAN','布尔值');

  static const ARRAY_NUMBER = TypeEnumColumnValueType('ARRAY_NUMBER','数字数组');

  static const ARRAY_STRING = TypeEnumColumnValueType('ARRAY_STRING','字符数组');

  static const OPTION_NUMBER = TypeEnumColumnValueType('OPTION_NUMBER','数字值选项');

  static const OPTION_STRING = TypeEnumColumnValueType('OPTION_STRING','字符值选项');

  static const values = {
     'NUMBER':NUMBER,
     'STRING':STRING,
     'BOOLEAN':BOOLEAN,
     'ARRAY_NUMBER':ARRAY_NUMBER,
     'ARRAY_STRING':ARRAY_STRING,
     'OPTION_NUMBER':OPTION_NUMBER,
     'OPTION_STRING':OPTION_STRING,
  };

  const TypeEnumColumnValueType(super.value,super.label);

  static TypeEnumColumnValueType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumColumnValueType(data, data);
    }
    throw FormatException('can not parse to TypeEnumColumnValueType: [$data]');
  }

  static Object? toDynamic(TypeEnumColumnValueType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumContactType extends IDataEnum implements IDataDynamic{
  static const CUSTOMER = TypeEnumContactType('CUSTOMER','客户');

  static const SUPPLIER = TypeEnumContactType('SUPPLIER','供应商');

  static const values = {
     'CUSTOMER':CUSTOMER,
     'SUPPLIER':SUPPLIER,
  };

  const TypeEnumContactType(super.value,super.label);

  static TypeEnumContactType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumContactType(data, data);
    }
    throw FormatException('can not parse to TypeEnumContactType: [$data]');
  }

  static Object? toDynamic(TypeEnumContactType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderPivotQueryOrderPivotField extends IDataEnum implements IDataDynamic{
  static const BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('BILL_TOTAL','单据金额');

  static const DONE_BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('DONE_BILL_TOTAL','已结算金额');

  static const UNDONE_BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('UNDONE_BILL_TOTAL','未结算金额');

  static const values = {
     'BILL_TOTAL':BILL_TOTAL,
     'DONE_BILL_TOTAL':DONE_BILL_TOTAL,
     'UNDONE_BILL_TOTAL':UNDONE_BILL_TOTAL,
  };

  const TypeEnumOrderPivotQueryOrderPivotField(super.value,super.label);

  static TypeEnumOrderPivotQueryOrderPivotField? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderPivotQueryOrderPivotField(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderPivotQueryOrderPivotField: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderPivotQueryOrderPivotField? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumBatchChangeType extends IDataEnum implements IDataDynamic{
  static const CLEAR_AND_REPLAY = TypeEnumBatchChangeType('CLEAR_AND_REPLAY','先清空后出库');

  static const OTHER_OUT_STOCK_AND_IN_STOCK = TypeEnumBatchChangeType('OTHER_OUT_STOCK_AND_IN_STOCK','先出库后入库');

  static const LOCAL_CHANGE = TypeEnumBatchChangeType('LOCAL_CHANGE','直接改数量');

  static const values = {
     'CLEAR_AND_REPLAY':CLEAR_AND_REPLAY,
     'OTHER_OUT_STOCK_AND_IN_STOCK':OTHER_OUT_STOCK_AND_IN_STOCK,
     'LOCAL_CHANGE':LOCAL_CHANGE,
  };

  const TypeEnumBatchChangeType(super.value,super.label);

  static TypeEnumBatchChangeType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBatchChangeType(data, data);
    }
    throw FormatException('can not parse to TypeEnumBatchChangeType: [$data]');
  }

  static Object? toDynamic(TypeEnumBatchChangeType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterInvoiceSubmitState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceSubmitState('ALL','全部');

  static const INVOICE_NOT_SUBMIT = TypeEnumFilterInvoiceSubmitState('INVOICE_NOT_SUBMIT','待开票');

  static const INVOICE_SUBMIT = TypeEnumFilterInvoiceSubmitState('INVOICE_SUBMIT','已开票');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_SUBMIT':INVOICE_NOT_SUBMIT,
     'INVOICE_SUBMIT':INVOICE_SUBMIT,
  };

  const TypeEnumFilterInvoiceSubmitState(super.value,super.label);

  static TypeEnumFilterInvoiceSubmitState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceSubmitState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceSubmitState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceSubmitState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterOrderExecuteState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterOrderExecuteState('ALL','全部');

  static const NOT_FINISH = TypeEnumFilterOrderExecuteState('NOT_FINISH','未完成');

  static const FINISH = TypeEnumFilterOrderExecuteState('FINISH','已完成');

  static const values = {
     'ALL':ALL,
     'NOT_FINISH':NOT_FINISH,
     'FINISH':FINISH,
  };

  const TypeEnumFilterOrderExecuteState(super.value,super.label);

  static TypeEnumFilterOrderExecuteState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterOrderExecuteState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterOrderExecuteState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterOrderExecuteState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumBackendTaskRowState extends IDataEnum implements IDataDynamic{
  static const RUNNING = TypeEnumBackendTaskRowState('RUNNING','执行中');

  static const SUCCESS = TypeEnumBackendTaskRowState('SUCCESS','成功');

  static const FAIL = TypeEnumBackendTaskRowState('FAIL','失败');

  static const values = {
     'RUNNING':RUNNING,
     'SUCCESS':SUCCESS,
     'FAIL':FAIL,
  };

  const TypeEnumBackendTaskRowState(super.value,super.label);

  static TypeEnumBackendTaskRowState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskRowState(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskRowState: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskRowState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumSoftEnableIsEnable extends IDataEnum implements IDataDynamic{
  static const ENABLE = TypeEnumSoftEnableIsEnable('ENABLE','启用');

  static const DISABLE = TypeEnumSoftEnableIsEnable('DISABLE','停用');

  static const values = {
     'ENABLE':ENABLE,
     'DISABLE':DISABLE,
  };

  const TypeEnumSoftEnableIsEnable(super.value,super.label);

  static TypeEnumSoftEnableIsEnable? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumSoftEnableIsEnable(data, data);
    }
    throw FormatException('can not parse to TypeEnumSoftEnableIsEnable: [$data]');
  }

  static Object? toDynamic(TypeEnumSoftEnableIsEnable? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumResourceSortStrategy extends IDataEnum implements IDataDynamic{
  static const NUMBER_ASC = TypeEnumResourceSortStrategy('NUMBER_ASC','按编号升序');

  static const NUMBER_DESC = TypeEnumResourceSortStrategy('NUMBER_DESC','按编号降序');

  static const NAME_ASC = TypeEnumResourceSortStrategy('NAME_ASC','按名称升序');

  static const NAME_DESC = TypeEnumResourceSortStrategy('NAME_DESC','按名称降序');

  static const values = {
     'NUMBER_ASC':NUMBER_ASC,
     'NUMBER_DESC':NUMBER_DESC,
     'NAME_ASC':NAME_ASC,
     'NAME_DESC':NAME_DESC,
  };

  const TypeEnumResourceSortStrategy(super.value,super.label);

  static TypeEnumResourceSortStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumResourceSortStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumResourceSortStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumResourceSortStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderType extends IDataEnum implements IDataDynamic{
  static const INITIAL_STOCK = TypeEnumOrderType('INITIAL_STOCK','期初库存');

  static const INITIAL_ACCOUNT_RECEIVABLE = TypeEnumOrderType('INITIAL_ACCOUNT_RECEIVABLE','期初应收');

  static const INITIAL_ACCOUNT_PAYABLE = TypeEnumOrderType('INITIAL_ACCOUNT_PAYABLE','期初应付');

  static const INITIAL_ADVANCE_RECEIVABLE = TypeEnumOrderType('INITIAL_ADVANCE_RECEIVABLE','期初预收');

  static const INITIAL_ADVANCE_PAYABLE = TypeEnumOrderType('INITIAL_ADVANCE_PAYABLE','期初预付');

  static const SALES_REQUEST = TypeEnumOrderType('SALES_REQUEST','销售订单');

  static const SALES_REQUEST_CHANGE = TypeEnumOrderType('SALES_REQUEST_CHANGE','销售订单变更单');

  static const SALES_OUT = TypeEnumOrderType('SALES_OUT','销售出库单');

  static const SALES_OUT_CHANGE = TypeEnumOrderType('SALES_OUT_CHANGE','销售出库变更单');

  static const SALES_RETURN = TypeEnumOrderType('SALES_RETURN','销售退货单');

  static const SALES_RETURN_CHANGE = TypeEnumOrderType('SALES_RETURN_CHANGE','销售退货变更单');

  static const SALES_QUOTATION = TypeEnumOrderType('SALES_QUOTATION','销售报价单');

  static const SALES_RECEIPT = TypeEnumOrderType('SALES_RECEIPT','销售回执单');

  static const PURCHASE_REQUEST = TypeEnumOrderType('PURCHASE_REQUEST','采购订单');

  static const PURCHASE_REQUEST_CHANGE = TypeEnumOrderType('PURCHASE_REQUEST_CHANGE','采购订单变更单');

  static const PURCHASE_IN = TypeEnumOrderType('PURCHASE_IN','采购入库单');

  static const PURCHASE_IN_CHANGE = TypeEnumOrderType('PURCHASE_IN_CHANGE','采购入库变更单');

  static const PURCHASE_RETURN = TypeEnumOrderType('PURCHASE_RETURN','采购退货单');

  static const PURCHASE_RETURN_CHANGE = TypeEnumOrderType('PURCHASE_RETURN_CHANGE','采购退货变更单');

  static const PURCHASE_QUOTATION = TypeEnumOrderType('PURCHASE_QUOTATION','采购报价单');

  static const PURCHASE_DEMAND = TypeEnumOrderType('PURCHASE_DEMAND','采购报价单');

  static const PURCHASE_RECEIPT = TypeEnumOrderType('PURCHASE_RECEIPT','采购回执单');

  static const CASH_ADVANCE_RECEIVE = TypeEnumOrderType('CASH_ADVANCE_RECEIVE','预收款单');

  static const CASH_ADVANCE_PAY = TypeEnumOrderType('CASH_ADVANCE_PAY','预付款单');

  static const CASH_RECEIVE = TypeEnumOrderType('CASH_RECEIVE','收款单');

  static const CASH_PAY = TypeEnumOrderType('CASH_PAY','付款单');

  static const CASH_OTHER_INCOME = TypeEnumOrderType('CASH_OTHER_INCOME','其他收入单');

  static const CASH_OTHER_EXPENSE = TypeEnumOrderType('CASH_OTHER_EXPENSE','其他费用单');

  static const CASH_TRANSFER = TypeEnumOrderType('CASH_TRANSFER','科目转账单');

  static const CASH_CUSTOM_INVOICE = TypeEnumOrderType('CASH_CUSTOM_INVOICE','客户发票单');

  static const STOCK_OTHER_INBOUND = TypeEnumOrderType('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OTHER_INBOUND_CHANGE = TypeEnumOrderType('STOCK_OTHER_INBOUND_CHANGE','其他入库变更单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumOrderType('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_OTHER_OUTBOUND_CHANGE = TypeEnumOrderType('STOCK_OTHER_OUTBOUND_CHANGE','其他出库变更单');

  static const STOCK_TRANSFER = TypeEnumOrderType('STOCK_TRANSFER','调拨单');

  static const STOCK_TRANSFER_CHANGE = TypeEnumOrderType('STOCK_TRANSFER_CHANGE','调拨变更单');

  static const STOCK_LOSS = TypeEnumOrderType('STOCK_LOSS','库存报损单');

  static const STOCK_LOSS_CHANGE = TypeEnumOrderType('STOCK_LOSS_CHANGE','库存报损变更单');

  static const STOCK_OVERFLOW = TypeEnumOrderType('STOCK_OVERFLOW','库存报溢单');

  static const STOCK_OVERFLOW_CHANGE = TypeEnumOrderType('STOCK_OVERFLOW_CHANGE','库存报溢变更单');

  static const STOCK_ADJUST_PRICE = TypeEnumOrderType('STOCK_ADJUST_PRICE','库存成本调价单');

  static const STOCK_SINGLE_CHECK_POINT = TypeEnumOrderType('STOCK_SINGLE_CHECK_POINT','库存单次盘点单');

  static const STOCK_SPLIT_CHECK_POINT = TypeEnumOrderType('STOCK_SPLIT_CHECK_POINT','库存分量盘点单');

  static const STOCK_COMBINE_CHECK_POINT = TypeEnumOrderType('STOCK_COMBINE_CHECK_POINT','库存汇总盘点单');

  static const ACCOUNT_DOCUMENT = TypeEnumOrderType('ACCOUNT_DOCUMENT','会计凭证');

  static const SUB_CONTRACT_IN = TypeEnumOrderType('SUB_CONTRACT_IN','委外加工成品入库单');

  static const SUB_CONTRACT_IN_CHANGE = TypeEnumOrderType('SUB_CONTRACT_IN_CHANGE','委外加工成品入库变更单');

  static const SUB_CONTRACT_OUT = TypeEnumOrderType('SUB_CONTRACT_OUT','委外加工原料出库单');

  static const SUB_CONTRACT_OUT_CHANGE = TypeEnumOrderType('SUB_CONTRACT_OUT_CHANGE','委外加工原料出库变更单');

  static const SUB_CONTRACT_RETURN = TypeEnumOrderType('SUB_CONTRACT_RETURN','委外加工原料退库单');

  static const SUB_CONTRACT_RETURN_CHANGE = TypeEnumOrderType('SUB_CONTRACT_RETURN_CHANGE','委外加工原料退库变更单');

  static const values = {
     'INITIAL_STOCK':INITIAL_STOCK,
     'INITIAL_ACCOUNT_RECEIVABLE':INITIAL_ACCOUNT_RECEIVABLE,
     'INITIAL_ACCOUNT_PAYABLE':INITIAL_ACCOUNT_PAYABLE,
     'INITIAL_ADVANCE_RECEIVABLE':INITIAL_ADVANCE_RECEIVABLE,
     'INITIAL_ADVANCE_PAYABLE':INITIAL_ADVANCE_PAYABLE,
     'SALES_REQUEST':SALES_REQUEST,
     'SALES_REQUEST_CHANGE':SALES_REQUEST_CHANGE,
     'SALES_OUT':SALES_OUT,
     'SALES_OUT_CHANGE':SALES_OUT_CHANGE,
     'SALES_RETURN':SALES_RETURN,
     'SALES_RETURN_CHANGE':SALES_RETURN_CHANGE,
     'SALES_QUOTATION':SALES_QUOTATION,
     'SALES_RECEIPT':SALES_RECEIPT,
     'PURCHASE_REQUEST':PURCHASE_REQUEST,
     'PURCHASE_REQUEST_CHANGE':PURCHASE_REQUEST_CHANGE,
     'PURCHASE_IN':PURCHASE_IN,
     'PURCHASE_IN_CHANGE':PURCHASE_IN_CHANGE,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'PURCHASE_RETURN_CHANGE':PURCHASE_RETURN_CHANGE,
     'PURCHASE_QUOTATION':PURCHASE_QUOTATION,
     'PURCHASE_DEMAND':PURCHASE_DEMAND,
     'PURCHASE_RECEIPT':PURCHASE_RECEIPT,
     'CASH_ADVANCE_RECEIVE':CASH_ADVANCE_RECEIVE,
     'CASH_ADVANCE_PAY':CASH_ADVANCE_PAY,
     'CASH_RECEIVE':CASH_RECEIVE,
     'CASH_PAY':CASH_PAY,
     'CASH_OTHER_INCOME':CASH_OTHER_INCOME,
     'CASH_OTHER_EXPENSE':CASH_OTHER_EXPENSE,
     'CASH_TRANSFER':CASH_TRANSFER,
     'CASH_CUSTOM_INVOICE':CASH_CUSTOM_INVOICE,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_INBOUND_CHANGE':STOCK_OTHER_INBOUND_CHANGE,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_OTHER_OUTBOUND_CHANGE':STOCK_OTHER_OUTBOUND_CHANGE,
     'STOCK_TRANSFER':STOCK_TRANSFER,
     'STOCK_TRANSFER_CHANGE':STOCK_TRANSFER_CHANGE,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_LOSS_CHANGE':STOCK_LOSS_CHANGE,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_OVERFLOW_CHANGE':STOCK_OVERFLOW_CHANGE,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'STOCK_SINGLE_CHECK_POINT':STOCK_SINGLE_CHECK_POINT,
     'STOCK_SPLIT_CHECK_POINT':STOCK_SPLIT_CHECK_POINT,
     'STOCK_COMBINE_CHECK_POINT':STOCK_COMBINE_CHECK_POINT,
     'ACCOUNT_DOCUMENT':ACCOUNT_DOCUMENT,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_IN_CHANGE':SUB_CONTRACT_IN_CHANGE,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'SUB_CONTRACT_OUT_CHANGE':SUB_CONTRACT_OUT_CHANGE,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_RETURN_CHANGE':SUB_CONTRACT_RETURN_CHANGE,
  };

  const TypeEnumOrderType(super.value,super.label);

  static TypeEnumOrderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountAuxiliary extends IDataEnum implements IDataDynamic{
  static const CONTACT = TypeEnumAccountAuxiliary('CONTACT','往来单位');

  static const EMPLOYEE = TypeEnumAccountAuxiliary('EMPLOYEE','职员');

  static const STORE = TypeEnumAccountAuxiliary('STORE','仓库');

  static const values = {
     'CONTACT':CONTACT,
     'EMPLOYEE':EMPLOYEE,
     'STORE':STORE,
  };

  const TypeEnumAccountAuxiliary(super.value,super.label);

  static TypeEnumAccountAuxiliary? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountAuxiliary(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountAuxiliary: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountAuxiliary? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderCustomInvoiceSubmitState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_SUBMIT = TypeEnumOrderCustomInvoiceSubmitState('INVOICE_NOT_SUBMIT','待开票');

  static const INVOICE_SUBMIT = TypeEnumOrderCustomInvoiceSubmitState('INVOICE_SUBMIT','已开票');

  static const values = {
     'INVOICE_NOT_SUBMIT':INVOICE_NOT_SUBMIT,
     'INVOICE_SUBMIT':INVOICE_SUBMIT,
  };

  const TypeEnumOrderCustomInvoiceSubmitState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceSubmitState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceSubmitState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceSubmitState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceSubmitState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountSubType extends IDataEnum implements IDataDynamic{
  static const CASH = TypeEnumAccountSubType('CASH','现金类');

  static const OTHER_INCOME = TypeEnumAccountSubType('OTHER_INCOME','其他收入类');

  static const OTHER_EXPENSE = TypeEnumAccountSubType('OTHER_EXPENSE','其他费用类');

  static const OTHER = TypeEnumAccountSubType('OTHER','其他类');

  static const values = {
     'CASH':CASH,
     'OTHER_INCOME':OTHER_INCOME,
     'OTHER_EXPENSE':OTHER_EXPENSE,
     'OTHER':OTHER,
  };

  const TypeEnumAccountSubType(super.value,super.label);

  static TypeEnumAccountSubType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountSubType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountSubType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountSubType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterOrderState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterOrderState('ALL','全部');

  static const ENTRY_ACCOUNT = TypeEnumFilterOrderState('ENTRY_ACCOUNT','仅入账');

  static const DRAFT = TypeEnumFilterOrderState('DRAFT','仅草稿');

  static const SUBMIT = TypeEnumFilterOrderState('SUBMIT','仅提交');

  static const CANCEL = TypeEnumFilterOrderState('CANCEL','仅取消');

  static const values = {
     'ALL':ALL,
     'ENTRY_ACCOUNT':ENTRY_ACCOUNT,
     'DRAFT':DRAFT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
  };

  const TypeEnumFilterOrderState(super.value,super.label);

  static TypeEnumFilterOrderState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterOrderState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterOrderState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterOrderState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumBackendTaskState extends IDataEnum implements IDataDynamic{
  static const RUNNING = TypeEnumBackendTaskState('RUNNING','执行中');

  static const FINISH = TypeEnumBackendTaskState('FINISH','完成');

  static const FAIL = TypeEnumBackendTaskState('FAIL','失败');

  static const values = {
     'RUNNING':RUNNING,
     'FINISH':FINISH,
     'FAIL':FAIL,
  };

  const TypeEnumBackendTaskState(super.value,super.label);

  static TypeEnumBackendTaskState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskState(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskState: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOperation extends IDataEnum implements IDataDynamic{
  static const READ = TypeEnumOperation('READ','查看');

  static const PRINT = TypeEnumOperation('PRINT','打印');

  static const SUBMIT = TypeEnumOperation('SUBMIT','提交');

  static const CANCEL = TypeEnumOperation('CANCEL','取消');

  static const CREATE = TypeEnumOperation('CREATE','新增');

  static const DELETE = TypeEnumOperation('DELETE','删除');

  static const UPDATE = TypeEnumOperation('UPDATE','修改');

  static const ALLOW = TypeEnumOperation('ALLOW','允许');

  static const values = {
     'READ':READ,
     'PRINT':PRINT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
     'CREATE':CREATE,
     'DELETE':DELETE,
     'UPDATE':UPDATE,
     'ALLOW':ALLOW,
  };

  const TypeEnumOperation(super.value,super.label);

  static TypeEnumOperation? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOperation(data, data);
    }
    throw FormatException('can not parse to TypeEnumOperation: [$data]');
  }

  static Object? toDynamic(TypeEnumOperation? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterIsEnabled extends IDataEnum implements IDataDynamic{
  static const ENABLE = TypeEnumFilterIsEnabled('ENABLE','启用');

  static const DISABLE = TypeEnumFilterIsEnabled('DISABLE','停用');

  static const ALL = TypeEnumFilterIsEnabled('ALL','全部');

  static const values = {
     'ENABLE':ENABLE,
     'DISABLE':DISABLE,
     'ALL':ALL,
  };

  const TypeEnumFilterIsEnabled(super.value,super.label);

  static TypeEnumFilterIsEnabled? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterIsEnabled(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterIsEnabled: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterIsEnabled? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderRedState extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumOrderRedState('NORMAL','正常');

  static const BE_REVERSED = TypeEnumOrderRedState('BE_REVERSED','被红冲');

  static const REVERSE = TypeEnumOrderRedState('REVERSE','红冲');

  static const values = {
     'NORMAL':NORMAL,
     'BE_REVERSED':BE_REVERSED,
     'REVERSE':REVERSE,
  };

  const TypeEnumOrderRedState(super.value,super.label);

  static TypeEnumOrderRedState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderRedState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderRedState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderRedState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountPredefine extends IDataEnum implements IDataDynamic{
  static const SALES_OUT = TypeEnumAccountPredefine('SALES_OUT','销售收入');

  static const SALES_COST = TypeEnumAccountPredefine('SALES_COST','销售成本');

  static const STOCK_ITEM = TypeEnumAccountPredefine('STOCK_ITEM','库存商品');

  static const SUB_CONTRACT_STOCK_ITEM = TypeEnumAccountPredefine('SUB_CONTRACT_STOCK_ITEM','委外加工物资');

  static const PURCHASE_RETURN_EXPENSE = TypeEnumAccountPredefine('PURCHASE_RETURN_EXPENSE','采购退货费用');

  static const SALES_DISCOUNT = TypeEnumAccountPredefine('SALES_DISCOUNT','销售优惠金额');

  static const PURCHASE_DISCOUNT = TypeEnumAccountPredefine('PURCHASE_DISCOUNT','采购优惠金额');

  static const STOCK_OTHER_INBOUND = TypeEnumAccountPredefine('STOCK_OTHER_INBOUND','其他入库收入');

  static const STOCK_OTHER_OUTBOUND = TypeEnumAccountPredefine('STOCK_OTHER_OUTBOUND','其他出库费用');

  static const STOCK_LOSS = TypeEnumAccountPredefine('STOCK_LOSS','商品报损费用');

  static const STOCK_OVERFLOW = TypeEnumAccountPredefine('STOCK_OVERFLOW','商品报溢收入');

  static const STOCK_ADJUST_PRICE = TypeEnumAccountPredefine('STOCK_ADJUST_PRICE','商品调价收入');

  static const VALUE_ADDED_TAX_SALES = TypeEnumAccountPredefine('VALUE_ADDED_TAX_SALES','应交增值税_销项税额');

  static const VALUE_ADDED_TAX_PURCHASE = TypeEnumAccountPredefine('VALUE_ADDED_TAX_PURCHASE','应交增值税_进项税额');

  static const ACCOUNT_RECEIVABLE = TypeEnumAccountPredefine('ACCOUNT_RECEIVABLE','应收账款');

  static const ACCOUNT_PAYABLE = TypeEnumAccountPredefine('ACCOUNT_PAYABLE','应付账款');

  static const ADVANCE_RECEIVABLE = TypeEnumAccountPredefine('ADVANCE_RECEIVABLE','预收账款');

  static const ADVANCE_PAYABLE = TypeEnumAccountPredefine('ADVANCE_PAYABLE','预付账款');

  static const CURRENT_YEAR_PROFIT = TypeEnumAccountPredefine('CURRENT_YEAR_PROFIT','本年利润');

  static const INITIAL_OWNER = TypeEnumAccountPredefine('INITIAL_OWNER','期初资本');

  static const CASH = TypeEnumAccountPredefine('CASH','库存现金');

  static const WEIXIN = TypeEnumAccountPredefine('WEIXIN','微信');

  static const ALIPAY = TypeEnumAccountPredefine('ALIPAY','支付宝');

  static const OTHER_EXPENSE_BUILD_TEAM = TypeEnumAccountPredefine('OTHER_EXPENSE_BUILD_TEAM','团建费用');

  static const OTHER_EXPENSE_SALARY = TypeEnumAccountPredefine('OTHER_EXPENSE_SALARY','工资');

  static const OTHER_INCOME_RENT = TypeEnumAccountPredefine('OTHER_INCOME_RENT','租金收入');

  static const OTHER_INCOME_LAW = TypeEnumAccountPredefine('OTHER_INCOME_LAW','罚没收入');

  static const OTHER_INCOME_TRADE_OTHER = TypeEnumAccountPredefine('OTHER_INCOME_TRADE_OTHER','营业外收入');

  static const values = {
     'SALES_OUT':SALES_OUT,
     'SALES_COST':SALES_COST,
     'STOCK_ITEM':STOCK_ITEM,
     'SUB_CONTRACT_STOCK_ITEM':SUB_CONTRACT_STOCK_ITEM,
     'PURCHASE_RETURN_EXPENSE':PURCHASE_RETURN_EXPENSE,
     'SALES_DISCOUNT':SALES_DISCOUNT,
     'PURCHASE_DISCOUNT':PURCHASE_DISCOUNT,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'VALUE_ADDED_TAX_SALES':VALUE_ADDED_TAX_SALES,
     'VALUE_ADDED_TAX_PURCHASE':VALUE_ADDED_TAX_PURCHASE,
     'ACCOUNT_RECEIVABLE':ACCOUNT_RECEIVABLE,
     'ACCOUNT_PAYABLE':ACCOUNT_PAYABLE,
     'ADVANCE_RECEIVABLE':ADVANCE_RECEIVABLE,
     'ADVANCE_PAYABLE':ADVANCE_PAYABLE,
     'CURRENT_YEAR_PROFIT':CURRENT_YEAR_PROFIT,
     'INITIAL_OWNER':INITIAL_OWNER,
     'CASH':CASH,
     'WEIXIN':WEIXIN,
     'ALIPAY':ALIPAY,
     'OTHER_EXPENSE_BUILD_TEAM':OTHER_EXPENSE_BUILD_TEAM,
     'OTHER_EXPENSE_SALARY':OTHER_EXPENSE_SALARY,
     'OTHER_INCOME_RENT':OTHER_INCOME_RENT,
     'OTHER_INCOME_LAW':OTHER_INCOME_LAW,
     'OTHER_INCOME_TRADE_OTHER':OTHER_INCOME_TRADE_OTHER,
  };

  const TypeEnumAccountPredefine(super.value,super.label);

  static TypeEnumAccountPredefine? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountPredefine(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountPredefine: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountPredefine? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumStockAutoDecreaseAmountStrategy extends IDataEnum implements IDataDynamic{
  static const FIFO = TypeEnumStockAutoDecreaseAmountStrategy('FIFO','先进先出');

  static const LIFO = TypeEnumStockAutoDecreaseAmountStrategy('LIFO','后进先出');

  static const values = {
     'FIFO':FIFO,
     'LIFO':LIFO,
  };

  const TypeEnumStockAutoDecreaseAmountStrategy(super.value,super.label);

  static TypeEnumStockAutoDecreaseAmountStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumStockAutoDecreaseAmountStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumStockAutoDecreaseAmountStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumStockAutoDecreaseAmountStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOperatorRole extends IDataEnum implements IDataDynamic{
  static const ADMIN = TypeEnumOperatorRole('ADMIN','管理员');

  static const USER = TypeEnumOperatorRole('USER','登录用户');

  static const values = {
     'ADMIN':ADMIN,
     'USER':USER,
  };

  const TypeEnumOperatorRole(super.value,super.label);

  static TypeEnumOperatorRole? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOperatorRole(data, data);
    }
    throw FormatException('can not parse to TypeEnumOperatorRole: [$data]');
  }

  static Object? toDynamic(TypeEnumOperatorRole? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountBalanceCheckType extends IDataEnum implements IDataDynamic{
  static const DEBIT_NOT_NEGATIVE = TypeEnumAccountBalanceCheckType('DEBIT_NOT_NEGATIVE','借方向余额不能为负数');

  static const CREDIT_NOT_NEGATIVE = TypeEnumAccountBalanceCheckType('CREDIT_NOT_NEGATIVE','贷方向余额不能为负数');

  static const OTHER = TypeEnumAccountBalanceCheckType('OTHER','无限制');

  static const values = {
     'DEBIT_NOT_NEGATIVE':DEBIT_NOT_NEGATIVE,
     'CREDIT_NOT_NEGATIVE':CREDIT_NOT_NEGATIVE,
     'OTHER':OTHER,
  };

  const TypeEnumAccountBalanceCheckType(super.value,super.label);

  static TypeEnumAccountBalanceCheckType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountBalanceCheckType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountBalanceCheckType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountBalanceCheckType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderOrderItemStockRemainType extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumOrderOrderItemStockRemainType('NORMAL','普通');

  static const FIXED_AIR = TypeEnumOrderOrderItemStockRemainType('FIXED_AIR','固定空气垫片');

  static const FLOAT_AIR = TypeEnumOrderOrderItemStockRemainType('FLOAT_AIR','浮动空气垫片');

  static const values = {
     'NORMAL':NORMAL,
     'FIXED_AIR':FIXED_AIR,
     'FLOAT_AIR':FLOAT_AIR,
  };

  const TypeEnumOrderOrderItemStockRemainType(super.value,super.label);

  static TypeEnumOrderOrderItemStockRemainType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderOrderItemStockRemainType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderOrderItemStockRemainType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderOrderItemStockRemainType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderCustomInvoiceBillState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_NOT_BILL','待结算');

  static const INVOICE_PART_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_PART_BILL','部分结算');

  static const INVOICE_ALL_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_ALL_BILL','完成结算');

  static const values = {
     'INVOICE_NOT_BILL':INVOICE_NOT_BILL,
     'INVOICE_PART_BILL':INVOICE_PART_BILL,
     'INVOICE_ALL_BILL':INVOICE_ALL_BILL,
  };

  const TypeEnumOrderCustomInvoiceBillState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceBillState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceBillState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceBillState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceBillState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAvailableStockType extends IDataEnum implements IDataDynamic{
  static const ONLY_BOOK_STOCK = TypeEnumAvailableStockType('ONLY_BOOK_STOCK','账面库存');

  static const BOOK_STOCK_AND_WAITING_OUT = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_OUT','账面库存 - 待发货');

  static const BOOK_STOCK_AND_WAITING_IN = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_IN','账面库存 + 待收货');

  static const BOOK_STOCK_AND_WAITING_OUT_AND_IN = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_OUT_AND_IN','账面库存 + 待收货 - 待发货');

  static const values = {
     'ONLY_BOOK_STOCK':ONLY_BOOK_STOCK,
     'BOOK_STOCK_AND_WAITING_OUT':BOOK_STOCK_AND_WAITING_OUT,
     'BOOK_STOCK_AND_WAITING_IN':BOOK_STOCK_AND_WAITING_IN,
     'BOOK_STOCK_AND_WAITING_OUT_AND_IN':BOOK_STOCK_AND_WAITING_OUT_AND_IN,
  };

  const TypeEnumAvailableStockType(super.value,super.label);

  static TypeEnumAvailableStockType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAvailableStockType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAvailableStockType: [$data]');
  }

  static Object? toDynamic(TypeEnumAvailableStockType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderState extends IDataEnum implements IDataDynamic{
  static const DRAFT = TypeEnumOrderState('DRAFT','草稿');

  static const SUBMIT = TypeEnumOrderState('SUBMIT','提交');

  static const CANCEL = TypeEnumOrderState('CANCEL','取消');

  static const ENTRY_ACCOUNT = TypeEnumOrderState('ENTRY_ACCOUNT','已入账');

  static const values = {
     'DRAFT':DRAFT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
     'ENTRY_ACCOUNT':ENTRY_ACCOUNT,
  };

  const TypeEnumOrderState(super.value,super.label);

  static TypeEnumOrderState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumColumnShowType extends IDataEnum implements IDataDynamic{
  static const MUST_SHOW = TypeEnumColumnShowType('MUST_SHOW','必须显示');

  static const MUST_NOT_SHOW = TypeEnumColumnShowType('MUST_NOT_SHOW','必须不显示');

  static const FREE_SHOW = TypeEnumColumnShowType('FREE_SHOW','自由显示');

  static const values = {
     'MUST_SHOW':MUST_SHOW,
     'MUST_NOT_SHOW':MUST_NOT_SHOW,
     'FREE_SHOW':FREE_SHOW,
  };

  const TypeEnumColumnShowType(super.value,super.label);

  static TypeEnumColumnShowType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumColumnShowType(data, data);
    }
    throw FormatException('can not parse to TypeEnumColumnShowType: [$data]');
  }

  static Object? toDynamic(TypeEnumColumnShowType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderDocumentType extends IDataEnum implements IDataDynamic{
  static const SYSTEM = TypeEnumOrderDocumentType('SYSTEM','系统');

  static const MANUAL = TypeEnumOrderDocumentType('MANUAL','手动');

  static const values = {
     'SYSTEM':SYSTEM,
     'MANUAL':MANUAL,
  };

  const TypeEnumOrderDocumentType(super.value,super.label);

  static TypeEnumOrderDocumentType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderDocumentType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderDocumentType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderDocumentType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumEntity extends IDataEnum implements IDataDynamic{
  static const SALES_REQUEST = TypeEnumEntity('SALES_REQUEST','销售订单');

  static const SALES_REQUEST_CHANGE = TypeEnumEntity('SALES_REQUEST_CHANGE','销售订单变更');

  static const SALES_OUT = TypeEnumEntity('SALES_OUT','销售出库单');

  static const SALES_OUT_CHANGE = TypeEnumEntity('SALES_OUT_CHANGE','销售出库变更单');

  static const SALES_RETURN = TypeEnumEntity('SALES_RETURN','销售退货单');

  static const SALES_RETURN_CHANGE = TypeEnumEntity('SALES_RETURN_CHANGE','销售退货变更单');

  static const SALES_QUOTATION = TypeEnumEntity('SALES_QUOTATION','销售报价单');

  static const SALES_RECEIPT = TypeEnumEntity('SALES_RECEIPT','销售回执单');

  static const SALES_REQUEST_DETAIL = TypeEnumEntity('SALES_REQUEST_DETAIL','销售订单跟踪');

  static const SALES_DETAIL = TypeEnumEntity('SALES_DETAIL','销售明细');

  static const SALES_CHANGE_HISTORY = TypeEnumEntity('SALES_CHANGE_HISTORY','销售变更历史');

  static const SALES_PRICE_TRACK = TypeEnumEntity('SALES_PRICE_TRACK','销售报价跟踪');

  static const PURCHASE_ITEM_REGULAR_TYPE = TypeEnumEntity('PURCHASE_ITEM_REGULAR_TYPE','商品备货款配置');

  static const PURCHASE_STOCK_REPLENISH = TypeEnumEntity('PURCHASE_STOCK_REPLENISH','智能备货');

  static const PURCHASE_REQUEST = TypeEnumEntity('PURCHASE_REQUEST','采购订单');

  static const PURCHASE_REQUEST_CHANGE = TypeEnumEntity('PURCHASE_REQUEST_CHANGE','采购订单变更');

  static const PURCHASE_IN = TypeEnumEntity('PURCHASE_IN','采购入库单');

  static const PURCHASE_IN_CHANGE = TypeEnumEntity('PURCHASE_IN_CHANGE','采购入库变更单');

  static const PURCHASE_RETURN = TypeEnumEntity('PURCHASE_RETURN','采购退货单');

  static const PURCHASE_RETURN_CHANGE = TypeEnumEntity('PURCHASE_RETURN_CHANGE','采购退货变更单');

  static const PURCHASE_QUOTATION = TypeEnumEntity('PURCHASE_QUOTATION','采购报价单');

  static const PURCHASE_DEMAND = TypeEnumEntity('PURCHASE_DEMAND','采购申请单');

  static const PURCHASE_RECEIPT = TypeEnumEntity('PURCHASE_RECEIPT','采购回执单');

  static const PURCHASE_REQUEST_DETAIL = TypeEnumEntity('PURCHASE_REQUEST_DETAIL','采购订单跟踪');

  static const PURCHASE_DETAIL = TypeEnumEntity('PURCHASE_DETAIL','采购明细');

  static const PURCHASE_CHANGE_HISTORY = TypeEnumEntity('PURCHASE_CHANGE_HISTORY','采购变更明细');

  static const PURCHASE_PRICE_TRACK = TypeEnumEntity('PURCHASE_PRICE_TRACK','采购报价跟踪');

  static const SUB_CONTRACT_ASSEMBLE_TEMPLATE = TypeEnumEntity('SUB_CONTRACT_ASSEMBLE_TEMPLATE','生产模板');

  static const SUB_CONTRACT_STOCK = TypeEnumEntity('SUB_CONTRACT_STOCK','委外库存');

  static const SUB_CONTRACT_STOCK_REMAIN = TypeEnumEntity('SUB_CONTRACT_STOCK_REMAIN','委外库存批次');

  static const SUB_CONTRACT_OUT = TypeEnumEntity('SUB_CONTRACT_OUT','原料出库单');

  static const SUB_CONTRACT_OUT_CHANGE = TypeEnumEntity('SUB_CONTRACT_OUT_CHANGE','原料出库变更单');

  static const SUB_CONTRACT_RETURN = TypeEnumEntity('SUB_CONTRACT_RETURN','原料退库单');

  static const SUB_CONTRACT_RETURN_CHANGE = TypeEnumEntity('SUB_CONTRACT_RETURN_CHANGE','原料退货变更单');

  static const SUB_CONTRACT_IN = TypeEnumEntity('SUB_CONTRACT_IN','成品入库单');

  static const SUB_CONTRACT_IN_CHANGE = TypeEnumEntity('SUB_CONTRACT_IN_CHANGE','成品入库变更单');

  static const STOCK_OTHER_INBOUND = TypeEnumEntity('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OTHER_INBOUND_CHANGE = TypeEnumEntity('STOCK_OTHER_INBOUND_CHANGE','其他入库变更单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumEntity('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_OTHER_OUTBOUND_CHANGE = TypeEnumEntity('STOCK_OTHER_OUTBOUND_CHANGE','其他出库变更单');

  static const STOCK_TRANSFER = TypeEnumEntity('STOCK_TRANSFER','调拨单');

  static const STOCK_TRANSFER_CHANGE = TypeEnumEntity('STOCK_TRANSFER_CHANGE','调拨变更单');

  static const STOCK_ADJUST_PRICE = TypeEnumEntity('STOCK_ADJUST_PRICE','成本调价单');

  static const STOCK_OVERFLOW = TypeEnumEntity('STOCK_OVERFLOW','库存报溢单');

  static const STOCK_OVERFLOW_CHANGE = TypeEnumEntity('STOCK_OVERFLOW_CHANGE','库存报溢变更单');

  static const STOCK_LOSS = TypeEnumEntity('STOCK_LOSS','库存报损单');

  static const STOCK_LOSS_CHANGE = TypeEnumEntity('STOCK_LOSS_CHANGE','库存报损变更单');

  static const STOCK_SINGLE_CHECK_POINT = TypeEnumEntity('STOCK_SINGLE_CHECK_POINT','单次盘点单');

  static const STOCK_SPLIT_CHECK_POINT = TypeEnumEntity('STOCK_SPLIT_CHECK_POINT','分量盘点单');

  static const STOCK_COMBINE_CHECK_POINT = TypeEnumEntity('STOCK_COMBINE_CHECK_POINT','汇总盘点单');

  static const STOCK_DETAIL = TypeEnumEntity('STOCK_DETAIL','仓库明细');

  static const BILL_ADVANCE_RECEIVABLE = TypeEnumEntity('BILL_ADVANCE_RECEIVABLE','预收款单');

  static const BILL_UN_RECEIVABLE_LIST = TypeEnumEntity('BILL_UN_RECEIVABLE_LIST','未收款单据列表');

  static const BILL_RECEIVABLE = TypeEnumEntity('BILL_RECEIVABLE','收款单');

  static const BILL_RECEIVABLE_DETAIL = TypeEnumEntity('BILL_RECEIVABLE_DETAIL','收款明细');

  static const BILL_ADVANCE_PAYABLE = TypeEnumEntity('BILL_ADVANCE_PAYABLE','预付款单');

  static const BILL_UN_PAYABLE_LIST = TypeEnumEntity('BILL_UN_PAYABLE_LIST','未付款单据列表');

  static const BILL_PAYABLE = TypeEnumEntity('BILL_PAYABLE','付款单');

  static const BILL_PAYABLE_DETAIL = TypeEnumEntity('BILL_PAYABLE_DETAIL','付款明细');

  static const BILL_OTHER_INCOME = TypeEnumEntity('BILL_OTHER_INCOME','其他收入单');

  static const BILL_OTHER_EXPENSE = TypeEnumEntity('BILL_OTHER_EXPENSE','其他费用单');

  static const BILL_TRANSFER = TypeEnumEntity('BILL_TRANSFER','科目转款单');

  static const BILL_CUSTOM_INVOICE = TypeEnumEntity('BILL_CUSTOM_INVOICE','客户发票单');

  static const BILL_CASH = TypeEnumEntity('BILL_CASH','查资金');

  static const BILL_ARAP_RECEIVABLE = TypeEnumEntity('BILL_ARAP_RECEIVABLE','查应收');

  static const BILL_ARAP_PAYABLE = TypeEnumEntity('BILL_ARAP_PAYABLE','查应付');

  static const BILL_ACCOUNT_EXPENSE = TypeEnumEntity('BILL_ACCOUNT_EXPENSE','查其他费用');

  static const BILL_ACCOUNT_INCOME = TypeEnumEntity('BILL_ACCOUNT_INCOME','查其他收入');

  static const BILL_ACCOUNT_DOCUMENT = TypeEnumEntity('BILL_ACCOUNT_DOCUMENT','会计凭证');

  static const REPORT_STOCK_ITEM = TypeEnumEntity('REPORT_STOCK_ITEM','库存-按商品');

  static const REPORT_STOCK_REMAIN = TypeEnumEntity('REPORT_STOCK_REMAIN','库存-按批次');

  static const REPORT_BILL_RECEIVABLE_DATE = TypeEnumEntity('REPORT_BILL_RECEIVABLE_DATE','未收款单据-按日周月');

  static const REPORT_BILL_RECEIVABLE_CUSTOM = TypeEnumEntity('REPORT_BILL_RECEIVABLE_CUSTOM','未收款单据-按客户');

  static const REPORT_BILL_RECEIVABLE_MANAGE = TypeEnumEntity('REPORT_BILL_RECEIVABLE_MANAGE','未收款单据-按经手人');

  static const REPORT_BILL_PAYABLE_DATE = TypeEnumEntity('REPORT_BILL_PAYABLE_DATE','未付款单据-按日周月');

  static const REPORT_BILL_PAYABLE_SUPPLIER = TypeEnumEntity('REPORT_BILL_PAYABLE_SUPPLIER','未付款单据-按供应商');

  static const REPORT_BILL_PAYABLE_MANAGE = TypeEnumEntity('REPORT_BILL_PAYABLE_MANAGE','未付款单据-按经手人');

  static const REPORT_SALES_DATE = TypeEnumEntity('REPORT_SALES_DATE','销售-按日周月');

  static const REPORT_SALES_ITEM = TypeEnumEntity('REPORT_SALES_ITEM','销售-按商品');

  static const REPORT_SALES_CUSTOM = TypeEnumEntity('REPORT_SALES_CUSTOM','销售-按客户');

  static const REPORT_SALES_MANAGE = TypeEnumEntity('REPORT_SALES_MANAGE','销售-按经手人');

  static const REPORT_PURCHASE_DATE = TypeEnumEntity('REPORT_PURCHASE_DATE','采购-按日周月');

  static const REPORT_PURCHASE_ITEM = TypeEnumEntity('REPORT_PURCHASE_ITEM','采购-按商品');

  static const REPORT_PURCHASE_SUPPLIER = TypeEnumEntity('REPORT_PURCHASE_SUPPLIER','采购-按供应商');

  static const REPORT_PURCHASE_MANAGE = TypeEnumEntity('REPORT_PURCHASE_MANAGE','采购-按经手人');

  static const REPORT_GALLERY_ALL = TypeEnumEntity('REPORT_GALLERY_ALL','经营报表');

  static const RESOURCE_ITEM = TypeEnumEntity('RESOURCE_ITEM','商品');

  static const RESOURCE_CUSTOM = TypeEnumEntity('RESOURCE_CUSTOM','客户');

  static const RESOURCE_SUPPLIER = TypeEnumEntity('RESOURCE_SUPPLIER','供应商');

  static const RESOURCE_ACCOUNT = TypeEnumEntity('RESOURCE_ACCOUNT','会计科目');

  static const RESOURCE_STORE = TypeEnumEntity('RESOURCE_STORE','仓库');

  static const RESOURCE_UNIT = TypeEnumEntity('RESOURCE_UNIT','单位');

  static const RESOURCE_STOCK_INIT = TypeEnumEntity('RESOURCE_STOCK_INIT','期初库存');

  static const RESOURCE_ACCOUNT_RECEIVABLE_INIT = TypeEnumEntity('RESOURCE_ACCOUNT_RECEIVABLE_INIT','期初应收');

  static const RESOURCE_ACCOUNT_PAYABLE_INIT = TypeEnumEntity('RESOURCE_ACCOUNT_PAYABLE_INIT','期初应付');

  static const SYSTEM_EMPLOYEE = TypeEnumEntity('SYSTEM_EMPLOYEE','雇员');

  static const SYSTEM_OPERATOR = TypeEnumEntity('SYSTEM_OPERATOR','操作员');

  static const SYSTEM_OPERATOR_ROLE = TypeEnumEntity('SYSTEM_OPERATOR_ROLE','操作员角色');

  static const SYSTEM_TENANT = TypeEnumEntity('SYSTEM_TENANT','公司资料');

  static const SYSTEM_CONFIG_OPEN = TypeEnumEntity('SYSTEM_CONFIG_OPEN','系统开账');

  static const SYSTEM_CONFIG_RESET = TypeEnumEntity('SYSTEM_CONFIG_RESET','系统重置');

  static const SYSTEM_CONFIG_SETTING = TypeEnumEntity('SYSTEM_CONFIG_SETTING','系统配置');

  static const SYSTEM_MENU_CONFIG = TypeEnumEntity('SYSTEM_MENU_CONFIG','菜单配置');

  static const SYSTEM_BACKEND_TASK = TypeEnumEntity('SYSTEM_BACKEND_TASK','后台任务');

  static const SYSTEM_ATTACHMENT = TypeEnumEntity('SYSTEM_ATTACHMENT','单据附件');

  static const SYSTEM_IMAGE = TypeEnumEntity('SYSTEM_IMAGE','图片空间');

  static const COLUMN_VIEW_SALES_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_SALES_ORDER_PRICE','销售单据查看价格');

  static const COLUMN_VIEW_PURCHASE_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_PURCHASE_ORDER_PRICE','采购单据查看价格');

  static const COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE','委外单据查看价格');

  static const COLUMN_VIEW_STOCK_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_STOCK_ORDER_PRICE','仓管单据查看价格');

  static const COLUMN_VIEW_ORDER_COST_AND_PROFIT = TypeEnumEntity('COLUMN_VIEW_ORDER_COST_AND_PROFIT','查看单据成本价和毛利');

  static const COLUMN_VIEW_REPORT_COST_AND_PROFIT = TypeEnumEntity('COLUMN_VIEW_REPORT_COST_AND_PROFIT','查看报表成本价和毛利');

  static const COLUMN_VIEW_PURCHASE_PRICE = TypeEnumEntity('COLUMN_VIEW_PURCHASE_PRICE','查看预设进价');

  static const COLUMN_VIEW_SALES_PRICE = TypeEnumEntity('COLUMN_VIEW_SALES_PRICE','查看零售价');

  static const values = {
     'SALES_REQUEST':SALES_REQUEST,
     'SALES_REQUEST_CHANGE':SALES_REQUEST_CHANGE,
     'SALES_OUT':SALES_OUT,
     'SALES_OUT_CHANGE':SALES_OUT_CHANGE,
     'SALES_RETURN':SALES_RETURN,
     'SALES_RETURN_CHANGE':SALES_RETURN_CHANGE,
     'SALES_QUOTATION':SALES_QUOTATION,
     'SALES_RECEIPT':SALES_RECEIPT,
     'SALES_REQUEST_DETAIL':SALES_REQUEST_DETAIL,
     'SALES_DETAIL':SALES_DETAIL,
     'SALES_CHANGE_HISTORY':SALES_CHANGE_HISTORY,
     'SALES_PRICE_TRACK':SALES_PRICE_TRACK,
     'PURCHASE_ITEM_REGULAR_TYPE':PURCHASE_ITEM_REGULAR_TYPE,
     'PURCHASE_STOCK_REPLENISH':PURCHASE_STOCK_REPLENISH,
     'PURCHASE_REQUEST':PURCHASE_REQUEST,
     'PURCHASE_REQUEST_CHANGE':PURCHASE_REQUEST_CHANGE,
     'PURCHASE_IN':PURCHASE_IN,
     'PURCHASE_IN_CHANGE':PURCHASE_IN_CHANGE,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'PURCHASE_RETURN_CHANGE':PURCHASE_RETURN_CHANGE,
     'PURCHASE_QUOTATION':PURCHASE_QUOTATION,
     'PURCHASE_DEMAND':PURCHASE_DEMAND,
     'PURCHASE_RECEIPT':PURCHASE_RECEIPT,
     'PURCHASE_REQUEST_DETAIL':PURCHASE_REQUEST_DETAIL,
     'PURCHASE_DETAIL':PURCHASE_DETAIL,
     'PURCHASE_CHANGE_HISTORY':PURCHASE_CHANGE_HISTORY,
     'PURCHASE_PRICE_TRACK':PURCHASE_PRICE_TRACK,
     'SUB_CONTRACT_ASSEMBLE_TEMPLATE':SUB_CONTRACT_ASSEMBLE_TEMPLATE,
     'SUB_CONTRACT_STOCK':SUB_CONTRACT_STOCK,
     'SUB_CONTRACT_STOCK_REMAIN':SUB_CONTRACT_STOCK_REMAIN,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'SUB_CONTRACT_OUT_CHANGE':SUB_CONTRACT_OUT_CHANGE,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_RETURN_CHANGE':SUB_CONTRACT_RETURN_CHANGE,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_IN_CHANGE':SUB_CONTRACT_IN_CHANGE,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_INBOUND_CHANGE':STOCK_OTHER_INBOUND_CHANGE,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_OTHER_OUTBOUND_CHANGE':STOCK_OTHER_OUTBOUND_CHANGE,
     'STOCK_TRANSFER':STOCK_TRANSFER,
     'STOCK_TRANSFER_CHANGE':STOCK_TRANSFER_CHANGE,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_OVERFLOW_CHANGE':STOCK_OVERFLOW_CHANGE,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_LOSS_CHANGE':STOCK_LOSS_CHANGE,
     'STOCK_SINGLE_CHECK_POINT':STOCK_SINGLE_CHECK_POINT,
     'STOCK_SPLIT_CHECK_POINT':STOCK_SPLIT_CHECK_POINT,
     'STOCK_COMBINE_CHECK_POINT':STOCK_COMBINE_CHECK_POINT,
     'STOCK_DETAIL':STOCK_DETAIL,
     'BILL_ADVANCE_RECEIVABLE':BILL_ADVANCE_RECEIVABLE,
     'BILL_UN_RECEIVABLE_LIST':BILL_UN_RECEIVABLE_LIST,
     'BILL_RECEIVABLE':BILL_RECEIVABLE,
     'BILL_RECEIVABLE_DETAIL':BILL_RECEIVABLE_DETAIL,
     'BILL_ADVANCE_PAYABLE':BILL_ADVANCE_PAYABLE,
     'BILL_UN_PAYABLE_LIST':BILL_UN_PAYABLE_LIST,
     'BILL_PAYABLE':BILL_PAYABLE,
     'BILL_PAYABLE_DETAIL':BILL_PAYABLE_DETAIL,
     'BILL_OTHER_INCOME':BILL_OTHER_INCOME,
     'BILL_OTHER_EXPENSE':BILL_OTHER_EXPENSE,
     'BILL_TRANSFER':BILL_TRANSFER,
     'BILL_CUSTOM_INVOICE':BILL_CUSTOM_INVOICE,
     'BILL_CASH':BILL_CASH,
     'BILL_ARAP_RECEIVABLE':BILL_ARAP_RECEIVABLE,
     'BILL_ARAP_PAYABLE':BILL_ARAP_PAYABLE,
     'BILL_ACCOUNT_EXPENSE':BILL_ACCOUNT_EXPENSE,
     'BILL_ACCOUNT_INCOME':BILL_ACCOUNT_INCOME,
     'BILL_ACCOUNT_DOCUMENT':BILL_ACCOUNT_DOCUMENT,
     'REPORT_STOCK_ITEM':REPORT_STOCK_ITEM,
     'REPORT_STOCK_REMAIN':REPORT_STOCK_REMAIN,
     'REPORT_BILL_RECEIVABLE_DATE':REPORT_BILL_RECEIVABLE_DATE,
     'REPORT_BILL_RECEIVABLE_CUSTOM':REPORT_BILL_RECEIVABLE_CUSTOM,
     'REPORT_BILL_RECEIVABLE_MANAGE':REPORT_BILL_RECEIVABLE_MANAGE,
     'REPORT_BILL_PAYABLE_DATE':REPORT_BILL_PAYABLE_DATE,
     'REPORT_BILL_PAYABLE_SUPPLIER':REPORT_BILL_PAYABLE_SUPPLIER,
     'REPORT_BILL_PAYABLE_MANAGE':REPORT_BILL_PAYABLE_MANAGE,
     'REPORT_SALES_DATE':REPORT_SALES_DATE,
     'REPORT_SALES_ITEM':REPORT_SALES_ITEM,
     'REPORT_SALES_CUSTOM':REPORT_SALES_CUSTOM,
     'REPORT_SALES_MANAGE':REPORT_SALES_MANAGE,
     'REPORT_PURCHASE_DATE':REPORT_PURCHASE_DATE,
     'REPORT_PURCHASE_ITEM':REPORT_PURCHASE_ITEM,
     'REPORT_PURCHASE_SUPPLIER':REPORT_PURCHASE_SUPPLIER,
     'REPORT_PURCHASE_MANAGE':REPORT_PURCHASE_MANAGE,
     'REPORT_GALLERY_ALL':REPORT_GALLERY_ALL,
     'RESOURCE_ITEM':RESOURCE_ITEM,
     'RESOURCE_CUSTOM':RESOURCE_CUSTOM,
     'RESOURCE_SUPPLIER':RESOURCE_SUPPLIER,
     'RESOURCE_ACCOUNT':RESOURCE_ACCOUNT,
     'RESOURCE_STORE':RESOURCE_STORE,
     'RESOURCE_UNIT':RESOURCE_UNIT,
     'RESOURCE_STOCK_INIT':RESOURCE_STOCK_INIT,
     'RESOURCE_ACCOUNT_RECEIVABLE_INIT':RESOURCE_ACCOUNT_RECEIVABLE_INIT,
     'RESOURCE_ACCOUNT_PAYABLE_INIT':RESOURCE_ACCOUNT_PAYABLE_INIT,
     'SYSTEM_EMPLOYEE':SYSTEM_EMPLOYEE,
     'SYSTEM_OPERATOR':SYSTEM_OPERATOR,
     'SYSTEM_OPERATOR_ROLE':SYSTEM_OPERATOR_ROLE,
     'SYSTEM_TENANT':SYSTEM_TENANT,
     'SYSTEM_CONFIG_OPEN':SYSTEM_CONFIG_OPEN,
     'SYSTEM_CONFIG_RESET':SYSTEM_CONFIG_RESET,
     'SYSTEM_CONFIG_SETTING':SYSTEM_CONFIG_SETTING,
     'SYSTEM_MENU_CONFIG':SYSTEM_MENU_CONFIG,
     'SYSTEM_BACKEND_TASK':SYSTEM_BACKEND_TASK,
     'SYSTEM_ATTACHMENT':SYSTEM_ATTACHMENT,
     'SYSTEM_IMAGE':SYSTEM_IMAGE,
     'COLUMN_VIEW_SALES_ORDER_PRICE':COLUMN_VIEW_SALES_ORDER_PRICE,
     'COLUMN_VIEW_PURCHASE_ORDER_PRICE':COLUMN_VIEW_PURCHASE_ORDER_PRICE,
     'COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE':COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE,
     'COLUMN_VIEW_STOCK_ORDER_PRICE':COLUMN_VIEW_STOCK_ORDER_PRICE,
     'COLUMN_VIEW_ORDER_COST_AND_PROFIT':COLUMN_VIEW_ORDER_COST_AND_PROFIT,
     'COLUMN_VIEW_REPORT_COST_AND_PROFIT':COLUMN_VIEW_REPORT_COST_AND_PROFIT,
     'COLUMN_VIEW_PURCHASE_PRICE':COLUMN_VIEW_PURCHASE_PRICE,
     'COLUMN_VIEW_SALES_PRICE':COLUMN_VIEW_SALES_PRICE,
  };

  const TypeEnumEntity(super.value,super.label);

  static TypeEnumEntity? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumEntity(data, data);
    }
    throw FormatException('can not parse to TypeEnumEntity: [$data]');
  }

  static Object? toDynamic(TypeEnumEntity? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumFilterInvoiceBillState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceBillState('ALL','全部');

  static const INVOICE_NOT_BILL = TypeEnumFilterInvoiceBillState('INVOICE_NOT_BILL','等待结算');

  static const INVOICE_ALL_BILL = TypeEnumFilterInvoiceBillState('INVOICE_ALL_BILL','完成结算');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_BILL':INVOICE_NOT_BILL,
     'INVOICE_ALL_BILL':INVOICE_ALL_BILL,
  };

  const TypeEnumFilterInvoiceBillState(super.value,super.label);

  static TypeEnumFilterInvoiceBillState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceBillState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceBillState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceBillState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumOrderBillType extends IDataEnum implements IDataDynamic{
  static const NONE = TypeEnumOrderBillType('NONE','无');

  static const RECEIVABLE = TypeEnumOrderBillType('RECEIVABLE','收款');

  static const PAYABLE = TypeEnumOrderBillType('PAYABLE','付款');

  static const values = {
     'NONE':NONE,
     'RECEIVABLE':RECEIVABLE,
     'PAYABLE':PAYABLE,
  };

  const TypeEnumOrderBillType(super.value,super.label);

  static TypeEnumOrderBillType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderBillType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderBillType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderBillType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountDirection extends IDataEnum implements IDataDynamic{
  static const DEBIT = TypeEnumAccountDirection('DEBIT','借');

  static const CREDIT = TypeEnumAccountDirection('CREDIT','贷');

  static const values = {
     'DEBIT':DEBIT,
     'CREDIT':CREDIT,
  };

  const TypeEnumAccountDirection(super.value,super.label);

  static TypeEnumAccountDirection? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountDirection(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountDirection: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountDirection? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumMainIndexQueryMainIndexDateType extends IDataEnum implements IDataDynamic{
  static const SEVEN_DAYS = TypeEnumMainIndexQueryMainIndexDateType('SEVEN_DAYS','近7天');

  static const THIRTY_DAYS = TypeEnumMainIndexQueryMainIndexDateType('THIRTY_DAYS','近30天');

  static const DAY = TypeEnumMainIndexQueryMainIndexDateType('DAY','日');

  static const WEEK = TypeEnumMainIndexQueryMainIndexDateType('WEEK','周');

  static const MONTH = TypeEnumMainIndexQueryMainIndexDateType('MONTH','月');

  static const YEAR = TypeEnumMainIndexQueryMainIndexDateType('YEAR','年');

  static const values = {
     'SEVEN_DAYS':SEVEN_DAYS,
     'THIRTY_DAYS':THIRTY_DAYS,
     'DAY':DAY,
     'WEEK':WEEK,
     'MONTH':MONTH,
     'YEAR':YEAR,
  };

  const TypeEnumMainIndexQueryMainIndexDateType(super.value,super.label);

  static TypeEnumMainIndexQueryMainIndexDateType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumMainIndexQueryMainIndexDateType(data, data);
    }
    throw FormatException('can not parse to TypeEnumMainIndexQueryMainIndexDateType: [$data]');
  }

  static Object? toDynamic(TypeEnumMainIndexQueryMainIndexDateType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumAccountType extends IDataEnum implements IDataDynamic{
  static const ASSETS = TypeEnumAccountType('ASSETS','资产类');

  static const LIABILITIES = TypeEnumAccountType('LIABILITIES','负债类');

  static const OWNER_EQUITY = TypeEnumAccountType('OWNER_EQUITY','所有者权益类');

  static const PROFIT = TypeEnumAccountType('PROFIT','损益类');

  static const values = {
     'ASSETS':ASSETS,
     'LIABILITIES':LIABILITIES,
     'OWNER_EQUITY':OWNER_EQUITY,
     'PROFIT':PROFIT,
  };

  const TypeEnumAccountType(super.value,super.label);

  static TypeEnumAccountType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}

class TypeEnumReportGroupType extends IDataEnum implements IDataDynamic{
  static const TIME = TypeEnumReportGroupType('TIME','时间');

  static const ITEM = TypeEnumReportGroupType('ITEM','商品');

  static const MANAGE_EMPLOYEE = TypeEnumReportGroupType('MANAGE_EMPLOYEE','经手人');

  static const CONTACT = TypeEnumReportGroupType('CONTACT','往来单位');

  static const ACCOUNT = TypeEnumReportGroupType('ACCOUNT','会计账号');

  static const values = {
     'TIME':TIME,
     'ITEM':ITEM,
     'MANAGE_EMPLOYEE':MANAGE_EMPLOYEE,
     'CONTACT':CONTACT,
     'ACCOUNT':ACCOUNT,
  };

  const TypeEnumReportGroupType(super.value,super.label);

  static TypeEnumReportGroupType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumReportGroupType(data, data);
    }
    throw FormatException('can not parse to TypeEnumReportGroupType: [$data]');
  }

  static Object? toDynamic(TypeEnumReportGroupType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }
}


class FTypeAccount extends IDataField {
  static const auxiliary = FTypeAccount('auxiliary');
  static const balance = FTypeAccount('balance');
  static const balanceCheckType = FTypeAccount('balanceCheckType');
  static const balanceDirection = FTypeAccount('balanceDirection');
  static const balanceShowDirection = FTypeAccount('balanceShowDirection');
  static const children = FTypeAccount('children');
  static const createTime = FTypeAccount('createTime');
  static const firstChildNumber = FTypeAccount('firstChildNumber');
  static const fullName = FTypeAccount('fullName');
  static const hasBusinessLink = FTypeAccount('hasBusinessLink');
  static const id = FTypeAccount('id');
  static const initialBalance = FTypeAccount('initialBalance');
  static const initialBalanceDirection = FTypeAccount('initialBalanceDirection');
  static const isCategory = FTypeAccount('isCategory');
  static const isEnabled = FTypeAccount('isEnabled');
  static const isMonthlyCloseAccountIncome = FTypeAccount('isMonthlyCloseAccountIncome');
  static const isSystem = FTypeAccount('isSystem');
  static const modifyTime = FTypeAccount('modifyTime');
  static const monthlyCloseAccountId = FTypeAccount('monthlyCloseAccountId');
  static const name = FTypeAccount('name');
  static const number = FTypeAccount('number');
  static const parentId = FTypeAccount('parentId');
  static const parentInfo = FTypeAccount('parentInfo');
  static const remark = FTypeAccount('remark');
  static const subType = FTypeAccount('subType');
  static const treeLevel = FTypeAccount('treeLevel');
  static const treePath = FTypeAccount('treePath');
  static const type = FTypeAccount('type');
  const FTypeAccount(super.key);
}

final FieldReflectInfo<TypeAccount> _TypeAccount_fields = {
  "auxiliary": (
    getter: (data) => data._auxiliary,
    setter: (data, value) => data._auxiliary = value as TypeEnumAccountAuxiliary?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountAuxiliary.toDynamic;
      return formatter(data._auxiliary);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountAuxiliary.fromDynamic;
      data._auxiliary = parser(value);
    }
  ),
  "balance": (
    getter: (data) => data._balance,
    setter: (data, value) => data._balance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._balance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._balance = parser(value);
    }
  ),
  "balanceCheckType": (
    getter: (data) => data._balanceCheckType,
    setter: (data, value) => data._balanceCheckType = value as TypeEnumAccountBalanceCheckType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountBalanceCheckType.toDynamic;
      return formatter(data._balanceCheckType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountBalanceCheckType.fromDynamic;
      data._balanceCheckType = parser(value);
    }
  ),
  "balanceDirection": (
    getter: (data) => data._balanceDirection,
    setter: (data, value) => data._balanceDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data._balanceDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data._balanceDirection = parser(value);
    }
  ),
  "balanceShowDirection": (
    getter: (data) => data._balanceShowDirection,
    setter: (data, value) => data._balanceShowDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data._balanceShowDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data._balanceShowDirection = parser(value);
    }
  ),
  "children": (
    getter: (data) => data._children,
    setter: (data, value) => data._children = value as List<TypeAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccount>((single){
        final handler = TypeAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data._children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
        final handler = TypeAccount.fromDynamic;
        return handler(single)!;
      });
      data._children = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "firstChildNumber": (
    getter: (data) => data._firstChildNumber,
    setter: (data, value) => data._firstChildNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._firstChildNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._firstChildNumber = parser(value);
    }
  ),
  "fullName": (
    getter: (data) => data._fullName,
    setter: (data, value) => data._fullName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._fullName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._fullName = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "initialBalance": (
    getter: (data) => data._initialBalance,
    setter: (data, value) => data._initialBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialBalance = parser(value);
    }
  ),
  "initialBalanceDirection": (
    getter: (data) => data._initialBalanceDirection,
    setter: (data, value) => data._initialBalanceDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data._initialBalanceDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data._initialBalanceDirection = parser(value);
    }
  ),
  "isCategory": (
    getter: (data) => data._isCategory,
    setter: (data, value) => data._isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCategory = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isMonthlyCloseAccountIncome": (
    getter: (data) => data._isMonthlyCloseAccountIncome,
    setter: (data, value) => data._isMonthlyCloseAccountIncome = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isMonthlyCloseAccountIncome);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isMonthlyCloseAccountIncome = parser(value);
    }
  ),
  "isSystem": (
    getter: (data) => data._isSystem,
    setter: (data, value) => data._isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSystem = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "monthlyCloseAccountId": (
    getter: (data) => data._monthlyCloseAccountId,
    setter: (data, value) => data._monthlyCloseAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._monthlyCloseAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._monthlyCloseAccountId = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "parentId": (
    getter: (data) => data._parentId,
    setter: (data, value) => data._parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._parentId = parser(value);
    }
  ),
  "parentInfo": (
    getter: (data) => data._parentInfo,
    setter: (data, value) => data._parentInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data._parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data._parentInfo = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "subType": (
    getter: (data) => data._subType,
    setter: (data, value) => data._subType = value as TypeEnumAccountSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountSubType.toDynamic;
      return formatter(data._subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountSubType.fromDynamic;
      data._subType = parser(value);
    }
  ),
  "treeLevel": (
    getter: (data) => data._treeLevel,
    setter: (data, value) => data._treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._treeLevel = parser(value);
    }
  ),
  "treePath": (
    getter: (data) => data._treePath,
    setter: (data, value) => data._treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._treePath = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumAccountType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountType.fromDynamic;
      data._type = parser(value);
    }
  ),
};

class TypeAccount extends IDataBasic implements IDataDynamic {
  TypeAccount({
    TypeEnumAccountAuxiliary? auxiliary,
    String? balance,
    TypeEnumAccountBalanceCheckType? balanceCheckType,
    TypeEnumAccountDirection? balanceDirection,
    TypeEnumAccountDirection? balanceShowDirection,
    List<TypeAccount>? children,
    String? createTime,
    String? firstChildNumber,
    String? fullName,
    int? hasBusinessLink,
    int? id,
    String? initialBalance,
    TypeEnumAccountDirection? initialBalanceDirection,
    int? isCategory,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isMonthlyCloseAccountIncome,
    int? isSystem,
    String? modifyTime,
    int? monthlyCloseAccountId,
    String? name,
    String? number,
    int? parentId,
    TypeAccount? parentInfo,
    String? remark,
    TypeEnumAccountSubType? subType,
    int? treeLevel,
    String? treePath,
    TypeEnumAccountType? type
  }):
    _auxiliary = auxiliary,
    _balance = balance,
    _balanceCheckType = balanceCheckType,
    _balanceDirection = balanceDirection,
    _balanceShowDirection = balanceShowDirection,
    _children = children,
    _createTime = createTime,
    _firstChildNumber = firstChildNumber,
    _fullName = fullName,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _initialBalance = initialBalance,
    _initialBalanceDirection = initialBalanceDirection,
    _isCategory = isCategory,
    _isEnabled = isEnabled,
    _isMonthlyCloseAccountIncome = isMonthlyCloseAccountIncome,
    _isSystem = isSystem,
    _modifyTime = modifyTime,
    _monthlyCloseAccountId = monthlyCloseAccountId,
    _name = name,
    _number = number,
    _parentId = parentId,
    _parentInfo = parentInfo,
    _remark = remark,
    _subType = subType,
    _treeLevel = treeLevel,
    _treePath = treePath,
    _type = type;

  static TypeAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumAccountAuxiliary? _auxiliary;

  TypeEnumAccountAuxiliary get auxiliary{
    return _auxiliary!;
  }

  TypeEnumAccountAuxiliary? getAuxiliary(){
    return _auxiliary;
  }

  set auxiliary(TypeEnumAccountAuxiliary data){
    _auxiliary = data;
  }

  void setAuxiliary(TypeEnumAccountAuxiliary? data){
    _auxiliary = data;
  }

  String? _balance;

  String get balance{
    return _balance!;
  }

  String? getBalance(){
    return _balance;
  }

  set balance(String data){
    _balance = data;
  }

  void setBalance(String? data){
    _balance = data;
  }

  TypeEnumAccountBalanceCheckType? _balanceCheckType;

  TypeEnumAccountBalanceCheckType get balanceCheckType{
    return _balanceCheckType!;
  }

  TypeEnumAccountBalanceCheckType? getBalanceCheckType(){
    return _balanceCheckType;
  }

  set balanceCheckType(TypeEnumAccountBalanceCheckType data){
    _balanceCheckType = data;
  }

  void setBalanceCheckType(TypeEnumAccountBalanceCheckType? data){
    _balanceCheckType = data;
  }

  TypeEnumAccountDirection? _balanceDirection;

  TypeEnumAccountDirection get balanceDirection{
    return _balanceDirection!;
  }

  TypeEnumAccountDirection? getBalanceDirection(){
    return _balanceDirection;
  }

  set balanceDirection(TypeEnumAccountDirection data){
    _balanceDirection = data;
  }

  void setBalanceDirection(TypeEnumAccountDirection? data){
    _balanceDirection = data;
  }

  TypeEnumAccountDirection? _balanceShowDirection;

  TypeEnumAccountDirection get balanceShowDirection{
    return _balanceShowDirection!;
  }

  TypeEnumAccountDirection? getBalanceShowDirection(){
    return _balanceShowDirection;
  }

  set balanceShowDirection(TypeEnumAccountDirection data){
    _balanceShowDirection = data;
  }

  void setBalanceShowDirection(TypeEnumAccountDirection? data){
    _balanceShowDirection = data;
  }

  List<TypeAccount>? _children;

  List<TypeAccount> get children{
    return _children!;
  }

  List<TypeAccount>? getChildren(){
    return _children;
  }

  set children(List<TypeAccount> data){
    _children = data;
  }

  void setChildren(List<TypeAccount>? data){
    _children = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _firstChildNumber;

  String get firstChildNumber{
    return _firstChildNumber!;
  }

  String? getFirstChildNumber(){
    return _firstChildNumber;
  }

  set firstChildNumber(String data){
    _firstChildNumber = data;
  }

  void setFirstChildNumber(String? data){
    _firstChildNumber = data;
  }

  String? _fullName;

  String get fullName{
    return _fullName!;
  }

  String? getFullName(){
    return _fullName;
  }

  set fullName(String data){
    _fullName = data;
  }

  void setFullName(String? data){
    _fullName = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _initialBalance;

  String get initialBalance{
    return _initialBalance!;
  }

  String? getInitialBalance(){
    return _initialBalance;
  }

  set initialBalance(String data){
    _initialBalance = data;
  }

  void setInitialBalance(String? data){
    _initialBalance = data;
  }

  TypeEnumAccountDirection? _initialBalanceDirection;

  TypeEnumAccountDirection get initialBalanceDirection{
    return _initialBalanceDirection!;
  }

  TypeEnumAccountDirection? getInitialBalanceDirection(){
    return _initialBalanceDirection;
  }

  set initialBalanceDirection(TypeEnumAccountDirection data){
    _initialBalanceDirection = data;
  }

  void setInitialBalanceDirection(TypeEnumAccountDirection? data){
    _initialBalanceDirection = data;
  }

  int? _isCategory;

  int get isCategory{
    return _isCategory!;
  }

  int? getIsCategory(){
    return _isCategory;
  }

  set isCategory(int data){
    _isCategory = data;
  }

  void setIsCategory(int? data){
    _isCategory = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isMonthlyCloseAccountIncome;

  int get isMonthlyCloseAccountIncome{
    return _isMonthlyCloseAccountIncome!;
  }

  int? getIsMonthlyCloseAccountIncome(){
    return _isMonthlyCloseAccountIncome;
  }

  set isMonthlyCloseAccountIncome(int data){
    _isMonthlyCloseAccountIncome = data;
  }

  void setIsMonthlyCloseAccountIncome(int? data){
    _isMonthlyCloseAccountIncome = data;
  }

  int? _isSystem;

  int get isSystem{
    return _isSystem!;
  }

  int? getIsSystem(){
    return _isSystem;
  }

  set isSystem(int data){
    _isSystem = data;
  }

  void setIsSystem(int? data){
    _isSystem = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  int? _monthlyCloseAccountId;

  int get monthlyCloseAccountId{
    return _monthlyCloseAccountId!;
  }

  int? getMonthlyCloseAccountId(){
    return _monthlyCloseAccountId;
  }

  set monthlyCloseAccountId(int data){
    _monthlyCloseAccountId = data;
  }

  void setMonthlyCloseAccountId(int? data){
    _monthlyCloseAccountId = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _parentId;

  int get parentId{
    return _parentId!;
  }

  int? getParentId(){
    return _parentId;
  }

  set parentId(int data){
    _parentId = data;
  }

  void setParentId(int? data){
    _parentId = data;
  }

  TypeAccount? _parentInfo;

  TypeAccount get parentInfo{
    return _parentInfo!;
  }

  TypeAccount? getParentInfo(){
    return _parentInfo;
  }

  set parentInfo(TypeAccount data){
    _parentInfo = data;
  }

  void setParentInfo(TypeAccount? data){
    _parentInfo = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  TypeEnumAccountSubType? _subType;

  TypeEnumAccountSubType get subType{
    return _subType!;
  }

  TypeEnumAccountSubType? getSubType(){
    return _subType;
  }

  set subType(TypeEnumAccountSubType data){
    _subType = data;
  }

  void setSubType(TypeEnumAccountSubType? data){
    _subType = data;
  }

  int? _treeLevel;

  int get treeLevel{
    return _treeLevel!;
  }

  int? getTreeLevel(){
    return _treeLevel;
  }

  set treeLevel(int data){
    _treeLevel = data;
  }

  void setTreeLevel(int? data){
    _treeLevel = data;
  }

  String? _treePath;

  String get treePath{
    return _treePath!;
  }

  String? getTreePath(){
    return _treePath;
  }

  set treePath(String data){
    _treePath = data;
  }

  void setTreePath(String? data){
    _treePath = data;
  }

  TypeEnumAccountType? _type;

  TypeEnumAccountType get type{
    return _type!;
  }

  TypeEnumAccountType? getType(){
    return _type;
  }

  set type(TypeEnumAccountType data){
    _type = data;
  }

  void setType(TypeEnumAccountType? data){
    _type = data;
  }

}

class FTypeAccountFlowQueryDTO extends IDataField {
  static const data = FTypeAccountFlowQueryDTO('data');
  static const pageIndex = FTypeAccountFlowQueryDTO('pageIndex');
  static const pageSize = FTypeAccountFlowQueryDTO('pageSize');
  static const sum = FTypeAccountFlowQueryDTO('sum');
  const FTypeAccountFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQueryDTO> _TypeAccountFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAccountFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccountFlowQueryDataDTO>((single){
        final handler = TypeAccountFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccountFlowQueryDataDTO>((single){
        final handler = TypeAccountFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeAccountFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeAccountFlowQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccountFlowQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeAccountFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQueryDTO({
    List<TypeAccountFlowQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeAccountFlowQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeAccountFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeAccountFlowQueryDataDTO>? _data;

  List<TypeAccountFlowQueryDataDTO> get data{
    return _data!;
  }

  List<TypeAccountFlowQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeAccountFlowQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeAccountFlowQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeAccountFlowQuerySumDTO? _sum;

  TypeAccountFlowQuerySumDTO get sum{
    return _sum!;
  }

  TypeAccountFlowQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeAccountFlowQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeAccountFlowQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeAccountFlowQueryDataDTO extends IDataField {
  static const accountId = FTypeAccountFlowQueryDataDTO('accountId');
  static const accountName = FTypeAccountFlowQueryDataDTO('accountName');
  static const changeTotal = FTypeAccountFlowQueryDataDTO('changeTotal');
  static const creditChange = FTypeAccountFlowQueryDataDTO('creditChange');
  static const debitChange = FTypeAccountFlowQueryDataDTO('debitChange');
  static const id = FTypeAccountFlowQueryDataDTO('id');
  static const orderContactId = FTypeAccountFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeAccountFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeAccountFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeAccountFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeAccountFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeAccountFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeAccountFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeAccountFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeAccountFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeAccountFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeAccountFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeAccountFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeAccountFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeAccountFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeAccountFlowQueryDataDTO('orderState');
  static const orderType = FTypeAccountFlowQueryDataDTO('orderType');
  static const previousTotal = FTypeAccountFlowQueryDataDTO('previousTotal');
  static const remark = FTypeAccountFlowQueryDataDTO('remark');
  const FTypeAccountFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQueryDataDTO> _TypeAccountFlowQueryDataDTO_fields = {
  "accountId": (
    getter: (data) => data._accountId,
    setter: (data, value) => data._accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._accountId = parser(value);
    }
  ),
  "accountName": (
    getter: (data) => data._accountName,
    setter: (data, value) => data._accountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountName = parser(value);
    }
  ),
  "changeTotal": (
    getter: (data) => data._changeTotal,
    setter: (data, value) => data._changeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._changeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._changeTotal = parser(value);
    }
  ),
  "creditChange": (
    getter: (data) => data._creditChange,
    setter: (data, value) => data._creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._creditChange = parser(value);
    }
  ),
  "debitChange": (
    getter: (data) => data._debitChange,
    setter: (data, value) => data._debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._debitChange = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "previousTotal": (
    getter: (data) => data._previousTotal,
    setter: (data, value) => data._previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousTotal = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
};

class TypeAccountFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQueryDataDTO({
    int? accountId,
    String? accountName,
    String? changeTotal,
    String? creditChange,
    String? debitChange,
    int? id,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    TypeEnumOrderType? orderType,
    String? previousTotal,
    String? remark
  }):
    _accountId = accountId,
    _accountName = accountName,
    _changeTotal = changeTotal,
    _creditChange = creditChange,
    _debitChange = debitChange,
    _id = id,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderType = orderType,
    _previousTotal = previousTotal,
    _remark = remark;

  static TypeAccountFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _accountId;

  int get accountId{
    return _accountId!;
  }

  int? getAccountId(){
    return _accountId;
  }

  set accountId(int data){
    _accountId = data;
  }

  void setAccountId(int? data){
    _accountId = data;
  }

  String? _accountName;

  String get accountName{
    return _accountName!;
  }

  String? getAccountName(){
    return _accountName;
  }

  set accountName(String data){
    _accountName = data;
  }

  void setAccountName(String? data){
    _accountName = data;
  }

  String? _changeTotal;

  String get changeTotal{
    return _changeTotal!;
  }

  String? getChangeTotal(){
    return _changeTotal;
  }

  set changeTotal(String data){
    _changeTotal = data;
  }

  void setChangeTotal(String? data){
    _changeTotal = data;
  }

  String? _creditChange;

  String get creditChange{
    return _creditChange!;
  }

  String? getCreditChange(){
    return _creditChange;
  }

  set creditChange(String data){
    _creditChange = data;
  }

  void setCreditChange(String? data){
    _creditChange = data;
  }

  String? _debitChange;

  String get debitChange{
    return _debitChange!;
  }

  String? getDebitChange(){
    return _debitChange;
  }

  set debitChange(String data){
    _debitChange = data;
  }

  void setDebitChange(String? data){
    _debitChange = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _previousTotal;

  String get previousTotal{
    return _previousTotal!;
  }

  String? getPreviousTotal(){
    return _previousTotal;
  }

  set previousTotal(String data){
    _previousTotal = data;
  }

  void setPreviousTotal(String? data){
    _previousTotal = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

}

class FTypeAccountFlowQuerySumDTO extends IDataField {
  static const count = FTypeAccountFlowQuerySumDTO('count');
  static const creditChange = FTypeAccountFlowQuerySumDTO('creditChange');
  static const debitChange = FTypeAccountFlowQuerySumDTO('debitChange');
  const FTypeAccountFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQuerySumDTO> _TypeAccountFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "creditChange": (
    getter: (data) => data._creditChange,
    setter: (data, value) => data._creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._creditChange = parser(value);
    }
  ),
  "debitChange": (
    getter: (data) => data._debitChange,
    setter: (data, value) => data._debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._debitChange = parser(value);
    }
  ),
};

class TypeAccountFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQuerySumDTO({
    int? count,
    String? creditChange,
    String? debitChange
  }):
    _count = count,
    _creditChange = creditChange,
    _debitChange = debitChange;

  static TypeAccountFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _creditChange;

  String get creditChange{
    return _creditChange!;
  }

  String? getCreditChange(){
    return _creditChange;
  }

  set creditChange(String data){
    _creditChange = data;
  }

  void setCreditChange(String? data){
    _creditChange = data;
  }

  String? _debitChange;

  String get debitChange{
    return _debitChange!;
  }

  String? getDebitChange(){
    return _debitChange;
  }

  set debitChange(String data){
    _debitChange = data;
  }

  void setDebitChange(String? data){
    _debitChange = data;
  }

}

class FTypeAccountGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeAccountGroupQueryDTO('beginOrderDate');
  static const data = FTypeAccountGroupQueryDTO('data');
  static const endOrderDate = FTypeAccountGroupQueryDTO('endOrderDate');
  static const sum = FTypeAccountGroupQueryDTO('sum');
  const FTypeAccountGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeAccountGroupQueryDTO> _TypeAccountGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data._beginOrderDate,
    setter: (data, value) => data._beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginOrderDate = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAccountGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccountGroupQueryDataDTO>((single){
        final handler = TypeAccountGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccountGroupQueryDataDTO>((single){
        final handler = TypeAccountGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "endOrderDate": (
    getter: (data) => data._endOrderDate,
    setter: (data, value) => data._endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endOrderDate = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeAccountGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeAccountGroupQueryDataDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccountGroupQueryDataDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeAccountGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAccountGroupQueryDTO({
    String? beginOrderDate,
    List<TypeAccountGroupQueryDataDTO>? data,
    String? endOrderDate,
    TypeAccountGroupQueryDataDTO? sum
  }):
    _beginOrderDate = beginOrderDate,
    _data = data,
    _endOrderDate = endOrderDate,
    _sum = sum;

  static TypeAccountGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginOrderDate;

  String get beginOrderDate{
    return _beginOrderDate!;
  }

  String? getBeginOrderDate(){
    return _beginOrderDate;
  }

  set beginOrderDate(String data){
    _beginOrderDate = data;
  }

  void setBeginOrderDate(String? data){
    _beginOrderDate = data;
  }

  List<TypeAccountGroupQueryDataDTO>? _data;

  List<TypeAccountGroupQueryDataDTO> get data{
    return _data!;
  }

  List<TypeAccountGroupQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeAccountGroupQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeAccountGroupQueryDataDTO>? data){
    _data = data;
  }

  String? _endOrderDate;

  String get endOrderDate{
    return _endOrderDate!;
  }

  String? getEndOrderDate(){
    return _endOrderDate;
  }

  set endOrderDate(String data){
    _endOrderDate = data;
  }

  void setEndOrderDate(String? data){
    _endOrderDate = data;
  }

  TypeAccountGroupQueryDataDTO? _sum;

  TypeAccountGroupQueryDataDTO get sum{
    return _sum!;
  }

  TypeAccountGroupQueryDataDTO? getSum(){
    return _sum;
  }

  set sum(TypeAccountGroupQueryDataDTO data){
    _sum = data;
  }

  void setSum(TypeAccountGroupQueryDataDTO? data){
    _sum = data;
  }

}

class FTypeAccountGroupQueryDataDTO extends IDataField {
  static const beginBalance = FTypeAccountGroupQueryDataDTO('beginBalance');
  static const creditChange = FTypeAccountGroupQueryDataDTO('creditChange');
  static const debitChange = FTypeAccountGroupQueryDataDTO('debitChange');
  static const endBalance = FTypeAccountGroupQueryDataDTO('endBalance');
  static const id = FTypeAccountGroupQueryDataDTO('id');
  static const isCategory = FTypeAccountGroupQueryDataDTO('isCategory');
  static const isEnabled = FTypeAccountGroupQueryDataDTO('isEnabled');
  static const name = FTypeAccountGroupQueryDataDTO('name');
  static const number = FTypeAccountGroupQueryDataDTO('number');
  static const treeLevel = FTypeAccountGroupQueryDataDTO('treeLevel');
  const FTypeAccountGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAccountGroupQueryDataDTO> _TypeAccountGroupQueryDataDTO_fields = {
  "beginBalance": (
    getter: (data) => data._beginBalance,
    setter: (data, value) => data._beginBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginBalance = parser(value);
    }
  ),
  "creditChange": (
    getter: (data) => data._creditChange,
    setter: (data, value) => data._creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._creditChange = parser(value);
    }
  ),
  "debitChange": (
    getter: (data) => data._debitChange,
    setter: (data, value) => data._debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._debitChange = parser(value);
    }
  ),
  "endBalance": (
    getter: (data) => data._endBalance,
    setter: (data, value) => data._endBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endBalance = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isCategory": (
    getter: (data) => data._isCategory,
    setter: (data, value) => data._isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCategory = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "treeLevel": (
    getter: (data) => data._treeLevel,
    setter: (data, value) => data._treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._treeLevel = parser(value);
    }
  ),
};

class TypeAccountGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAccountGroupQueryDataDTO({
    String? beginBalance,
    String? creditChange,
    String? debitChange,
    String? endBalance,
    int? id,
    int? isCategory,
    TypeEnumSoftEnableIsEnable? isEnabled,
    String? name,
    String? number,
    int? treeLevel
  }):
    _beginBalance = beginBalance,
    _creditChange = creditChange,
    _debitChange = debitChange,
    _endBalance = endBalance,
    _id = id,
    _isCategory = isCategory,
    _isEnabled = isEnabled,
    _name = name,
    _number = number,
    _treeLevel = treeLevel;

  static TypeAccountGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginBalance;

  String get beginBalance{
    return _beginBalance!;
  }

  String? getBeginBalance(){
    return _beginBalance;
  }

  set beginBalance(String data){
    _beginBalance = data;
  }

  void setBeginBalance(String? data){
    _beginBalance = data;
  }

  String? _creditChange;

  String get creditChange{
    return _creditChange!;
  }

  String? getCreditChange(){
    return _creditChange;
  }

  set creditChange(String data){
    _creditChange = data;
  }

  void setCreditChange(String? data){
    _creditChange = data;
  }

  String? _debitChange;

  String get debitChange{
    return _debitChange!;
  }

  String? getDebitChange(){
    return _debitChange;
  }

  set debitChange(String data){
    _debitChange = data;
  }

  void setDebitChange(String? data){
    _debitChange = data;
  }

  String? _endBalance;

  String get endBalance{
    return _endBalance!;
  }

  String? getEndBalance(){
    return _endBalance;
  }

  set endBalance(String data){
    _endBalance = data;
  }

  void setEndBalance(String? data){
    _endBalance = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _isCategory;

  int get isCategory{
    return _isCategory!;
  }

  int? getIsCategory(){
    return _isCategory;
  }

  set isCategory(int data){
    _isCategory = data;
  }

  void setIsCategory(int? data){
    _isCategory = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _treeLevel;

  int get treeLevel{
    return _treeLevel!;
  }

  int? getTreeLevel(){
    return _treeLevel;
  }

  set treeLevel(int data){
    _treeLevel = data;
  }

  void setTreeLevel(int? data){
    _treeLevel = data;
  }

}

class FTypeArapFlowQueryDTO extends IDataField {
  static const data = FTypeArapFlowQueryDTO('data');
  static const pageIndex = FTypeArapFlowQueryDTO('pageIndex');
  static const pageSize = FTypeArapFlowQueryDTO('pageSize');
  static const sum = FTypeArapFlowQueryDTO('sum');
  const FTypeArapFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQueryDTO> _TypeArapFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeArapFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeArapFlowQueryDataDTO>((single){
        final handler = TypeArapFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeArapFlowQueryDataDTO>((single){
        final handler = TypeArapFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeArapFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeArapFlowQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeArapFlowQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeArapFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQueryDTO({
    List<TypeArapFlowQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeArapFlowQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeArapFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeArapFlowQueryDataDTO>? _data;

  List<TypeArapFlowQueryDataDTO> get data{
    return _data!;
  }

  List<TypeArapFlowQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeArapFlowQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeArapFlowQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeArapFlowQuerySumDTO? _sum;

  TypeArapFlowQuerySumDTO get sum{
    return _sum!;
  }

  TypeArapFlowQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeArapFlowQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeArapFlowQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeArapFlowQueryDataDTO extends IDataField {
  static const adpChange = FTypeArapFlowQueryDataDTO('adpChange');
  static const adrChange = FTypeArapFlowQueryDataDTO('adrChange');
  static const apChange = FTypeArapFlowQueryDataDTO('apChange');
  static const arChange = FTypeArapFlowQueryDataDTO('arChange');
  static const id = FTypeArapFlowQueryDataDTO('id');
  static const orderContactId = FTypeArapFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeArapFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeArapFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeArapFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeArapFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeArapFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeArapFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeArapFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeArapFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeArapFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeArapFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeArapFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeArapFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeArapFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeArapFlowQueryDataDTO('orderState');
  static const orderType = FTypeArapFlowQueryDataDTO('orderType');
  static const previousAdpChange = FTypeArapFlowQueryDataDTO('previousAdpChange');
  static const previousAdrChange = FTypeArapFlowQueryDataDTO('previousAdrChange');
  static const previousApChange = FTypeArapFlowQueryDataDTO('previousApChange');
  static const previousArChange = FTypeArapFlowQueryDataDTO('previousArChange');
  static const remark = FTypeArapFlowQueryDataDTO('remark');
  const FTypeArapFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQueryDataDTO> _TypeArapFlowQueryDataDTO_fields = {
  "adpChange": (
    getter: (data) => data._adpChange,
    setter: (data, value) => data._adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpChange = parser(value);
    }
  ),
  "adrChange": (
    getter: (data) => data._adrChange,
    setter: (data, value) => data._adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrChange = parser(value);
    }
  ),
  "apChange": (
    getter: (data) => data._apChange,
    setter: (data, value) => data._apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apChange = parser(value);
    }
  ),
  "arChange": (
    getter: (data) => data._arChange,
    setter: (data, value) => data._arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arChange = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "previousAdpChange": (
    getter: (data) => data._previousAdpChange,
    setter: (data, value) => data._previousAdpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousAdpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousAdpChange = parser(value);
    }
  ),
  "previousAdrChange": (
    getter: (data) => data._previousAdrChange,
    setter: (data, value) => data._previousAdrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousAdrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousAdrChange = parser(value);
    }
  ),
  "previousApChange": (
    getter: (data) => data._previousApChange,
    setter: (data, value) => data._previousApChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousApChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousApChange = parser(value);
    }
  ),
  "previousArChange": (
    getter: (data) => data._previousArChange,
    setter: (data, value) => data._previousArChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousArChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousArChange = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
};

class TypeArapFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQueryDataDTO({
    String? adpChange,
    String? adrChange,
    String? apChange,
    String? arChange,
    int? id,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    TypeEnumOrderType? orderType,
    String? previousAdpChange,
    String? previousAdrChange,
    String? previousApChange,
    String? previousArChange,
    String? remark
  }):
    _adpChange = adpChange,
    _adrChange = adrChange,
    _apChange = apChange,
    _arChange = arChange,
    _id = id,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderType = orderType,
    _previousAdpChange = previousAdpChange,
    _previousAdrChange = previousAdrChange,
    _previousApChange = previousApChange,
    _previousArChange = previousArChange,
    _remark = remark;

  static TypeArapFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _adpChange;

  String get adpChange{
    return _adpChange!;
  }

  String? getAdpChange(){
    return _adpChange;
  }

  set adpChange(String data){
    _adpChange = data;
  }

  void setAdpChange(String? data){
    _adpChange = data;
  }

  String? _adrChange;

  String get adrChange{
    return _adrChange!;
  }

  String? getAdrChange(){
    return _adrChange;
  }

  set adrChange(String data){
    _adrChange = data;
  }

  void setAdrChange(String? data){
    _adrChange = data;
  }

  String? _apChange;

  String get apChange{
    return _apChange!;
  }

  String? getApChange(){
    return _apChange;
  }

  set apChange(String data){
    _apChange = data;
  }

  void setApChange(String? data){
    _apChange = data;
  }

  String? _arChange;

  String get arChange{
    return _arChange!;
  }

  String? getArChange(){
    return _arChange;
  }

  set arChange(String data){
    _arChange = data;
  }

  void setArChange(String? data){
    _arChange = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _previousAdpChange;

  String get previousAdpChange{
    return _previousAdpChange!;
  }

  String? getPreviousAdpChange(){
    return _previousAdpChange;
  }

  set previousAdpChange(String data){
    _previousAdpChange = data;
  }

  void setPreviousAdpChange(String? data){
    _previousAdpChange = data;
  }

  String? _previousAdrChange;

  String get previousAdrChange{
    return _previousAdrChange!;
  }

  String? getPreviousAdrChange(){
    return _previousAdrChange;
  }

  set previousAdrChange(String data){
    _previousAdrChange = data;
  }

  void setPreviousAdrChange(String? data){
    _previousAdrChange = data;
  }

  String? _previousApChange;

  String get previousApChange{
    return _previousApChange!;
  }

  String? getPreviousApChange(){
    return _previousApChange;
  }

  set previousApChange(String data){
    _previousApChange = data;
  }

  void setPreviousApChange(String? data){
    _previousApChange = data;
  }

  String? _previousArChange;

  String get previousArChange{
    return _previousArChange!;
  }

  String? getPreviousArChange(){
    return _previousArChange;
  }

  set previousArChange(String data){
    _previousArChange = data;
  }

  void setPreviousArChange(String? data){
    _previousArChange = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

}

class FTypeArapFlowQuerySumDTO extends IDataField {
  static const adpChange = FTypeArapFlowQuerySumDTO('adpChange');
  static const adrChange = FTypeArapFlowQuerySumDTO('adrChange');
  static const apChange = FTypeArapFlowQuerySumDTO('apChange');
  static const arChange = FTypeArapFlowQuerySumDTO('arChange');
  static const count = FTypeArapFlowQuerySumDTO('count');
  const FTypeArapFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQuerySumDTO> _TypeArapFlowQuerySumDTO_fields = {
  "adpChange": (
    getter: (data) => data._adpChange,
    setter: (data, value) => data._adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpChange = parser(value);
    }
  ),
  "adrChange": (
    getter: (data) => data._adrChange,
    setter: (data, value) => data._adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrChange = parser(value);
    }
  ),
  "apChange": (
    getter: (data) => data._apChange,
    setter: (data, value) => data._apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apChange = parser(value);
    }
  ),
  "arChange": (
    getter: (data) => data._arChange,
    setter: (data, value) => data._arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arChange = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
};

class TypeArapFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQuerySumDTO({
    String? adpChange,
    String? adrChange,
    String? apChange,
    String? arChange,
    int? count
  }):
    _adpChange = adpChange,
    _adrChange = adrChange,
    _apChange = apChange,
    _arChange = arChange,
    _count = count;

  static TypeArapFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _adpChange;

  String get adpChange{
    return _adpChange!;
  }

  String? getAdpChange(){
    return _adpChange;
  }

  set adpChange(String data){
    _adpChange = data;
  }

  void setAdpChange(String? data){
    _adpChange = data;
  }

  String? _adrChange;

  String get adrChange{
    return _adrChange!;
  }

  String? getAdrChange(){
    return _adrChange;
  }

  set adrChange(String data){
    _adrChange = data;
  }

  void setAdrChange(String? data){
    _adrChange = data;
  }

  String? _apChange;

  String get apChange{
    return _apChange!;
  }

  String? getApChange(){
    return _apChange;
  }

  set apChange(String data){
    _apChange = data;
  }

  void setApChange(String? data){
    _apChange = data;
  }

  String? _arChange;

  String get arChange{
    return _arChange!;
  }

  String? getArChange(){
    return _arChange;
  }

  set arChange(String data){
    _arChange = data;
  }

  void setArChange(String? data){
    _arChange = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

}

class FTypeAssembleTemplate extends IDataField {
  static const createTime = FTypeAssembleTemplate('createTime');
  static const id = FTypeAssembleTemplate('id');
  static const isEnabled = FTypeAssembleTemplate('isEnabled');
  static const itemId = FTypeAssembleTemplate('itemId');
  static const itemInfo = FTypeAssembleTemplate('itemInfo');
  static const items = FTypeAssembleTemplate('items');
  static const modifyTime = FTypeAssembleTemplate('modifyTime');
  static const name = FTypeAssembleTemplate('name');
  static const number = FTypeAssembleTemplate('number');
  static const remark = FTypeAssembleTemplate('remark');
  static const unitId = FTypeAssembleTemplate('unitId');
  static const unitInfo = FTypeAssembleTemplate('unitInfo');
  const FTypeAssembleTemplate(super.key);
}

final FieldReflectInfo<TypeAssembleTemplate> _TypeAssembleTemplate_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemInfo": (
    getter: (data) => data._itemInfo,
    setter: (data, value) => data._itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data._itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data._itemInfo = parser(value);
    }
  ),
  "items": (
    getter: (data) => data._items,
    setter: (data, value) => data._items = value as List<TypeAssembleTemplateItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAssembleTemplateItem>((single){
        final handler = TypeAssembleTemplateItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAssembleTemplateItem>((single){
        final handler = TypeAssembleTemplateItem.fromDynamic;
        return handler(single)!;
      });
      data._items = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitInfo": (
    getter: (data) => data._unitInfo,
    setter: (data, value) => data._unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._unitInfo = parser(value);
    }
  ),
};

class TypeAssembleTemplate extends IDataBasic implements IDataDynamic {
  TypeAssembleTemplate({
    String? createTime,
    int? id,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? itemId,
    TypeItem? itemInfo,
    List<TypeAssembleTemplateItem>? items,
    String? modifyTime,
    String? name,
    String? number,
    String? remark,
    int? unitId,
    TypeUnit? unitInfo
  }):
    _createTime = createTime,
    _id = id,
    _isEnabled = isEnabled,
    _itemId = itemId,
    _itemInfo = itemInfo,
    _items = items,
    _modifyTime = modifyTime,
    _name = name,
    _number = number,
    _remark = remark,
    _unitId = unitId,
    _unitInfo = unitInfo;

  static TypeAssembleTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAssembleTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAssembleTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAssembleTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAssembleTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  TypeItem? _itemInfo;

  TypeItem get itemInfo{
    return _itemInfo!;
  }

  TypeItem? getItemInfo(){
    return _itemInfo;
  }

  set itemInfo(TypeItem data){
    _itemInfo = data;
  }

  void setItemInfo(TypeItem? data){
    _itemInfo = data;
  }

  List<TypeAssembleTemplateItem>? _items;

  List<TypeAssembleTemplateItem> get items{
    return _items!;
  }

  List<TypeAssembleTemplateItem>? getItems(){
    return _items;
  }

  set items(List<TypeAssembleTemplateItem> data){
    _items = data;
  }

  void setItems(List<TypeAssembleTemplateItem>? data){
    _items = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  TypeUnit? _unitInfo;

  TypeUnit get unitInfo{
    return _unitInfo!;
  }

  TypeUnit? getUnitInfo(){
    return _unitInfo;
  }

  set unitInfo(TypeUnit data){
    _unitInfo = data;
  }

  void setUnitInfo(TypeUnit? data){
    _unitInfo = data;
  }

}

class FTypeAssembleTemplateItem extends IDataField {
  static const amount = FTypeAssembleTemplateItem('amount');
  static const itemId = FTypeAssembleTemplateItem('itemId');
  static const itemInfo = FTypeAssembleTemplateItem('itemInfo');
  static const unitId = FTypeAssembleTemplateItem('unitId');
  static const unitInfo = FTypeAssembleTemplateItem('unitInfo');
  const FTypeAssembleTemplateItem(super.key);
}

final FieldReflectInfo<TypeAssembleTemplateItem> _TypeAssembleTemplateItem_fields = {
  "amount": (
    getter: (data) => data._amount,
    setter: (data, value) => data._amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._amount = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemInfo": (
    getter: (data) => data._itemInfo,
    setter: (data, value) => data._itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data._itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data._itemInfo = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitInfo": (
    getter: (data) => data._unitInfo,
    setter: (data, value) => data._unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._unitInfo = parser(value);
    }
  ),
};

class TypeAssembleTemplateItem extends IDataBasic implements IDataDynamic {
  TypeAssembleTemplateItem({
    String? amount,
    int? itemId,
    TypeItem? itemInfo,
    int? unitId,
    TypeUnit? unitInfo
  }):
    _amount = amount,
    _itemId = itemId,
    _itemInfo = itemInfo,
    _unitId = unitId,
    _unitInfo = unitInfo;

  static TypeAssembleTemplateItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAssembleTemplateItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAssembleTemplateItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAssembleTemplateItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAssembleTemplateItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAssembleTemplateItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAssembleTemplateItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAssembleTemplateItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _amount;

  String get amount{
    return _amount!;
  }

  String? getAmount(){
    return _amount;
  }

  set amount(String data){
    _amount = data;
  }

  void setAmount(String? data){
    _amount = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  TypeItem? _itemInfo;

  TypeItem get itemInfo{
    return _itemInfo!;
  }

  TypeItem? getItemInfo(){
    return _itemInfo;
  }

  set itemInfo(TypeItem data){
    _itemInfo = data;
  }

  void setItemInfo(TypeItem? data){
    _itemInfo = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  TypeUnit? _unitInfo;

  TypeUnit get unitInfo{
    return _unitInfo!;
  }

  TypeUnit? getUnitInfo(){
    return _unitInfo;
  }

  set unitInfo(TypeUnit data){
    _unitInfo = data;
  }

  void setUnitInfo(TypeUnit? data){
    _unitInfo = data;
  }

}

class FTypeAttachment extends IDataField {
  static const createEmployeeId = FTypeAttachment('createEmployeeId');
  static const createEmployeeName = FTypeAttachment('createEmployeeName');
  static const createTime = FTypeAttachment('createTime');
  static const id = FTypeAttachment('id');
  static const insertUniqueId = FTypeAttachment('insertUniqueId');
  static const isFromOrder = FTypeAttachment('isFromOrder');
  static const modifyTime = FTypeAttachment('modifyTime');
  static const name = FTypeAttachment('name');
  static const orderId = FTypeAttachment('orderId');
  static const remark = FTypeAttachment('remark');
  static const showFileKey = FTypeAttachment('showFileKey');
  static const size = FTypeAttachment('size');
  const FTypeAttachment(super.key);
}

final FieldReflectInfo<TypeAttachment> _TypeAttachment_fields = {
  "createEmployeeId": (
    getter: (data) => data._createEmployeeId,
    setter: (data, value) => data._createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._createEmployeeId = parser(value);
    }
  ),
  "createEmployeeName": (
    getter: (data) => data._createEmployeeName,
    setter: (data, value) => data._createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createEmployeeName = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "insertUniqueId": (
    getter: (data) => data._insertUniqueId,
    setter: (data, value) => data._insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._insertUniqueId = parser(value);
    }
  ),
  "isFromOrder": (
    getter: (data) => data._isFromOrder,
    setter: (data, value) => data._isFromOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isFromOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isFromOrder = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "showFileKey": (
    getter: (data) => data._showFileKey,
    setter: (data, value) => data._showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showFileKey = parser(value);
    }
  ),
  "size": (
    getter: (data) => data._size,
    setter: (data, value) => data._size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._size = parser(value);
    }
  ),
};

class TypeAttachment extends IDataBasic implements IDataDynamic {
  TypeAttachment({
    int? createEmployeeId,
    String? createEmployeeName,
    String? createTime,
    int? id,
    int? insertUniqueId,
    int? isFromOrder,
    String? modifyTime,
    String? name,
    int? orderId,
    String? remark,
    String? showFileKey,
    int? size
  }):
    _createEmployeeId = createEmployeeId,
    _createEmployeeName = createEmployeeName,
    _createTime = createTime,
    _id = id,
    _insertUniqueId = insertUniqueId,
    _isFromOrder = isFromOrder,
    _modifyTime = modifyTime,
    _name = name,
    _orderId = orderId,
    _remark = remark,
    _showFileKey = showFileKey,
    _size = size;

  static TypeAttachment? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachment();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachment_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachment: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachment? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachment_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachment_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachment_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _createEmployeeId;

  int get createEmployeeId{
    return _createEmployeeId!;
  }

  int? getCreateEmployeeId(){
    return _createEmployeeId;
  }

  set createEmployeeId(int data){
    _createEmployeeId = data;
  }

  void setCreateEmployeeId(int? data){
    _createEmployeeId = data;
  }

  String? _createEmployeeName;

  String get createEmployeeName{
    return _createEmployeeName!;
  }

  String? getCreateEmployeeName(){
    return _createEmployeeName;
  }

  set createEmployeeName(String data){
    _createEmployeeName = data;
  }

  void setCreateEmployeeName(String? data){
    _createEmployeeName = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _insertUniqueId;

  int get insertUniqueId{
    return _insertUniqueId!;
  }

  int? getInsertUniqueId(){
    return _insertUniqueId;
  }

  set insertUniqueId(int data){
    _insertUniqueId = data;
  }

  void setInsertUniqueId(int? data){
    _insertUniqueId = data;
  }

  int? _isFromOrder;

  int get isFromOrder{
    return _isFromOrder!;
  }

  int? getIsFromOrder(){
    return _isFromOrder;
  }

  set isFromOrder(int data){
    _isFromOrder = data;
  }

  void setIsFromOrder(int? data){
    _isFromOrder = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _showFileKey;

  String get showFileKey{
    return _showFileKey!;
  }

  String? getShowFileKey(){
    return _showFileKey;
  }

  set showFileKey(String data){
    _showFileKey = data;
  }

  void setShowFileKey(String? data){
    _showFileKey = data;
  }

  int? _size;

  int get size{
    return _size!;
  }

  int? getSize(){
    return _size;
  }

  set size(int data){
    _size = data;
  }

  void setSize(int? data){
    _size = data;
  }

}

class FTypeAttachmentQueryDTO extends IDataField {
  static const data = FTypeAttachmentQueryDTO('data');
  static const pageIndex = FTypeAttachmentQueryDTO('pageIndex');
  static const pageSize = FTypeAttachmentQueryDTO('pageSize');
  static const sum = FTypeAttachmentQueryDTO('sum');
  const FTypeAttachmentQueryDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQueryDTO> _TypeAttachmentQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAttachmentQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAttachmentQueryDataDTO>((single){
        final handler = TypeAttachmentQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAttachmentQueryDataDTO>((single){
        final handler = TypeAttachmentQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeAttachmentQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeAttachmentQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAttachmentQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeAttachmentQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQueryDTO({
    List<TypeAttachmentQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeAttachmentQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeAttachmentQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeAttachmentQueryDataDTO>? _data;

  List<TypeAttachmentQueryDataDTO> get data{
    return _data!;
  }

  List<TypeAttachmentQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeAttachmentQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeAttachmentQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeAttachmentQuerySumDTO? _sum;

  TypeAttachmentQuerySumDTO get sum{
    return _sum!;
  }

  TypeAttachmentQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeAttachmentQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeAttachmentQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeAttachmentQueryDataDTO extends IDataField {
  static const createEmployeeId = FTypeAttachmentQueryDataDTO('createEmployeeId');
  static const createEmployeeName = FTypeAttachmentQueryDataDTO('createEmployeeName');
  static const createTime = FTypeAttachmentQueryDataDTO('createTime');
  static const id = FTypeAttachmentQueryDataDTO('id');
  static const insertUniqueId = FTypeAttachmentQueryDataDTO('insertUniqueId');
  static const name = FTypeAttachmentQueryDataDTO('name');
  static const orderId = FTypeAttachmentQueryDataDTO('orderId');
  static const orderNumber = FTypeAttachmentQueryDataDTO('orderNumber');
  static const orderType = FTypeAttachmentQueryDataDTO('orderType');
  static const remark = FTypeAttachmentQueryDataDTO('remark');
  static const showFileKey = FTypeAttachmentQueryDataDTO('showFileKey');
  static const size = FTypeAttachmentQueryDataDTO('size');
  const FTypeAttachmentQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQueryDataDTO> _TypeAttachmentQueryDataDTO_fields = {
  "createEmployeeId": (
    getter: (data) => data._createEmployeeId,
    setter: (data, value) => data._createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._createEmployeeId = parser(value);
    }
  ),
  "createEmployeeName": (
    getter: (data) => data._createEmployeeName,
    setter: (data, value) => data._createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createEmployeeName = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "insertUniqueId": (
    getter: (data) => data._insertUniqueId,
    setter: (data, value) => data._insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._insertUniqueId = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "showFileKey": (
    getter: (data) => data._showFileKey,
    setter: (data, value) => data._showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showFileKey = parser(value);
    }
  ),
  "size": (
    getter: (data) => data._size,
    setter: (data, value) => data._size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._size = parser(value);
    }
  ),
};

class TypeAttachmentQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQueryDataDTO({
    int? createEmployeeId,
    String? createEmployeeName,
    String? createTime,
    int? id,
    int? insertUniqueId,
    String? name,
    int? orderId,
    String? orderNumber,
    TypeEnumOrderType? orderType,
    String? remark,
    String? showFileKey,
    int? size
  }):
    _createEmployeeId = createEmployeeId,
    _createEmployeeName = createEmployeeName,
    _createTime = createTime,
    _id = id,
    _insertUniqueId = insertUniqueId,
    _name = name,
    _orderId = orderId,
    _orderNumber = orderNumber,
    _orderType = orderType,
    _remark = remark,
    _showFileKey = showFileKey,
    _size = size;

  static TypeAttachmentQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _createEmployeeId;

  int get createEmployeeId{
    return _createEmployeeId!;
  }

  int? getCreateEmployeeId(){
    return _createEmployeeId;
  }

  set createEmployeeId(int data){
    _createEmployeeId = data;
  }

  void setCreateEmployeeId(int? data){
    _createEmployeeId = data;
  }

  String? _createEmployeeName;

  String get createEmployeeName{
    return _createEmployeeName!;
  }

  String? getCreateEmployeeName(){
    return _createEmployeeName;
  }

  set createEmployeeName(String data){
    _createEmployeeName = data;
  }

  void setCreateEmployeeName(String? data){
    _createEmployeeName = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _insertUniqueId;

  int get insertUniqueId{
    return _insertUniqueId!;
  }

  int? getInsertUniqueId(){
    return _insertUniqueId;
  }

  set insertUniqueId(int data){
    _insertUniqueId = data;
  }

  void setInsertUniqueId(int? data){
    _insertUniqueId = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _showFileKey;

  String get showFileKey{
    return _showFileKey!;
  }

  String? getShowFileKey(){
    return _showFileKey;
  }

  set showFileKey(String data){
    _showFileKey = data;
  }

  void setShowFileKey(String? data){
    _showFileKey = data;
  }

  int? _size;

  int get size{
    return _size!;
  }

  int? getSize(){
    return _size;
  }

  set size(int data){
    _size = data;
  }

  void setSize(int? data){
    _size = data;
  }

}

class FTypeAttachmentQuerySumDTO extends IDataField {
  static const count = FTypeAttachmentQuerySumDTO('count');
  static const size = FTypeAttachmentQuerySumDTO('size');
  const FTypeAttachmentQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQuerySumDTO> _TypeAttachmentQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "size": (
    getter: (data) => data._size,
    setter: (data, value) => data._size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._size = parser(value);
    }
  ),
};

class TypeAttachmentQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQuerySumDTO({
    int? count,
    int? size
  }):
    _count = count,
    _size = size;

  static TypeAttachmentQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  int? _size;

  int get size{
    return _size!;
  }

  int? getSize(){
    return _size;
  }

  set size(int data){
    _size = data;
  }

  void setSize(int? data){
    _size = data;
  }

}

class FTypeAutoInjectLiteItemUnitConvert extends IDataField {
  static const id = FTypeAutoInjectLiteItemUnitConvert('id');
  static const isBasic = FTypeAutoInjectLiteItemUnitConvert('isBasic');
  static const isCommon = FTypeAutoInjectLiteItemUnitConvert('isCommon');
  static const isEnabled = FTypeAutoInjectLiteItemUnitConvert('isEnabled');
  static const unitConvert = FTypeAutoInjectLiteItemUnitConvert('unitConvert');
  static const unitConvertDesc = FTypeAutoInjectLiteItemUnitConvert('unitConvertDesc');
  static const unitId = FTypeAutoInjectLiteItemUnitConvert('unitId');
  static const unitName = FTypeAutoInjectLiteItemUnitConvert('unitName');
  static const wholeSalesPrice = FTypeAutoInjectLiteItemUnitConvert('wholeSalesPrice');
  const FTypeAutoInjectLiteItemUnitConvert(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteItemUnitConvert> _TypeAutoInjectLiteItemUnitConvert_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isBasic": (
    getter: (data) => data._isBasic,
    setter: (data, value) => data._isBasic = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isBasic);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isBasic = parser(value);
    }
  ),
  "isCommon": (
    getter: (data) => data._isCommon,
    setter: (data, value) => data._isCommon = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCommon);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCommon = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "unitConvert": (
    getter: (data) => data._unitConvert,
    setter: (data, value) => data._unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvert = parser(value);
    }
  ),
  "unitConvertDesc": (
    getter: (data) => data._unitConvertDesc,
    setter: (data, value) => data._unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertDesc = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitName": (
    getter: (data) => data._unitName,
    setter: (data, value) => data._unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitName = parser(value);
    }
  ),
  "wholeSalesPrice": (
    getter: (data) => data._wholeSalesPrice,
    setter: (data, value) => data._wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._wholeSalesPrice = parser(value);
    }
  ),
};

class TypeAutoInjectLiteItemUnitConvert extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteItemUnitConvert({
    String? id,
    int? isBasic,
    int? isCommon,
    TypeEnumSoftEnableIsEnable? isEnabled,
    String? unitConvert,
    String? unitConvertDesc,
    int? unitId,
    String? unitName,
    String? wholeSalesPrice
  }):
    _id = id,
    _isBasic = isBasic,
    _isCommon = isCommon,
    _isEnabled = isEnabled,
    _unitConvert = unitConvert,
    _unitConvertDesc = unitConvertDesc,
    _unitId = unitId,
    _unitName = unitName,
    _wholeSalesPrice = wholeSalesPrice;

  static TypeAutoInjectLiteItemUnitConvert? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteItemUnitConvert();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteItemUnitConvert: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteItemUnitConvert_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _isBasic;

  int get isBasic{
    return _isBasic!;
  }

  int? getIsBasic(){
    return _isBasic;
  }

  set isBasic(int data){
    _isBasic = data;
  }

  void setIsBasic(int? data){
    _isBasic = data;
  }

  int? _isCommon;

  int get isCommon{
    return _isCommon!;
  }

  int? getIsCommon(){
    return _isCommon;
  }

  set isCommon(int data){
    _isCommon = data;
  }

  void setIsCommon(int? data){
    _isCommon = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  String? _unitConvert;

  String get unitConvert{
    return _unitConvert!;
  }

  String? getUnitConvert(){
    return _unitConvert;
  }

  set unitConvert(String data){
    _unitConvert = data;
  }

  void setUnitConvert(String? data){
    _unitConvert = data;
  }

  String? _unitConvertDesc;

  String get unitConvertDesc{
    return _unitConvertDesc!;
  }

  String? getUnitConvertDesc(){
    return _unitConvertDesc;
  }

  set unitConvertDesc(String data){
    _unitConvertDesc = data;
  }

  void setUnitConvertDesc(String? data){
    _unitConvertDesc = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  String? _unitName;

  String get unitName{
    return _unitName!;
  }

  String? getUnitName(){
    return _unitName;
  }

  set unitName(String data){
    _unitName = data;
  }

  void setUnitName(String? data){
    _unitName = data;
  }

  String? _wholeSalesPrice;

  String get wholeSalesPrice{
    return _wholeSalesPrice!;
  }

  String? getWholeSalesPrice(){
    return _wholeSalesPrice;
  }

  set wholeSalesPrice(String data){
    _wholeSalesPrice = data;
  }

  void setWholeSalesPrice(String? data){
    _wholeSalesPrice = data;
  }

}

class FTypeAutoInjectLiteOrder extends IDataField {
  static const billTotal = FTypeAutoInjectLiteOrder('billTotal');
  static const billType = FTypeAutoInjectLiteOrder('billType');
  static const contactId = FTypeAutoInjectLiteOrder('contactId');
  static const contactName = FTypeAutoInjectLiteOrder('contactName');
  static const costTotal = FTypeAutoInjectLiteOrder('costTotal');
  static const discountTotal = FTypeAutoInjectLiteOrder('discountTotal');
  static const doneBillTotal = FTypeAutoInjectLiteOrder('doneBillTotal');
  static const feeTotal = FTypeAutoInjectLiteOrder('feeTotal');
  static const hasFinishBill = FTypeAutoInjectLiteOrder('hasFinishBill');
  static const id = FTypeAutoInjectLiteOrder('id');
  static const number = FTypeAutoInjectLiteOrder('number');
  static const orderDate = FTypeAutoInjectLiteOrder('orderDate');
  static const preTaxTotal = FTypeAutoInjectLiteOrder('preTaxTotal');
  static const profitRate = FTypeAutoInjectLiteOrder('profitRate');
  static const profitTotal = FTypeAutoInjectLiteOrder('profitTotal');
  static const redState = FTypeAutoInjectLiteOrder('redState');
  static const state = FTypeAutoInjectLiteOrder('state');
  static const storeId = FTypeAutoInjectLiteOrder('storeId');
  static const storeName = FTypeAutoInjectLiteOrder('storeName');
  static const subType = FTypeAutoInjectLiteOrder('subType');
  static const tax = FTypeAutoInjectLiteOrder('tax');
  static const taxOnlyTotal = FTypeAutoInjectLiteOrder('taxOnlyTotal');
  static const total = FTypeAutoInjectLiteOrder('total');
  static const totalAmount = FTypeAutoInjectLiteOrder('totalAmount');
  static const type = FTypeAutoInjectLiteOrder('type');
  static const undoneBillTotal = FTypeAutoInjectLiteOrder('undoneBillTotal');
  const FTypeAutoInjectLiteOrder(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteOrder> _TypeAutoInjectLiteOrder_fields = {
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "billType": (
    getter: (data) => data._billType,
    setter: (data, value) => data._billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data._billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data._billType = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "feeTotal": (
    getter: (data) => data._feeTotal,
    setter: (data, value) => data._feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeTotal = parser(value);
    }
  ),
  "hasFinishBill": (
    getter: (data) => data._hasFinishBill,
    setter: (data, value) => data._hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasFinishBill = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "redState": (
    getter: (data) => data._redState,
    setter: (data, value) => data._redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._redState = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "subType": (
    getter: (data) => data._subType,
    setter: (data, value) => data._subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data._subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data._subType = parser(value);
    }
  ),
  "tax": (
    getter: (data) => data._tax,
    setter: (data, value) => data._tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._tax = parser(value);
    }
  ),
  "taxOnlyTotal": (
    getter: (data) => data._taxOnlyTotal,
    setter: (data, value) => data._taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxOnlyTotal = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "totalAmount": (
    getter: (data) => data._totalAmount,
    setter: (data, value) => data._totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalAmount = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._type = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
};

class TypeAutoInjectLiteOrder extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteOrder({
    String? billTotal,
    TypeEnumOrderBillType? billType,
    int? contactId,
    String? contactName,
    String? costTotal,
    String? discountTotal,
    String? doneBillTotal,
    String? feeTotal,
    int? hasFinishBill,
    int? id,
    String? number,
    String? orderDate,
    String? preTaxTotal,
    String? profitRate,
    String? profitTotal,
    TypeEnumOrderRedState? redState,
    TypeEnumOrderState? state,
    int? storeId,
    String? storeName,
    TypeEnumOrderSubType? subType,
    String? tax,
    String? taxOnlyTotal,
    String? total,
    String? totalAmount,
    TypeEnumOrderType? type,
    String? undoneBillTotal
  }):
    _billTotal = billTotal,
    _billType = billType,
    _contactId = contactId,
    _contactName = contactName,
    _costTotal = costTotal,
    _discountTotal = discountTotal,
    _doneBillTotal = doneBillTotal,
    _feeTotal = feeTotal,
    _hasFinishBill = hasFinishBill,
    _id = id,
    _number = number,
    _orderDate = orderDate,
    _preTaxTotal = preTaxTotal,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _redState = redState,
    _state = state,
    _storeId = storeId,
    _storeName = storeName,
    _subType = subType,
    _tax = tax,
    _taxOnlyTotal = taxOnlyTotal,
    _total = total,
    _totalAmount = totalAmount,
    _type = type,
    _undoneBillTotal = undoneBillTotal;

  static TypeAutoInjectLiteOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  TypeEnumOrderBillType? _billType;

  TypeEnumOrderBillType get billType{
    return _billType!;
  }

  TypeEnumOrderBillType? getBillType(){
    return _billType;
  }

  set billType(TypeEnumOrderBillType data){
    _billType = data;
  }

  void setBillType(TypeEnumOrderBillType? data){
    _billType = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _feeTotal;

  String get feeTotal{
    return _feeTotal!;
  }

  String? getFeeTotal(){
    return _feeTotal;
  }

  set feeTotal(String data){
    _feeTotal = data;
  }

  void setFeeTotal(String? data){
    _feeTotal = data;
  }

  int? _hasFinishBill;

  int get hasFinishBill{
    return _hasFinishBill!;
  }

  int? getHasFinishBill(){
    return _hasFinishBill;
  }

  set hasFinishBill(int data){
    _hasFinishBill = data;
  }

  void setHasFinishBill(int? data){
    _hasFinishBill = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  TypeEnumOrderRedState? _redState;

  TypeEnumOrderRedState get redState{
    return _redState!;
  }

  TypeEnumOrderRedState? getRedState(){
    return _redState;
  }

  set redState(TypeEnumOrderRedState data){
    _redState = data;
  }

  void setRedState(TypeEnumOrderRedState? data){
    _redState = data;
  }

  TypeEnumOrderState? _state;

  TypeEnumOrderState get state{
    return _state!;
  }

  TypeEnumOrderState? getState(){
    return _state;
  }

  set state(TypeEnumOrderState data){
    _state = data;
  }

  void setState(TypeEnumOrderState? data){
    _state = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  TypeEnumOrderSubType? _subType;

  TypeEnumOrderSubType get subType{
    return _subType!;
  }

  TypeEnumOrderSubType? getSubType(){
    return _subType;
  }

  set subType(TypeEnumOrderSubType data){
    _subType = data;
  }

  void setSubType(TypeEnumOrderSubType? data){
    _subType = data;
  }

  String? _tax;

  String get tax{
    return _tax!;
  }

  String? getTax(){
    return _tax;
  }

  set tax(String data){
    _tax = data;
  }

  void setTax(String? data){
    _tax = data;
  }

  String? _taxOnlyTotal;

  String get taxOnlyTotal{
    return _taxOnlyTotal!;
  }

  String? getTaxOnlyTotal(){
    return _taxOnlyTotal;
  }

  set taxOnlyTotal(String data){
    _taxOnlyTotal = data;
  }

  void setTaxOnlyTotal(String? data){
    _taxOnlyTotal = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _totalAmount;

  String get totalAmount{
    return _totalAmount!;
  }

  String? getTotalAmount(){
    return _totalAmount;
  }

  set totalAmount(String data){
    _totalAmount = data;
  }

  void setTotalAmount(String? data){
    _totalAmount = data;
  }

  TypeEnumOrderType? _type;

  TypeEnumOrderType get type{
    return _type!;
  }

  TypeEnumOrderType? getType(){
    return _type;
  }

  set type(TypeEnumOrderType data){
    _type = data;
  }

  void setType(TypeEnumOrderType? data){
    _type = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

}

class FTypeAutoInjectLiteUnit extends IDataField {
  static const id = FTypeAutoInjectLiteUnit('id');
  static const name = FTypeAutoInjectLiteUnit('name');
  const FTypeAutoInjectLiteUnit(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteUnit> _TypeAutoInjectLiteUnit_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
};

class TypeAutoInjectLiteUnit extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteUnit({
    int? id,
    String? name
  }):
    _id = id,
    _name = name;

  static TypeAutoInjectLiteUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

}

class FTypeBackendTask extends IDataField {
  static const allCount = FTypeBackendTask('allCount');
  static const createTime = FTypeBackendTask('createTime');
  static const description = FTypeBackendTask('description');
  static const failCount = FTypeBackendTask('failCount');
  static const finishCount = FTypeBackendTask('finishCount');
  static const id = FTypeBackendTask('id');
  static const modifyTime = FTypeBackendTask('modifyTime');
  static const msg = FTypeBackendTask('msg');
  static const state = FTypeBackendTask('state');
  static const subType = FTypeBackendTask('subType');
  static const type = FTypeBackendTask('type');
  const FTypeBackendTask(super.key);
}

final FieldReflectInfo<TypeBackendTask> _TypeBackendTask_fields = {
  "allCount": (
    getter: (data) => data._allCount,
    setter: (data, value) => data._allCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._allCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._allCount = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "description": (
    getter: (data) => data._description,
    setter: (data, value) => data._description = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._description);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._description = parser(value);
    }
  ),
  "failCount": (
    getter: (data) => data._failCount,
    setter: (data, value) => data._failCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._failCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._failCount = parser(value);
    }
  ),
  "finishCount": (
    getter: (data) => data._finishCount,
    setter: (data, value) => data._finishCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._finishCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._finishCount = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "msg": (
    getter: (data) => data._msg,
    setter: (data, value) => data._msg = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._msg);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._msg = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumBackendTaskState?,
    toDynamic: (data) {
      final formatter = TypeEnumBackendTaskState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumBackendTaskState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "subType": (
    getter: (data) => data._subType,
    setter: (data, value) => data._subType = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subType);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subType = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumBackendTaskType?,
    toDynamic: (data) {
      final formatter = TypeEnumBackendTaskType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumBackendTaskType.fromDynamic;
      data._type = parser(value);
    }
  ),
};

class TypeBackendTask extends IDataBasic implements IDataDynamic {
  TypeBackendTask({
    int? allCount,
    String? createTime,
    String? description,
    int? failCount,
    int? finishCount,
    int? id,
    String? modifyTime,
    String? msg,
    TypeEnumBackendTaskState? state,
    String? subType,
    TypeEnumBackendTaskType? type
  }):
    _allCount = allCount,
    _createTime = createTime,
    _description = description,
    _failCount = failCount,
    _finishCount = finishCount,
    _id = id,
    _modifyTime = modifyTime,
    _msg = msg,
    _state = state,
    _subType = subType,
    _type = type;

  static TypeBackendTask? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeBackendTask();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeBackendTask_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeBackendTask: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeBackendTask? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeBackendTask_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeBackendTask_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeBackendTask_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _allCount;

  int get allCount{
    return _allCount!;
  }

  int? getAllCount(){
    return _allCount;
  }

  set allCount(int data){
    _allCount = data;
  }

  void setAllCount(int? data){
    _allCount = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _description;

  String get description{
    return _description!;
  }

  String? getDescription(){
    return _description;
  }

  set description(String data){
    _description = data;
  }

  void setDescription(String? data){
    _description = data;
  }

  int? _failCount;

  int get failCount{
    return _failCount!;
  }

  int? getFailCount(){
    return _failCount;
  }

  set failCount(int data){
    _failCount = data;
  }

  void setFailCount(int? data){
    _failCount = data;
  }

  int? _finishCount;

  int get finishCount{
    return _finishCount!;
  }

  int? getFinishCount(){
    return _finishCount;
  }

  set finishCount(int data){
    _finishCount = data;
  }

  void setFinishCount(int? data){
    _finishCount = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _msg;

  String get msg{
    return _msg!;
  }

  String? getMsg(){
    return _msg;
  }

  set msg(String data){
    _msg = data;
  }

  void setMsg(String? data){
    _msg = data;
  }

  TypeEnumBackendTaskState? _state;

  TypeEnumBackendTaskState get state{
    return _state!;
  }

  TypeEnumBackendTaskState? getState(){
    return _state;
  }

  set state(TypeEnumBackendTaskState data){
    _state = data;
  }

  void setState(TypeEnumBackendTaskState? data){
    _state = data;
  }

  String? _subType;

  String get subType{
    return _subType!;
  }

  String? getSubType(){
    return _subType;
  }

  set subType(String data){
    _subType = data;
  }

  void setSubType(String? data){
    _subType = data;
  }

  TypeEnumBackendTaskType? _type;

  TypeEnumBackendTaskType get type{
    return _type!;
  }

  TypeEnumBackendTaskType? getType(){
    return _type;
  }

  set type(TypeEnumBackendTaskType data){
    _type = data;
  }

  void setType(TypeEnumBackendTaskType? data){
    _type = data;
  }

}

class FTypeColumnConstraintItem extends IDataField {
  static const columnAliasName = FTypeColumnConstraintItem('columnAliasName');
  static const columnConstraintId = FTypeColumnConstraintItem('columnConstraintId');
  static const columnId = FTypeColumnConstraintItem('columnId');
  static const columnIsEditable = FTypeColumnConstraintItem('columnIsEditable');
  static const columnIsRequired = FTypeColumnConstraintItem('columnIsRequired');
  static const columnShowType = FTypeColumnConstraintItem('columnShowType');
  static const createTime = FTypeColumnConstraintItem('createTime');
  static const id = FTypeColumnConstraintItem('id');
  static const modifyTime = FTypeColumnConstraintItem('modifyTime');
  static const positionId = FTypeColumnConstraintItem('positionId');
  static const sceneId = FTypeColumnConstraintItem('sceneId');
  const FTypeColumnConstraintItem(super.key);
}

final FieldReflectInfo<TypeColumnConstraintItem> _TypeColumnConstraintItem_fields = {
  "columnAliasName": (
    getter: (data) => data._columnAliasName,
    setter: (data, value) => data._columnAliasName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnAliasName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnAliasName = parser(value);
    }
  ),
  "columnConstraintId": (
    getter: (data) => data._columnConstraintId,
    setter: (data, value) => data._columnConstraintId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnConstraintId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnConstraintId = parser(value);
    }
  ),
  "columnId": (
    getter: (data) => data._columnId,
    setter: (data, value) => data._columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnId = parser(value);
    }
  ),
  "columnIsEditable": (
    getter: (data) => data._columnIsEditable,
    setter: (data, value) => data._columnIsEditable = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._columnIsEditable);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._columnIsEditable = parser(value);
    }
  ),
  "columnIsRequired": (
    getter: (data) => data._columnIsRequired,
    setter: (data, value) => data._columnIsRequired = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._columnIsRequired);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._columnIsRequired = parser(value);
    }
  ),
  "columnShowType": (
    getter: (data) => data._columnShowType,
    setter: (data, value) => data._columnShowType = value as TypeEnumColumnShowType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnShowType.toDynamic;
      return formatter(data._columnShowType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnShowType.fromDynamic;
      data._columnShowType = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "positionId": (
    getter: (data) => data._positionId,
    setter: (data, value) => data._positionId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._positionId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._positionId = parser(value);
    }
  ),
  "sceneId": (
    getter: (data) => data._sceneId,
    setter: (data, value) => data._sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sceneId = parser(value);
    }
  ),
};

class TypeColumnConstraintItem extends IDataBasic implements IDataDynamic {
  TypeColumnConstraintItem({
    String? columnAliasName,
    String? columnConstraintId,
    String? columnId,
    int? columnIsEditable,
    int? columnIsRequired,
    TypeEnumColumnShowType? columnShowType,
    String? createTime,
    String? id,
    String? modifyTime,
    int? positionId,
    String? sceneId
  }):
    _columnAliasName = columnAliasName,
    _columnConstraintId = columnConstraintId,
    _columnId = columnId,
    _columnIsEditable = columnIsEditable,
    _columnIsRequired = columnIsRequired,
    _columnShowType = columnShowType,
    _createTime = createTime,
    _id = id,
    _modifyTime = modifyTime,
    _positionId = positionId,
    _sceneId = sceneId;

  static TypeColumnConstraintItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnConstraintItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnConstraintItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnConstraintItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnConstraintItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnConstraintItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnConstraintItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnConstraintItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _columnAliasName;

  String get columnAliasName{
    return _columnAliasName!;
  }

  String? getColumnAliasName(){
    return _columnAliasName;
  }

  set columnAliasName(String data){
    _columnAliasName = data;
  }

  void setColumnAliasName(String? data){
    _columnAliasName = data;
  }

  String? _columnConstraintId;

  String get columnConstraintId{
    return _columnConstraintId!;
  }

  String? getColumnConstraintId(){
    return _columnConstraintId;
  }

  set columnConstraintId(String data){
    _columnConstraintId = data;
  }

  void setColumnConstraintId(String? data){
    _columnConstraintId = data;
  }

  String? _columnId;

  String get columnId{
    return _columnId!;
  }

  String? getColumnId(){
    return _columnId;
  }

  set columnId(String data){
    _columnId = data;
  }

  void setColumnId(String? data){
    _columnId = data;
  }

  int? _columnIsEditable;

  int get columnIsEditable{
    return _columnIsEditable!;
  }

  int? getColumnIsEditable(){
    return _columnIsEditable;
  }

  set columnIsEditable(int data){
    _columnIsEditable = data;
  }

  void setColumnIsEditable(int? data){
    _columnIsEditable = data;
  }

  int? _columnIsRequired;

  int get columnIsRequired{
    return _columnIsRequired!;
  }

  int? getColumnIsRequired(){
    return _columnIsRequired;
  }

  set columnIsRequired(int data){
    _columnIsRequired = data;
  }

  void setColumnIsRequired(int? data){
    _columnIsRequired = data;
  }

  TypeEnumColumnShowType? _columnShowType;

  TypeEnumColumnShowType get columnShowType{
    return _columnShowType!;
  }

  TypeEnumColumnShowType? getColumnShowType(){
    return _columnShowType;
  }

  set columnShowType(TypeEnumColumnShowType data){
    _columnShowType = data;
  }

  void setColumnShowType(TypeEnumColumnShowType? data){
    _columnShowType = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  int? _positionId;

  int get positionId{
    return _positionId!;
  }

  int? getPositionId(){
    return _positionId;
  }

  set positionId(int data){
    _positionId = data;
  }

  void setPositionId(int? data){
    _positionId = data;
  }

  String? _sceneId;

  String get sceneId{
    return _sceneId!;
  }

  String? getSceneId(){
    return _sceneId;
  }

  set sceneId(String data){
    _sceneId = data;
  }

  void setSceneId(String? data){
    _sceneId = data;
  }

}

class FTypeColumnState extends IDataField {
  static const createTime = FTypeColumnState('createTime');
  static const id = FTypeColumnState('id');
  static const items = FTypeColumnState('items');
  static const modifyTime = FTypeColumnState('modifyTime');
  static const operatorId = FTypeColumnState('operatorId');
  static const sceneId = FTypeColumnState('sceneId');
  const FTypeColumnState(super.key);
}

final FieldReflectInfo<TypeColumnState> _TypeColumnState_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "items": (
    getter: (data) => data._items,
    setter: (data, value) => data._items = value as List<TypeColumnStateItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeColumnStateItem>((single){
        final handler = TypeColumnStateItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeColumnStateItem>((single){
        final handler = TypeColumnStateItem.fromDynamic;
        return handler(single)!;
      });
      data._items = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "operatorId": (
    getter: (data) => data._operatorId,
    setter: (data, value) => data._operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._operatorId = parser(value);
    }
  ),
  "sceneId": (
    getter: (data) => data._sceneId,
    setter: (data, value) => data._sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sceneId = parser(value);
    }
  ),
};

class TypeColumnState extends IDataBasic implements IDataDynamic {
  TypeColumnState({
    String? createTime,
    String? id,
    List<TypeColumnStateItem>? items,
    String? modifyTime,
    int? operatorId,
    String? sceneId
  }):
    _createTime = createTime,
    _id = id,
    _items = items,
    _modifyTime = modifyTime,
    _operatorId = operatorId,
    _sceneId = sceneId;

  static TypeColumnState? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnState();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnState_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnState: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnState? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnState_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnState_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnState_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  List<TypeColumnStateItem>? _items;

  List<TypeColumnStateItem> get items{
    return _items!;
  }

  List<TypeColumnStateItem>? getItems(){
    return _items;
  }

  set items(List<TypeColumnStateItem> data){
    _items = data;
  }

  void setItems(List<TypeColumnStateItem>? data){
    _items = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  int? _operatorId;

  int get operatorId{
    return _operatorId!;
  }

  int? getOperatorId(){
    return _operatorId;
  }

  set operatorId(int data){
    _operatorId = data;
  }

  void setOperatorId(int? data){
    _operatorId = data;
  }

  String? _sceneId;

  String get sceneId{
    return _sceneId!;
  }

  String? getSceneId(){
    return _sceneId;
  }

  set sceneId(String data){
    _sceneId = data;
  }

  void setSceneId(String? data){
    _sceneId = data;
  }

}

class FTypeColumnStateItem extends IDataField {
  static const columnId = FTypeColumnStateItem('columnId');
  static const createTime = FTypeColumnStateItem('createTime');
  static const defaultValue = FTypeColumnStateItem('defaultValue');
  static const defaultValueType = FTypeColumnStateItem('defaultValueType');
  static const id = FTypeColumnStateItem('id');
  static const isEnterJumpIn = FTypeColumnStateItem('isEnterJumpIn');
  static const isShow = FTypeColumnStateItem('isShow');
  static const modifyTime = FTypeColumnStateItem('modifyTime');
  static const width = FTypeColumnStateItem('width');
  const FTypeColumnStateItem(super.key);
}

final FieldReflectInfo<TypeColumnStateItem> _TypeColumnStateItem_fields = {
  "columnId": (
    getter: (data) => data._columnId,
    setter: (data, value) => data._columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnId = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "defaultValue": (
    getter: (data) => data._defaultValue,
    setter: (data, value) => data._defaultValue = value as Object?,
    toDynamic: (data) {
      final formatter = ObjectHelper.toDynamic;
      return formatter(data._defaultValue);
    },
    fromDynamic: (data, value) {
      final parser = ObjectHelper.fromDynamic;
      data._defaultValue = parser(value);
    }
  ),
  "defaultValueType": (
    getter: (data) => data._defaultValueType,
    setter: (data, value) => data._defaultValueType = value as TypeEnumColumnValueType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnValueType.toDynamic;
      return formatter(data._defaultValueType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnValueType.fromDynamic;
      data._defaultValueType = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isEnterJumpIn": (
    getter: (data) => data._isEnterJumpIn,
    setter: (data, value) => data._isEnterJumpIn = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isEnterJumpIn);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isEnterJumpIn = parser(value);
    }
  ),
  "isShow": (
    getter: (data) => data._isShow,
    setter: (data, value) => data._isShow = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isShow);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isShow = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "width": (
    getter: (data) => data._width,
    setter: (data, value) => data._width = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._width);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._width = parser(value);
    }
  ),
};

class TypeColumnStateItem extends IDataBasic implements IDataDynamic {
  TypeColumnStateItem({
    String? columnId,
    String? createTime,
    Object? defaultValue,
    TypeEnumColumnValueType? defaultValueType,
    String? id,
    int? isEnterJumpIn,
    int? isShow,
    String? modifyTime,
    int? width
  }):
    _columnId = columnId,
    _createTime = createTime,
    _defaultValue = defaultValue,
    _defaultValueType = defaultValueType,
    _id = id,
    _isEnterJumpIn = isEnterJumpIn,
    _isShow = isShow,
    _modifyTime = modifyTime,
    _width = width;

  static TypeColumnStateItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnStateItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnStateItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnStateItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnStateItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnStateItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnStateItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnStateItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _columnId;

  String get columnId{
    return _columnId!;
  }

  String? getColumnId(){
    return _columnId;
  }

  set columnId(String data){
    _columnId = data;
  }

  void setColumnId(String? data){
    _columnId = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  Object? _defaultValue;

  Object get defaultValue{
    return _defaultValue!;
  }

  Object? getDefaultValue(){
    return _defaultValue;
  }

  set defaultValue(Object data){
    _defaultValue = data;
  }

  void setDefaultValue(Object? data){
    _defaultValue = data;
  }

  TypeEnumColumnValueType? _defaultValueType;

  TypeEnumColumnValueType get defaultValueType{
    return _defaultValueType!;
  }

  TypeEnumColumnValueType? getDefaultValueType(){
    return _defaultValueType;
  }

  set defaultValueType(TypeEnumColumnValueType data){
    _defaultValueType = data;
  }

  void setDefaultValueType(TypeEnumColumnValueType? data){
    _defaultValueType = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _isEnterJumpIn;

  int get isEnterJumpIn{
    return _isEnterJumpIn!;
  }

  int? getIsEnterJumpIn(){
    return _isEnterJumpIn;
  }

  set isEnterJumpIn(int data){
    _isEnterJumpIn = data;
  }

  void setIsEnterJumpIn(int? data){
    _isEnterJumpIn = data;
  }

  int? _isShow;

  int get isShow{
    return _isShow!;
  }

  int? getIsShow(){
    return _isShow;
  }

  set isShow(int data){
    _isShow = data;
  }

  void setIsShow(int? data){
    _isShow = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  int? _width;

  int get width{
    return _width!;
  }

  int? getWidth(){
    return _width;
  }

  set width(int data){
    _width = data;
  }

  void setWidth(int? data){
    _width = data;
  }

}

class FTypeCombineConstraint extends IDataField {
  static const columnAliasName = FTypeCombineConstraint('columnAliasName');
  static const columnId = FTypeCombineConstraint('columnId');
  static const columnIsEditable = FTypeCombineConstraint('columnIsEditable');
  static const columnIsRequired = FTypeCombineConstraint('columnIsRequired');
  static const columnShowType = FTypeCombineConstraint('columnShowType');
  const FTypeCombineConstraint(super.key);
}

final FieldReflectInfo<TypeCombineConstraint> _TypeCombineConstraint_fields = {
  "columnAliasName": (
    getter: (data) => data._columnAliasName,
    setter: (data, value) => data._columnAliasName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnAliasName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnAliasName = parser(value);
    }
  ),
  "columnId": (
    getter: (data) => data._columnId,
    setter: (data, value) => data._columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._columnId = parser(value);
    }
  ),
  "columnIsEditable": (
    getter: (data) => data._columnIsEditable,
    setter: (data, value) => data._columnIsEditable = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._columnIsEditable);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._columnIsEditable = parser(value);
    }
  ),
  "columnIsRequired": (
    getter: (data) => data._columnIsRequired,
    setter: (data, value) => data._columnIsRequired = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._columnIsRequired);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._columnIsRequired = parser(value);
    }
  ),
  "columnShowType": (
    getter: (data) => data._columnShowType,
    setter: (data, value) => data._columnShowType = value as TypeEnumColumnShowType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnShowType.toDynamic;
      return formatter(data._columnShowType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnShowType.fromDynamic;
      data._columnShowType = parser(value);
    }
  ),
};

class TypeCombineConstraint extends IDataBasic implements IDataDynamic {
  TypeCombineConstraint({
    String? columnAliasName,
    String? columnId,
    int? columnIsEditable,
    int? columnIsRequired,
    TypeEnumColumnShowType? columnShowType
  }):
    _columnAliasName = columnAliasName,
    _columnId = columnId,
    _columnIsEditable = columnIsEditable,
    _columnIsRequired = columnIsRequired,
    _columnShowType = columnShowType;

  static TypeCombineConstraint? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeCombineConstraint();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeCombineConstraint_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeCombineConstraint: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeCombineConstraint? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeCombineConstraint_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeCombineConstraint_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeCombineConstraint_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _columnAliasName;

  String get columnAliasName{
    return _columnAliasName!;
  }

  String? getColumnAliasName(){
    return _columnAliasName;
  }

  set columnAliasName(String data){
    _columnAliasName = data;
  }

  void setColumnAliasName(String? data){
    _columnAliasName = data;
  }

  String? _columnId;

  String get columnId{
    return _columnId!;
  }

  String? getColumnId(){
    return _columnId;
  }

  set columnId(String data){
    _columnId = data;
  }

  void setColumnId(String? data){
    _columnId = data;
  }

  int? _columnIsEditable;

  int get columnIsEditable{
    return _columnIsEditable!;
  }

  int? getColumnIsEditable(){
    return _columnIsEditable;
  }

  set columnIsEditable(int data){
    _columnIsEditable = data;
  }

  void setColumnIsEditable(int? data){
    _columnIsEditable = data;
  }

  int? _columnIsRequired;

  int get columnIsRequired{
    return _columnIsRequired!;
  }

  int? getColumnIsRequired(){
    return _columnIsRequired;
  }

  set columnIsRequired(int data){
    _columnIsRequired = data;
  }

  void setColumnIsRequired(int? data){
    _columnIsRequired = data;
  }

  TypeEnumColumnShowType? _columnShowType;

  TypeEnumColumnShowType get columnShowType{
    return _columnShowType!;
  }

  TypeEnumColumnShowType? getColumnShowType(){
    return _columnShowType;
  }

  set columnShowType(TypeEnumColumnShowType data){
    _columnShowType = data;
  }

  void setColumnShowType(TypeEnumColumnShowType? data){
    _columnShowType = data;
  }

}

class FTypeConstant extends IDataField {
  static const label = FTypeConstant('label');
  static const value = FTypeConstant('value');
  const FTypeConstant(super.key);
}

final FieldReflectInfo<TypeConstant> _TypeConstant_fields = {
  "label": (
    getter: (data) => data._label,
    setter: (data, value) => data._label = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._label);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._label = parser(value);
    }
  ),
  "value": (
    getter: (data) => data._value,
    setter: (data, value) => data._value = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._value);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._value = parser(value);
    }
  ),
};

class TypeConstant extends IDataBasic implements IDataDynamic {
  TypeConstant({
    String? label,
    String? value
  }):
    _label = label,
    _value = value;

  static TypeConstant? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeConstant();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeConstant_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeConstant: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeConstant? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeConstant_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeConstant_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeConstant_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _label;

  String get label{
    return _label!;
  }

  String? getLabel(){
    return _label;
  }

  set label(String data){
    _label = data;
  }

  void setLabel(String? data){
    _label = data;
  }

  String? _value;

  String get value{
    return _value!;
  }

  String? getValue(){
    return _value;
  }

  set value(String data){
    _value = data;
  }

  void setValue(String? data){
    _value = data;
  }

}

class FTypeContact extends IDataField {
  static const accountPayable = FTypeContact('accountPayable');
  static const accountReceivable = FTypeContact('accountReceivable');
  static const address = FTypeContact('address');
  static const advancePayable = FTypeContact('advancePayable');
  static const advanceReceivable = FTypeContact('advanceReceivable');
  static const bank = FTypeContact('bank');
  static const bankAccount = FTypeContact('bankAccount');
  static const children = FTypeContact('children');
  static const createTime = FTypeContact('createTime');
  static const defaultTax = FTypeContact('defaultTax');
  static const deferInvoiceTotal = FTypeContact('deferInvoiceTotal');
  static const hasBusinessLink = FTypeContact('hasBusinessLink');
  static const id = FTypeContact('id');
  static const initialAccountPayable = FTypeContact('initialAccountPayable');
  static const initialAccountReceivable = FTypeContact('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContact('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContact('initialAdvanceReceivable');
  static const isCategory = FTypeContact('isCategory');
  static const isCustomer = FTypeContact('isCustomer');
  static const isCustomerAndSupplier = FTypeContact('isCustomerAndSupplier');
  static const isEnabled = FTypeContact('isEnabled');
  static const isSupplier = FTypeContact('isSupplier');
  static const isSystem = FTypeContact('isSystem');
  static const modifyTime = FTypeContact('modifyTime');
  static const name = FTypeContact('name');
  static const number = FTypeContact('number');
  static const parentId = FTypeContact('parentId');
  static const parentInfo = FTypeContact('parentInfo');
  static const phones = FTypeContact('phones');
  static const remark = FTypeContact('remark');
  static const sortWeight = FTypeContact('sortWeight');
  static const taxNumber = FTypeContact('taxNumber');
  static const treeLevel = FTypeContact('treeLevel');
  static const treePath = FTypeContact('treePath');
  static const type = FTypeContact('type');
  const FTypeContact(super.key);
}

final FieldReflectInfo<TypeContact> _TypeContact_fields = {
  "accountPayable": (
    getter: (data) => data._accountPayable,
    setter: (data, value) => data._accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountPayable = parser(value);
    }
  ),
  "accountReceivable": (
    getter: (data) => data._accountReceivable,
    setter: (data, value) => data._accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountReceivable = parser(value);
    }
  ),
  "address": (
    getter: (data) => data._address,
    setter: (data, value) => data._address = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._address);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._address = parser(value);
    }
  ),
  "advancePayable": (
    getter: (data) => data._advancePayable,
    setter: (data, value) => data._advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advancePayable = parser(value);
    }
  ),
  "advanceReceivable": (
    getter: (data) => data._advanceReceivable,
    setter: (data, value) => data._advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advanceReceivable = parser(value);
    }
  ),
  "bank": (
    getter: (data) => data._bank,
    setter: (data, value) => data._bank = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bank);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bank = parser(value);
    }
  ),
  "bankAccount": (
    getter: (data) => data._bankAccount,
    setter: (data, value) => data._bankAccount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bankAccount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bankAccount = parser(value);
    }
  ),
  "children": (
    getter: (data) => data._children,
    setter: (data, value) => data._children = value as List<TypeContact>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContact>((single){
        final handler = TypeContact.toDynamic;
        return handler(single)!;
      });
      return formatter(data._children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
        final handler = TypeContact.fromDynamic;
        return handler(single)!;
      });
      data._children = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "defaultTax": (
    getter: (data) => data._defaultTax,
    setter: (data, value) => data._defaultTax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._defaultTax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._defaultTax = parser(value);
    }
  ),
  "deferInvoiceTotal": (
    getter: (data) => data._deferInvoiceTotal,
    setter: (data, value) => data._deferInvoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._deferInvoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._deferInvoiceTotal = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "initialAccountPayable": (
    getter: (data) => data._initialAccountPayable,
    setter: (data, value) => data._initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountPayable = parser(value);
    }
  ),
  "initialAccountReceivable": (
    getter: (data) => data._initialAccountReceivable,
    setter: (data, value) => data._initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountReceivable = parser(value);
    }
  ),
  "initialAdvancePayable": (
    getter: (data) => data._initialAdvancePayable,
    setter: (data, value) => data._initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvancePayable = parser(value);
    }
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data._initialAdvanceReceivable,
    setter: (data, value) => data._initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvanceReceivable = parser(value);
    }
  ),
  "isCategory": (
    getter: (data) => data._isCategory,
    setter: (data, value) => data._isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCategory = parser(value);
    }
  ),
  "isCustomer": (
    getter: (data) => data._isCustomer,
    setter: (data, value) => data._isCustomer = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCustomer);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCustomer = parser(value);
    }
  ),
  "isCustomerAndSupplier": (
    getter: (data) => data._isCustomerAndSupplier,
    setter: (data, value) => data._isCustomerAndSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCustomerAndSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCustomerAndSupplier = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isSupplier": (
    getter: (data) => data._isSupplier,
    setter: (data, value) => data._isSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSupplier = parser(value);
    }
  ),
  "isSystem": (
    getter: (data) => data._isSystem,
    setter: (data, value) => data._isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSystem = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "parentId": (
    getter: (data) => data._parentId,
    setter: (data, value) => data._parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._parentId = parser(value);
    }
  ),
  "parentInfo": (
    getter: (data) => data._parentInfo,
    setter: (data, value) => data._parentInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._parentInfo = parser(value);
    }
  ),
  "phones": (
    getter: (data) => data._phones,
    setter: (data, value) => data._phones = value as List<TypeContactPhone>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContactPhone>((single){
        final handler = TypeContactPhone.toDynamic;
        return handler(single)!;
      });
      return formatter(data._phones);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContactPhone>((single){
        final handler = TypeContactPhone.fromDynamic;
        return handler(single)!;
      });
      data._phones = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "sortWeight": (
    getter: (data) => data._sortWeight,
    setter: (data, value) => data._sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sortWeight = parser(value);
    }
  ),
  "taxNumber": (
    getter: (data) => data._taxNumber,
    setter: (data, value) => data._taxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxNumber = parser(value);
    }
  ),
  "treeLevel": (
    getter: (data) => data._treeLevel,
    setter: (data, value) => data._treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._treeLevel = parser(value);
    }
  ),
  "treePath": (
    getter: (data) => data._treePath,
    setter: (data, value) => data._treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._treePath = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumContactType?,
    toDynamic: (data) {
      final formatter = TypeEnumContactType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumContactType.fromDynamic;
      data._type = parser(value);
    }
  ),
};

class TypeContact extends IDataBasic implements IDataDynamic {
  TypeContact({
    String? accountPayable,
    String? accountReceivable,
    String? address,
    String? advancePayable,
    String? advanceReceivable,
    String? bank,
    String? bankAccount,
    List<TypeContact>? children,
    String? createTime,
    String? defaultTax,
    String? deferInvoiceTotal,
    int? hasBusinessLink,
    int? id,
    String? initialAccountPayable,
    String? initialAccountReceivable,
    String? initialAdvancePayable,
    String? initialAdvanceReceivable,
    int? isCategory,
    int? isCustomer,
    int? isCustomerAndSupplier,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isSupplier,
    int? isSystem,
    String? modifyTime,
    String? name,
    String? number,
    int? parentId,
    TypeContact? parentInfo,
    List<TypeContactPhone>? phones,
    String? remark,
    int? sortWeight,
    String? taxNumber,
    int? treeLevel,
    String? treePath,
    TypeEnumContactType? type
  }):
    _accountPayable = accountPayable,
    _accountReceivable = accountReceivable,
    _address = address,
    _advancePayable = advancePayable,
    _advanceReceivable = advanceReceivable,
    _bank = bank,
    _bankAccount = bankAccount,
    _children = children,
    _createTime = createTime,
    _defaultTax = defaultTax,
    _deferInvoiceTotal = deferInvoiceTotal,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _initialAccountPayable = initialAccountPayable,
    _initialAccountReceivable = initialAccountReceivable,
    _initialAdvancePayable = initialAdvancePayable,
    _initialAdvanceReceivable = initialAdvanceReceivable,
    _isCategory = isCategory,
    _isCustomer = isCustomer,
    _isCustomerAndSupplier = isCustomerAndSupplier,
    _isEnabled = isEnabled,
    _isSupplier = isSupplier,
    _isSystem = isSystem,
    _modifyTime = modifyTime,
    _name = name,
    _number = number,
    _parentId = parentId,
    _parentInfo = parentInfo,
    _phones = phones,
    _remark = remark,
    _sortWeight = sortWeight,
    _taxNumber = taxNumber,
    _treeLevel = treeLevel,
    _treePath = treePath,
    _type = type;

  static TypeContact? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContact();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContact_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContact: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContact? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContact_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContact_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContact_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _accountPayable;

  String get accountPayable{
    return _accountPayable!;
  }

  String? getAccountPayable(){
    return _accountPayable;
  }

  set accountPayable(String data){
    _accountPayable = data;
  }

  void setAccountPayable(String? data){
    _accountPayable = data;
  }

  String? _accountReceivable;

  String get accountReceivable{
    return _accountReceivable!;
  }

  String? getAccountReceivable(){
    return _accountReceivable;
  }

  set accountReceivable(String data){
    _accountReceivable = data;
  }

  void setAccountReceivable(String? data){
    _accountReceivable = data;
  }

  String? _address;

  String get address{
    return _address!;
  }

  String? getAddress(){
    return _address;
  }

  set address(String data){
    _address = data;
  }

  void setAddress(String? data){
    _address = data;
  }

  String? _advancePayable;

  String get advancePayable{
    return _advancePayable!;
  }

  String? getAdvancePayable(){
    return _advancePayable;
  }

  set advancePayable(String data){
    _advancePayable = data;
  }

  void setAdvancePayable(String? data){
    _advancePayable = data;
  }

  String? _advanceReceivable;

  String get advanceReceivable{
    return _advanceReceivable!;
  }

  String? getAdvanceReceivable(){
    return _advanceReceivable;
  }

  set advanceReceivable(String data){
    _advanceReceivable = data;
  }

  void setAdvanceReceivable(String? data){
    _advanceReceivable = data;
  }

  String? _bank;

  String get bank{
    return _bank!;
  }

  String? getBank(){
    return _bank;
  }

  set bank(String data){
    _bank = data;
  }

  void setBank(String? data){
    _bank = data;
  }

  String? _bankAccount;

  String get bankAccount{
    return _bankAccount!;
  }

  String? getBankAccount(){
    return _bankAccount;
  }

  set bankAccount(String data){
    _bankAccount = data;
  }

  void setBankAccount(String? data){
    _bankAccount = data;
  }

  List<TypeContact>? _children;

  List<TypeContact> get children{
    return _children!;
  }

  List<TypeContact>? getChildren(){
    return _children;
  }

  set children(List<TypeContact> data){
    _children = data;
  }

  void setChildren(List<TypeContact>? data){
    _children = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _defaultTax;

  String get defaultTax{
    return _defaultTax!;
  }

  String? getDefaultTax(){
    return _defaultTax;
  }

  set defaultTax(String data){
    _defaultTax = data;
  }

  void setDefaultTax(String? data){
    _defaultTax = data;
  }

  String? _deferInvoiceTotal;

  String get deferInvoiceTotal{
    return _deferInvoiceTotal!;
  }

  String? getDeferInvoiceTotal(){
    return _deferInvoiceTotal;
  }

  set deferInvoiceTotal(String data){
    _deferInvoiceTotal = data;
  }

  void setDeferInvoiceTotal(String? data){
    _deferInvoiceTotal = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _initialAccountPayable;

  String get initialAccountPayable{
    return _initialAccountPayable!;
  }

  String? getInitialAccountPayable(){
    return _initialAccountPayable;
  }

  set initialAccountPayable(String data){
    _initialAccountPayable = data;
  }

  void setInitialAccountPayable(String? data){
    _initialAccountPayable = data;
  }

  String? _initialAccountReceivable;

  String get initialAccountReceivable{
    return _initialAccountReceivable!;
  }

  String? getInitialAccountReceivable(){
    return _initialAccountReceivable;
  }

  set initialAccountReceivable(String data){
    _initialAccountReceivable = data;
  }

  void setInitialAccountReceivable(String? data){
    _initialAccountReceivable = data;
  }

  String? _initialAdvancePayable;

  String get initialAdvancePayable{
    return _initialAdvancePayable!;
  }

  String? getInitialAdvancePayable(){
    return _initialAdvancePayable;
  }

  set initialAdvancePayable(String data){
    _initialAdvancePayable = data;
  }

  void setInitialAdvancePayable(String? data){
    _initialAdvancePayable = data;
  }

  String? _initialAdvanceReceivable;

  String get initialAdvanceReceivable{
    return _initialAdvanceReceivable!;
  }

  String? getInitialAdvanceReceivable(){
    return _initialAdvanceReceivable;
  }

  set initialAdvanceReceivable(String data){
    _initialAdvanceReceivable = data;
  }

  void setInitialAdvanceReceivable(String? data){
    _initialAdvanceReceivable = data;
  }

  int? _isCategory;

  int get isCategory{
    return _isCategory!;
  }

  int? getIsCategory(){
    return _isCategory;
  }

  set isCategory(int data){
    _isCategory = data;
  }

  void setIsCategory(int? data){
    _isCategory = data;
  }

  int? _isCustomer;

  int get isCustomer{
    return _isCustomer!;
  }

  int? getIsCustomer(){
    return _isCustomer;
  }

  set isCustomer(int data){
    _isCustomer = data;
  }

  void setIsCustomer(int? data){
    _isCustomer = data;
  }

  int? _isCustomerAndSupplier;

  int get isCustomerAndSupplier{
    return _isCustomerAndSupplier!;
  }

  int? getIsCustomerAndSupplier(){
    return _isCustomerAndSupplier;
  }

  set isCustomerAndSupplier(int data){
    _isCustomerAndSupplier = data;
  }

  void setIsCustomerAndSupplier(int? data){
    _isCustomerAndSupplier = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isSupplier;

  int get isSupplier{
    return _isSupplier!;
  }

  int? getIsSupplier(){
    return _isSupplier;
  }

  set isSupplier(int data){
    _isSupplier = data;
  }

  void setIsSupplier(int? data){
    _isSupplier = data;
  }

  int? _isSystem;

  int get isSystem{
    return _isSystem!;
  }

  int? getIsSystem(){
    return _isSystem;
  }

  set isSystem(int data){
    _isSystem = data;
  }

  void setIsSystem(int? data){
    _isSystem = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _parentId;

  int get parentId{
    return _parentId!;
  }

  int? getParentId(){
    return _parentId;
  }

  set parentId(int data){
    _parentId = data;
  }

  void setParentId(int? data){
    _parentId = data;
  }

  TypeContact? _parentInfo;

  TypeContact get parentInfo{
    return _parentInfo!;
  }

  TypeContact? getParentInfo(){
    return _parentInfo;
  }

  set parentInfo(TypeContact data){
    _parentInfo = data;
  }

  void setParentInfo(TypeContact? data){
    _parentInfo = data;
  }

  List<TypeContactPhone>? _phones;

  List<TypeContactPhone> get phones{
    return _phones!;
  }

  List<TypeContactPhone>? getPhones(){
    return _phones;
  }

  set phones(List<TypeContactPhone> data){
    _phones = data;
  }

  void setPhones(List<TypeContactPhone>? data){
    _phones = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _sortWeight;

  int get sortWeight{
    return _sortWeight!;
  }

  int? getSortWeight(){
    return _sortWeight;
  }

  set sortWeight(int data){
    _sortWeight = data;
  }

  void setSortWeight(int? data){
    _sortWeight = data;
  }

  String? _taxNumber;

  String get taxNumber{
    return _taxNumber!;
  }

  String? getTaxNumber(){
    return _taxNumber;
  }

  set taxNumber(String data){
    _taxNumber = data;
  }

  void setTaxNumber(String? data){
    _taxNumber = data;
  }

  int? _treeLevel;

  int get treeLevel{
    return _treeLevel!;
  }

  int? getTreeLevel(){
    return _treeLevel;
  }

  set treeLevel(int data){
    _treeLevel = data;
  }

  void setTreeLevel(int? data){
    _treeLevel = data;
  }

  String? _treePath;

  String get treePath{
    return _treePath!;
  }

  String? getTreePath(){
    return _treePath;
  }

  set treePath(String data){
    _treePath = data;
  }

  void setTreePath(String? data){
    _treePath = data;
  }

  TypeEnumContactType? _type;

  TypeEnumContactType get type{
    return _type!;
  }

  TypeEnumContactType? getType(){
    return _type;
  }

  set type(TypeEnumContactType data){
    _type = data;
  }

  void setType(TypeEnumContactType? data){
    _type = data;
  }

}

class FTypeContactPhone extends IDataField {
  static const birthday = FTypeContactPhone('birthday');
  static const name = FTypeContactPhone('name');
  static const phone = FTypeContactPhone('phone');
  static const remark = FTypeContactPhone('remark');
  static const shippingAddress = FTypeContactPhone('shippingAddress');
  const FTypeContactPhone(super.key);
}

final FieldReflectInfo<TypeContactPhone> _TypeContactPhone_fields = {
  "birthday": (
    getter: (data) => data._birthday,
    setter: (data, value) => data._birthday = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._birthday);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._birthday = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "phone": (
    getter: (data) => data._phone,
    setter: (data, value) => data._phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._phone = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "shippingAddress": (
    getter: (data) => data._shippingAddress,
    setter: (data, value) => data._shippingAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._shippingAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._shippingAddress = parser(value);
    }
  ),
};

class TypeContactPhone extends IDataBasic implements IDataDynamic {
  TypeContactPhone({
    String? birthday,
    String? name,
    String? phone,
    String? remark,
    String? shippingAddress
  }):
    _birthday = birthday,
    _name = name,
    _phone = phone,
    _remark = remark,
    _shippingAddress = shippingAddress;

  static TypeContactPhone? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactPhone();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactPhone_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactPhone: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactPhone? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactPhone_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactPhone_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactPhone_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _birthday;

  String get birthday{
    return _birthday!;
  }

  String? getBirthday(){
    return _birthday;
  }

  set birthday(String data){
    _birthday = data;
  }

  void setBirthday(String? data){
    _birthday = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _phone;

  String get phone{
    return _phone!;
  }

  String? getPhone(){
    return _phone;
  }

  set phone(String data){
    _phone = data;
  }

  void setPhone(String? data){
    _phone = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _shippingAddress;

  String get shippingAddress{
    return _shippingAddress!;
  }

  String? getShippingAddress(){
    return _shippingAddress;
  }

  set shippingAddress(String data){
    _shippingAddress = data;
  }

  void setShippingAddress(String? data){
    _shippingAddress = data;
  }

}

class FTypeContactQueryDTO extends IDataField {
  static const data = FTypeContactQueryDTO('data');
  static const pageIndex = FTypeContactQueryDTO('pageIndex');
  static const pageSize = FTypeContactQueryDTO('pageSize');
  static const sum = FTypeContactQueryDTO('sum');
  const FTypeContactQueryDTO(super.key);
}

final FieldReflectInfo<TypeContactQueryDTO> _TypeContactQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeContactQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContactQueryDataDTO>((single){
        final handler = TypeContactQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContactQueryDataDTO>((single){
        final handler = TypeContactQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeContactQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeContactQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeContactQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeContactQueryDTO extends IDataBasic implements IDataDynamic {
  TypeContactQueryDTO({
    List<TypeContactQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeContactQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeContactQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeContactQueryDataDTO>? _data;

  List<TypeContactQueryDataDTO> get data{
    return _data!;
  }

  List<TypeContactQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeContactQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeContactQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeContactQuerySumDTO? _sum;

  TypeContactQuerySumDTO get sum{
    return _sum!;
  }

  TypeContactQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeContactQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeContactQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeContactQueryDataDTO extends IDataField {
  static const accountPayable = FTypeContactQueryDataDTO('accountPayable');
  static const accountReceivable = FTypeContactQueryDataDTO('accountReceivable');
  static const advancePayable = FTypeContactQueryDataDTO('advancePayable');
  static const advanceReceivable = FTypeContactQueryDataDTO('advanceReceivable');
  static const createTime = FTypeContactQueryDataDTO('createTime');
  static const id = FTypeContactQueryDataDTO('id');
  static const initialAccountPayable = FTypeContactQueryDataDTO('initialAccountPayable');
  static const initialAccountReceivable = FTypeContactQueryDataDTO('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContactQueryDataDTO('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContactQueryDataDTO('initialAdvanceReceivable');
  static const isCustomer = FTypeContactQueryDataDTO('isCustomer');
  static const isEnabled = FTypeContactQueryDataDTO('isEnabled');
  static const isSupplier = FTypeContactQueryDataDTO('isSupplier');
  static const name = FTypeContactQueryDataDTO('name');
  static const number = FTypeContactQueryDataDTO('number');
  static const parentId = FTypeContactQueryDataDTO('parentId');
  static const parentName = FTypeContactQueryDataDTO('parentName');
  static const remark = FTypeContactQueryDataDTO('remark');
  const FTypeContactQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeContactQueryDataDTO> _TypeContactQueryDataDTO_fields = {
  "accountPayable": (
    getter: (data) => data._accountPayable,
    setter: (data, value) => data._accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountPayable = parser(value);
    }
  ),
  "accountReceivable": (
    getter: (data) => data._accountReceivable,
    setter: (data, value) => data._accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountReceivable = parser(value);
    }
  ),
  "advancePayable": (
    getter: (data) => data._advancePayable,
    setter: (data, value) => data._advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advancePayable = parser(value);
    }
  ),
  "advanceReceivable": (
    getter: (data) => data._advanceReceivable,
    setter: (data, value) => data._advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advanceReceivable = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "initialAccountPayable": (
    getter: (data) => data._initialAccountPayable,
    setter: (data, value) => data._initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountPayable = parser(value);
    }
  ),
  "initialAccountReceivable": (
    getter: (data) => data._initialAccountReceivable,
    setter: (data, value) => data._initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountReceivable = parser(value);
    }
  ),
  "initialAdvancePayable": (
    getter: (data) => data._initialAdvancePayable,
    setter: (data, value) => data._initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvancePayable = parser(value);
    }
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data._initialAdvanceReceivable,
    setter: (data, value) => data._initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvanceReceivable = parser(value);
    }
  ),
  "isCustomer": (
    getter: (data) => data._isCustomer,
    setter: (data, value) => data._isCustomer = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCustomer);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCustomer = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isSupplier": (
    getter: (data) => data._isSupplier,
    setter: (data, value) => data._isSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSupplier = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "parentId": (
    getter: (data) => data._parentId,
    setter: (data, value) => data._parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._parentId = parser(value);
    }
  ),
  "parentName": (
    getter: (data) => data._parentName,
    setter: (data, value) => data._parentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._parentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._parentName = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
};

class TypeContactQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeContactQueryDataDTO({
    String? accountPayable,
    String? accountReceivable,
    String? advancePayable,
    String? advanceReceivable,
    String? createTime,
    int? id,
    String? initialAccountPayable,
    String? initialAccountReceivable,
    String? initialAdvancePayable,
    String? initialAdvanceReceivable,
    int? isCustomer,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isSupplier,
    String? name,
    String? number,
    int? parentId,
    String? parentName,
    String? remark
  }):
    _accountPayable = accountPayable,
    _accountReceivable = accountReceivable,
    _advancePayable = advancePayable,
    _advanceReceivable = advanceReceivable,
    _createTime = createTime,
    _id = id,
    _initialAccountPayable = initialAccountPayable,
    _initialAccountReceivable = initialAccountReceivable,
    _initialAdvancePayable = initialAdvancePayable,
    _initialAdvanceReceivable = initialAdvanceReceivable,
    _isCustomer = isCustomer,
    _isEnabled = isEnabled,
    _isSupplier = isSupplier,
    _name = name,
    _number = number,
    _parentId = parentId,
    _parentName = parentName,
    _remark = remark;

  static TypeContactQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _accountPayable;

  String get accountPayable{
    return _accountPayable!;
  }

  String? getAccountPayable(){
    return _accountPayable;
  }

  set accountPayable(String data){
    _accountPayable = data;
  }

  void setAccountPayable(String? data){
    _accountPayable = data;
  }

  String? _accountReceivable;

  String get accountReceivable{
    return _accountReceivable!;
  }

  String? getAccountReceivable(){
    return _accountReceivable;
  }

  set accountReceivable(String data){
    _accountReceivable = data;
  }

  void setAccountReceivable(String? data){
    _accountReceivable = data;
  }

  String? _advancePayable;

  String get advancePayable{
    return _advancePayable!;
  }

  String? getAdvancePayable(){
    return _advancePayable;
  }

  set advancePayable(String data){
    _advancePayable = data;
  }

  void setAdvancePayable(String? data){
    _advancePayable = data;
  }

  String? _advanceReceivable;

  String get advanceReceivable{
    return _advanceReceivable!;
  }

  String? getAdvanceReceivable(){
    return _advanceReceivable;
  }

  set advanceReceivable(String data){
    _advanceReceivable = data;
  }

  void setAdvanceReceivable(String? data){
    _advanceReceivable = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _initialAccountPayable;

  String get initialAccountPayable{
    return _initialAccountPayable!;
  }

  String? getInitialAccountPayable(){
    return _initialAccountPayable;
  }

  set initialAccountPayable(String data){
    _initialAccountPayable = data;
  }

  void setInitialAccountPayable(String? data){
    _initialAccountPayable = data;
  }

  String? _initialAccountReceivable;

  String get initialAccountReceivable{
    return _initialAccountReceivable!;
  }

  String? getInitialAccountReceivable(){
    return _initialAccountReceivable;
  }

  set initialAccountReceivable(String data){
    _initialAccountReceivable = data;
  }

  void setInitialAccountReceivable(String? data){
    _initialAccountReceivable = data;
  }

  String? _initialAdvancePayable;

  String get initialAdvancePayable{
    return _initialAdvancePayable!;
  }

  String? getInitialAdvancePayable(){
    return _initialAdvancePayable;
  }

  set initialAdvancePayable(String data){
    _initialAdvancePayable = data;
  }

  void setInitialAdvancePayable(String? data){
    _initialAdvancePayable = data;
  }

  String? _initialAdvanceReceivable;

  String get initialAdvanceReceivable{
    return _initialAdvanceReceivable!;
  }

  String? getInitialAdvanceReceivable(){
    return _initialAdvanceReceivable;
  }

  set initialAdvanceReceivable(String data){
    _initialAdvanceReceivable = data;
  }

  void setInitialAdvanceReceivable(String? data){
    _initialAdvanceReceivable = data;
  }

  int? _isCustomer;

  int get isCustomer{
    return _isCustomer!;
  }

  int? getIsCustomer(){
    return _isCustomer;
  }

  set isCustomer(int data){
    _isCustomer = data;
  }

  void setIsCustomer(int? data){
    _isCustomer = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isSupplier;

  int get isSupplier{
    return _isSupplier!;
  }

  int? getIsSupplier(){
    return _isSupplier;
  }

  set isSupplier(int data){
    _isSupplier = data;
  }

  void setIsSupplier(int? data){
    _isSupplier = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _parentId;

  int get parentId{
    return _parentId!;
  }

  int? getParentId(){
    return _parentId;
  }

  set parentId(int data){
    _parentId = data;
  }

  void setParentId(int? data){
    _parentId = data;
  }

  String? _parentName;

  String get parentName{
    return _parentName!;
  }

  String? getParentName(){
    return _parentName;
  }

  set parentName(String data){
    _parentName = data;
  }

  void setParentName(String? data){
    _parentName = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

}

class FTypeContactQuerySumDTO extends IDataField {
  static const accountPayable = FTypeContactQuerySumDTO('accountPayable');
  static const accountReceivable = FTypeContactQuerySumDTO('accountReceivable');
  static const advancePayable = FTypeContactQuerySumDTO('advancePayable');
  static const advanceReceivable = FTypeContactQuerySumDTO('advanceReceivable');
  static const count = FTypeContactQuerySumDTO('count');
  static const initialAccountPayable = FTypeContactQuerySumDTO('initialAccountPayable');
  static const initialAccountReceivable = FTypeContactQuerySumDTO('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContactQuerySumDTO('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContactQuerySumDTO('initialAdvanceReceivable');
  const FTypeContactQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeContactQuerySumDTO> _TypeContactQuerySumDTO_fields = {
  "accountPayable": (
    getter: (data) => data._accountPayable,
    setter: (data, value) => data._accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountPayable = parser(value);
    }
  ),
  "accountReceivable": (
    getter: (data) => data._accountReceivable,
    setter: (data, value) => data._accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountReceivable = parser(value);
    }
  ),
  "advancePayable": (
    getter: (data) => data._advancePayable,
    setter: (data, value) => data._advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advancePayable = parser(value);
    }
  ),
  "advanceReceivable": (
    getter: (data) => data._advanceReceivable,
    setter: (data, value) => data._advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._advanceReceivable = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "initialAccountPayable": (
    getter: (data) => data._initialAccountPayable,
    setter: (data, value) => data._initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountPayable = parser(value);
    }
  ),
  "initialAccountReceivable": (
    getter: (data) => data._initialAccountReceivable,
    setter: (data, value) => data._initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAccountReceivable = parser(value);
    }
  ),
  "initialAdvancePayable": (
    getter: (data) => data._initialAdvancePayable,
    setter: (data, value) => data._initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvancePayable = parser(value);
    }
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data._initialAdvanceReceivable,
    setter: (data, value) => data._initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAdvanceReceivable = parser(value);
    }
  ),
};

class TypeContactQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeContactQuerySumDTO({
    String? accountPayable,
    String? accountReceivable,
    String? advancePayable,
    String? advanceReceivable,
    int? count,
    String? initialAccountPayable,
    String? initialAccountReceivable,
    String? initialAdvancePayable,
    String? initialAdvanceReceivable
  }):
    _accountPayable = accountPayable,
    _accountReceivable = accountReceivable,
    _advancePayable = advancePayable,
    _advanceReceivable = advanceReceivable,
    _count = count,
    _initialAccountPayable = initialAccountPayable,
    _initialAccountReceivable = initialAccountReceivable,
    _initialAdvancePayable = initialAdvancePayable,
    _initialAdvanceReceivable = initialAdvanceReceivable;

  static TypeContactQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _accountPayable;

  String get accountPayable{
    return _accountPayable!;
  }

  String? getAccountPayable(){
    return _accountPayable;
  }

  set accountPayable(String data){
    _accountPayable = data;
  }

  void setAccountPayable(String? data){
    _accountPayable = data;
  }

  String? _accountReceivable;

  String get accountReceivable{
    return _accountReceivable!;
  }

  String? getAccountReceivable(){
    return _accountReceivable;
  }

  set accountReceivable(String data){
    _accountReceivable = data;
  }

  void setAccountReceivable(String? data){
    _accountReceivable = data;
  }

  String? _advancePayable;

  String get advancePayable{
    return _advancePayable!;
  }

  String? getAdvancePayable(){
    return _advancePayable;
  }

  set advancePayable(String data){
    _advancePayable = data;
  }

  void setAdvancePayable(String? data){
    _advancePayable = data;
  }

  String? _advanceReceivable;

  String get advanceReceivable{
    return _advanceReceivable!;
  }

  String? getAdvanceReceivable(){
    return _advanceReceivable;
  }

  set advanceReceivable(String data){
    _advanceReceivable = data;
  }

  void setAdvanceReceivable(String? data){
    _advanceReceivable = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _initialAccountPayable;

  String get initialAccountPayable{
    return _initialAccountPayable!;
  }

  String? getInitialAccountPayable(){
    return _initialAccountPayable;
  }

  set initialAccountPayable(String data){
    _initialAccountPayable = data;
  }

  void setInitialAccountPayable(String? data){
    _initialAccountPayable = data;
  }

  String? _initialAccountReceivable;

  String get initialAccountReceivable{
    return _initialAccountReceivable!;
  }

  String? getInitialAccountReceivable(){
    return _initialAccountReceivable;
  }

  set initialAccountReceivable(String data){
    _initialAccountReceivable = data;
  }

  void setInitialAccountReceivable(String? data){
    _initialAccountReceivable = data;
  }

  String? _initialAdvancePayable;

  String get initialAdvancePayable{
    return _initialAdvancePayable!;
  }

  String? getInitialAdvancePayable(){
    return _initialAdvancePayable;
  }

  set initialAdvancePayable(String data){
    _initialAdvancePayable = data;
  }

  void setInitialAdvancePayable(String? data){
    _initialAdvancePayable = data;
  }

  String? _initialAdvanceReceivable;

  String get initialAdvanceReceivable{
    return _initialAdvanceReceivable!;
  }

  String? getInitialAdvanceReceivable(){
    return _initialAdvanceReceivable;
  }

  set initialAdvanceReceivable(String data){
    _initialAdvanceReceivable = data;
  }

  void setInitialAdvanceReceivable(String? data){
    _initialAdvanceReceivable = data;
  }

}

class FTypeEmployee extends IDataField {
  static const createTime = FTypeEmployee('createTime');
  static const hasBusinessLink = FTypeEmployee('hasBusinessLink');
  static const id = FTypeEmployee('id');
  static const identityNumber = FTypeEmployee('identityNumber');
  static const isEnabled = FTypeEmployee('isEnabled');
  static const job = FTypeEmployee('job');
  static const modifyTime = FTypeEmployee('modifyTime');
  static const name = FTypeEmployee('name');
  static const number = FTypeEmployee('number');
  static const phone = FTypeEmployee('phone');
  static const remark = FTypeEmployee('remark');
  const FTypeEmployee(super.key);
}

final FieldReflectInfo<TypeEmployee> _TypeEmployee_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "identityNumber": (
    getter: (data) => data._identityNumber,
    setter: (data, value) => data._identityNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._identityNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._identityNumber = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "job": (
    getter: (data) => data._job,
    setter: (data, value) => data._job = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._job);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._job = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "phone": (
    getter: (data) => data._phone,
    setter: (data, value) => data._phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._phone = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
};

class TypeEmployee extends IDataBasic implements IDataDynamic {
  TypeEmployee({
    String? createTime,
    int? hasBusinessLink,
    int? id,
    String? identityNumber,
    TypeEnumSoftEnableIsEnable? isEnabled,
    String? job,
    String? modifyTime,
    String? name,
    String? number,
    String? phone,
    String? remark
  }):
    _createTime = createTime,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _identityNumber = identityNumber,
    _isEnabled = isEnabled,
    _job = job,
    _modifyTime = modifyTime,
    _name = name,
    _number = number,
    _phone = phone,
    _remark = remark;

  static TypeEmployee? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEmployee();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEmployee_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEmployee: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEmployee? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEmployee_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEmployee_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEmployee_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _identityNumber;

  String get identityNumber{
    return _identityNumber!;
  }

  String? getIdentityNumber(){
    return _identityNumber;
  }

  set identityNumber(String data){
    _identityNumber = data;
  }

  void setIdentityNumber(String? data){
    _identityNumber = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  String? _job;

  String get job{
    return _job!;
  }

  String? getJob(){
    return _job;
  }

  set job(String data){
    _job = data;
  }

  void setJob(String? data){
    _job = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _phone;

  String get phone{
    return _phone!;
  }

  String? getPhone(){
    return _phone;
  }

  set phone(String data){
    _phone = data;
  }

  void setPhone(String? data){
    _phone = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

}

class FTypeEntityOperation extends IDataField {
  static const entity = FTypeEntityOperation('entity');
  static const group = FTypeEntityOperation('group');
  static const operationList = FTypeEntityOperation('operationList');
  static const operationMask = FTypeEntityOperation('operationMask');
  const FTypeEntityOperation(super.key);
}

final FieldReflectInfo<TypeEntityOperation> _TypeEntityOperation_fields = {
  "entity": (
    getter: (data) => data._entity,
    setter: (data, value) => data._entity = value as TypeEnumEntity?,
    toDynamic: (data) {
      final formatter = TypeEnumEntity.toDynamic;
      return formatter(data._entity);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumEntity.fromDynamic;
      data._entity = parser(value);
    }
  ),
  "group": (
    getter: (data) => data._group,
    setter: (data, value) => data._group = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._group);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._group = parser(value);
    }
  ),
  "operationList": (
    getter: (data) => data._operationList,
    setter: (data, value) => data._operationList = value as List<TypeEnumOperation>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeEnumOperation>((single){
        final handler = TypeEnumOperation.toDynamic;
        return handler(single)!;
      });
      return formatter(data._operationList);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeEnumOperation>((single){
        final handler = TypeEnumOperation.fromDynamic;
        return handler(single)!;
      });
      data._operationList = parser(value);
    }
  ),
  "operationMask": (
    getter: (data) => data._operationMask,
    setter: (data, value) => data._operationMask = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._operationMask);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._operationMask = parser(value);
    }
  ),
};

class TypeEntityOperation extends IDataBasic implements IDataDynamic {
  TypeEntityOperation({
    TypeEnumEntity? entity,
    String? group,
    List<TypeEnumOperation>? operationList,
    int? operationMask
  }):
    _entity = entity,
    _group = group,
    _operationList = operationList,
    _operationMask = operationMask;

  static TypeEntityOperation? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEntityOperation();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEntityOperation_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEntityOperation: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEntityOperation? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEntityOperation_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEntityOperation_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEntityOperation_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumEntity? _entity;

  TypeEnumEntity get entity{
    return _entity!;
  }

  TypeEnumEntity? getEntity(){
    return _entity;
  }

  set entity(TypeEnumEntity data){
    _entity = data;
  }

  void setEntity(TypeEnumEntity? data){
    _entity = data;
  }

  String? _group;

  String get group{
    return _group!;
  }

  String? getGroup(){
    return _group;
  }

  set group(String data){
    _group = data;
  }

  void setGroup(String? data){
    _group = data;
  }

  List<TypeEnumOperation>? _operationList;

  List<TypeEnumOperation> get operationList{
    return _operationList!;
  }

  List<TypeEnumOperation>? getOperationList(){
    return _operationList;
  }

  set operationList(List<TypeEnumOperation> data){
    _operationList = data;
  }

  void setOperationList(List<TypeEnumOperation>? data){
    _operationList = data;
  }

  int? _operationMask;

  int get operationMask{
    return _operationMask!;
  }

  int? getOperationMask(){
    return _operationMask;
  }

  set operationMask(int data){
    _operationMask = data;
  }

  void setOperationMask(int? data){
    _operationMask = data;
  }

}

class FTypeEnumInfo extends IDataField {
  static const constantList = FTypeEnumInfo('constantList');
  static const encloseName = FTypeEnumInfo('encloseName');
  static const name = FTypeEnumInfo('name');
  static const packageName = FTypeEnumInfo('packageName');
  const FTypeEnumInfo(super.key);
}

final FieldReflectInfo<TypeEnumInfo> _TypeEnumInfo_fields = {
  "constantList": (
    getter: (data) => data._constantList,
    setter: (data, value) => data._constantList = value as List<TypeConstant>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeConstant>((single){
        final handler = TypeConstant.toDynamic;
        return handler(single)!;
      });
      return formatter(data._constantList);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeConstant>((single){
        final handler = TypeConstant.fromDynamic;
        return handler(single)!;
      });
      data._constantList = parser(value);
    }
  ),
  "encloseName": (
    getter: (data) => data._encloseName,
    setter: (data, value) => data._encloseName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._encloseName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._encloseName = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "packageName": (
    getter: (data) => data._packageName,
    setter: (data, value) => data._packageName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._packageName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._packageName = parser(value);
    }
  ),
};

class TypeEnumInfo extends IDataBasic implements IDataDynamic {
  TypeEnumInfo({
    List<TypeConstant>? constantList,
    String? encloseName,
    String? name,
    String? packageName
  }):
    _constantList = constantList,
    _encloseName = encloseName,
    _name = name,
    _packageName = packageName;

  static TypeEnumInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEnumInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEnumInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEnumInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEnumInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEnumInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEnumInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEnumInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeConstant>? _constantList;

  List<TypeConstant> get constantList{
    return _constantList!;
  }

  List<TypeConstant>? getConstantList(){
    return _constantList;
  }

  set constantList(List<TypeConstant> data){
    _constantList = data;
  }

  void setConstantList(List<TypeConstant>? data){
    _constantList = data;
  }

  String? _encloseName;

  String get encloseName{
    return _encloseName!;
  }

  String? getEncloseName(){
    return _encloseName;
  }

  set encloseName(String data){
    _encloseName = data;
  }

  void setEncloseName(String? data){
    _encloseName = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _packageName;

  String get packageName{
    return _packageName!;
  }

  String? getPackageName(){
    return _packageName;
  }

  set packageName(String data){
    _packageName = data;
  }

  void setPackageName(String? data){
    _packageName = data;
  }

}

class FTypeImageInfo extends IDataField {
  static const name = FTypeImageInfo('name');
  static const showOriginUrl = FTypeImageInfo('showOriginUrl');
  static const showPreviewUrl = FTypeImageInfo('showPreviewUrl');
  static const showThumbUrl = FTypeImageInfo('showThumbUrl');
  static const showUrl = FTypeImageInfo('showUrl');
  const FTypeImageInfo(super.key);
}

final FieldReflectInfo<TypeImageInfo> _TypeImageInfo_fields = {
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "showOriginUrl": (
    getter: (data) => data._showOriginUrl,
    setter: (data, value) => data._showOriginUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showOriginUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showOriginUrl = parser(value);
    }
  ),
  "showPreviewUrl": (
    getter: (data) => data._showPreviewUrl,
    setter: (data, value) => data._showPreviewUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showPreviewUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showPreviewUrl = parser(value);
    }
  ),
  "showThumbUrl": (
    getter: (data) => data._showThumbUrl,
    setter: (data, value) => data._showThumbUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showThumbUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showThumbUrl = parser(value);
    }
  ),
  "showUrl": (
    getter: (data) => data._showUrl,
    setter: (data, value) => data._showUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showUrl = parser(value);
    }
  ),
};

class TypeImageInfo extends IDataBasic implements IDataDynamic {
  TypeImageInfo({
    String? name,
    String? showOriginUrl,
    String? showPreviewUrl,
    String? showThumbUrl,
    String? showUrl
  }):
    _name = name,
    _showOriginUrl = showOriginUrl,
    _showPreviewUrl = showPreviewUrl,
    _showThumbUrl = showThumbUrl,
    _showUrl = showUrl;

  static TypeImageInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _showOriginUrl;

  String get showOriginUrl{
    return _showOriginUrl!;
  }

  String? getShowOriginUrl(){
    return _showOriginUrl;
  }

  set showOriginUrl(String data){
    _showOriginUrl = data;
  }

  void setShowOriginUrl(String? data){
    _showOriginUrl = data;
  }

  String? _showPreviewUrl;

  String get showPreviewUrl{
    return _showPreviewUrl!;
  }

  String? getShowPreviewUrl(){
    return _showPreviewUrl;
  }

  set showPreviewUrl(String data){
    _showPreviewUrl = data;
  }

  void setShowPreviewUrl(String? data){
    _showPreviewUrl = data;
  }

  String? _showThumbUrl;

  String get showThumbUrl{
    return _showThumbUrl!;
  }

  String? getShowThumbUrl(){
    return _showThumbUrl;
  }

  set showThumbUrl(String data){
    _showThumbUrl = data;
  }

  void setShowThumbUrl(String? data){
    _showThumbUrl = data;
  }

  String? _showUrl;

  String get showUrl{
    return _showUrl!;
  }

  String? getShowUrl(){
    return _showUrl;
  }

  set showUrl(String data){
    _showUrl = data;
  }

  void setShowUrl(String? data){
    _showUrl = data;
  }

}

class FTypeImageQueryDTO extends IDataField {
  static const data = FTypeImageQueryDTO('data');
  static const pageIndex = FTypeImageQueryDTO('pageIndex');
  static const pageSize = FTypeImageQueryDTO('pageSize');
  static const sum = FTypeImageQueryDTO('sum');
  const FTypeImageQueryDTO(super.key);
}

final FieldReflectInfo<TypeImageQueryDTO> _TypeImageQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeImageQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeImageQueryDataDTO>((single){
        final handler = TypeImageQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeImageQueryDataDTO>((single){
        final handler = TypeImageQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeImageQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeImageQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeImageQueryDTO extends IDataBasic implements IDataDynamic {
  TypeImageQueryDTO({
    List<TypeImageQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeImageQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeImageQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeImageQueryDataDTO>? _data;

  List<TypeImageQueryDataDTO> get data{
    return _data!;
  }

  List<TypeImageQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeImageQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeImageQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeImageQuerySumDTO? _sum;

  TypeImageQuerySumDTO get sum{
    return _sum!;
  }

  TypeImageQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeImageQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeImageQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeImageQueryDataDTO extends IDataField {
  static const attachmentId = FTypeImageQueryDataDTO('attachmentId');
  static const createEmployeeId = FTypeImageQueryDataDTO('createEmployeeId');
  static const createEmployeeName = FTypeImageQueryDataDTO('createEmployeeName');
  static const createTime = FTypeImageQueryDataDTO('createTime');
  static const id = FTypeImageQueryDataDTO('id');
  static const itemId = FTypeImageQueryDataDTO('itemId');
  static const itemName = FTypeImageQueryDataDTO('itemName');
  static const itemNumber = FTypeImageQueryDataDTO('itemNumber');
  static const name = FTypeImageQueryDataDTO('name');
  static const remark = FTypeImageQueryDataDTO('remark');
  static const showFileKey = FTypeImageQueryDataDTO('showFileKey');
  static const size = FTypeImageQueryDataDTO('size');
  const FTypeImageQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeImageQueryDataDTO> _TypeImageQueryDataDTO_fields = {
  "attachmentId": (
    getter: (data) => data._attachmentId,
    setter: (data, value) => data._attachmentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentId = parser(value);
    }
  ),
  "createEmployeeId": (
    getter: (data) => data._createEmployeeId,
    setter: (data, value) => data._createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._createEmployeeId = parser(value);
    }
  ),
  "createEmployeeName": (
    getter: (data) => data._createEmployeeName,
    setter: (data, value) => data._createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createEmployeeName = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "showFileKey": (
    getter: (data) => data._showFileKey,
    setter: (data, value) => data._showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._showFileKey = parser(value);
    }
  ),
  "size": (
    getter: (data) => data._size,
    setter: (data, value) => data._size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._size = parser(value);
    }
  ),
};

class TypeImageQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeImageQueryDataDTO({
    int? attachmentId,
    int? createEmployeeId,
    String? createEmployeeName,
    String? createTime,
    String? id,
    int? itemId,
    String? itemName,
    String? itemNumber,
    String? name,
    String? remark,
    String? showFileKey,
    int? size
  }):
    _attachmentId = attachmentId,
    _createEmployeeId = createEmployeeId,
    _createEmployeeName = createEmployeeName,
    _createTime = createTime,
    _id = id,
    _itemId = itemId,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _name = name,
    _remark = remark,
    _showFileKey = showFileKey,
    _size = size;

  static TypeImageQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _attachmentId;

  int get attachmentId{
    return _attachmentId!;
  }

  int? getAttachmentId(){
    return _attachmentId;
  }

  set attachmentId(int data){
    _attachmentId = data;
  }

  void setAttachmentId(int? data){
    _attachmentId = data;
  }

  int? _createEmployeeId;

  int get createEmployeeId{
    return _createEmployeeId!;
  }

  int? getCreateEmployeeId(){
    return _createEmployeeId;
  }

  set createEmployeeId(int data){
    _createEmployeeId = data;
  }

  void setCreateEmployeeId(int? data){
    _createEmployeeId = data;
  }

  String? _createEmployeeName;

  String get createEmployeeName{
    return _createEmployeeName!;
  }

  String? getCreateEmployeeName(){
    return _createEmployeeName;
  }

  set createEmployeeName(String data){
    _createEmployeeName = data;
  }

  void setCreateEmployeeName(String? data){
    _createEmployeeName = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _showFileKey;

  String get showFileKey{
    return _showFileKey!;
  }

  String? getShowFileKey(){
    return _showFileKey;
  }

  set showFileKey(String data){
    _showFileKey = data;
  }

  void setShowFileKey(String? data){
    _showFileKey = data;
  }

  int? _size;

  int get size{
    return _size!;
  }

  int? getSize(){
    return _size;
  }

  set size(int data){
    _size = data;
  }

  void setSize(int? data){
    _size = data;
  }

}

class FTypeImageQuerySumDTO extends IDataField {
  static const count = FTypeImageQuerySumDTO('count');
  static const size = FTypeImageQuerySumDTO('size');
  const FTypeImageQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeImageQuerySumDTO> _TypeImageQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "size": (
    getter: (data) => data._size,
    setter: (data, value) => data._size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._size = parser(value);
    }
  ),
};

class TypeImageQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeImageQuerySumDTO({
    int? count,
    int? size
  }):
    _count = count,
    _size = size;

  static TypeImageQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  int? _size;

  int get size{
    return _size!;
  }

  int? getSize(){
    return _size;
  }

  set size(int data){
    _size = data;
  }

  void setSize(int? data){
    _size = data;
  }

}

class FTypeItem extends IDataField {
  static const aliases = FTypeItem('aliases');
  static const basicUnitId = FTypeItem('basicUnitId');
  static const basicUnitInfo = FTypeItem('basicUnitInfo');
  static const basicUnitName = FTypeItem('basicUnitName');
  static const children = FTypeItem('children');
  static const commonUnitConvert = FTypeItem('commonUnitConvert');
  static const commonUnitId = FTypeItem('commonUnitId');
  static const commonUnitInfo = FTypeItem('commonUnitInfo');
  static const commonUnitName = FTypeItem('commonUnitName');
  static const createTime = FTypeItem('createTime');
  static const custom = FTypeItem('custom');
  static const defaultContact = FTypeItem('defaultContact');
  static const defaultContactId = FTypeItem('defaultContactId');
  static const hasBusinessLink = FTypeItem('hasBusinessLink');
  static const id = FTypeItem('id');
  static const image1 = FTypeItem('image1');
  static const image2 = FTypeItem('image2');
  static const imageInfo1 = FTypeItem('imageInfo1');
  static const imageInfo2 = FTypeItem('imageInfo2');
  static const isCategory = FTypeItem('isCategory');
  static const isEnabled = FTypeItem('isEnabled');
  static const isRegularType = FTypeItem('isRegularType');
  static const isSystem = FTypeItem('isSystem');
  static const modelRemark = FTypeItem('modelRemark');
  static const modifyTime = FTypeItem('modifyTime');
  static const name = FTypeItem('name');
  static const number = FTypeItem('number');
  static const parentId = FTypeItem('parentId');
  static const parentInfo = FTypeItem('parentInfo');
  static const remark = FTypeItem('remark');
  static const sortWeight = FTypeItem('sortWeight');
  static const specsRemark = FTypeItem('specsRemark');
  static const treeLevel = FTypeItem('treeLevel');
  static const treePath = FTypeItem('treePath');
  static const unitConvertDesc = FTypeItem('unitConvertDesc');
  static const unitConverts = FTypeItem('unitConverts');
  const FTypeItem(super.key);
}

final FieldReflectInfo<TypeItem> _TypeItem_fields = {
  "aliases": (
    getter: (data) => data._aliases,
    setter: (data, value) => data._aliases = value as List<TypeItemContactAlias>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemContactAlias>((single){
        final handler = TypeItemContactAlias.toDynamic;
        return handler(single)!;
      });
      return formatter(data._aliases);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemContactAlias>((single){
        final handler = TypeItemContactAlias.fromDynamic;
        return handler(single)!;
      });
      data._aliases = parser(value);
    }
  ),
  "basicUnitId": (
    getter: (data) => data._basicUnitId,
    setter: (data, value) => data._basicUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._basicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._basicUnitId = parser(value);
    }
  ),
  "basicUnitInfo": (
    getter: (data) => data._basicUnitInfo,
    setter: (data, value) => data._basicUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._basicUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._basicUnitInfo = parser(value);
    }
  ),
  "basicUnitName": (
    getter: (data) => data._basicUnitName,
    setter: (data, value) => data._basicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._basicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._basicUnitName = parser(value);
    }
  ),
  "children": (
    getter: (data) => data._children,
    setter: (data, value) => data._children = value as List<TypeItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItem>((single){
        final handler = TypeItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
        final handler = TypeItem.fromDynamic;
        return handler(single)!;
      });
      data._children = parser(value);
    }
  ),
  "commonUnitConvert": (
    getter: (data) => data._commonUnitConvert,
    setter: (data, value) => data._commonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitConvert = parser(value);
    }
  ),
  "commonUnitId": (
    getter: (data) => data._commonUnitId,
    setter: (data, value) => data._commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._commonUnitId = parser(value);
    }
  ),
  "commonUnitInfo": (
    getter: (data) => data._commonUnitInfo,
    setter: (data, value) => data._commonUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._commonUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._commonUnitInfo = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "custom": (
    getter: (data) => data._custom,
    setter: (data, value) => data._custom = value as TypeItemCustom?,
    toDynamic: (data) {
      final formatter = TypeItemCustom.toDynamic;
      return formatter(data._custom);
    },
    fromDynamic: (data, value) {
      final parser = TypeItemCustom.fromDynamic;
      data._custom = parser(value);
    }
  ),
  "defaultContact": (
    getter: (data) => data._defaultContact,
    setter: (data, value) => data._defaultContact = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._defaultContact);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._defaultContact = parser(value);
    }
  ),
  "defaultContactId": (
    getter: (data) => data._defaultContactId,
    setter: (data, value) => data._defaultContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._defaultContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._defaultContactId = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "image1": (
    getter: (data) => data._image1,
    setter: (data, value) => data._image1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._image1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._image1 = parser(value);
    }
  ),
  "image2": (
    getter: (data) => data._image2,
    setter: (data, value) => data._image2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._image2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._image2 = parser(value);
    }
  ),
  "imageInfo1": (
    getter: (data) => data._imageInfo1,
    setter: (data, value) => data._imageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data._imageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data._imageInfo1 = parser(value);
    }
  ),
  "imageInfo2": (
    getter: (data) => data._imageInfo2,
    setter: (data, value) => data._imageInfo2 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data._imageInfo2);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data._imageInfo2 = parser(value);
    }
  ),
  "isCategory": (
    getter: (data) => data._isCategory,
    setter: (data, value) => data._isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCategory = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isRegularType": (
    getter: (data) => data._isRegularType,
    setter: (data, value) => data._isRegularType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isRegularType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isRegularType = parser(value);
    }
  ),
  "isSystem": (
    getter: (data) => data._isSystem,
    setter: (data, value) => data._isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSystem = parser(value);
    }
  ),
  "modelRemark": (
    getter: (data) => data._modelRemark,
    setter: (data, value) => data._modelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modelRemark = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "parentId": (
    getter: (data) => data._parentId,
    setter: (data, value) => data._parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._parentId = parser(value);
    }
  ),
  "parentInfo": (
    getter: (data) => data._parentInfo,
    setter: (data, value) => data._parentInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data._parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data._parentInfo = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "sortWeight": (
    getter: (data) => data._sortWeight,
    setter: (data, value) => data._sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sortWeight = parser(value);
    }
  ),
  "specsRemark": (
    getter: (data) => data._specsRemark,
    setter: (data, value) => data._specsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._specsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._specsRemark = parser(value);
    }
  ),
  "treeLevel": (
    getter: (data) => data._treeLevel,
    setter: (data, value) => data._treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._treeLevel = parser(value);
    }
  ),
  "treePath": (
    getter: (data) => data._treePath,
    setter: (data, value) => data._treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._treePath = parser(value);
    }
  ),
  "unitConvertDesc": (
    getter: (data) => data._unitConvertDesc,
    setter: (data, value) => data._unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertDesc = parser(value);
    }
  ),
  "unitConverts": (
    getter: (data) => data._unitConverts,
    setter: (data, value) => data._unitConverts = value as List<TypeItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemUnitConvert>((single){
        final handler = TypeItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data._unitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemUnitConvert>((single){
        final handler = TypeItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data._unitConverts = parser(value);
    }
  ),
};

class TypeItem extends IDataBasic implements IDataDynamic {
  TypeItem({
    List<TypeItemContactAlias>? aliases,
    int? basicUnitId,
    TypeUnit? basicUnitInfo,
    String? basicUnitName,
    List<TypeItem>? children,
    String? commonUnitConvert,
    int? commonUnitId,
    TypeUnit? commonUnitInfo,
    String? commonUnitName,
    String? createTime,
    TypeItemCustom? custom,
    TypeContact? defaultContact,
    int? defaultContactId,
    int? hasBusinessLink,
    int? id,
    String? image1,
    String? image2,
    TypeImageInfo? imageInfo1,
    TypeImageInfo? imageInfo2,
    int? isCategory,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isRegularType,
    int? isSystem,
    String? modelRemark,
    String? modifyTime,
    String? name,
    String? number,
    int? parentId,
    TypeItem? parentInfo,
    String? remark,
    int? sortWeight,
    String? specsRemark,
    int? treeLevel,
    String? treePath,
    String? unitConvertDesc,
    List<TypeItemUnitConvert>? unitConverts
  }):
    _aliases = aliases,
    _basicUnitId = basicUnitId,
    _basicUnitInfo = basicUnitInfo,
    _basicUnitName = basicUnitName,
    _children = children,
    _commonUnitConvert = commonUnitConvert,
    _commonUnitId = commonUnitId,
    _commonUnitInfo = commonUnitInfo,
    _commonUnitName = commonUnitName,
    _createTime = createTime,
    _custom = custom,
    _defaultContact = defaultContact,
    _defaultContactId = defaultContactId,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _image1 = image1,
    _image2 = image2,
    _imageInfo1 = imageInfo1,
    _imageInfo2 = imageInfo2,
    _isCategory = isCategory,
    _isEnabled = isEnabled,
    _isRegularType = isRegularType,
    _isSystem = isSystem,
    _modelRemark = modelRemark,
    _modifyTime = modifyTime,
    _name = name,
    _number = number,
    _parentId = parentId,
    _parentInfo = parentInfo,
    _remark = remark,
    _sortWeight = sortWeight,
    _specsRemark = specsRemark,
    _treeLevel = treeLevel,
    _treePath = treePath,
    _unitConvertDesc = unitConvertDesc,
    _unitConverts = unitConverts;

  static TypeItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeItemContactAlias>? _aliases;

  List<TypeItemContactAlias> get aliases{
    return _aliases!;
  }

  List<TypeItemContactAlias>? getAliases(){
    return _aliases;
  }

  set aliases(List<TypeItemContactAlias> data){
    _aliases = data;
  }

  void setAliases(List<TypeItemContactAlias>? data){
    _aliases = data;
  }

  int? _basicUnitId;

  int get basicUnitId{
    return _basicUnitId!;
  }

  int? getBasicUnitId(){
    return _basicUnitId;
  }

  set basicUnitId(int data){
    _basicUnitId = data;
  }

  void setBasicUnitId(int? data){
    _basicUnitId = data;
  }

  TypeUnit? _basicUnitInfo;

  TypeUnit get basicUnitInfo{
    return _basicUnitInfo!;
  }

  TypeUnit? getBasicUnitInfo(){
    return _basicUnitInfo;
  }

  set basicUnitInfo(TypeUnit data){
    _basicUnitInfo = data;
  }

  void setBasicUnitInfo(TypeUnit? data){
    _basicUnitInfo = data;
  }

  String? _basicUnitName;

  String get basicUnitName{
    return _basicUnitName!;
  }

  String? getBasicUnitName(){
    return _basicUnitName;
  }

  set basicUnitName(String data){
    _basicUnitName = data;
  }

  void setBasicUnitName(String? data){
    _basicUnitName = data;
  }

  List<TypeItem>? _children;

  List<TypeItem> get children{
    return _children!;
  }

  List<TypeItem>? getChildren(){
    return _children;
  }

  set children(List<TypeItem> data){
    _children = data;
  }

  void setChildren(List<TypeItem>? data){
    _children = data;
  }

  String? _commonUnitConvert;

  String get commonUnitConvert{
    return _commonUnitConvert!;
  }

  String? getCommonUnitConvert(){
    return _commonUnitConvert;
  }

  set commonUnitConvert(String data){
    _commonUnitConvert = data;
  }

  void setCommonUnitConvert(String? data){
    _commonUnitConvert = data;
  }

  int? _commonUnitId;

  int get commonUnitId{
    return _commonUnitId!;
  }

  int? getCommonUnitId(){
    return _commonUnitId;
  }

  set commonUnitId(int data){
    _commonUnitId = data;
  }

  void setCommonUnitId(int? data){
    _commonUnitId = data;
  }

  TypeUnit? _commonUnitInfo;

  TypeUnit get commonUnitInfo{
    return _commonUnitInfo!;
  }

  TypeUnit? getCommonUnitInfo(){
    return _commonUnitInfo;
  }

  set commonUnitInfo(TypeUnit data){
    _commonUnitInfo = data;
  }

  void setCommonUnitInfo(TypeUnit? data){
    _commonUnitInfo = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  TypeItemCustom? _custom;

  TypeItemCustom get custom{
    return _custom!;
  }

  TypeItemCustom? getCustom(){
    return _custom;
  }

  set custom(TypeItemCustom data){
    _custom = data;
  }

  void setCustom(TypeItemCustom? data){
    _custom = data;
  }

  TypeContact? _defaultContact;

  TypeContact get defaultContact{
    return _defaultContact!;
  }

  TypeContact? getDefaultContact(){
    return _defaultContact;
  }

  set defaultContact(TypeContact data){
    _defaultContact = data;
  }

  void setDefaultContact(TypeContact? data){
    _defaultContact = data;
  }

  int? _defaultContactId;

  int get defaultContactId{
    return _defaultContactId!;
  }

  int? getDefaultContactId(){
    return _defaultContactId;
  }

  set defaultContactId(int data){
    _defaultContactId = data;
  }

  void setDefaultContactId(int? data){
    _defaultContactId = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _image1;

  String get image1{
    return _image1!;
  }

  String? getImage1(){
    return _image1;
  }

  set image1(String data){
    _image1 = data;
  }

  void setImage1(String? data){
    _image1 = data;
  }

  String? _image2;

  String get image2{
    return _image2!;
  }

  String? getImage2(){
    return _image2;
  }

  set image2(String data){
    _image2 = data;
  }

  void setImage2(String? data){
    _image2 = data;
  }

  TypeImageInfo? _imageInfo1;

  TypeImageInfo get imageInfo1{
    return _imageInfo1!;
  }

  TypeImageInfo? getImageInfo1(){
    return _imageInfo1;
  }

  set imageInfo1(TypeImageInfo data){
    _imageInfo1 = data;
  }

  void setImageInfo1(TypeImageInfo? data){
    _imageInfo1 = data;
  }

  TypeImageInfo? _imageInfo2;

  TypeImageInfo get imageInfo2{
    return _imageInfo2!;
  }

  TypeImageInfo? getImageInfo2(){
    return _imageInfo2;
  }

  set imageInfo2(TypeImageInfo data){
    _imageInfo2 = data;
  }

  void setImageInfo2(TypeImageInfo? data){
    _imageInfo2 = data;
  }

  int? _isCategory;

  int get isCategory{
    return _isCategory!;
  }

  int? getIsCategory(){
    return _isCategory;
  }

  set isCategory(int data){
    _isCategory = data;
  }

  void setIsCategory(int? data){
    _isCategory = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isRegularType;

  int get isRegularType{
    return _isRegularType!;
  }

  int? getIsRegularType(){
    return _isRegularType;
  }

  set isRegularType(int data){
    _isRegularType = data;
  }

  void setIsRegularType(int? data){
    _isRegularType = data;
  }

  int? _isSystem;

  int get isSystem{
    return _isSystem!;
  }

  int? getIsSystem(){
    return _isSystem;
  }

  set isSystem(int data){
    _isSystem = data;
  }

  void setIsSystem(int? data){
    _isSystem = data;
  }

  String? _modelRemark;

  String get modelRemark{
    return _modelRemark!;
  }

  String? getModelRemark(){
    return _modelRemark;
  }

  set modelRemark(String data){
    _modelRemark = data;
  }

  void setModelRemark(String? data){
    _modelRemark = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _parentId;

  int get parentId{
    return _parentId!;
  }

  int? getParentId(){
    return _parentId;
  }

  set parentId(int data){
    _parentId = data;
  }

  void setParentId(int? data){
    _parentId = data;
  }

  TypeItem? _parentInfo;

  TypeItem get parentInfo{
    return _parentInfo!;
  }

  TypeItem? getParentInfo(){
    return _parentInfo;
  }

  set parentInfo(TypeItem data){
    _parentInfo = data;
  }

  void setParentInfo(TypeItem? data){
    _parentInfo = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _sortWeight;

  int get sortWeight{
    return _sortWeight!;
  }

  int? getSortWeight(){
    return _sortWeight;
  }

  set sortWeight(int data){
    _sortWeight = data;
  }

  void setSortWeight(int? data){
    _sortWeight = data;
  }

  String? _specsRemark;

  String get specsRemark{
    return _specsRemark!;
  }

  String? getSpecsRemark(){
    return _specsRemark;
  }

  set specsRemark(String data){
    _specsRemark = data;
  }

  void setSpecsRemark(String? data){
    _specsRemark = data;
  }

  int? _treeLevel;

  int get treeLevel{
    return _treeLevel!;
  }

  int? getTreeLevel(){
    return _treeLevel;
  }

  set treeLevel(int data){
    _treeLevel = data;
  }

  void setTreeLevel(int? data){
    _treeLevel = data;
  }

  String? _treePath;

  String get treePath{
    return _treePath!;
  }

  String? getTreePath(){
    return _treePath;
  }

  set treePath(String data){
    _treePath = data;
  }

  void setTreePath(String? data){
    _treePath = data;
  }

  String? _unitConvertDesc;

  String get unitConvertDesc{
    return _unitConvertDesc!;
  }

  String? getUnitConvertDesc(){
    return _unitConvertDesc;
  }

  set unitConvertDesc(String data){
    _unitConvertDesc = data;
  }

  void setUnitConvertDesc(String? data){
    _unitConvertDesc = data;
  }

  List<TypeItemUnitConvert>? _unitConverts;

  List<TypeItemUnitConvert> get unitConverts{
    return _unitConverts!;
  }

  List<TypeItemUnitConvert>? getUnitConverts(){
    return _unitConverts;
  }

  set unitConverts(List<TypeItemUnitConvert> data){
    _unitConverts = data;
  }

  void setUnitConverts(List<TypeItemUnitConvert>? data){
    _unitConverts = data;
  }

}

class FTypeItemContactAlias extends IDataField {
  static const aliasItemName = FTypeItemContactAlias('aliasItemName');
  static const aliasItemNumber = FTypeItemContactAlias('aliasItemNumber');
  static const contactId = FTypeItemContactAlias('contactId');
  static const contactInfo = FTypeItemContactAlias('contactInfo');
  static const createTime = FTypeItemContactAlias('createTime');
  static const id = FTypeItemContactAlias('id');
  static const modifyTime = FTypeItemContactAlias('modifyTime');
  const FTypeItemContactAlias(super.key);
}

final FieldReflectInfo<TypeItemContactAlias> _TypeItemContactAlias_fields = {
  "aliasItemName": (
    getter: (data) => data._aliasItemName,
    setter: (data, value) => data._aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemName = parser(value);
    }
  ),
  "aliasItemNumber": (
    getter: (data) => data._aliasItemNumber,
    setter: (data, value) => data._aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemNumber = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactInfo": (
    getter: (data) => data._contactInfo,
    setter: (data, value) => data._contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._contactInfo = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
};

class TypeItemContactAlias extends IDataBasic implements IDataDynamic {
  TypeItemContactAlias({
    String? aliasItemName,
    String? aliasItemNumber,
    int? contactId,
    TypeContact? contactInfo,
    String? createTime,
    String? id,
    String? modifyTime
  }):
    _aliasItemName = aliasItemName,
    _aliasItemNumber = aliasItemNumber,
    _contactId = contactId,
    _contactInfo = contactInfo,
    _createTime = createTime,
    _id = id,
    _modifyTime = modifyTime;

  static TypeItemContactAlias? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemContactAlias();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemContactAlias_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemContactAlias: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemContactAlias? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemContactAlias_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemContactAlias_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemContactAlias_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _aliasItemName;

  String get aliasItemName{
    return _aliasItemName!;
  }

  String? getAliasItemName(){
    return _aliasItemName;
  }

  set aliasItemName(String data){
    _aliasItemName = data;
  }

  void setAliasItemName(String? data){
    _aliasItemName = data;
  }

  String? _aliasItemNumber;

  String get aliasItemNumber{
    return _aliasItemNumber!;
  }

  String? getAliasItemNumber(){
    return _aliasItemNumber;
  }

  set aliasItemNumber(String data){
    _aliasItemNumber = data;
  }

  void setAliasItemNumber(String? data){
    _aliasItemNumber = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  TypeContact? _contactInfo;

  TypeContact get contactInfo{
    return _contactInfo!;
  }

  TypeContact? getContactInfo(){
    return _contactInfo;
  }

  set contactInfo(TypeContact data){
    _contactInfo = data;
  }

  void setContactInfo(TypeContact? data){
    _contactInfo = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

}

class FTypeItemCustom extends IDataField {
  static const abnormalRemark = FTypeItemCustom('abnormalRemark');
  static const abnormalState = FTypeItemCustom('abnormalState');
  const FTypeItemCustom(super.key);
}

final FieldReflectInfo<TypeItemCustom> _TypeItemCustom_fields = {
  "abnormalRemark": (
    getter: (data) => data._abnormalRemark,
    setter: (data, value) => data._abnormalRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._abnormalRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._abnormalRemark = parser(value);
    }
  ),
  "abnormalState": (
    getter: (data) => data._abnormalState,
    setter: (data, value) => data._abnormalState = value as TypeEnumItemCustomAbnormalState?,
    toDynamic: (data) {
      final formatter = TypeEnumItemCustomAbnormalState.toDynamic;
      return formatter(data._abnormalState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumItemCustomAbnormalState.fromDynamic;
      data._abnormalState = parser(value);
    }
  ),
};

class TypeItemCustom extends IDataBasic implements IDataDynamic {
  TypeItemCustom({
    String? abnormalRemark,
    TypeEnumItemCustomAbnormalState? abnormalState
  }):
    _abnormalRemark = abnormalRemark,
    _abnormalState = abnormalState;

  static TypeItemCustom? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemCustom();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemCustom_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemCustom: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemCustom? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemCustom_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemCustom_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemCustom_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _abnormalRemark;

  String get abnormalRemark{
    return _abnormalRemark!;
  }

  String? getAbnormalRemark(){
    return _abnormalRemark;
  }

  set abnormalRemark(String data){
    _abnormalRemark = data;
  }

  void setAbnormalRemark(String? data){
    _abnormalRemark = data;
  }

  TypeEnumItemCustomAbnormalState? _abnormalState;

  TypeEnumItemCustomAbnormalState get abnormalState{
    return _abnormalState!;
  }

  TypeEnumItemCustomAbnormalState? getAbnormalState(){
    return _abnormalState;
  }

  set abnormalState(TypeEnumItemCustomAbnormalState data){
    _abnormalState = data;
  }

  void setAbnormalState(TypeEnumItemCustomAbnormalState? data){
    _abnormalState = data;
  }

}

class FTypeItemUnitConvert extends IDataField {
  static const canBusinessLink = FTypeItemUnitConvert('canBusinessLink');
  static const createTime = FTypeItemUnitConvert('createTime');
  static const hasBusinessLink = FTypeItemUnitConvert('hasBusinessLink');
  static const id = FTypeItemUnitConvert('id');
  static const isBasic = FTypeItemUnitConvert('isBasic');
  static const isCommon = FTypeItemUnitConvert('isCommon');
  static const isEnabled = FTypeItemUnitConvert('isEnabled');
  static const modifyTime = FTypeItemUnitConvert('modifyTime');
  static const purchasePrice = FTypeItemUnitConvert('purchasePrice');
  static const unitConvert = FTypeItemUnitConvert('unitConvert');
  static const unitConvertDesc = FTypeItemUnitConvert('unitConvertDesc');
  static const unitId = FTypeItemUnitConvert('unitId');
  static const unitInfo = FTypeItemUnitConvert('unitInfo');
  static const unitName = FTypeItemUnitConvert('unitName');
  static const wholeSalesPrice = FTypeItemUnitConvert('wholeSalesPrice');
  const FTypeItemUnitConvert(super.key);
}

final FieldReflectInfo<TypeItemUnitConvert> _TypeItemUnitConvert_fields = {
  "canBusinessLink": (
    getter: (data) => data._canBusinessLink,
    setter: (data, value) => data._canBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._canBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._canBusinessLink = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isBasic": (
    getter: (data) => data._isBasic,
    setter: (data, value) => data._isBasic = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isBasic);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isBasic = parser(value);
    }
  ),
  "isCommon": (
    getter: (data) => data._isCommon,
    setter: (data, value) => data._isCommon = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCommon);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCommon = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "purchasePrice": (
    getter: (data) => data._purchasePrice,
    setter: (data, value) => data._purchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchasePrice = parser(value);
    }
  ),
  "unitConvert": (
    getter: (data) => data._unitConvert,
    setter: (data, value) => data._unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvert = parser(value);
    }
  ),
  "unitConvertDesc": (
    getter: (data) => data._unitConvertDesc,
    setter: (data, value) => data._unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertDesc = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitInfo": (
    getter: (data) => data._unitInfo,
    setter: (data, value) => data._unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._unitInfo = parser(value);
    }
  ),
  "unitName": (
    getter: (data) => data._unitName,
    setter: (data, value) => data._unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitName = parser(value);
    }
  ),
  "wholeSalesPrice": (
    getter: (data) => data._wholeSalesPrice,
    setter: (data, value) => data._wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._wholeSalesPrice = parser(value);
    }
  ),
};

class TypeItemUnitConvert extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvert({
    int? canBusinessLink,
    String? createTime,
    int? hasBusinessLink,
    String? id,
    int? isBasic,
    int? isCommon,
    TypeEnumSoftEnableIsEnable? isEnabled,
    String? modifyTime,
    String? purchasePrice,
    String? unitConvert,
    String? unitConvertDesc,
    int? unitId,
    TypeUnit? unitInfo,
    String? unitName,
    String? wholeSalesPrice
  }):
    _canBusinessLink = canBusinessLink,
    _createTime = createTime,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _isBasic = isBasic,
    _isCommon = isCommon,
    _isEnabled = isEnabled,
    _modifyTime = modifyTime,
    _purchasePrice = purchasePrice,
    _unitConvert = unitConvert,
    _unitConvertDesc = unitConvertDesc,
    _unitId = unitId,
    _unitInfo = unitInfo,
    _unitName = unitName,
    _wholeSalesPrice = wholeSalesPrice;

  static TypeItemUnitConvert? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvert();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvert_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvert: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvert_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _canBusinessLink;

  int get canBusinessLink{
    return _canBusinessLink!;
  }

  int? getCanBusinessLink(){
    return _canBusinessLink;
  }

  set canBusinessLink(int data){
    _canBusinessLink = data;
  }

  void setCanBusinessLink(int? data){
    _canBusinessLink = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _isBasic;

  int get isBasic{
    return _isBasic!;
  }

  int? getIsBasic(){
    return _isBasic;
  }

  set isBasic(int data){
    _isBasic = data;
  }

  void setIsBasic(int? data){
    _isBasic = data;
  }

  int? _isCommon;

  int get isCommon{
    return _isCommon!;
  }

  int? getIsCommon(){
    return _isCommon;
  }

  set isCommon(int data){
    _isCommon = data;
  }

  void setIsCommon(int? data){
    _isCommon = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _purchasePrice;

  String get purchasePrice{
    return _purchasePrice!;
  }

  String? getPurchasePrice(){
    return _purchasePrice;
  }

  set purchasePrice(String data){
    _purchasePrice = data;
  }

  void setPurchasePrice(String? data){
    _purchasePrice = data;
  }

  String? _unitConvert;

  String get unitConvert{
    return _unitConvert!;
  }

  String? getUnitConvert(){
    return _unitConvert;
  }

  set unitConvert(String data){
    _unitConvert = data;
  }

  void setUnitConvert(String? data){
    _unitConvert = data;
  }

  String? _unitConvertDesc;

  String get unitConvertDesc{
    return _unitConvertDesc!;
  }

  String? getUnitConvertDesc(){
    return _unitConvertDesc;
  }

  set unitConvertDesc(String data){
    _unitConvertDesc = data;
  }

  void setUnitConvertDesc(String? data){
    _unitConvertDesc = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  TypeUnit? _unitInfo;

  TypeUnit get unitInfo{
    return _unitInfo!;
  }

  TypeUnit? getUnitInfo(){
    return _unitInfo;
  }

  set unitInfo(TypeUnit data){
    _unitInfo = data;
  }

  void setUnitInfo(TypeUnit? data){
    _unitInfo = data;
  }

  String? _unitName;

  String get unitName{
    return _unitName!;
  }

  String? getUnitName(){
    return _unitName;
  }

  set unitName(String data){
    _unitName = data;
  }

  void setUnitName(String? data){
    _unitName = data;
  }

  String? _wholeSalesPrice;

  String get wholeSalesPrice{
    return _wholeSalesPrice!;
  }

  String? getWholeSalesPrice(){
    return _wholeSalesPrice;
  }

  set wholeSalesPrice(String data){
    _wholeSalesPrice = data;
  }

  void setWholeSalesPrice(String? data){
    _wholeSalesPrice = data;
  }

}

class FTypeItemUnitConvertQueryDTO extends IDataField {
  static const data = FTypeItemUnitConvertQueryDTO('data');
  static const pageIndex = FTypeItemUnitConvertQueryDTO('pageIndex');
  static const pageSize = FTypeItemUnitConvertQueryDTO('pageSize');
  static const sum = FTypeItemUnitConvertQueryDTO('sum');
  const FTypeItemUnitConvertQueryDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQueryDTO> _TypeItemUnitConvertQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeItemUnitConvertQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemUnitConvertQueryDataDTO>((single){
        final handler = TypeItemUnitConvertQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemUnitConvertQueryDataDTO>((single){
        final handler = TypeItemUnitConvertQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeItemUnitConvertQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeItemUnitConvertQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeItemUnitConvertQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeItemUnitConvertQueryDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQueryDTO({
    List<TypeItemUnitConvertQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeItemUnitConvertQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeItemUnitConvertQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeItemUnitConvertQueryDataDTO>? _data;

  List<TypeItemUnitConvertQueryDataDTO> get data{
    return _data!;
  }

  List<TypeItemUnitConvertQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeItemUnitConvertQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeItemUnitConvertQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeItemUnitConvertQuerySumDTO? _sum;

  TypeItemUnitConvertQuerySumDTO get sum{
    return _sum!;
  }

  TypeItemUnitConvertQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeItemUnitConvertQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeItemUnitConvertQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeItemUnitConvertQueryDataDTO extends IDataField {
  static const id = FTypeItemUnitConvertQueryDataDTO('id');
  static const itemId = FTypeItemUnitConvertQueryDataDTO('itemId');
  static const itemImage1 = FTypeItemUnitConvertQueryDataDTO('itemImage1');
  static const itemImageInfo1 = FTypeItemUnitConvertQueryDataDTO('itemImageInfo1');
  static const itemIsEnabled = FTypeItemUnitConvertQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeItemUnitConvertQueryDataDTO('itemModelRemark');
  static const itemName = FTypeItemUnitConvertQueryDataDTO('itemName');
  static const itemNumber = FTypeItemUnitConvertQueryDataDTO('itemNumber');
  static const itemParentId = FTypeItemUnitConvertQueryDataDTO('itemParentId');
  static const itemParentName = FTypeItemUnitConvertQueryDataDTO('itemParentName');
  static const itemRemark = FTypeItemUnitConvertQueryDataDTO('itemRemark');
  static const itemSortWeight = FTypeItemUnitConvertQueryDataDTO('itemSortWeight');
  static const itemSpecsRemark = FTypeItemUnitConvertQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeItemUnitConvertQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeItemUnitConvertQueryDataDTO('itemUnitConvertDesc');
  static const purchasePrice = FTypeItemUnitConvertQueryDataDTO('purchasePrice');
  static const unitId = FTypeItemUnitConvertQueryDataDTO('unitId');
  static const unitName = FTypeItemUnitConvertQueryDataDTO('unitName');
  static const wholeSalesPrice = FTypeItemUnitConvertQueryDataDTO('wholeSalesPrice');
  const FTypeItemUnitConvertQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQueryDataDTO> _TypeItemUnitConvertQueryDataDTO_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemImage1": (
    getter: (data) => data._itemImage1,
    setter: (data, value) => data._itemImage1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemImage1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemImage1 = parser(value);
    }
  ),
  "itemImageInfo1": (
    getter: (data) => data._itemImageInfo1,
    setter: (data, value) => data._itemImageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data._itemImageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data._itemImageInfo1 = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemParentId": (
    getter: (data) => data._itemParentId,
    setter: (data, value) => data._itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemParentId = parser(value);
    }
  ),
  "itemParentName": (
    getter: (data) => data._itemParentName,
    setter: (data, value) => data._itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemParentName = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSortWeight": (
    getter: (data) => data._itemSortWeight,
    setter: (data, value) => data._itemSortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemSortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemSortWeight = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemTreePath": (
    getter: (data) => data._itemTreePath,
    setter: (data, value) => data._itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemTreePath = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "purchasePrice": (
    getter: (data) => data._purchasePrice,
    setter: (data, value) => data._purchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchasePrice = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitName": (
    getter: (data) => data._unitName,
    setter: (data, value) => data._unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitName = parser(value);
    }
  ),
  "wholeSalesPrice": (
    getter: (data) => data._wholeSalesPrice,
    setter: (data, value) => data._wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._wholeSalesPrice = parser(value);
    }
  ),
};

class TypeItemUnitConvertQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQueryDataDTO({
    String? id,
    int? itemId,
    String? itemImage1,
    TypeImageInfo? itemImageInfo1,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    int? itemParentId,
    String? itemParentName,
    String? itemRemark,
    int? itemSortWeight,
    String? itemSpecsRemark,
    String? itemTreePath,
    String? itemUnitConvertDesc,
    String? purchasePrice,
    int? unitId,
    String? unitName,
    String? wholeSalesPrice
  }):
    _id = id,
    _itemId = itemId,
    _itemImage1 = itemImage1,
    _itemImageInfo1 = itemImageInfo1,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemParentId = itemParentId,
    _itemParentName = itemParentName,
    _itemRemark = itemRemark,
    _itemSortWeight = itemSortWeight,
    _itemSpecsRemark = itemSpecsRemark,
    _itemTreePath = itemTreePath,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _purchasePrice = purchasePrice,
    _unitId = unitId,
    _unitName = unitName,
    _wholeSalesPrice = wholeSalesPrice;

  static TypeItemUnitConvertQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemImage1;

  String get itemImage1{
    return _itemImage1!;
  }

  String? getItemImage1(){
    return _itemImage1;
  }

  set itemImage1(String data){
    _itemImage1 = data;
  }

  void setItemImage1(String? data){
    _itemImage1 = data;
  }

  TypeImageInfo? _itemImageInfo1;

  TypeImageInfo get itemImageInfo1{
    return _itemImageInfo1!;
  }

  TypeImageInfo? getItemImageInfo1(){
    return _itemImageInfo1;
  }

  set itemImageInfo1(TypeImageInfo data){
    _itemImageInfo1 = data;
  }

  void setItemImageInfo1(TypeImageInfo? data){
    _itemImageInfo1 = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  int? _itemParentId;

  int get itemParentId{
    return _itemParentId!;
  }

  int? getItemParentId(){
    return _itemParentId;
  }

  set itemParentId(int data){
    _itemParentId = data;
  }

  void setItemParentId(int? data){
    _itemParentId = data;
  }

  String? _itemParentName;

  String get itemParentName{
    return _itemParentName!;
  }

  String? getItemParentName(){
    return _itemParentName;
  }

  set itemParentName(String data){
    _itemParentName = data;
  }

  void setItemParentName(String? data){
    _itemParentName = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  int? _itemSortWeight;

  int get itemSortWeight{
    return _itemSortWeight!;
  }

  int? getItemSortWeight(){
    return _itemSortWeight;
  }

  set itemSortWeight(int data){
    _itemSortWeight = data;
  }

  void setItemSortWeight(int? data){
    _itemSortWeight = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemTreePath;

  String get itemTreePath{
    return _itemTreePath!;
  }

  String? getItemTreePath(){
    return _itemTreePath;
  }

  set itemTreePath(String data){
    _itemTreePath = data;
  }

  void setItemTreePath(String? data){
    _itemTreePath = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  String? _purchasePrice;

  String get purchasePrice{
    return _purchasePrice!;
  }

  String? getPurchasePrice(){
    return _purchasePrice;
  }

  set purchasePrice(String data){
    _purchasePrice = data;
  }

  void setPurchasePrice(String? data){
    _purchasePrice = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  String? _unitName;

  String get unitName{
    return _unitName!;
  }

  String? getUnitName(){
    return _unitName;
  }

  set unitName(String data){
    _unitName = data;
  }

  void setUnitName(String? data){
    _unitName = data;
  }

  String? _wholeSalesPrice;

  String get wholeSalesPrice{
    return _wholeSalesPrice!;
  }

  String? getWholeSalesPrice(){
    return _wholeSalesPrice;
  }

  set wholeSalesPrice(String data){
    _wholeSalesPrice = data;
  }

  void setWholeSalesPrice(String? data){
    _wholeSalesPrice = data;
  }

}

class FTypeItemUnitConvertQuerySumDTO extends IDataField {
  static const count = FTypeItemUnitConvertQuerySumDTO('count');
  const FTypeItemUnitConvertQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQuerySumDTO> _TypeItemUnitConvertQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
};

class TypeItemUnitConvertQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQuerySumDTO({
    int? count
  }):
    _count = count;

  static TypeItemUnitConvertQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

}

class FTypeMainIndexAccountDataDTO extends IDataField {
  static const accountPayableBalance = FTypeMainIndexAccountDataDTO('accountPayableBalance');
  static const accountReceivableBalance = FTypeMainIndexAccountDataDTO('accountReceivableBalance');
  static const cashBalance = FTypeMainIndexAccountDataDTO('cashBalance');
  static const receiveCashTotal = FTypeMainIndexAccountDataDTO('receiveCashTotal');
  static const salesCost = FTypeMainIndexAccountDataDTO('salesCost');
  static const salesIncome = FTypeMainIndexAccountDataDTO('salesIncome');
  static const salesProfit = FTypeMainIndexAccountDataDTO('salesProfit');
  static const salesProfitRate = FTypeMainIndexAccountDataDTO('salesProfitRate');
  static const stockBalance = FTypeMainIndexAccountDataDTO('stockBalance');
  const FTypeMainIndexAccountDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexAccountDataDTO> _TypeMainIndexAccountDataDTO_fields = {
  "accountPayableBalance": (
    getter: (data) => data._accountPayableBalance,
    setter: (data, value) => data._accountPayableBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountPayableBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountPayableBalance = parser(value);
    }
  ),
  "accountReceivableBalance": (
    getter: (data) => data._accountReceivableBalance,
    setter: (data, value) => data._accountReceivableBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._accountReceivableBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._accountReceivableBalance = parser(value);
    }
  ),
  "cashBalance": (
    getter: (data) => data._cashBalance,
    setter: (data, value) => data._cashBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashBalance = parser(value);
    }
  ),
  "receiveCashTotal": (
    getter: (data) => data._receiveCashTotal,
    setter: (data, value) => data._receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashTotal = parser(value);
    }
  ),
  "salesCost": (
    getter: (data) => data._salesCost,
    setter: (data, value) => data._salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesCost = parser(value);
    }
  ),
  "salesIncome": (
    getter: (data) => data._salesIncome,
    setter: (data, value) => data._salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesIncome = parser(value);
    }
  ),
  "salesProfit": (
    getter: (data) => data._salesProfit,
    setter: (data, value) => data._salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesProfit = parser(value);
    }
  ),
  "salesProfitRate": (
    getter: (data) => data._salesProfitRate,
    setter: (data, value) => data._salesProfitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesProfitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesProfitRate = parser(value);
    }
  ),
  "stockBalance": (
    getter: (data) => data._stockBalance,
    setter: (data, value) => data._stockBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockBalance = parser(value);
    }
  ),
};

class TypeMainIndexAccountDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexAccountDataDTO({
    String? accountPayableBalance,
    String? accountReceivableBalance,
    String? cashBalance,
    String? receiveCashTotal,
    String? salesCost,
    String? salesIncome,
    String? salesProfit,
    String? salesProfitRate,
    String? stockBalance
  }):
    _accountPayableBalance = accountPayableBalance,
    _accountReceivableBalance = accountReceivableBalance,
    _cashBalance = cashBalance,
    _receiveCashTotal = receiveCashTotal,
    _salesCost = salesCost,
    _salesIncome = salesIncome,
    _salesProfit = salesProfit,
    _salesProfitRate = salesProfitRate,
    _stockBalance = stockBalance;

  static TypeMainIndexAccountDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexAccountDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexAccountDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexAccountDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexAccountDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexAccountDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexAccountDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexAccountDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _accountPayableBalance;

  String get accountPayableBalance{
    return _accountPayableBalance!;
  }

  String? getAccountPayableBalance(){
    return _accountPayableBalance;
  }

  set accountPayableBalance(String data){
    _accountPayableBalance = data;
  }

  void setAccountPayableBalance(String? data){
    _accountPayableBalance = data;
  }

  String? _accountReceivableBalance;

  String get accountReceivableBalance{
    return _accountReceivableBalance!;
  }

  String? getAccountReceivableBalance(){
    return _accountReceivableBalance;
  }

  set accountReceivableBalance(String data){
    _accountReceivableBalance = data;
  }

  void setAccountReceivableBalance(String? data){
    _accountReceivableBalance = data;
  }

  String? _cashBalance;

  String get cashBalance{
    return _cashBalance!;
  }

  String? getCashBalance(){
    return _cashBalance;
  }

  set cashBalance(String data){
    _cashBalance = data;
  }

  void setCashBalance(String? data){
    _cashBalance = data;
  }

  String? _receiveCashTotal;

  String get receiveCashTotal{
    return _receiveCashTotal!;
  }

  String? getReceiveCashTotal(){
    return _receiveCashTotal;
  }

  set receiveCashTotal(String data){
    _receiveCashTotal = data;
  }

  void setReceiveCashTotal(String? data){
    _receiveCashTotal = data;
  }

  String? _salesCost;

  String get salesCost{
    return _salesCost!;
  }

  String? getSalesCost(){
    return _salesCost;
  }

  set salesCost(String data){
    _salesCost = data;
  }

  void setSalesCost(String? data){
    _salesCost = data;
  }

  String? _salesIncome;

  String get salesIncome{
    return _salesIncome!;
  }

  String? getSalesIncome(){
    return _salesIncome;
  }

  set salesIncome(String data){
    _salesIncome = data;
  }

  void setSalesIncome(String? data){
    _salesIncome = data;
  }

  String? _salesProfit;

  String get salesProfit{
    return _salesProfit!;
  }

  String? getSalesProfit(){
    return _salesProfit;
  }

  set salesProfit(String data){
    _salesProfit = data;
  }

  void setSalesProfit(String? data){
    _salesProfit = data;
  }

  String? _salesProfitRate;

  String get salesProfitRate{
    return _salesProfitRate!;
  }

  String? getSalesProfitRate(){
    return _salesProfitRate;
  }

  set salesProfitRate(String data){
    _salesProfitRate = data;
  }

  void setSalesProfitRate(String? data){
    _salesProfitRate = data;
  }

  String? _stockBalance;

  String get stockBalance{
    return _stockBalance!;
  }

  String? getStockBalance(){
    return _stockBalance;
  }

  set stockBalance(String data){
    _stockBalance = data;
  }

  void setStockBalance(String? data){
    _stockBalance = data;
  }

}

class FTypeMainIndexContactDataDTO extends IDataField {
  static const id = FTypeMainIndexContactDataDTO('id');
  static const name = FTypeMainIndexContactDataDTO('name');
  static const total = FTypeMainIndexContactDataDTO('total');
  const FTypeMainIndexContactDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexContactDataDTO> _TypeMainIndexContactDataDTO_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeMainIndexContactDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexContactDataDTO({
    String? id,
    String? name,
    String? total
  }):
    _id = id,
    _name = name,
    _total = total;

  static TypeMainIndexContactDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexContactDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexContactDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexContactDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexContactDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexContactDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexContactDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexContactDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeMainIndexDataDTO extends IDataField {
  static const account = FTypeMainIndexDataDTO('account');
  static const contacts = FTypeMainIndexDataDTO('contacts');
  static const items = FTypeMainIndexDataDTO('items');
  static const profits = FTypeMainIndexDataDTO('profits');
  static const todo = FTypeMainIndexDataDTO('todo');
  const FTypeMainIndexDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexDataDTO> _TypeMainIndexDataDTO_fields = {
  "account": (
    getter: (data) => data._account,
    setter: (data, value) => data._account = value as TypeMainIndexAccountDataDTO?,
    toDynamic: (data) {
      final formatter = TypeMainIndexAccountDataDTO.toDynamic;
      return formatter(data._account);
    },
    fromDynamic: (data, value) {
      final parser = TypeMainIndexAccountDataDTO.fromDynamic;
      data._account = parser(value);
    }
  ),
  "contacts": (
    getter: (data) => data._contacts,
    setter: (data, value) => data._contacts = value as List<TypeMainIndexContactDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexContactDataDTO>((single){
        final handler = TypeMainIndexContactDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._contacts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexContactDataDTO>((single){
        final handler = TypeMainIndexContactDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._contacts = parser(value);
    }
  ),
  "items": (
    getter: (data) => data._items,
    setter: (data, value) => data._items = value as List<TypeMainIndexItemDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexItemDataDTO>((single){
        final handler = TypeMainIndexItemDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexItemDataDTO>((single){
        final handler = TypeMainIndexItemDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._items = parser(value);
    }
  ),
  "profits": (
    getter: (data) => data._profits,
    setter: (data, value) => data._profits = value as List<TypeMainIndexProfitDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexProfitDataDTO>((single){
        final handler = TypeMainIndexProfitDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._profits);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexProfitDataDTO>((single){
        final handler = TypeMainIndexProfitDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._profits = parser(value);
    }
  ),
  "todo": (
    getter: (data) => data._todo,
    setter: (data, value) => data._todo = value as TypeMainIndexTodoDataDTO?,
    toDynamic: (data) {
      final formatter = TypeMainIndexTodoDataDTO.toDynamic;
      return formatter(data._todo);
    },
    fromDynamic: (data, value) {
      final parser = TypeMainIndexTodoDataDTO.fromDynamic;
      data._todo = parser(value);
    }
  ),
};

class TypeMainIndexDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexDataDTO({
    TypeMainIndexAccountDataDTO? account,
    List<TypeMainIndexContactDataDTO>? contacts,
    List<TypeMainIndexItemDataDTO>? items,
    List<TypeMainIndexProfitDataDTO>? profits,
    TypeMainIndexTodoDataDTO? todo
  }):
    _account = account,
    _contacts = contacts,
    _items = items,
    _profits = profits,
    _todo = todo;

  static TypeMainIndexDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeMainIndexAccountDataDTO? _account;

  TypeMainIndexAccountDataDTO get account{
    return _account!;
  }

  TypeMainIndexAccountDataDTO? getAccount(){
    return _account;
  }

  set account(TypeMainIndexAccountDataDTO data){
    _account = data;
  }

  void setAccount(TypeMainIndexAccountDataDTO? data){
    _account = data;
  }

  List<TypeMainIndexContactDataDTO>? _contacts;

  List<TypeMainIndexContactDataDTO> get contacts{
    return _contacts!;
  }

  List<TypeMainIndexContactDataDTO>? getContacts(){
    return _contacts;
  }

  set contacts(List<TypeMainIndexContactDataDTO> data){
    _contacts = data;
  }

  void setContacts(List<TypeMainIndexContactDataDTO>? data){
    _contacts = data;
  }

  List<TypeMainIndexItemDataDTO>? _items;

  List<TypeMainIndexItemDataDTO> get items{
    return _items!;
  }

  List<TypeMainIndexItemDataDTO>? getItems(){
    return _items;
  }

  set items(List<TypeMainIndexItemDataDTO> data){
    _items = data;
  }

  void setItems(List<TypeMainIndexItemDataDTO>? data){
    _items = data;
  }

  List<TypeMainIndexProfitDataDTO>? _profits;

  List<TypeMainIndexProfitDataDTO> get profits{
    return _profits!;
  }

  List<TypeMainIndexProfitDataDTO>? getProfits(){
    return _profits;
  }

  set profits(List<TypeMainIndexProfitDataDTO> data){
    _profits = data;
  }

  void setProfits(List<TypeMainIndexProfitDataDTO>? data){
    _profits = data;
  }

  TypeMainIndexTodoDataDTO? _todo;

  TypeMainIndexTodoDataDTO get todo{
    return _todo!;
  }

  TypeMainIndexTodoDataDTO? getTodo(){
    return _todo;
  }

  set todo(TypeMainIndexTodoDataDTO data){
    _todo = data;
  }

  void setTodo(TypeMainIndexTodoDataDTO? data){
    _todo = data;
  }

}

class FTypeMainIndexItemDataDTO extends IDataField {
  static const id = FTypeMainIndexItemDataDTO('id');
  static const name = FTypeMainIndexItemDataDTO('name');
  static const total = FTypeMainIndexItemDataDTO('total');
  const FTypeMainIndexItemDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexItemDataDTO> _TypeMainIndexItemDataDTO_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeMainIndexItemDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexItemDataDTO({
    String? id,
    String? name,
    String? total
  }):
    _id = id,
    _name = name,
    _total = total;

  static TypeMainIndexItemDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexItemDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexItemDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexItemDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexItemDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexItemDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexItemDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexItemDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeMainIndexProfitDataDTO extends IDataField {
  static const id = FTypeMainIndexProfitDataDTO('id');
  static const receiveCashTotal = FTypeMainIndexProfitDataDTO('receiveCashTotal');
  static const salesCost = FTypeMainIndexProfitDataDTO('salesCost');
  static const salesIncome = FTypeMainIndexProfitDataDTO('salesIncome');
  static const salesProfit = FTypeMainIndexProfitDataDTO('salesProfit');
  const FTypeMainIndexProfitDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexProfitDataDTO> _TypeMainIndexProfitDataDTO_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "receiveCashTotal": (
    getter: (data) => data._receiveCashTotal,
    setter: (data, value) => data._receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashTotal = parser(value);
    }
  ),
  "salesCost": (
    getter: (data) => data._salesCost,
    setter: (data, value) => data._salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesCost = parser(value);
    }
  ),
  "salesIncome": (
    getter: (data) => data._salesIncome,
    setter: (data, value) => data._salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesIncome = parser(value);
    }
  ),
  "salesProfit": (
    getter: (data) => data._salesProfit,
    setter: (data, value) => data._salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesProfit = parser(value);
    }
  ),
};

class TypeMainIndexProfitDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexProfitDataDTO({
    String? id,
    String? receiveCashTotal,
    String? salesCost,
    String? salesIncome,
    String? salesProfit
  }):
    _id = id,
    _receiveCashTotal = receiveCashTotal,
    _salesCost = salesCost,
    _salesIncome = salesIncome,
    _salesProfit = salesProfit;

  static TypeMainIndexProfitDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexProfitDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexProfitDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexProfitDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexProfitDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexProfitDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexProfitDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexProfitDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _receiveCashTotal;

  String get receiveCashTotal{
    return _receiveCashTotal!;
  }

  String? getReceiveCashTotal(){
    return _receiveCashTotal;
  }

  set receiveCashTotal(String data){
    _receiveCashTotal = data;
  }

  void setReceiveCashTotal(String? data){
    _receiveCashTotal = data;
  }

  String? _salesCost;

  String get salesCost{
    return _salesCost!;
  }

  String? getSalesCost(){
    return _salesCost;
  }

  set salesCost(String data){
    _salesCost = data;
  }

  void setSalesCost(String? data){
    _salesCost = data;
  }

  String? _salesIncome;

  String get salesIncome{
    return _salesIncome!;
  }

  String? getSalesIncome(){
    return _salesIncome;
  }

  set salesIncome(String data){
    _salesIncome = data;
  }

  void setSalesIncome(String? data){
    _salesIncome = data;
  }

  String? _salesProfit;

  String get salesProfit{
    return _salesProfit!;
  }

  String? getSalesProfit(){
    return _salesProfit;
  }

  set salesProfit(String data){
    _salesProfit = data;
  }

  void setSalesProfit(String? data){
    _salesProfit = data;
  }

}

class FTypeMainIndexTodoDataDTO extends IDataField {
  static const waitingInOrderCount = FTypeMainIndexTodoDataDTO('waitingInOrderCount');
  static const waitingOutOrderCount = FTypeMainIndexTodoDataDTO('waitingOutOrderCount');
  const FTypeMainIndexTodoDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexTodoDataDTO> _TypeMainIndexTodoDataDTO_fields = {
  "waitingInOrderCount": (
    getter: (data) => data._waitingInOrderCount,
    setter: (data, value) => data._waitingInOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._waitingInOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._waitingInOrderCount = parser(value);
    }
  ),
  "waitingOutOrderCount": (
    getter: (data) => data._waitingOutOrderCount,
    setter: (data, value) => data._waitingOutOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._waitingOutOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._waitingOutOrderCount = parser(value);
    }
  ),
};

class TypeMainIndexTodoDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexTodoDataDTO({
    int? waitingInOrderCount,
    int? waitingOutOrderCount
  }):
    _waitingInOrderCount = waitingInOrderCount,
    _waitingOutOrderCount = waitingOutOrderCount;

  static TypeMainIndexTodoDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexTodoDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexTodoDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexTodoDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexTodoDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexTodoDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexTodoDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexTodoDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _waitingInOrderCount;

  int get waitingInOrderCount{
    return _waitingInOrderCount!;
  }

  int? getWaitingInOrderCount(){
    return _waitingInOrderCount;
  }

  set waitingInOrderCount(int data){
    _waitingInOrderCount = data;
  }

  void setWaitingInOrderCount(int? data){
    _waitingInOrderCount = data;
  }

  int? _waitingOutOrderCount;

  int get waitingOutOrderCount{
    return _waitingOutOrderCount!;
  }

  int? getWaitingOutOrderCount(){
    return _waitingOutOrderCount;
  }

  set waitingOutOrderCount(int data){
    _waitingOutOrderCount = data;
  }

  void setWaitingOutOrderCount(int? data){
    _waitingOutOrderCount = data;
  }

}

class FTypeMenuConfig extends IDataField {
  static const createTime = FTypeMenuConfig('createTime');
  static const id = FTypeMenuConfig('id');
  static const items = FTypeMenuConfig('items');
  static const modifyTime = FTypeMenuConfig('modifyTime');
  const FTypeMenuConfig(super.key);
}

final FieldReflectInfo<TypeMenuConfig> _TypeMenuConfig_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "items": (
    getter: (data) => data._items,
    setter: (data, value) => data._items = value as List<TypeMenuConfigItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMenuConfigItem>((single){
        final handler = TypeMenuConfigItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMenuConfigItem>((single){
        final handler = TypeMenuConfigItem.fromDynamic;
        return handler(single)!;
      });
      data._items = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
};

class TypeMenuConfig extends IDataBasic implements IDataDynamic {
  TypeMenuConfig({
    String? createTime,
    int? id,
    List<TypeMenuConfigItem>? items,
    String? modifyTime
  }):
    _createTime = createTime,
    _id = id,
    _items = items,
    _modifyTime = modifyTime;

  static TypeMenuConfig? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMenuConfig();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMenuConfig_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMenuConfig: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMenuConfig? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMenuConfig_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMenuConfig_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMenuConfig_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  List<TypeMenuConfigItem>? _items;

  List<TypeMenuConfigItem> get items{
    return _items!;
  }

  List<TypeMenuConfigItem>? getItems(){
    return _items;
  }

  set items(List<TypeMenuConfigItem> data){
    _items = data;
  }

  void setItems(List<TypeMenuConfigItem>? data){
    _items = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

}

class FTypeMenuConfigItem extends IDataField {
  static const color = FTypeMenuConfigItem('color');
  static const isOpen = FTypeMenuConfigItem('isOpen');
  static const menuId = FTypeMenuConfigItem('menuId');
  const FTypeMenuConfigItem(super.key);
}

final FieldReflectInfo<TypeMenuConfigItem> _TypeMenuConfigItem_fields = {
  "color": (
    getter: (data) => data._color,
    setter: (data, value) => data._color = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._color);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._color = parser(value);
    }
  ),
  "isOpen": (
    getter: (data) => data._isOpen,
    setter: (data, value) => data._isOpen = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isOpen);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isOpen = parser(value);
    }
  ),
  "menuId": (
    getter: (data) => data._menuId,
    setter: (data, value) => data._menuId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._menuId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._menuId = parser(value);
    }
  ),
};

class TypeMenuConfigItem extends IDataBasic implements IDataDynamic {
  TypeMenuConfigItem({
    String? color,
    int? isOpen,
    String? menuId
  }):
    _color = color,
    _isOpen = isOpen,
    _menuId = menuId;

  static TypeMenuConfigItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMenuConfigItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMenuConfigItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMenuConfigItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMenuConfigItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMenuConfigItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMenuConfigItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMenuConfigItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _color;

  String get color{
    return _color!;
  }

  String? getColor(){
    return _color;
  }

  set color(String data){
    _color = data;
  }

  void setColor(String? data){
    _color = data;
  }

  int? _isOpen;

  int get isOpen{
    return _isOpen!;
  }

  int? getIsOpen(){
    return _isOpen;
  }

  set isOpen(int data){
    _isOpen = data;
  }

  void setIsOpen(int? data){
    _isOpen = data;
  }

  String? _menuId;

  String get menuId{
    return _menuId!;
  }

  String? getMenuId(){
    return _menuId;
  }

  set menuId(String data){
    _menuId = data;
  }

  void setMenuId(String? data){
    _menuId = data;
  }

}

class FTypeOperator extends IDataField {
  static const createTime = FTypeOperator('createTime');
  static const employeeId = FTypeOperator('employeeId');
  static const employeeInfo = FTypeOperator('employeeInfo');
  static const id = FTypeOperator('id');
  static const isEnabled = FTypeOperator('isEnabled');
  static const isPost = FTypeOperator('isPost');
  static const isSystem = FTypeOperator('isSystem');
  static const modifyTime = FTypeOperator('modifyTime');
  static const name = FTypeOperator('name');
  static const posts = FTypeOperator('posts');
  static const remark = FTypeOperator('remark');
  static const roles = FTypeOperator('roles');
  const FTypeOperator(super.key);
}

final FieldReflectInfo<TypeOperator> _TypeOperator_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "employeeId": (
    getter: (data) => data._employeeId,
    setter: (data, value) => data._employeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._employeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._employeeId = parser(value);
    }
  ),
  "employeeInfo": (
    getter: (data) => data._employeeInfo,
    setter: (data, value) => data._employeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._employeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._employeeInfo = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isPost": (
    getter: (data) => data._isPost,
    setter: (data, value) => data._isPost = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isPost);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isPost = parser(value);
    }
  ),
  "isSystem": (
    getter: (data) => data._isSystem,
    setter: (data, value) => data._isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSystem = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "posts": (
    getter: (data) => data._posts,
    setter: (data, value) => data._posts = value as List<TypeOperatorPost>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperatorPost>((single){
        final handler = TypeOperatorPost.toDynamic;
        return handler(single)!;
      });
      return formatter(data._posts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperatorPost>((single){
        final handler = TypeOperatorPost.fromDynamic;
        return handler(single)!;
      });
      data._posts = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "roles": (
    getter: (data) => data._roles,
    setter: (data, value) => data._roles = value as TypeEnumOperatorRole?,
    toDynamic: (data) {
      final formatter = TypeEnumOperatorRole.toDynamic;
      return formatter(data._roles);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOperatorRole.fromDynamic;
      data._roles = parser(value);
    }
  ),
};

class TypeOperator extends IDataBasic implements IDataDynamic {
  TypeOperator({
    String? createTime,
    int? employeeId,
    TypeEmployee? employeeInfo,
    int? id,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isPost,
    int? isSystem,
    String? modifyTime,
    String? name,
    List<TypeOperatorPost>? posts,
    String? remark,
    TypeEnumOperatorRole? roles
  }):
    _createTime = createTime,
    _employeeId = employeeId,
    _employeeInfo = employeeInfo,
    _id = id,
    _isEnabled = isEnabled,
    _isPost = isPost,
    _isSystem = isSystem,
    _modifyTime = modifyTime,
    _name = name,
    _posts = posts,
    _remark = remark,
    _roles = roles;

  static TypeOperator? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperator();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperator_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperator: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperator? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperator_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperator_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperator_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _employeeId;

  int get employeeId{
    return _employeeId!;
  }

  int? getEmployeeId(){
    return _employeeId;
  }

  set employeeId(int data){
    _employeeId = data;
  }

  void setEmployeeId(int? data){
    _employeeId = data;
  }

  TypeEmployee? _employeeInfo;

  TypeEmployee get employeeInfo{
    return _employeeInfo!;
  }

  TypeEmployee? getEmployeeInfo(){
    return _employeeInfo;
  }

  set employeeInfo(TypeEmployee data){
    _employeeInfo = data;
  }

  void setEmployeeInfo(TypeEmployee? data){
    _employeeInfo = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isPost;

  int get isPost{
    return _isPost!;
  }

  int? getIsPost(){
    return _isPost;
  }

  set isPost(int data){
    _isPost = data;
  }

  void setIsPost(int? data){
    _isPost = data;
  }

  int? _isSystem;

  int get isSystem{
    return _isSystem!;
  }

  int? getIsSystem(){
    return _isSystem;
  }

  set isSystem(int data){
    _isSystem = data;
  }

  void setIsSystem(int? data){
    _isSystem = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  List<TypeOperatorPost>? _posts;

  List<TypeOperatorPost> get posts{
    return _posts!;
  }

  List<TypeOperatorPost>? getPosts(){
    return _posts;
  }

  set posts(List<TypeOperatorPost> data){
    _posts = data;
  }

  void setPosts(List<TypeOperatorPost>? data){
    _posts = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  TypeEnumOperatorRole? _roles;

  TypeEnumOperatorRole get roles{
    return _roles!;
  }

  TypeEnumOperatorRole? getRoles(){
    return _roles;
  }

  set roles(TypeEnumOperatorRole data){
    _roles = data;
  }

  void setRoles(TypeEnumOperatorRole? data){
    _roles = data;
  }

}

class FTypeOperatorPermission extends IDataField {
  static const entity = FTypeOperatorPermission('entity');
  static const id = FTypeOperatorPermission('id');
  static const mask = FTypeOperatorPermission('mask');
  static const operator = FTypeOperatorPermission('operator');
  static const operatorId = FTypeOperatorPermission('operatorId');
  const FTypeOperatorPermission(super.key);
}

final FieldReflectInfo<TypeOperatorPermission> _TypeOperatorPermission_fields = {
  "entity": (
    getter: (data) => data._entity,
    setter: (data, value) => data._entity = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entity);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entity = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "mask": (
    getter: (data) => data._mask,
    setter: (data, value) => data._mask = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._mask);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._mask = parser(value);
    }
  ),
  "operator": (
    getter: (data) => data._operator,
    setter: (data, value) => data._operator = value as TypeOperator?,
    toDynamic: (data) {
      final formatter = TypeOperator.toDynamic;
      return formatter(data._operator);
    },
    fromDynamic: (data, value) {
      final parser = TypeOperator.fromDynamic;
      data._operator = parser(value);
    }
  ),
  "operatorId": (
    getter: (data) => data._operatorId,
    setter: (data, value) => data._operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._operatorId = parser(value);
    }
  ),
};

class TypeOperatorPermission extends IDataBasic implements IDataDynamic {
  TypeOperatorPermission({
    String? entity,
    int? id,
    int? mask,
    TypeOperator? operator,
    int? operatorId
  }):
    _entity = entity,
    _id = id,
    _mask = mask,
    _operator = operator,
    _operatorId = operatorId;

  static TypeOperatorPermission? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPermission();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPermission_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPermission: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPermission? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPermission_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPermission_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPermission_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _entity;

  String get entity{
    return _entity!;
  }

  String? getEntity(){
    return _entity;
  }

  set entity(String data){
    _entity = data;
  }

  void setEntity(String? data){
    _entity = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _mask;

  int get mask{
    return _mask!;
  }

  int? getMask(){
    return _mask;
  }

  set mask(int data){
    _mask = data;
  }

  void setMask(int? data){
    _mask = data;
  }

  TypeOperator? _operator;

  TypeOperator get operator{
    return _operator!;
  }

  TypeOperator? getOperator(){
    return _operator;
  }

  set operator(TypeOperator data){
    _operator = data;
  }

  void setOperator(TypeOperator? data){
    _operator = data;
  }

  int? _operatorId;

  int get operatorId{
    return _operatorId!;
  }

  int? getOperatorId(){
    return _operatorId;
  }

  set operatorId(int data){
    _operatorId = data;
  }

  void setOperatorId(int? data){
    _operatorId = data;
  }

}

class FTypeOperatorPermissionInfo extends IDataField {
  static const operatorId = FTypeOperatorPermissionInfo('operatorId');
  static const permissions = FTypeOperatorPermissionInfo('permissions');
  const FTypeOperatorPermissionInfo(super.key);
}

final FieldReflectInfo<TypeOperatorPermissionInfo> _TypeOperatorPermissionInfo_fields = {
  "operatorId": (
    getter: (data) => data._operatorId,
    setter: (data, value) => data._operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._operatorId = parser(value);
    }
  ),
  "permissions": (
    getter: (data) => data._permissions,
    setter: (data, value) => data._permissions = value as List<TypeOperatorPermission>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperatorPermission>((single){
        final handler = TypeOperatorPermission.toDynamic;
        return handler(single)!;
      });
      return formatter(data._permissions);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
        final handler = TypeOperatorPermission.fromDynamic;
        return handler(single)!;
      });
      data._permissions = parser(value);
    }
  ),
};

class TypeOperatorPermissionInfo extends IDataBasic implements IDataDynamic {
  TypeOperatorPermissionInfo({
    int? operatorId,
    List<TypeOperatorPermission>? permissions
  }):
    _operatorId = operatorId,
    _permissions = permissions;

  static TypeOperatorPermissionInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPermissionInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPermissionInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPermissionInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPermissionInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPermissionInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPermissionInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPermissionInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _operatorId;

  int get operatorId{
    return _operatorId!;
  }

  int? getOperatorId(){
    return _operatorId;
  }

  set operatorId(int data){
    _operatorId = data;
  }

  void setOperatorId(int? data){
    _operatorId = data;
  }

  List<TypeOperatorPermission>? _permissions;

  List<TypeOperatorPermission> get permissions{
    return _permissions!;
  }

  List<TypeOperatorPermission>? getPermissions(){
    return _permissions;
  }

  set permissions(List<TypeOperatorPermission> data){
    _permissions = data;
  }

  void setPermissions(List<TypeOperatorPermission>? data){
    _permissions = data;
  }

}

class FTypeOperatorPost extends IDataField {
  static const postId = FTypeOperatorPost('postId');
  static const postName = FTypeOperatorPost('postName');
  const FTypeOperatorPost(super.key);
}

final FieldReflectInfo<TypeOperatorPost> _TypeOperatorPost_fields = {
  "postId": (
    getter: (data) => data._postId,
    setter: (data, value) => data._postId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._postId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._postId = parser(value);
    }
  ),
  "postName": (
    getter: (data) => data._postName,
    setter: (data, value) => data._postName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._postName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._postName = parser(value);
    }
  ),
};

class TypeOperatorPost extends IDataBasic implements IDataDynamic {
  TypeOperatorPost({
    int? postId,
    String? postName
  }):
    _postId = postId,
    _postName = postName;

  static TypeOperatorPost? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPost();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPost_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPost: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPost? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPost_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPost_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPost_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _postId;

  int get postId{
    return _postId!;
  }

  int? getPostId(){
    return _postId;
  }

  set postId(int data){
    _postId = data;
  }

  void setPostId(int? data){
    _postId = data;
  }

  String? _postName;

  String get postName{
    return _postName!;
  }

  String? getPostName(){
    return _postName;
  }

  set postName(String data){
    _postName = data;
  }

  void setPostName(String? data){
    _postName = data;
  }

}

class FTypeOrder extends IDataField {
  static const accountDocumentOrderId = FTypeOrder('accountDocumentOrderId');
  static const accounts = FTypeOrder('accounts');
  static const arapFlows = FTypeOrder('arapFlows');
  static const attachmentCount = FTypeOrder('attachmentCount');
  static const attachmentSize = FTypeOrder('attachmentSize');
  static const billTotal = FTypeOrder('billTotal');
  static const billType = FTypeOrder('billType');
  static const bomCostTotal = FTypeOrder('bomCostTotal');
  static const bomTotal = FTypeOrder('bomTotal');
  static const contactId = FTypeOrder('contactId');
  static const contactInfo = FTypeOrder('contactInfo');
  static const contactPersonAddress = FTypeOrder('contactPersonAddress');
  static const contactPersonName = FTypeOrder('contactPersonName');
  static const contactPersonPhone = FTypeOrder('contactPersonPhone');
  static const costTotal = FTypeOrder('costTotal');
  static const createTime = FTypeOrder('createTime');
  static const custom = FTypeOrder('custom');
  static const customField1 = FTypeOrder('customField1');
  static const customField2 = FTypeOrder('customField2');
  static const customField3 = FTypeOrder('customField3');
  static const customField4 = FTypeOrder('customField4');
  static const customField5 = FTypeOrder('customField5');
  static const customField6 = FTypeOrder('customField6');
  static const customField7 = FTypeOrder('customField7');
  static const customField8 = FTypeOrder('customField8');
  static const discountTotal = FTypeOrder('discountTotal');
  static const documentType = FTypeOrder('documentType');
  static const doneBillTotal = FTypeOrder('doneBillTotal');
  static const doneExecuteAmount = FTypeOrder('doneExecuteAmount');
  static const drawEmployeeId = FTypeOrder('drawEmployeeId');
  static const drawEmployeeInfo = FTypeOrder('drawEmployeeInfo');
  static const drawTime = FTypeOrder('drawTime');
  static const entryAccountEmployeeId = FTypeOrder('entryAccountEmployeeId');
  static const entryAccountEmployeeInfo = FTypeOrder('entryAccountEmployeeInfo');
  static const entryAccountTime = FTypeOrder('entryAccountTime');
  static const feeOnlyTotal = FTypeOrder('feeOnlyTotal');
  static const feeTotal = FTypeOrder('feeTotal');
  static const hasBeenIssued = FTypeOrder('hasBeenIssued');
  static const hasBeenPurchased = FTypeOrder('hasBeenPurchased');
  static const hasBeenUsed = FTypeOrder('hasBeenUsed');
  static const hasFinishBill = FTypeOrder('hasFinishBill');
  static const hasStockExecute = FTypeOrder('hasStockExecute');
  static const id = FTypeOrder('id');
  static const inStoreId = FTypeOrder('inStoreId');
  static const inStoreInfo = FTypeOrder('inStoreInfo');
  static const insertUniqueId = FTypeOrder('insertUniqueId');
  static const isSetStockLocation = FTypeOrder('isSetStockLocation');
  static const itemDirection = FTypeOrder('itemDirection');
  static const itemStockType = FTypeOrder('itemStockType');
  static const items = FTypeOrder('items');
  static const lastChangeOrderId = FTypeOrder('lastChangeOrderId');
  static const manageEmployeeId = FTypeOrder('manageEmployeeId');
  static const manageEmployeeInfo = FTypeOrder('manageEmployeeInfo');
  static const modifyTime = FTypeOrder('modifyTime');
  static const number = FTypeOrder('number');
  static const orderDate = FTypeOrder('orderDate');
  static const outStoreId = FTypeOrder('outStoreId');
  static const outStoreInfo = FTypeOrder('outStoreInfo');
  static const parentSourceOrderInfo = FTypeOrder('parentSourceOrderInfo');
  static const payCashAccountId = FTypeOrder('payCashAccountId');
  static const payCashAccountInfo = FTypeOrder('payCashAccountInfo');
  static const payCashTotal = FTypeOrder('payCashTotal');
  static const payDiscount = FTypeOrder('payDiscount');
  static const preTaxTotal = FTypeOrder('preTaxTotal');
  static const printTimes = FTypeOrder('printTimes');
  static const profitFlows = FTypeOrder('profitFlows');
  static const profitRate = FTypeOrder('profitRate');
  static const profitTotal = FTypeOrder('profitTotal');
  static const receiveCashAccountId = FTypeOrder('receiveCashAccountId');
  static const receiveCashAccountInfo = FTypeOrder('receiveCashAccountInfo');
  static const receiveCashTotal = FTypeOrder('receiveCashTotal');
  static const receiveDiscount = FTypeOrder('receiveDiscount');
  static const redReverseOrderId = FTypeOrder('redReverseOrderId');
  static const redState = FTypeOrder('redState');
  static const remark = FTypeOrder('remark');
  static const sourceOrderInfo = FTypeOrder('sourceOrderInfo');
  static const spendAdvancePayable = FTypeOrder('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrder('spendAdvanceReceivable');
  static const state = FTypeOrder('state');
  static const subOrders = FTypeOrder('subOrders');
  static const subType = FTypeOrder('subType');
  static const subjects = FTypeOrder('subjects');
  static const summaryRemark = FTypeOrder('summaryRemark');
  static const targetOrderInfo = FTypeOrder('targetOrderInfo');
  static const tax = FTypeOrder('tax');
  static const taxOnlyTotal = FTypeOrder('taxOnlyTotal');
  static const total = FTypeOrder('total');
  static const totalAmount = FTypeOrder('totalAmount');
  static const type = FTypeOrder('type');
  static const undoneBillTotal = FTypeOrder('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrder('undoneExecuteAmount');
  const FTypeOrder(super.key);
}

final FieldReflectInfo<TypeOrder> _TypeOrder_fields = {
  "accountDocumentOrderId": (
    getter: (data) => data._accountDocumentOrderId,
    setter: (data, value) => data._accountDocumentOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._accountDocumentOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._accountDocumentOrderId = parser(value);
    }
  ),
  "accounts": (
    getter: (data) => data._accounts,
    setter: (data, value) => data._accounts = value as List<TypeOrderAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderAccount>((single){
        final handler = TypeOrderAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data._accounts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderAccount>((single){
        final handler = TypeOrderAccount.fromDynamic;
        return handler(single)!;
      });
      data._accounts = parser(value);
    }
  ),
  "arapFlows": (
    getter: (data) => data._arapFlows,
    setter: (data, value) => data._arapFlows = value as List<TypeOrderArapFlow>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderArapFlow>((single){
        final handler = TypeOrderArapFlow.toDynamic;
        return handler(single)!;
      });
      return formatter(data._arapFlows);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderArapFlow>((single){
        final handler = TypeOrderArapFlow.fromDynamic;
        return handler(single)!;
      });
      data._arapFlows = parser(value);
    }
  ),
  "attachmentCount": (
    getter: (data) => data._attachmentCount,
    setter: (data, value) => data._attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentCount = parser(value);
    }
  ),
  "attachmentSize": (
    getter: (data) => data._attachmentSize,
    setter: (data, value) => data._attachmentSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentSize = parser(value);
    }
  ),
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "billType": (
    getter: (data) => data._billType,
    setter: (data, value) => data._billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data._billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data._billType = parser(value);
    }
  ),
  "bomCostTotal": (
    getter: (data) => data._bomCostTotal,
    setter: (data, value) => data._bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomCostTotal = parser(value);
    }
  ),
  "bomTotal": (
    getter: (data) => data._bomTotal,
    setter: (data, value) => data._bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomTotal = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactInfo": (
    getter: (data) => data._contactInfo,
    setter: (data, value) => data._contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._contactInfo = parser(value);
    }
  ),
  "contactPersonAddress": (
    getter: (data) => data._contactPersonAddress,
    setter: (data, value) => data._contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonAddress = parser(value);
    }
  ),
  "contactPersonName": (
    getter: (data) => data._contactPersonName,
    setter: (data, value) => data._contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonName = parser(value);
    }
  ),
  "contactPersonPhone": (
    getter: (data) => data._contactPersonPhone,
    setter: (data, value) => data._contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonPhone = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "custom": (
    getter: (data) => data._custom,
    setter: (data, value) => data._custom = value as TypeOrderCustom?,
    toDynamic: (data) {
      final formatter = TypeOrderCustom.toDynamic;
      return formatter(data._custom);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustom.fromDynamic;
      data._custom = parser(value);
    }
  ),
  "customField1": (
    getter: (data) => data._customField1,
    setter: (data, value) => data._customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField1 = parser(value);
    }
  ),
  "customField2": (
    getter: (data) => data._customField2,
    setter: (data, value) => data._customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField2 = parser(value);
    }
  ),
  "customField3": (
    getter: (data) => data._customField3,
    setter: (data, value) => data._customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField3 = parser(value);
    }
  ),
  "customField4": (
    getter: (data) => data._customField4,
    setter: (data, value) => data._customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField4 = parser(value);
    }
  ),
  "customField5": (
    getter: (data) => data._customField5,
    setter: (data, value) => data._customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField5 = parser(value);
    }
  ),
  "customField6": (
    getter: (data) => data._customField6,
    setter: (data, value) => data._customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField6 = parser(value);
    }
  ),
  "customField7": (
    getter: (data) => data._customField7,
    setter: (data, value) => data._customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField7 = parser(value);
    }
  ),
  "customField8": (
    getter: (data) => data._customField8,
    setter: (data, value) => data._customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField8 = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "documentType": (
    getter: (data) => data._documentType,
    setter: (data, value) => data._documentType = value as TypeEnumOrderDocumentType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderDocumentType.toDynamic;
      return formatter(data._documentType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderDocumentType.fromDynamic;
      data._documentType = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "drawEmployeeInfo": (
    getter: (data) => data._drawEmployeeInfo,
    setter: (data, value) => data._drawEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._drawEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._drawEmployeeInfo = parser(value);
    }
  ),
  "drawTime": (
    getter: (data) => data._drawTime,
    setter: (data, value) => data._drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawTime = parser(value);
    }
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data._entryAccountEmployeeId,
    setter: (data, value) => data._entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._entryAccountEmployeeId = parser(value);
    }
  ),
  "entryAccountEmployeeInfo": (
    getter: (data) => data._entryAccountEmployeeInfo,
    setter: (data, value) => data._entryAccountEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._entryAccountEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._entryAccountEmployeeInfo = parser(value);
    }
  ),
  "entryAccountTime": (
    getter: (data) => data._entryAccountTime,
    setter: (data, value) => data._entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountTime = parser(value);
    }
  ),
  "feeOnlyTotal": (
    getter: (data) => data._feeOnlyTotal,
    setter: (data, value) => data._feeOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeOnlyTotal = parser(value);
    }
  ),
  "feeTotal": (
    getter: (data) => data._feeTotal,
    setter: (data, value) => data._feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeTotal = parser(value);
    }
  ),
  "hasBeenIssued": (
    getter: (data) => data._hasBeenIssued,
    setter: (data, value) => data._hasBeenIssued = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenIssued);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenIssued = parser(value);
    }
  ),
  "hasBeenPurchased": (
    getter: (data) => data._hasBeenPurchased,
    setter: (data, value) => data._hasBeenPurchased = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenPurchased);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenPurchased = parser(value);
    }
  ),
  "hasBeenUsed": (
    getter: (data) => data._hasBeenUsed,
    setter: (data, value) => data._hasBeenUsed = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenUsed);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenUsed = parser(value);
    }
  ),
  "hasFinishBill": (
    getter: (data) => data._hasFinishBill,
    setter: (data, value) => data._hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasFinishBill = parser(value);
    }
  ),
  "hasStockExecute": (
    getter: (data) => data._hasStockExecute,
    setter: (data, value) => data._hasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasStockExecute = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "inStoreId": (
    getter: (data) => data._inStoreId,
    setter: (data, value) => data._inStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._inStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._inStoreId = parser(value);
    }
  ),
  "inStoreInfo": (
    getter: (data) => data._inStoreInfo,
    setter: (data, value) => data._inStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._inStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._inStoreInfo = parser(value);
    }
  ),
  "insertUniqueId": (
    getter: (data) => data._insertUniqueId,
    setter: (data, value) => data._insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._insertUniqueId = parser(value);
    }
  ),
  "isSetStockLocation": (
    getter: (data) => data._isSetStockLocation,
    setter: (data, value) => data._isSetStockLocation = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSetStockLocation);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSetStockLocation = parser(value);
    }
  ),
  "itemDirection": (
    getter: (data) => data._itemDirection,
    setter: (data, value) => data._itemDirection = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemDirection);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemDirection = parser(value);
    }
  ),
  "itemStockType": (
    getter: (data) => data._itemStockType,
    setter: (data, value) => data._itemStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemStockType = parser(value);
    }
  ),
  "items": (
    getter: (data) => data._items,
    setter: (data, value) => data._items = value as List<TypeOrderItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItem>((single){
        final handler = TypeOrderItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItem>((single){
        final handler = TypeOrderItem.fromDynamic;
        return handler(single)!;
      });
      data._items = parser(value);
    }
  ),
  "lastChangeOrderId": (
    getter: (data) => data._lastChangeOrderId,
    setter: (data, value) => data._lastChangeOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._lastChangeOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._lastChangeOrderId = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "manageEmployeeInfo": (
    getter: (data) => data._manageEmployeeInfo,
    setter: (data, value) => data._manageEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._manageEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._manageEmployeeInfo = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "outStoreId": (
    getter: (data) => data._outStoreId,
    setter: (data, value) => data._outStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._outStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._outStoreId = parser(value);
    }
  ),
  "outStoreInfo": (
    getter: (data) => data._outStoreInfo,
    setter: (data, value) => data._outStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._outStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._outStoreInfo = parser(value);
    }
  ),
  "parentSourceOrderInfo": (
    getter: (data) => data._parentSourceOrderInfo,
    setter: (data, value) => data._parentSourceOrderInfo = value as TypeOrderSourceOrderItem?,
    toDynamic: (data) {
      final formatter = TypeOrderSourceOrderItem.toDynamic;
      return formatter(data._parentSourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSourceOrderItem.fromDynamic;
      data._parentSourceOrderInfo = parser(value);
    }
  ),
  "payCashAccountId": (
    getter: (data) => data._payCashAccountId,
    setter: (data, value) => data._payCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._payCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._payCashAccountId = parser(value);
    }
  ),
  "payCashAccountInfo": (
    getter: (data) => data._payCashAccountInfo,
    setter: (data, value) => data._payCashAccountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data._payCashAccountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data._payCashAccountInfo = parser(value);
    }
  ),
  "payCashTotal": (
    getter: (data) => data._payCashTotal,
    setter: (data, value) => data._payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payCashTotal = parser(value);
    }
  ),
  "payDiscount": (
    getter: (data) => data._payDiscount,
    setter: (data, value) => data._payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payDiscount = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "printTimes": (
    getter: (data) => data._printTimes,
    setter: (data, value) => data._printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._printTimes = parser(value);
    }
  ),
  "profitFlows": (
    getter: (data) => data._profitFlows,
    setter: (data, value) => data._profitFlows = value as List<TypeOrderProfitFlow>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderProfitFlow>((single){
        final handler = TypeOrderProfitFlow.toDynamic;
        return handler(single)!;
      });
      return formatter(data._profitFlows);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderProfitFlow>((single){
        final handler = TypeOrderProfitFlow.fromDynamic;
        return handler(single)!;
      });
      data._profitFlows = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "receiveCashAccountId": (
    getter: (data) => data._receiveCashAccountId,
    setter: (data, value) => data._receiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._receiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._receiveCashAccountId = parser(value);
    }
  ),
  "receiveCashAccountInfo": (
    getter: (data) => data._receiveCashAccountInfo,
    setter: (data, value) => data._receiveCashAccountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data._receiveCashAccountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data._receiveCashAccountInfo = parser(value);
    }
  ),
  "receiveCashTotal": (
    getter: (data) => data._receiveCashTotal,
    setter: (data, value) => data._receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashTotal = parser(value);
    }
  ),
  "receiveDiscount": (
    getter: (data) => data._receiveDiscount,
    setter: (data, value) => data._receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveDiscount = parser(value);
    }
  ),
  "redReverseOrderId": (
    getter: (data) => data._redReverseOrderId,
    setter: (data, value) => data._redReverseOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._redReverseOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._redReverseOrderId = parser(value);
    }
  ),
  "redState": (
    getter: (data) => data._redState,
    setter: (data, value) => data._redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._redState = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "sourceOrderInfo": (
    getter: (data) => data._sourceOrderInfo,
    setter: (data, value) => data._sourceOrderInfo = value as List<TypeOrderSourceOrderItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSourceOrderItem>((single){
        final handler = TypeOrderSourceOrderItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._sourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSourceOrderItem>((single){
        final handler = TypeOrderSourceOrderItem.fromDynamic;
        return handler(single)!;
      });
      data._sourceOrderInfo = parser(value);
    }
  ),
  "spendAdvancePayable": (
    getter: (data) => data._spendAdvancePayable,
    setter: (data, value) => data._spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvancePayable = parser(value);
    }
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data._spendAdvanceReceivable,
    setter: (data, value) => data._spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvanceReceivable = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "subOrders": (
    getter: (data) => data._subOrders,
    setter: (data, value) => data._subOrders = value as List<TypeOrderSubOrder>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubOrder>((single){
        final handler = TypeOrderSubOrder.toDynamic;
        return handler(single)!;
      });
      return formatter(data._subOrders);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubOrder>((single){
        final handler = TypeOrderSubOrder.fromDynamic;
        return handler(single)!;
      });
      data._subOrders = parser(value);
    }
  ),
  "subType": (
    getter: (data) => data._subType,
    setter: (data, value) => data._subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data._subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data._subType = parser(value);
    }
  ),
  "subjects": (
    getter: (data) => data._subjects,
    setter: (data, value) => data._subjects = value as List<TypeOrderSubject>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubject>((single){
        final handler = TypeOrderSubject.toDynamic;
        return handler(single)!;
      });
      return formatter(data._subjects);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubject>((single){
        final handler = TypeOrderSubject.fromDynamic;
        return handler(single)!;
      });
      data._subjects = parser(value);
    }
  ),
  "summaryRemark": (
    getter: (data) => data._summaryRemark,
    setter: (data, value) => data._summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._summaryRemark = parser(value);
    }
  ),
  "targetOrderInfo": (
    getter: (data) => data._targetOrderInfo,
    setter: (data, value) => data._targetOrderInfo = value as TypeOrderSourceOrderItem?,
    toDynamic: (data) {
      final formatter = TypeOrderSourceOrderItem.toDynamic;
      return formatter(data._targetOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSourceOrderItem.fromDynamic;
      data._targetOrderInfo = parser(value);
    }
  ),
  "tax": (
    getter: (data) => data._tax,
    setter: (data, value) => data._tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._tax = parser(value);
    }
  ),
  "taxOnlyTotal": (
    getter: (data) => data._taxOnlyTotal,
    setter: (data, value) => data._taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxOnlyTotal = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "totalAmount": (
    getter: (data) => data._totalAmount,
    setter: (data, value) => data._totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalAmount = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._type = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
};

class TypeOrder extends IDataBasic implements IDataDynamic {
  TypeOrder({
    int? accountDocumentOrderId,
    List<TypeOrderAccount>? accounts,
    List<TypeOrderArapFlow>? arapFlows,
    int? attachmentCount,
    int? attachmentSize,
    String? billTotal,
    TypeEnumOrderBillType? billType,
    String? bomCostTotal,
    String? bomTotal,
    int? contactId,
    TypeContact? contactInfo,
    String? contactPersonAddress,
    String? contactPersonName,
    String? contactPersonPhone,
    String? costTotal,
    String? createTime,
    TypeOrderCustom? custom,
    String? customField1,
    String? customField2,
    String? customField3,
    String? customField4,
    String? customField5,
    String? customField6,
    String? customField7,
    String? customField8,
    String? discountTotal,
    TypeEnumOrderDocumentType? documentType,
    String? doneBillTotal,
    String? doneExecuteAmount,
    int? drawEmployeeId,
    TypeEmployee? drawEmployeeInfo,
    String? drawTime,
    int? entryAccountEmployeeId,
    TypeEmployee? entryAccountEmployeeInfo,
    String? entryAccountTime,
    String? feeOnlyTotal,
    String? feeTotal,
    int? hasBeenIssued,
    int? hasBeenPurchased,
    int? hasBeenUsed,
    int? hasFinishBill,
    int? hasStockExecute,
    int? id,
    int? inStoreId,
    TypeStore? inStoreInfo,
    int? insertUniqueId,
    int? isSetStockLocation,
    int? itemDirection,
    int? itemStockType,
    List<TypeOrderItem>? items,
    int? lastChangeOrderId,
    int? manageEmployeeId,
    TypeEmployee? manageEmployeeInfo,
    String? modifyTime,
    String? number,
    String? orderDate,
    int? outStoreId,
    TypeStore? outStoreInfo,
    TypeOrderSourceOrderItem? parentSourceOrderInfo,
    int? payCashAccountId,
    TypeAccount? payCashAccountInfo,
    String? payCashTotal,
    String? payDiscount,
    String? preTaxTotal,
    int? printTimes,
    List<TypeOrderProfitFlow>? profitFlows,
    String? profitRate,
    String? profitTotal,
    int? receiveCashAccountId,
    TypeAccount? receiveCashAccountInfo,
    String? receiveCashTotal,
    String? receiveDiscount,
    int? redReverseOrderId,
    TypeEnumOrderRedState? redState,
    String? remark,
    List<TypeOrderSourceOrderItem>? sourceOrderInfo,
    String? spendAdvancePayable,
    String? spendAdvanceReceivable,
    TypeEnumOrderState? state,
    List<TypeOrderSubOrder>? subOrders,
    TypeEnumOrderSubType? subType,
    List<TypeOrderSubject>? subjects,
    String? summaryRemark,
    TypeOrderSourceOrderItem? targetOrderInfo,
    String? tax,
    String? taxOnlyTotal,
    String? total,
    String? totalAmount,
    TypeEnumOrderType? type,
    String? undoneBillTotal,
    String? undoneExecuteAmount
  }):
    _accountDocumentOrderId = accountDocumentOrderId,
    _accounts = accounts,
    _arapFlows = arapFlows,
    _attachmentCount = attachmentCount,
    _attachmentSize = attachmentSize,
    _billTotal = billTotal,
    _billType = billType,
    _bomCostTotal = bomCostTotal,
    _bomTotal = bomTotal,
    _contactId = contactId,
    _contactInfo = contactInfo,
    _contactPersonAddress = contactPersonAddress,
    _contactPersonName = contactPersonName,
    _contactPersonPhone = contactPersonPhone,
    _costTotal = costTotal,
    _createTime = createTime,
    _custom = custom,
    _customField1 = customField1,
    _customField2 = customField2,
    _customField3 = customField3,
    _customField4 = customField4,
    _customField5 = customField5,
    _customField6 = customField6,
    _customField7 = customField7,
    _customField8 = customField8,
    _discountTotal = discountTotal,
    _documentType = documentType,
    _doneBillTotal = doneBillTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _drawEmployeeId = drawEmployeeId,
    _drawEmployeeInfo = drawEmployeeInfo,
    _drawTime = drawTime,
    _entryAccountEmployeeId = entryAccountEmployeeId,
    _entryAccountEmployeeInfo = entryAccountEmployeeInfo,
    _entryAccountTime = entryAccountTime,
    _feeOnlyTotal = feeOnlyTotal,
    _feeTotal = feeTotal,
    _hasBeenIssued = hasBeenIssued,
    _hasBeenPurchased = hasBeenPurchased,
    _hasBeenUsed = hasBeenUsed,
    _hasFinishBill = hasFinishBill,
    _hasStockExecute = hasStockExecute,
    _id = id,
    _inStoreId = inStoreId,
    _inStoreInfo = inStoreInfo,
    _insertUniqueId = insertUniqueId,
    _isSetStockLocation = isSetStockLocation,
    _itemDirection = itemDirection,
    _itemStockType = itemStockType,
    _items = items,
    _lastChangeOrderId = lastChangeOrderId,
    _manageEmployeeId = manageEmployeeId,
    _manageEmployeeInfo = manageEmployeeInfo,
    _modifyTime = modifyTime,
    _number = number,
    _orderDate = orderDate,
    _outStoreId = outStoreId,
    _outStoreInfo = outStoreInfo,
    _parentSourceOrderInfo = parentSourceOrderInfo,
    _payCashAccountId = payCashAccountId,
    _payCashAccountInfo = payCashAccountInfo,
    _payCashTotal = payCashTotal,
    _payDiscount = payDiscount,
    _preTaxTotal = preTaxTotal,
    _printTimes = printTimes,
    _profitFlows = profitFlows,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _receiveCashAccountId = receiveCashAccountId,
    _receiveCashAccountInfo = receiveCashAccountInfo,
    _receiveCashTotal = receiveCashTotal,
    _receiveDiscount = receiveDiscount,
    _redReverseOrderId = redReverseOrderId,
    _redState = redState,
    _remark = remark,
    _sourceOrderInfo = sourceOrderInfo,
    _spendAdvancePayable = spendAdvancePayable,
    _spendAdvanceReceivable = spendAdvanceReceivable,
    _state = state,
    _subOrders = subOrders,
    _subType = subType,
    _subjects = subjects,
    _summaryRemark = summaryRemark,
    _targetOrderInfo = targetOrderInfo,
    _tax = tax,
    _taxOnlyTotal = taxOnlyTotal,
    _total = total,
    _totalAmount = totalAmount,
    _type = type,
    _undoneBillTotal = undoneBillTotal,
    _undoneExecuteAmount = undoneExecuteAmount;

  static TypeOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _accountDocumentOrderId;

  int get accountDocumentOrderId{
    return _accountDocumentOrderId!;
  }

  int? getAccountDocumentOrderId(){
    return _accountDocumentOrderId;
  }

  set accountDocumentOrderId(int data){
    _accountDocumentOrderId = data;
  }

  void setAccountDocumentOrderId(int? data){
    _accountDocumentOrderId = data;
  }

  List<TypeOrderAccount>? _accounts;

  List<TypeOrderAccount> get accounts{
    return _accounts!;
  }

  List<TypeOrderAccount>? getAccounts(){
    return _accounts;
  }

  set accounts(List<TypeOrderAccount> data){
    _accounts = data;
  }

  void setAccounts(List<TypeOrderAccount>? data){
    _accounts = data;
  }

  List<TypeOrderArapFlow>? _arapFlows;

  List<TypeOrderArapFlow> get arapFlows{
    return _arapFlows!;
  }

  List<TypeOrderArapFlow>? getArapFlows(){
    return _arapFlows;
  }

  set arapFlows(List<TypeOrderArapFlow> data){
    _arapFlows = data;
  }

  void setArapFlows(List<TypeOrderArapFlow>? data){
    _arapFlows = data;
  }

  int? _attachmentCount;

  int get attachmentCount{
    return _attachmentCount!;
  }

  int? getAttachmentCount(){
    return _attachmentCount;
  }

  set attachmentCount(int data){
    _attachmentCount = data;
  }

  void setAttachmentCount(int? data){
    _attachmentCount = data;
  }

  int? _attachmentSize;

  int get attachmentSize{
    return _attachmentSize!;
  }

  int? getAttachmentSize(){
    return _attachmentSize;
  }

  set attachmentSize(int data){
    _attachmentSize = data;
  }

  void setAttachmentSize(int? data){
    _attachmentSize = data;
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  TypeEnumOrderBillType? _billType;

  TypeEnumOrderBillType get billType{
    return _billType!;
  }

  TypeEnumOrderBillType? getBillType(){
    return _billType;
  }

  set billType(TypeEnumOrderBillType data){
    _billType = data;
  }

  void setBillType(TypeEnumOrderBillType? data){
    _billType = data;
  }

  String? _bomCostTotal;

  String get bomCostTotal{
    return _bomCostTotal!;
  }

  String? getBomCostTotal(){
    return _bomCostTotal;
  }

  set bomCostTotal(String data){
    _bomCostTotal = data;
  }

  void setBomCostTotal(String? data){
    _bomCostTotal = data;
  }

  String? _bomTotal;

  String get bomTotal{
    return _bomTotal!;
  }

  String? getBomTotal(){
    return _bomTotal;
  }

  set bomTotal(String data){
    _bomTotal = data;
  }

  void setBomTotal(String? data){
    _bomTotal = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  TypeContact? _contactInfo;

  TypeContact get contactInfo{
    return _contactInfo!;
  }

  TypeContact? getContactInfo(){
    return _contactInfo;
  }

  set contactInfo(TypeContact data){
    _contactInfo = data;
  }

  void setContactInfo(TypeContact? data){
    _contactInfo = data;
  }

  String? _contactPersonAddress;

  String get contactPersonAddress{
    return _contactPersonAddress!;
  }

  String? getContactPersonAddress(){
    return _contactPersonAddress;
  }

  set contactPersonAddress(String data){
    _contactPersonAddress = data;
  }

  void setContactPersonAddress(String? data){
    _contactPersonAddress = data;
  }

  String? _contactPersonName;

  String get contactPersonName{
    return _contactPersonName!;
  }

  String? getContactPersonName(){
    return _contactPersonName;
  }

  set contactPersonName(String data){
    _contactPersonName = data;
  }

  void setContactPersonName(String? data){
    _contactPersonName = data;
  }

  String? _contactPersonPhone;

  String get contactPersonPhone{
    return _contactPersonPhone!;
  }

  String? getContactPersonPhone(){
    return _contactPersonPhone;
  }

  set contactPersonPhone(String data){
    _contactPersonPhone = data;
  }

  void setContactPersonPhone(String? data){
    _contactPersonPhone = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  TypeOrderCustom? _custom;

  TypeOrderCustom get custom{
    return _custom!;
  }

  TypeOrderCustom? getCustom(){
    return _custom;
  }

  set custom(TypeOrderCustom data){
    _custom = data;
  }

  void setCustom(TypeOrderCustom? data){
    _custom = data;
  }

  String? _customField1;

  String get customField1{
    return _customField1!;
  }

  String? getCustomField1(){
    return _customField1;
  }

  set customField1(String data){
    _customField1 = data;
  }

  void setCustomField1(String? data){
    _customField1 = data;
  }

  String? _customField2;

  String get customField2{
    return _customField2!;
  }

  String? getCustomField2(){
    return _customField2;
  }

  set customField2(String data){
    _customField2 = data;
  }

  void setCustomField2(String? data){
    _customField2 = data;
  }

  String? _customField3;

  String get customField3{
    return _customField3!;
  }

  String? getCustomField3(){
    return _customField3;
  }

  set customField3(String data){
    _customField3 = data;
  }

  void setCustomField3(String? data){
    _customField3 = data;
  }

  String? _customField4;

  String get customField4{
    return _customField4!;
  }

  String? getCustomField4(){
    return _customField4;
  }

  set customField4(String data){
    _customField4 = data;
  }

  void setCustomField4(String? data){
    _customField4 = data;
  }

  String? _customField5;

  String get customField5{
    return _customField5!;
  }

  String? getCustomField5(){
    return _customField5;
  }

  set customField5(String data){
    _customField5 = data;
  }

  void setCustomField5(String? data){
    _customField5 = data;
  }

  String? _customField6;

  String get customField6{
    return _customField6!;
  }

  String? getCustomField6(){
    return _customField6;
  }

  set customField6(String data){
    _customField6 = data;
  }

  void setCustomField6(String? data){
    _customField6 = data;
  }

  String? _customField7;

  String get customField7{
    return _customField7!;
  }

  String? getCustomField7(){
    return _customField7;
  }

  set customField7(String data){
    _customField7 = data;
  }

  void setCustomField7(String? data){
    _customField7 = data;
  }

  String? _customField8;

  String get customField8{
    return _customField8!;
  }

  String? getCustomField8(){
    return _customField8;
  }

  set customField8(String data){
    _customField8 = data;
  }

  void setCustomField8(String? data){
    _customField8 = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  TypeEnumOrderDocumentType? _documentType;

  TypeEnumOrderDocumentType get documentType{
    return _documentType!;
  }

  TypeEnumOrderDocumentType? getDocumentType(){
    return _documentType;
  }

  set documentType(TypeEnumOrderDocumentType data){
    _documentType = data;
  }

  void setDocumentType(TypeEnumOrderDocumentType? data){
    _documentType = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  TypeEmployee? _drawEmployeeInfo;

  TypeEmployee get drawEmployeeInfo{
    return _drawEmployeeInfo!;
  }

  TypeEmployee? getDrawEmployeeInfo(){
    return _drawEmployeeInfo;
  }

  set drawEmployeeInfo(TypeEmployee data){
    _drawEmployeeInfo = data;
  }

  void setDrawEmployeeInfo(TypeEmployee? data){
    _drawEmployeeInfo = data;
  }

  String? _drawTime;

  String get drawTime{
    return _drawTime!;
  }

  String? getDrawTime(){
    return _drawTime;
  }

  set drawTime(String data){
    _drawTime = data;
  }

  void setDrawTime(String? data){
    _drawTime = data;
  }

  int? _entryAccountEmployeeId;

  int get entryAccountEmployeeId{
    return _entryAccountEmployeeId!;
  }

  int? getEntryAccountEmployeeId(){
    return _entryAccountEmployeeId;
  }

  set entryAccountEmployeeId(int data){
    _entryAccountEmployeeId = data;
  }

  void setEntryAccountEmployeeId(int? data){
    _entryAccountEmployeeId = data;
  }

  TypeEmployee? _entryAccountEmployeeInfo;

  TypeEmployee get entryAccountEmployeeInfo{
    return _entryAccountEmployeeInfo!;
  }

  TypeEmployee? getEntryAccountEmployeeInfo(){
    return _entryAccountEmployeeInfo;
  }

  set entryAccountEmployeeInfo(TypeEmployee data){
    _entryAccountEmployeeInfo = data;
  }

  void setEntryAccountEmployeeInfo(TypeEmployee? data){
    _entryAccountEmployeeInfo = data;
  }

  String? _entryAccountTime;

  String get entryAccountTime{
    return _entryAccountTime!;
  }

  String? getEntryAccountTime(){
    return _entryAccountTime;
  }

  set entryAccountTime(String data){
    _entryAccountTime = data;
  }

  void setEntryAccountTime(String? data){
    _entryAccountTime = data;
  }

  String? _feeOnlyTotal;

  String get feeOnlyTotal{
    return _feeOnlyTotal!;
  }

  String? getFeeOnlyTotal(){
    return _feeOnlyTotal;
  }

  set feeOnlyTotal(String data){
    _feeOnlyTotal = data;
  }

  void setFeeOnlyTotal(String? data){
    _feeOnlyTotal = data;
  }

  String? _feeTotal;

  String get feeTotal{
    return _feeTotal!;
  }

  String? getFeeTotal(){
    return _feeTotal;
  }

  set feeTotal(String data){
    _feeTotal = data;
  }

  void setFeeTotal(String? data){
    _feeTotal = data;
  }

  int? _hasBeenIssued;

  int get hasBeenIssued{
    return _hasBeenIssued!;
  }

  int? getHasBeenIssued(){
    return _hasBeenIssued;
  }

  set hasBeenIssued(int data){
    _hasBeenIssued = data;
  }

  void setHasBeenIssued(int? data){
    _hasBeenIssued = data;
  }

  int? _hasBeenPurchased;

  int get hasBeenPurchased{
    return _hasBeenPurchased!;
  }

  int? getHasBeenPurchased(){
    return _hasBeenPurchased;
  }

  set hasBeenPurchased(int data){
    _hasBeenPurchased = data;
  }

  void setHasBeenPurchased(int? data){
    _hasBeenPurchased = data;
  }

  int? _hasBeenUsed;

  int get hasBeenUsed{
    return _hasBeenUsed!;
  }

  int? getHasBeenUsed(){
    return _hasBeenUsed;
  }

  set hasBeenUsed(int data){
    _hasBeenUsed = data;
  }

  void setHasBeenUsed(int? data){
    _hasBeenUsed = data;
  }

  int? _hasFinishBill;

  int get hasFinishBill{
    return _hasFinishBill!;
  }

  int? getHasFinishBill(){
    return _hasFinishBill;
  }

  set hasFinishBill(int data){
    _hasFinishBill = data;
  }

  void setHasFinishBill(int? data){
    _hasFinishBill = data;
  }

  int? _hasStockExecute;

  int get hasStockExecute{
    return _hasStockExecute!;
  }

  int? getHasStockExecute(){
    return _hasStockExecute;
  }

  set hasStockExecute(int data){
    _hasStockExecute = data;
  }

  void setHasStockExecute(int? data){
    _hasStockExecute = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _inStoreId;

  int get inStoreId{
    return _inStoreId!;
  }

  int? getInStoreId(){
    return _inStoreId;
  }

  set inStoreId(int data){
    _inStoreId = data;
  }

  void setInStoreId(int? data){
    _inStoreId = data;
  }

  TypeStore? _inStoreInfo;

  TypeStore get inStoreInfo{
    return _inStoreInfo!;
  }

  TypeStore? getInStoreInfo(){
    return _inStoreInfo;
  }

  set inStoreInfo(TypeStore data){
    _inStoreInfo = data;
  }

  void setInStoreInfo(TypeStore? data){
    _inStoreInfo = data;
  }

  int? _insertUniqueId;

  int get insertUniqueId{
    return _insertUniqueId!;
  }

  int? getInsertUniqueId(){
    return _insertUniqueId;
  }

  set insertUniqueId(int data){
    _insertUniqueId = data;
  }

  void setInsertUniqueId(int? data){
    _insertUniqueId = data;
  }

  int? _isSetStockLocation;

  int get isSetStockLocation{
    return _isSetStockLocation!;
  }

  int? getIsSetStockLocation(){
    return _isSetStockLocation;
  }

  set isSetStockLocation(int data){
    _isSetStockLocation = data;
  }

  void setIsSetStockLocation(int? data){
    _isSetStockLocation = data;
  }

  int? _itemDirection;

  int get itemDirection{
    return _itemDirection!;
  }

  int? getItemDirection(){
    return _itemDirection;
  }

  set itemDirection(int data){
    _itemDirection = data;
  }

  void setItemDirection(int? data){
    _itemDirection = data;
  }

  int? _itemStockType;

  int get itemStockType{
    return _itemStockType!;
  }

  int? getItemStockType(){
    return _itemStockType;
  }

  set itemStockType(int data){
    _itemStockType = data;
  }

  void setItemStockType(int? data){
    _itemStockType = data;
  }

  List<TypeOrderItem>? _items;

  List<TypeOrderItem> get items{
    return _items!;
  }

  List<TypeOrderItem>? getItems(){
    return _items;
  }

  set items(List<TypeOrderItem> data){
    _items = data;
  }

  void setItems(List<TypeOrderItem>? data){
    _items = data;
  }

  int? _lastChangeOrderId;

  int get lastChangeOrderId{
    return _lastChangeOrderId!;
  }

  int? getLastChangeOrderId(){
    return _lastChangeOrderId;
  }

  set lastChangeOrderId(int data){
    _lastChangeOrderId = data;
  }

  void setLastChangeOrderId(int? data){
    _lastChangeOrderId = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  TypeEmployee? _manageEmployeeInfo;

  TypeEmployee get manageEmployeeInfo{
    return _manageEmployeeInfo!;
  }

  TypeEmployee? getManageEmployeeInfo(){
    return _manageEmployeeInfo;
  }

  set manageEmployeeInfo(TypeEmployee data){
    _manageEmployeeInfo = data;
  }

  void setManageEmployeeInfo(TypeEmployee? data){
    _manageEmployeeInfo = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _outStoreId;

  int get outStoreId{
    return _outStoreId!;
  }

  int? getOutStoreId(){
    return _outStoreId;
  }

  set outStoreId(int data){
    _outStoreId = data;
  }

  void setOutStoreId(int? data){
    _outStoreId = data;
  }

  TypeStore? _outStoreInfo;

  TypeStore get outStoreInfo{
    return _outStoreInfo!;
  }

  TypeStore? getOutStoreInfo(){
    return _outStoreInfo;
  }

  set outStoreInfo(TypeStore data){
    _outStoreInfo = data;
  }

  void setOutStoreInfo(TypeStore? data){
    _outStoreInfo = data;
  }

  TypeOrderSourceOrderItem? _parentSourceOrderInfo;

  TypeOrderSourceOrderItem get parentSourceOrderInfo{
    return _parentSourceOrderInfo!;
  }

  TypeOrderSourceOrderItem? getParentSourceOrderInfo(){
    return _parentSourceOrderInfo;
  }

  set parentSourceOrderInfo(TypeOrderSourceOrderItem data){
    _parentSourceOrderInfo = data;
  }

  void setParentSourceOrderInfo(TypeOrderSourceOrderItem? data){
    _parentSourceOrderInfo = data;
  }

  int? _payCashAccountId;

  int get payCashAccountId{
    return _payCashAccountId!;
  }

  int? getPayCashAccountId(){
    return _payCashAccountId;
  }

  set payCashAccountId(int data){
    _payCashAccountId = data;
  }

  void setPayCashAccountId(int? data){
    _payCashAccountId = data;
  }

  TypeAccount? _payCashAccountInfo;

  TypeAccount get payCashAccountInfo{
    return _payCashAccountInfo!;
  }

  TypeAccount? getPayCashAccountInfo(){
    return _payCashAccountInfo;
  }

  set payCashAccountInfo(TypeAccount data){
    _payCashAccountInfo = data;
  }

  void setPayCashAccountInfo(TypeAccount? data){
    _payCashAccountInfo = data;
  }

  String? _payCashTotal;

  String get payCashTotal{
    return _payCashTotal!;
  }

  String? getPayCashTotal(){
    return _payCashTotal;
  }

  set payCashTotal(String data){
    _payCashTotal = data;
  }

  void setPayCashTotal(String? data){
    _payCashTotal = data;
  }

  String? _payDiscount;

  String get payDiscount{
    return _payDiscount!;
  }

  String? getPayDiscount(){
    return _payDiscount;
  }

  set payDiscount(String data){
    _payDiscount = data;
  }

  void setPayDiscount(String? data){
    _payDiscount = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  int? _printTimes;

  int get printTimes{
    return _printTimes!;
  }

  int? getPrintTimes(){
    return _printTimes;
  }

  set printTimes(int data){
    _printTimes = data;
  }

  void setPrintTimes(int? data){
    _printTimes = data;
  }

  List<TypeOrderProfitFlow>? _profitFlows;

  List<TypeOrderProfitFlow> get profitFlows{
    return _profitFlows!;
  }

  List<TypeOrderProfitFlow>? getProfitFlows(){
    return _profitFlows;
  }

  set profitFlows(List<TypeOrderProfitFlow> data){
    _profitFlows = data;
  }

  void setProfitFlows(List<TypeOrderProfitFlow>? data){
    _profitFlows = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  int? _receiveCashAccountId;

  int get receiveCashAccountId{
    return _receiveCashAccountId!;
  }

  int? getReceiveCashAccountId(){
    return _receiveCashAccountId;
  }

  set receiveCashAccountId(int data){
    _receiveCashAccountId = data;
  }

  void setReceiveCashAccountId(int? data){
    _receiveCashAccountId = data;
  }

  TypeAccount? _receiveCashAccountInfo;

  TypeAccount get receiveCashAccountInfo{
    return _receiveCashAccountInfo!;
  }

  TypeAccount? getReceiveCashAccountInfo(){
    return _receiveCashAccountInfo;
  }

  set receiveCashAccountInfo(TypeAccount data){
    _receiveCashAccountInfo = data;
  }

  void setReceiveCashAccountInfo(TypeAccount? data){
    _receiveCashAccountInfo = data;
  }

  String? _receiveCashTotal;

  String get receiveCashTotal{
    return _receiveCashTotal!;
  }

  String? getReceiveCashTotal(){
    return _receiveCashTotal;
  }

  set receiveCashTotal(String data){
    _receiveCashTotal = data;
  }

  void setReceiveCashTotal(String? data){
    _receiveCashTotal = data;
  }

  String? _receiveDiscount;

  String get receiveDiscount{
    return _receiveDiscount!;
  }

  String? getReceiveDiscount(){
    return _receiveDiscount;
  }

  set receiveDiscount(String data){
    _receiveDiscount = data;
  }

  void setReceiveDiscount(String? data){
    _receiveDiscount = data;
  }

  int? _redReverseOrderId;

  int get redReverseOrderId{
    return _redReverseOrderId!;
  }

  int? getRedReverseOrderId(){
    return _redReverseOrderId;
  }

  set redReverseOrderId(int data){
    _redReverseOrderId = data;
  }

  void setRedReverseOrderId(int? data){
    _redReverseOrderId = data;
  }

  TypeEnumOrderRedState? _redState;

  TypeEnumOrderRedState get redState{
    return _redState!;
  }

  TypeEnumOrderRedState? getRedState(){
    return _redState;
  }

  set redState(TypeEnumOrderRedState data){
    _redState = data;
  }

  void setRedState(TypeEnumOrderRedState? data){
    _redState = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  List<TypeOrderSourceOrderItem>? _sourceOrderInfo;

  List<TypeOrderSourceOrderItem> get sourceOrderInfo{
    return _sourceOrderInfo!;
  }

  List<TypeOrderSourceOrderItem>? getSourceOrderInfo(){
    return _sourceOrderInfo;
  }

  set sourceOrderInfo(List<TypeOrderSourceOrderItem> data){
    _sourceOrderInfo = data;
  }

  void setSourceOrderInfo(List<TypeOrderSourceOrderItem>? data){
    _sourceOrderInfo = data;
  }

  String? _spendAdvancePayable;

  String get spendAdvancePayable{
    return _spendAdvancePayable!;
  }

  String? getSpendAdvancePayable(){
    return _spendAdvancePayable;
  }

  set spendAdvancePayable(String data){
    _spendAdvancePayable = data;
  }

  void setSpendAdvancePayable(String? data){
    _spendAdvancePayable = data;
  }

  String? _spendAdvanceReceivable;

  String get spendAdvanceReceivable{
    return _spendAdvanceReceivable!;
  }

  String? getSpendAdvanceReceivable(){
    return _spendAdvanceReceivable;
  }

  set spendAdvanceReceivable(String data){
    _spendAdvanceReceivable = data;
  }

  void setSpendAdvanceReceivable(String? data){
    _spendAdvanceReceivable = data;
  }

  TypeEnumOrderState? _state;

  TypeEnumOrderState get state{
    return _state!;
  }

  TypeEnumOrderState? getState(){
    return _state;
  }

  set state(TypeEnumOrderState data){
    _state = data;
  }

  void setState(TypeEnumOrderState? data){
    _state = data;
  }

  List<TypeOrderSubOrder>? _subOrders;

  List<TypeOrderSubOrder> get subOrders{
    return _subOrders!;
  }

  List<TypeOrderSubOrder>? getSubOrders(){
    return _subOrders;
  }

  set subOrders(List<TypeOrderSubOrder> data){
    _subOrders = data;
  }

  void setSubOrders(List<TypeOrderSubOrder>? data){
    _subOrders = data;
  }

  TypeEnumOrderSubType? _subType;

  TypeEnumOrderSubType get subType{
    return _subType!;
  }

  TypeEnumOrderSubType? getSubType(){
    return _subType;
  }

  set subType(TypeEnumOrderSubType data){
    _subType = data;
  }

  void setSubType(TypeEnumOrderSubType? data){
    _subType = data;
  }

  List<TypeOrderSubject>? _subjects;

  List<TypeOrderSubject> get subjects{
    return _subjects!;
  }

  List<TypeOrderSubject>? getSubjects(){
    return _subjects;
  }

  set subjects(List<TypeOrderSubject> data){
    _subjects = data;
  }

  void setSubjects(List<TypeOrderSubject>? data){
    _subjects = data;
  }

  String? _summaryRemark;

  String get summaryRemark{
    return _summaryRemark!;
  }

  String? getSummaryRemark(){
    return _summaryRemark;
  }

  set summaryRemark(String data){
    _summaryRemark = data;
  }

  void setSummaryRemark(String? data){
    _summaryRemark = data;
  }

  TypeOrderSourceOrderItem? _targetOrderInfo;

  TypeOrderSourceOrderItem get targetOrderInfo{
    return _targetOrderInfo!;
  }

  TypeOrderSourceOrderItem? getTargetOrderInfo(){
    return _targetOrderInfo;
  }

  set targetOrderInfo(TypeOrderSourceOrderItem data){
    _targetOrderInfo = data;
  }

  void setTargetOrderInfo(TypeOrderSourceOrderItem? data){
    _targetOrderInfo = data;
  }

  String? _tax;

  String get tax{
    return _tax!;
  }

  String? getTax(){
    return _tax;
  }

  set tax(String data){
    _tax = data;
  }

  void setTax(String? data){
    _tax = data;
  }

  String? _taxOnlyTotal;

  String get taxOnlyTotal{
    return _taxOnlyTotal!;
  }

  String? getTaxOnlyTotal(){
    return _taxOnlyTotal;
  }

  set taxOnlyTotal(String data){
    _taxOnlyTotal = data;
  }

  void setTaxOnlyTotal(String? data){
    _taxOnlyTotal = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _totalAmount;

  String get totalAmount{
    return _totalAmount!;
  }

  String? getTotalAmount(){
    return _totalAmount;
  }

  set totalAmount(String data){
    _totalAmount = data;
  }

  void setTotalAmount(String? data){
    _totalAmount = data;
  }

  TypeEnumOrderType? _type;

  TypeEnumOrderType get type{
    return _type!;
  }

  TypeEnumOrderType? getType(){
    return _type;
  }

  set type(TypeEnumOrderType data){
    _type = data;
  }

  void setType(TypeEnumOrderType? data){
    _type = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

}

class FTypeOrderAccount extends IDataField {
  static const accountId = FTypeOrderAccount('accountId');
  static const accountInfo = FTypeOrderAccount('accountInfo');
  static const accountSubType = FTypeOrderAccount('accountSubType');
  static const accountType = FTypeOrderAccount('accountType');
  static const auxiliaryContactId = FTypeOrderAccount('auxiliaryContactId');
  static const auxiliaryContactInfo = FTypeOrderAccount('auxiliaryContactInfo');
  static const auxiliaryEmployeeId = FTypeOrderAccount('auxiliaryEmployeeId');
  static const auxiliaryEmployeeInfo = FTypeOrderAccount('auxiliaryEmployeeInfo');
  static const auxiliaryStoreId = FTypeOrderAccount('auxiliaryStoreId');
  static const auxiliaryStoreInfo = FTypeOrderAccount('auxiliaryStoreInfo');
  static const businessOrderId = FTypeOrderAccount('businessOrderId');
  static const contactId = FTypeOrderAccount('contactId');
  static const contactInfo = FTypeOrderAccount('contactInfo');
  static const creditChange = FTypeOrderAccount('creditChange');
  static const debitChange = FTypeOrderAccount('debitChange');
  static const drawEmployeeId = FTypeOrderAccount('drawEmployeeId');
  static const drawEmployeeInfo = FTypeOrderAccount('drawEmployeeInfo');
  static const id = FTypeOrderAccount('id');
  static const isMonthlyClose = FTypeOrderAccount('isMonthlyClose');
  static const manageEmployeeId = FTypeOrderAccount('manageEmployeeId');
  static const manageEmployeeInfo = FTypeOrderAccount('manageEmployeeInfo');
  static const remark = FTypeOrderAccount('remark');
  static const storeId = FTypeOrderAccount('storeId');
  static const storeInfo = FTypeOrderAccount('storeInfo');
  static const summaryRemark = FTypeOrderAccount('summaryRemark');
  const FTypeOrderAccount(super.key);
}

final FieldReflectInfo<TypeOrderAccount> _TypeOrderAccount_fields = {
  "accountId": (
    getter: (data) => data._accountId,
    setter: (data, value) => data._accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._accountId = parser(value);
    }
  ),
  "accountInfo": (
    getter: (data) => data._accountInfo,
    setter: (data, value) => data._accountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data._accountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data._accountInfo = parser(value);
    }
  ),
  "accountSubType": (
    getter: (data) => data._accountSubType,
    setter: (data, value) => data._accountSubType = value as TypeEnumAccountSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountSubType.toDynamic;
      return formatter(data._accountSubType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountSubType.fromDynamic;
      data._accountSubType = parser(value);
    }
  ),
  "accountType": (
    getter: (data) => data._accountType,
    setter: (data, value) => data._accountType = value as TypeEnumAccountType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountType.toDynamic;
      return formatter(data._accountType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountType.fromDynamic;
      data._accountType = parser(value);
    }
  ),
  "auxiliaryContactId": (
    getter: (data) => data._auxiliaryContactId,
    setter: (data, value) => data._auxiliaryContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryContactId = parser(value);
    }
  ),
  "auxiliaryContactInfo": (
    getter: (data) => data._auxiliaryContactInfo,
    setter: (data, value) => data._auxiliaryContactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._auxiliaryContactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._auxiliaryContactInfo = parser(value);
    }
  ),
  "auxiliaryEmployeeId": (
    getter: (data) => data._auxiliaryEmployeeId,
    setter: (data, value) => data._auxiliaryEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryEmployeeId = parser(value);
    }
  ),
  "auxiliaryEmployeeInfo": (
    getter: (data) => data._auxiliaryEmployeeInfo,
    setter: (data, value) => data._auxiliaryEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._auxiliaryEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._auxiliaryEmployeeInfo = parser(value);
    }
  ),
  "auxiliaryStoreId": (
    getter: (data) => data._auxiliaryStoreId,
    setter: (data, value) => data._auxiliaryStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryStoreId = parser(value);
    }
  ),
  "auxiliaryStoreInfo": (
    getter: (data) => data._auxiliaryStoreInfo,
    setter: (data, value) => data._auxiliaryStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._auxiliaryStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._auxiliaryStoreInfo = parser(value);
    }
  ),
  "businessOrderId": (
    getter: (data) => data._businessOrderId,
    setter: (data, value) => data._businessOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._businessOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._businessOrderId = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactInfo": (
    getter: (data) => data._contactInfo,
    setter: (data, value) => data._contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._contactInfo = parser(value);
    }
  ),
  "creditChange": (
    getter: (data) => data._creditChange,
    setter: (data, value) => data._creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._creditChange = parser(value);
    }
  ),
  "debitChange": (
    getter: (data) => data._debitChange,
    setter: (data, value) => data._debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._debitChange = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "drawEmployeeInfo": (
    getter: (data) => data._drawEmployeeInfo,
    setter: (data, value) => data._drawEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._drawEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._drawEmployeeInfo = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isMonthlyClose": (
    getter: (data) => data._isMonthlyClose,
    setter: (data, value) => data._isMonthlyClose = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isMonthlyClose);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isMonthlyClose = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "manageEmployeeInfo": (
    getter: (data) => data._manageEmployeeInfo,
    setter: (data, value) => data._manageEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._manageEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._manageEmployeeInfo = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeInfo": (
    getter: (data) => data._storeInfo,
    setter: (data, value) => data._storeInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._storeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._storeInfo = parser(value);
    }
  ),
  "summaryRemark": (
    getter: (data) => data._summaryRemark,
    setter: (data, value) => data._summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._summaryRemark = parser(value);
    }
  ),
};

class TypeOrderAccount extends IDataBasic implements IDataDynamic {
  TypeOrderAccount({
    int? accountId,
    TypeAccount? accountInfo,
    TypeEnumAccountSubType? accountSubType,
    TypeEnumAccountType? accountType,
    int? auxiliaryContactId,
    TypeContact? auxiliaryContactInfo,
    int? auxiliaryEmployeeId,
    TypeEmployee? auxiliaryEmployeeInfo,
    int? auxiliaryStoreId,
    TypeStore? auxiliaryStoreInfo,
    int? businessOrderId,
    int? contactId,
    TypeContact? contactInfo,
    String? creditChange,
    String? debitChange,
    int? drawEmployeeId,
    TypeEmployee? drawEmployeeInfo,
    int? id,
    int? isMonthlyClose,
    int? manageEmployeeId,
    TypeEmployee? manageEmployeeInfo,
    String? remark,
    int? storeId,
    TypeStore? storeInfo,
    String? summaryRemark
  }):
    _accountId = accountId,
    _accountInfo = accountInfo,
    _accountSubType = accountSubType,
    _accountType = accountType,
    _auxiliaryContactId = auxiliaryContactId,
    _auxiliaryContactInfo = auxiliaryContactInfo,
    _auxiliaryEmployeeId = auxiliaryEmployeeId,
    _auxiliaryEmployeeInfo = auxiliaryEmployeeInfo,
    _auxiliaryStoreId = auxiliaryStoreId,
    _auxiliaryStoreInfo = auxiliaryStoreInfo,
    _businessOrderId = businessOrderId,
    _contactId = contactId,
    _contactInfo = contactInfo,
    _creditChange = creditChange,
    _debitChange = debitChange,
    _drawEmployeeId = drawEmployeeId,
    _drawEmployeeInfo = drawEmployeeInfo,
    _id = id,
    _isMonthlyClose = isMonthlyClose,
    _manageEmployeeId = manageEmployeeId,
    _manageEmployeeInfo = manageEmployeeInfo,
    _remark = remark,
    _storeId = storeId,
    _storeInfo = storeInfo,
    _summaryRemark = summaryRemark;

  static TypeOrderAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _accountId;

  int get accountId{
    return _accountId!;
  }

  int? getAccountId(){
    return _accountId;
  }

  set accountId(int data){
    _accountId = data;
  }

  void setAccountId(int? data){
    _accountId = data;
  }

  TypeAccount? _accountInfo;

  TypeAccount get accountInfo{
    return _accountInfo!;
  }

  TypeAccount? getAccountInfo(){
    return _accountInfo;
  }

  set accountInfo(TypeAccount data){
    _accountInfo = data;
  }

  void setAccountInfo(TypeAccount? data){
    _accountInfo = data;
  }

  TypeEnumAccountSubType? _accountSubType;

  TypeEnumAccountSubType get accountSubType{
    return _accountSubType!;
  }

  TypeEnumAccountSubType? getAccountSubType(){
    return _accountSubType;
  }

  set accountSubType(TypeEnumAccountSubType data){
    _accountSubType = data;
  }

  void setAccountSubType(TypeEnumAccountSubType? data){
    _accountSubType = data;
  }

  TypeEnumAccountType? _accountType;

  TypeEnumAccountType get accountType{
    return _accountType!;
  }

  TypeEnumAccountType? getAccountType(){
    return _accountType;
  }

  set accountType(TypeEnumAccountType data){
    _accountType = data;
  }

  void setAccountType(TypeEnumAccountType? data){
    _accountType = data;
  }

  int? _auxiliaryContactId;

  int get auxiliaryContactId{
    return _auxiliaryContactId!;
  }

  int? getAuxiliaryContactId(){
    return _auxiliaryContactId;
  }

  set auxiliaryContactId(int data){
    _auxiliaryContactId = data;
  }

  void setAuxiliaryContactId(int? data){
    _auxiliaryContactId = data;
  }

  TypeContact? _auxiliaryContactInfo;

  TypeContact get auxiliaryContactInfo{
    return _auxiliaryContactInfo!;
  }

  TypeContact? getAuxiliaryContactInfo(){
    return _auxiliaryContactInfo;
  }

  set auxiliaryContactInfo(TypeContact data){
    _auxiliaryContactInfo = data;
  }

  void setAuxiliaryContactInfo(TypeContact? data){
    _auxiliaryContactInfo = data;
  }

  int? _auxiliaryEmployeeId;

  int get auxiliaryEmployeeId{
    return _auxiliaryEmployeeId!;
  }

  int? getAuxiliaryEmployeeId(){
    return _auxiliaryEmployeeId;
  }

  set auxiliaryEmployeeId(int data){
    _auxiliaryEmployeeId = data;
  }

  void setAuxiliaryEmployeeId(int? data){
    _auxiliaryEmployeeId = data;
  }

  TypeEmployee? _auxiliaryEmployeeInfo;

  TypeEmployee get auxiliaryEmployeeInfo{
    return _auxiliaryEmployeeInfo!;
  }

  TypeEmployee? getAuxiliaryEmployeeInfo(){
    return _auxiliaryEmployeeInfo;
  }

  set auxiliaryEmployeeInfo(TypeEmployee data){
    _auxiliaryEmployeeInfo = data;
  }

  void setAuxiliaryEmployeeInfo(TypeEmployee? data){
    _auxiliaryEmployeeInfo = data;
  }

  int? _auxiliaryStoreId;

  int get auxiliaryStoreId{
    return _auxiliaryStoreId!;
  }

  int? getAuxiliaryStoreId(){
    return _auxiliaryStoreId;
  }

  set auxiliaryStoreId(int data){
    _auxiliaryStoreId = data;
  }

  void setAuxiliaryStoreId(int? data){
    _auxiliaryStoreId = data;
  }

  TypeStore? _auxiliaryStoreInfo;

  TypeStore get auxiliaryStoreInfo{
    return _auxiliaryStoreInfo!;
  }

  TypeStore? getAuxiliaryStoreInfo(){
    return _auxiliaryStoreInfo;
  }

  set auxiliaryStoreInfo(TypeStore data){
    _auxiliaryStoreInfo = data;
  }

  void setAuxiliaryStoreInfo(TypeStore? data){
    _auxiliaryStoreInfo = data;
  }

  int? _businessOrderId;

  int get businessOrderId{
    return _businessOrderId!;
  }

  int? getBusinessOrderId(){
    return _businessOrderId;
  }

  set businessOrderId(int data){
    _businessOrderId = data;
  }

  void setBusinessOrderId(int? data){
    _businessOrderId = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  TypeContact? _contactInfo;

  TypeContact get contactInfo{
    return _contactInfo!;
  }

  TypeContact? getContactInfo(){
    return _contactInfo;
  }

  set contactInfo(TypeContact data){
    _contactInfo = data;
  }

  void setContactInfo(TypeContact? data){
    _contactInfo = data;
  }

  String? _creditChange;

  String get creditChange{
    return _creditChange!;
  }

  String? getCreditChange(){
    return _creditChange;
  }

  set creditChange(String data){
    _creditChange = data;
  }

  void setCreditChange(String? data){
    _creditChange = data;
  }

  String? _debitChange;

  String get debitChange{
    return _debitChange!;
  }

  String? getDebitChange(){
    return _debitChange;
  }

  set debitChange(String data){
    _debitChange = data;
  }

  void setDebitChange(String? data){
    _debitChange = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  TypeEmployee? _drawEmployeeInfo;

  TypeEmployee get drawEmployeeInfo{
    return _drawEmployeeInfo!;
  }

  TypeEmployee? getDrawEmployeeInfo(){
    return _drawEmployeeInfo;
  }

  set drawEmployeeInfo(TypeEmployee data){
    _drawEmployeeInfo = data;
  }

  void setDrawEmployeeInfo(TypeEmployee? data){
    _drawEmployeeInfo = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _isMonthlyClose;

  int get isMonthlyClose{
    return _isMonthlyClose!;
  }

  int? getIsMonthlyClose(){
    return _isMonthlyClose;
  }

  set isMonthlyClose(int data){
    _isMonthlyClose = data;
  }

  void setIsMonthlyClose(int? data){
    _isMonthlyClose = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  TypeEmployee? _manageEmployeeInfo;

  TypeEmployee get manageEmployeeInfo{
    return _manageEmployeeInfo!;
  }

  TypeEmployee? getManageEmployeeInfo(){
    return _manageEmployeeInfo;
  }

  set manageEmployeeInfo(TypeEmployee data){
    _manageEmployeeInfo = data;
  }

  void setManageEmployeeInfo(TypeEmployee? data){
    _manageEmployeeInfo = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  TypeStore? _storeInfo;

  TypeStore get storeInfo{
    return _storeInfo!;
  }

  TypeStore? getStoreInfo(){
    return _storeInfo;
  }

  set storeInfo(TypeStore data){
    _storeInfo = data;
  }

  void setStoreInfo(TypeStore? data){
    _storeInfo = data;
  }

  String? _summaryRemark;

  String get summaryRemark{
    return _summaryRemark!;
  }

  String? getSummaryRemark(){
    return _summaryRemark;
  }

  set summaryRemark(String data){
    _summaryRemark = data;
  }

  void setSummaryRemark(String? data){
    _summaryRemark = data;
  }

}

class FTypeOrderArapFlow extends IDataField {
  static const adpChange = FTypeOrderArapFlow('adpChange');
  static const adpCreditChange = FTypeOrderArapFlow('adpCreditChange');
  static const adpDebitChange = FTypeOrderArapFlow('adpDebitChange');
  static const adrChange = FTypeOrderArapFlow('adrChange');
  static const adrCreditChange = FTypeOrderArapFlow('adrCreditChange');
  static const adrDebitChange = FTypeOrderArapFlow('adrDebitChange');
  static const apAdjustTotal = FTypeOrderArapFlow('apAdjustTotal');
  static const apChange = FTypeOrderArapFlow('apChange');
  static const apCreditChange = FTypeOrderArapFlow('apCreditChange');
  static const apDebitChange = FTypeOrderArapFlow('apDebitChange');
  static const arAdjustTotal = FTypeOrderArapFlow('arAdjustTotal');
  static const arChange = FTypeOrderArapFlow('arChange');
  static const arCreditChange = FTypeOrderArapFlow('arCreditChange');
  static const arDebitChange = FTypeOrderArapFlow('arDebitChange');
  static const arapType = FTypeOrderArapFlow('arapType');
  static const businessTotal = FTypeOrderArapFlow('businessTotal');
  static const cashApChange = FTypeOrderArapFlow('cashApChange');
  static const cashArChange = FTypeOrderArapFlow('cashArChange');
  static const contactId = FTypeOrderArapFlow('contactId');
  static const discountTotal = FTypeOrderArapFlow('discountTotal');
  static const id = FTypeOrderArapFlow('id');
  static const manageEmployeeId = FTypeOrderArapFlow('manageEmployeeId');
  static const spendAdpChange = FTypeOrderArapFlow('spendAdpChange');
  static const spendAdrChange = FTypeOrderArapFlow('spendAdrChange');
  static const subOrderId = FTypeOrderArapFlow('subOrderId');
  static const subOrderNumber = FTypeOrderArapFlow('subOrderNumber');
  const FTypeOrderArapFlow(super.key);
}

final FieldReflectInfo<TypeOrderArapFlow> _TypeOrderArapFlow_fields = {
  "adpChange": (
    getter: (data) => data._adpChange,
    setter: (data, value) => data._adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpChange = parser(value);
    }
  ),
  "adpCreditChange": (
    getter: (data) => data._adpCreditChange,
    setter: (data, value) => data._adpCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpCreditChange = parser(value);
    }
  ),
  "adpDebitChange": (
    getter: (data) => data._adpDebitChange,
    setter: (data, value) => data._adpDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpDebitChange = parser(value);
    }
  ),
  "adrChange": (
    getter: (data) => data._adrChange,
    setter: (data, value) => data._adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrChange = parser(value);
    }
  ),
  "adrCreditChange": (
    getter: (data) => data._adrCreditChange,
    setter: (data, value) => data._adrCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrCreditChange = parser(value);
    }
  ),
  "adrDebitChange": (
    getter: (data) => data._adrDebitChange,
    setter: (data, value) => data._adrDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrDebitChange = parser(value);
    }
  ),
  "apAdjustTotal": (
    getter: (data) => data._apAdjustTotal,
    setter: (data, value) => data._apAdjustTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apAdjustTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apAdjustTotal = parser(value);
    }
  ),
  "apChange": (
    getter: (data) => data._apChange,
    setter: (data, value) => data._apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apChange = parser(value);
    }
  ),
  "apCreditChange": (
    getter: (data) => data._apCreditChange,
    setter: (data, value) => data._apCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apCreditChange = parser(value);
    }
  ),
  "apDebitChange": (
    getter: (data) => data._apDebitChange,
    setter: (data, value) => data._apDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apDebitChange = parser(value);
    }
  ),
  "arAdjustTotal": (
    getter: (data) => data._arAdjustTotal,
    setter: (data, value) => data._arAdjustTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arAdjustTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arAdjustTotal = parser(value);
    }
  ),
  "arChange": (
    getter: (data) => data._arChange,
    setter: (data, value) => data._arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arChange = parser(value);
    }
  ),
  "arCreditChange": (
    getter: (data) => data._arCreditChange,
    setter: (data, value) => data._arCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arCreditChange = parser(value);
    }
  ),
  "arDebitChange": (
    getter: (data) => data._arDebitChange,
    setter: (data, value) => data._arDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arDebitChange = parser(value);
    }
  ),
  "arapType": (
    getter: (data) => data._arapType,
    setter: (data, value) => data._arapType = value as TypeEnumOrderArapType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderArapType.toDynamic;
      return formatter(data._arapType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderArapType.fromDynamic;
      data._arapType = parser(value);
    }
  ),
  "businessTotal": (
    getter: (data) => data._businessTotal,
    setter: (data, value) => data._businessTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._businessTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._businessTotal = parser(value);
    }
  ),
  "cashApChange": (
    getter: (data) => data._cashApChange,
    setter: (data, value) => data._cashApChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashApChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashApChange = parser(value);
    }
  ),
  "cashArChange": (
    getter: (data) => data._cashArChange,
    setter: (data, value) => data._cashArChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashArChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashArChange = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "spendAdpChange": (
    getter: (data) => data._spendAdpChange,
    setter: (data, value) => data._spendAdpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdpChange = parser(value);
    }
  ),
  "spendAdrChange": (
    getter: (data) => data._spendAdrChange,
    setter: (data, value) => data._spendAdrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdrChange = parser(value);
    }
  ),
  "subOrderId": (
    getter: (data) => data._subOrderId,
    setter: (data, value) => data._subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._subOrderId = parser(value);
    }
  ),
  "subOrderNumber": (
    getter: (data) => data._subOrderNumber,
    setter: (data, value) => data._subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderNumber = parser(value);
    }
  ),
};

class TypeOrderArapFlow extends IDataBasic implements IDataDynamic {
  TypeOrderArapFlow({
    String? adpChange,
    String? adpCreditChange,
    String? adpDebitChange,
    String? adrChange,
    String? adrCreditChange,
    String? adrDebitChange,
    String? apAdjustTotal,
    String? apChange,
    String? apCreditChange,
    String? apDebitChange,
    String? arAdjustTotal,
    String? arChange,
    String? arCreditChange,
    String? arDebitChange,
    TypeEnumOrderArapType? arapType,
    String? businessTotal,
    String? cashApChange,
    String? cashArChange,
    int? contactId,
    String? discountTotal,
    int? id,
    int? manageEmployeeId,
    String? spendAdpChange,
    String? spendAdrChange,
    int? subOrderId,
    String? subOrderNumber
  }):
    _adpChange = adpChange,
    _adpCreditChange = adpCreditChange,
    _adpDebitChange = adpDebitChange,
    _adrChange = adrChange,
    _adrCreditChange = adrCreditChange,
    _adrDebitChange = adrDebitChange,
    _apAdjustTotal = apAdjustTotal,
    _apChange = apChange,
    _apCreditChange = apCreditChange,
    _apDebitChange = apDebitChange,
    _arAdjustTotal = arAdjustTotal,
    _arChange = arChange,
    _arCreditChange = arCreditChange,
    _arDebitChange = arDebitChange,
    _arapType = arapType,
    _businessTotal = businessTotal,
    _cashApChange = cashApChange,
    _cashArChange = cashArChange,
    _contactId = contactId,
    _discountTotal = discountTotal,
    _id = id,
    _manageEmployeeId = manageEmployeeId,
    _spendAdpChange = spendAdpChange,
    _spendAdrChange = spendAdrChange,
    _subOrderId = subOrderId,
    _subOrderNumber = subOrderNumber;

  static TypeOrderArapFlow? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderArapFlow();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderArapFlow_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderArapFlow: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderArapFlow? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderArapFlow_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderArapFlow_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderArapFlow_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _adpChange;

  String get adpChange{
    return _adpChange!;
  }

  String? getAdpChange(){
    return _adpChange;
  }

  set adpChange(String data){
    _adpChange = data;
  }

  void setAdpChange(String? data){
    _adpChange = data;
  }

  String? _adpCreditChange;

  String get adpCreditChange{
    return _adpCreditChange!;
  }

  String? getAdpCreditChange(){
    return _adpCreditChange;
  }

  set adpCreditChange(String data){
    _adpCreditChange = data;
  }

  void setAdpCreditChange(String? data){
    _adpCreditChange = data;
  }

  String? _adpDebitChange;

  String get adpDebitChange{
    return _adpDebitChange!;
  }

  String? getAdpDebitChange(){
    return _adpDebitChange;
  }

  set adpDebitChange(String data){
    _adpDebitChange = data;
  }

  void setAdpDebitChange(String? data){
    _adpDebitChange = data;
  }

  String? _adrChange;

  String get adrChange{
    return _adrChange!;
  }

  String? getAdrChange(){
    return _adrChange;
  }

  set adrChange(String data){
    _adrChange = data;
  }

  void setAdrChange(String? data){
    _adrChange = data;
  }

  String? _adrCreditChange;

  String get adrCreditChange{
    return _adrCreditChange!;
  }

  String? getAdrCreditChange(){
    return _adrCreditChange;
  }

  set adrCreditChange(String data){
    _adrCreditChange = data;
  }

  void setAdrCreditChange(String? data){
    _adrCreditChange = data;
  }

  String? _adrDebitChange;

  String get adrDebitChange{
    return _adrDebitChange!;
  }

  String? getAdrDebitChange(){
    return _adrDebitChange;
  }

  set adrDebitChange(String data){
    _adrDebitChange = data;
  }

  void setAdrDebitChange(String? data){
    _adrDebitChange = data;
  }

  String? _apAdjustTotal;

  String get apAdjustTotal{
    return _apAdjustTotal!;
  }

  String? getApAdjustTotal(){
    return _apAdjustTotal;
  }

  set apAdjustTotal(String data){
    _apAdjustTotal = data;
  }

  void setApAdjustTotal(String? data){
    _apAdjustTotal = data;
  }

  String? _apChange;

  String get apChange{
    return _apChange!;
  }

  String? getApChange(){
    return _apChange;
  }

  set apChange(String data){
    _apChange = data;
  }

  void setApChange(String? data){
    _apChange = data;
  }

  String? _apCreditChange;

  String get apCreditChange{
    return _apCreditChange!;
  }

  String? getApCreditChange(){
    return _apCreditChange;
  }

  set apCreditChange(String data){
    _apCreditChange = data;
  }

  void setApCreditChange(String? data){
    _apCreditChange = data;
  }

  String? _apDebitChange;

  String get apDebitChange{
    return _apDebitChange!;
  }

  String? getApDebitChange(){
    return _apDebitChange;
  }

  set apDebitChange(String data){
    _apDebitChange = data;
  }

  void setApDebitChange(String? data){
    _apDebitChange = data;
  }

  String? _arAdjustTotal;

  String get arAdjustTotal{
    return _arAdjustTotal!;
  }

  String? getArAdjustTotal(){
    return _arAdjustTotal;
  }

  set arAdjustTotal(String data){
    _arAdjustTotal = data;
  }

  void setArAdjustTotal(String? data){
    _arAdjustTotal = data;
  }

  String? _arChange;

  String get arChange{
    return _arChange!;
  }

  String? getArChange(){
    return _arChange;
  }

  set arChange(String data){
    _arChange = data;
  }

  void setArChange(String? data){
    _arChange = data;
  }

  String? _arCreditChange;

  String get arCreditChange{
    return _arCreditChange!;
  }

  String? getArCreditChange(){
    return _arCreditChange;
  }

  set arCreditChange(String data){
    _arCreditChange = data;
  }

  void setArCreditChange(String? data){
    _arCreditChange = data;
  }

  String? _arDebitChange;

  String get arDebitChange{
    return _arDebitChange!;
  }

  String? getArDebitChange(){
    return _arDebitChange;
  }

  set arDebitChange(String data){
    _arDebitChange = data;
  }

  void setArDebitChange(String? data){
    _arDebitChange = data;
  }

  TypeEnumOrderArapType? _arapType;

  TypeEnumOrderArapType get arapType{
    return _arapType!;
  }

  TypeEnumOrderArapType? getArapType(){
    return _arapType;
  }

  set arapType(TypeEnumOrderArapType data){
    _arapType = data;
  }

  void setArapType(TypeEnumOrderArapType? data){
    _arapType = data;
  }

  String? _businessTotal;

  String get businessTotal{
    return _businessTotal!;
  }

  String? getBusinessTotal(){
    return _businessTotal;
  }

  set businessTotal(String data){
    _businessTotal = data;
  }

  void setBusinessTotal(String? data){
    _businessTotal = data;
  }

  String? _cashApChange;

  String get cashApChange{
    return _cashApChange!;
  }

  String? getCashApChange(){
    return _cashApChange;
  }

  set cashApChange(String data){
    _cashApChange = data;
  }

  void setCashApChange(String? data){
    _cashApChange = data;
  }

  String? _cashArChange;

  String get cashArChange{
    return _cashArChange!;
  }

  String? getCashArChange(){
    return _cashArChange;
  }

  set cashArChange(String data){
    _cashArChange = data;
  }

  void setCashArChange(String? data){
    _cashArChange = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _spendAdpChange;

  String get spendAdpChange{
    return _spendAdpChange!;
  }

  String? getSpendAdpChange(){
    return _spendAdpChange;
  }

  set spendAdpChange(String data){
    _spendAdpChange = data;
  }

  void setSpendAdpChange(String? data){
    _spendAdpChange = data;
  }

  String? _spendAdrChange;

  String get spendAdrChange{
    return _spendAdrChange!;
  }

  String? getSpendAdrChange(){
    return _spendAdrChange;
  }

  set spendAdrChange(String data){
    _spendAdrChange = data;
  }

  void setSpendAdrChange(String? data){
    _spendAdrChange = data;
  }

  int? _subOrderId;

  int get subOrderId{
    return _subOrderId!;
  }

  int? getSubOrderId(){
    return _subOrderId;
  }

  set subOrderId(int data){
    _subOrderId = data;
  }

  void setSubOrderId(int? data){
    _subOrderId = data;
  }

  String? _subOrderNumber;

  String get subOrderNumber{
    return _subOrderNumber!;
  }

  String? getSubOrderNumber(){
    return _subOrderNumber;
  }

  set subOrderNumber(String data){
    _subOrderNumber = data;
  }

  void setSubOrderNumber(String? data){
    _subOrderNumber = data;
  }

}

class FTypeOrderAttachmentQueryDTO extends IDataField {
  static const data = FTypeOrderAttachmentQueryDTO('data');
  static const pageIndex = FTypeOrderAttachmentQueryDTO('pageIndex');
  static const pageSize = FTypeOrderAttachmentQueryDTO('pageSize');
  static const sum = FTypeOrderAttachmentQueryDTO('sum');
  const FTypeOrderAttachmentQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQueryDTO> _TypeOrderAttachmentQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderAttachmentQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderAttachmentQueryDataDTO>((single){
        final handler = TypeOrderAttachmentQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderAttachmentQueryDataDTO>((single){
        final handler = TypeOrderAttachmentQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderAttachmentQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderAttachmentQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderAttachmentQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderAttachmentQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQueryDTO({
    List<TypeOrderAttachmentQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeOrderAttachmentQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderAttachmentQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderAttachmentQueryDataDTO>? _data;

  List<TypeOrderAttachmentQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderAttachmentQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderAttachmentQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderAttachmentQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderAttachmentQuerySumDTO? _sum;

  TypeOrderAttachmentQuerySumDTO get sum{
    return _sum!;
  }

  TypeOrderAttachmentQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderAttachmentQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeOrderAttachmentQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeOrderAttachmentQueryDataDTO extends IDataField {
  static const attachmentCount = FTypeOrderAttachmentQueryDataDTO('attachmentCount');
  static const contactId = FTypeOrderAttachmentQueryDataDTO('contactId');
  static const contactName = FTypeOrderAttachmentQueryDataDTO('contactName');
  static const contactPersonAddress = FTypeOrderAttachmentQueryDataDTO('contactPersonAddress');
  static const contactPersonName = FTypeOrderAttachmentQueryDataDTO('contactPersonName');
  static const contactPersonPhone = FTypeOrderAttachmentQueryDataDTO('contactPersonPhone');
  static const customField1 = FTypeOrderAttachmentQueryDataDTO('customField1');
  static const customField2 = FTypeOrderAttachmentQueryDataDTO('customField2');
  static const customField3 = FTypeOrderAttachmentQueryDataDTO('customField3');
  static const customField4 = FTypeOrderAttachmentQueryDataDTO('customField4');
  static const customField5 = FTypeOrderAttachmentQueryDataDTO('customField5');
  static const customField6 = FTypeOrderAttachmentQueryDataDTO('customField6');
  static const customField7 = FTypeOrderAttachmentQueryDataDTO('customField7');
  static const customField8 = FTypeOrderAttachmentQueryDataDTO('customField8');
  static const drawEmployeeId = FTypeOrderAttachmentQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderAttachmentQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderAttachmentQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderAttachmentQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderAttachmentQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderAttachmentQueryDataDTO('entryAccountTime');
  static const id = FTypeOrderAttachmentQueryDataDTO('id');
  static const imageInfos = FTypeOrderAttachmentQueryDataDTO('imageInfos');
  static const manageEmployeeId = FTypeOrderAttachmentQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderAttachmentQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderAttachmentQueryDataDTO('number');
  static const orderDate = FTypeOrderAttachmentQueryDataDTO('orderDate');
  static const printTimes = FTypeOrderAttachmentQueryDataDTO('printTimes');
  static const remark = FTypeOrderAttachmentQueryDataDTO('remark');
  static const state = FTypeOrderAttachmentQueryDataDTO('state');
  static const summaryRemark = FTypeOrderAttachmentQueryDataDTO('summaryRemark');
  static const type = FTypeOrderAttachmentQueryDataDTO('type');
  const FTypeOrderAttachmentQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQueryDataDTO> _TypeOrderAttachmentQueryDataDTO_fields = {
  "attachmentCount": (
    getter: (data) => data._attachmentCount,
    setter: (data, value) => data._attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentCount = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "contactPersonAddress": (
    getter: (data) => data._contactPersonAddress,
    setter: (data, value) => data._contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonAddress = parser(value);
    }
  ),
  "contactPersonName": (
    getter: (data) => data._contactPersonName,
    setter: (data, value) => data._contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonName = parser(value);
    }
  ),
  "contactPersonPhone": (
    getter: (data) => data._contactPersonPhone,
    setter: (data, value) => data._contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonPhone = parser(value);
    }
  ),
  "customField1": (
    getter: (data) => data._customField1,
    setter: (data, value) => data._customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField1 = parser(value);
    }
  ),
  "customField2": (
    getter: (data) => data._customField2,
    setter: (data, value) => data._customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField2 = parser(value);
    }
  ),
  "customField3": (
    getter: (data) => data._customField3,
    setter: (data, value) => data._customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField3 = parser(value);
    }
  ),
  "customField4": (
    getter: (data) => data._customField4,
    setter: (data, value) => data._customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField4 = parser(value);
    }
  ),
  "customField5": (
    getter: (data) => data._customField5,
    setter: (data, value) => data._customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField5 = parser(value);
    }
  ),
  "customField6": (
    getter: (data) => data._customField6,
    setter: (data, value) => data._customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField6 = parser(value);
    }
  ),
  "customField7": (
    getter: (data) => data._customField7,
    setter: (data, value) => data._customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField7 = parser(value);
    }
  ),
  "customField8": (
    getter: (data) => data._customField8,
    setter: (data, value) => data._customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField8 = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "drawEmployeeName": (
    getter: (data) => data._drawEmployeeName,
    setter: (data, value) => data._drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawEmployeeName = parser(value);
    }
  ),
  "drawTime": (
    getter: (data) => data._drawTime,
    setter: (data, value) => data._drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawTime = parser(value);
    }
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data._entryAccountEmployeeId,
    setter: (data, value) => data._entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._entryAccountEmployeeId = parser(value);
    }
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data._entryAccountEmployeeName,
    setter: (data, value) => data._entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountEmployeeName = parser(value);
    }
  ),
  "entryAccountTime": (
    getter: (data) => data._entryAccountTime,
    setter: (data, value) => data._entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "imageInfos": (
    getter: (data) => data._imageInfos,
    setter: (data, value) => data._imageInfos = value as List<TypeImageInfo>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeImageInfo>((single){
        final handler = TypeImageInfo.toDynamic;
        return handler(single)!;
      });
      return formatter(data._imageInfos);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeImageInfo>((single){
        final handler = TypeImageInfo.fromDynamic;
        return handler(single)!;
      });
      data._imageInfos = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "manageEmployeeName": (
    getter: (data) => data._manageEmployeeName,
    setter: (data, value) => data._manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._manageEmployeeName = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "printTimes": (
    getter: (data) => data._printTimes,
    setter: (data, value) => data._printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._printTimes = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "summaryRemark": (
    getter: (data) => data._summaryRemark,
    setter: (data, value) => data._summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._summaryRemark = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._type = parser(value);
    }
  ),
};

class TypeOrderAttachmentQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQueryDataDTO({
    int? attachmentCount,
    int? contactId,
    String? contactName,
    String? contactPersonAddress,
    String? contactPersonName,
    String? contactPersonPhone,
    String? customField1,
    String? customField2,
    String? customField3,
    String? customField4,
    String? customField5,
    String? customField6,
    String? customField7,
    String? customField8,
    int? drawEmployeeId,
    String? drawEmployeeName,
    String? drawTime,
    int? entryAccountEmployeeId,
    String? entryAccountEmployeeName,
    String? entryAccountTime,
    int? id,
    List<TypeImageInfo>? imageInfos,
    int? manageEmployeeId,
    String? manageEmployeeName,
    String? number,
    String? orderDate,
    int? printTimes,
    String? remark,
    TypeEnumOrderState? state,
    String? summaryRemark,
    TypeEnumOrderType? type
  }):
    _attachmentCount = attachmentCount,
    _contactId = contactId,
    _contactName = contactName,
    _contactPersonAddress = contactPersonAddress,
    _contactPersonName = contactPersonName,
    _contactPersonPhone = contactPersonPhone,
    _customField1 = customField1,
    _customField2 = customField2,
    _customField3 = customField3,
    _customField4 = customField4,
    _customField5 = customField5,
    _customField6 = customField6,
    _customField7 = customField7,
    _customField8 = customField8,
    _drawEmployeeId = drawEmployeeId,
    _drawEmployeeName = drawEmployeeName,
    _drawTime = drawTime,
    _entryAccountEmployeeId = entryAccountEmployeeId,
    _entryAccountEmployeeName = entryAccountEmployeeName,
    _entryAccountTime = entryAccountTime,
    _id = id,
    _imageInfos = imageInfos,
    _manageEmployeeId = manageEmployeeId,
    _manageEmployeeName = manageEmployeeName,
    _number = number,
    _orderDate = orderDate,
    _printTimes = printTimes,
    _remark = remark,
    _state = state,
    _summaryRemark = summaryRemark,
    _type = type;

  static TypeOrderAttachmentQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _attachmentCount;

  int get attachmentCount{
    return _attachmentCount!;
  }

  int? getAttachmentCount(){
    return _attachmentCount;
  }

  set attachmentCount(int data){
    _attachmentCount = data;
  }

  void setAttachmentCount(int? data){
    _attachmentCount = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _contactPersonAddress;

  String get contactPersonAddress{
    return _contactPersonAddress!;
  }

  String? getContactPersonAddress(){
    return _contactPersonAddress;
  }

  set contactPersonAddress(String data){
    _contactPersonAddress = data;
  }

  void setContactPersonAddress(String? data){
    _contactPersonAddress = data;
  }

  String? _contactPersonName;

  String get contactPersonName{
    return _contactPersonName!;
  }

  String? getContactPersonName(){
    return _contactPersonName;
  }

  set contactPersonName(String data){
    _contactPersonName = data;
  }

  void setContactPersonName(String? data){
    _contactPersonName = data;
  }

  String? _contactPersonPhone;

  String get contactPersonPhone{
    return _contactPersonPhone!;
  }

  String? getContactPersonPhone(){
    return _contactPersonPhone;
  }

  set contactPersonPhone(String data){
    _contactPersonPhone = data;
  }

  void setContactPersonPhone(String? data){
    _contactPersonPhone = data;
  }

  String? _customField1;

  String get customField1{
    return _customField1!;
  }

  String? getCustomField1(){
    return _customField1;
  }

  set customField1(String data){
    _customField1 = data;
  }

  void setCustomField1(String? data){
    _customField1 = data;
  }

  String? _customField2;

  String get customField2{
    return _customField2!;
  }

  String? getCustomField2(){
    return _customField2;
  }

  set customField2(String data){
    _customField2 = data;
  }

  void setCustomField2(String? data){
    _customField2 = data;
  }

  String? _customField3;

  String get customField3{
    return _customField3!;
  }

  String? getCustomField3(){
    return _customField3;
  }

  set customField3(String data){
    _customField3 = data;
  }

  void setCustomField3(String? data){
    _customField3 = data;
  }

  String? _customField4;

  String get customField4{
    return _customField4!;
  }

  String? getCustomField4(){
    return _customField4;
  }

  set customField4(String data){
    _customField4 = data;
  }

  void setCustomField4(String? data){
    _customField4 = data;
  }

  String? _customField5;

  String get customField5{
    return _customField5!;
  }

  String? getCustomField5(){
    return _customField5;
  }

  set customField5(String data){
    _customField5 = data;
  }

  void setCustomField5(String? data){
    _customField5 = data;
  }

  String? _customField6;

  String get customField6{
    return _customField6!;
  }

  String? getCustomField6(){
    return _customField6;
  }

  set customField6(String data){
    _customField6 = data;
  }

  void setCustomField6(String? data){
    _customField6 = data;
  }

  String? _customField7;

  String get customField7{
    return _customField7!;
  }

  String? getCustomField7(){
    return _customField7;
  }

  set customField7(String data){
    _customField7 = data;
  }

  void setCustomField7(String? data){
    _customField7 = data;
  }

  String? _customField8;

  String get customField8{
    return _customField8!;
  }

  String? getCustomField8(){
    return _customField8;
  }

  set customField8(String data){
    _customField8 = data;
  }

  void setCustomField8(String? data){
    _customField8 = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  String? _drawEmployeeName;

  String get drawEmployeeName{
    return _drawEmployeeName!;
  }

  String? getDrawEmployeeName(){
    return _drawEmployeeName;
  }

  set drawEmployeeName(String data){
    _drawEmployeeName = data;
  }

  void setDrawEmployeeName(String? data){
    _drawEmployeeName = data;
  }

  String? _drawTime;

  String get drawTime{
    return _drawTime!;
  }

  String? getDrawTime(){
    return _drawTime;
  }

  set drawTime(String data){
    _drawTime = data;
  }

  void setDrawTime(String? data){
    _drawTime = data;
  }

  int? _entryAccountEmployeeId;

  int get entryAccountEmployeeId{
    return _entryAccountEmployeeId!;
  }

  int? getEntryAccountEmployeeId(){
    return _entryAccountEmployeeId;
  }

  set entryAccountEmployeeId(int data){
    _entryAccountEmployeeId = data;
  }

  void setEntryAccountEmployeeId(int? data){
    _entryAccountEmployeeId = data;
  }

  String? _entryAccountEmployeeName;

  String get entryAccountEmployeeName{
    return _entryAccountEmployeeName!;
  }

  String? getEntryAccountEmployeeName(){
    return _entryAccountEmployeeName;
  }

  set entryAccountEmployeeName(String data){
    _entryAccountEmployeeName = data;
  }

  void setEntryAccountEmployeeName(String? data){
    _entryAccountEmployeeName = data;
  }

  String? _entryAccountTime;

  String get entryAccountTime{
    return _entryAccountTime!;
  }

  String? getEntryAccountTime(){
    return _entryAccountTime;
  }

  set entryAccountTime(String data){
    _entryAccountTime = data;
  }

  void setEntryAccountTime(String? data){
    _entryAccountTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  List<TypeImageInfo>? _imageInfos;

  List<TypeImageInfo> get imageInfos{
    return _imageInfos!;
  }

  List<TypeImageInfo>? getImageInfos(){
    return _imageInfos;
  }

  set imageInfos(List<TypeImageInfo> data){
    _imageInfos = data;
  }

  void setImageInfos(List<TypeImageInfo>? data){
    _imageInfos = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _manageEmployeeName;

  String get manageEmployeeName{
    return _manageEmployeeName!;
  }

  String? getManageEmployeeName(){
    return _manageEmployeeName;
  }

  set manageEmployeeName(String data){
    _manageEmployeeName = data;
  }

  void setManageEmployeeName(String? data){
    _manageEmployeeName = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _printTimes;

  int get printTimes{
    return _printTimes!;
  }

  int? getPrintTimes(){
    return _printTimes;
  }

  set printTimes(int data){
    _printTimes = data;
  }

  void setPrintTimes(int? data){
    _printTimes = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  TypeEnumOrderState? _state;

  TypeEnumOrderState get state{
    return _state!;
  }

  TypeEnumOrderState? getState(){
    return _state;
  }

  set state(TypeEnumOrderState data){
    _state = data;
  }

  void setState(TypeEnumOrderState? data){
    _state = data;
  }

  String? _summaryRemark;

  String get summaryRemark{
    return _summaryRemark!;
  }

  String? getSummaryRemark(){
    return _summaryRemark;
  }

  set summaryRemark(String data){
    _summaryRemark = data;
  }

  void setSummaryRemark(String? data){
    _summaryRemark = data;
  }

  TypeEnumOrderType? _type;

  TypeEnumOrderType get type{
    return _type!;
  }

  TypeEnumOrderType? getType(){
    return _type;
  }

  set type(TypeEnumOrderType data){
    _type = data;
  }

  void setType(TypeEnumOrderType? data){
    _type = data;
  }

}

class FTypeOrderAttachmentQuerySumDTO extends IDataField {
  static const count = FTypeOrderAttachmentQuerySumDTO('count');
  const FTypeOrderAttachmentQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQuerySumDTO> _TypeOrderAttachmentQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
};

class TypeOrderAttachmentQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQuerySumDTO({
    int? count
  }):
    _count = count;

  static TypeOrderAttachmentQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

}

class FTypeOrderCustom extends IDataField {
  static const invoice = FTypeOrderCustom('invoice');
  static const invoiceBack = FTypeOrderCustom('invoiceBack');
  static const invoiceBill = FTypeOrderCustom('invoiceBill');
  static const invoiceSubmit = FTypeOrderCustom('invoiceSubmit');
  static const log = FTypeOrderCustom('log');
  const FTypeOrderCustom(super.key);
}

final FieldReflectInfo<TypeOrderCustom> _TypeOrderCustom_fields = {
  "invoice": (
    getter: (data) => data._invoice,
    setter: (data, value) => data._invoice = value as TypeOrderCustomInvoice?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoice.toDynamic;
      return formatter(data._invoice);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoice.fromDynamic;
      data._invoice = parser(value);
    }
  ),
  "invoiceBack": (
    getter: (data) => data._invoiceBack,
    setter: (data, value) => data._invoiceBack = value as TypeOrderCustomInvoiceBack?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceBack.toDynamic;
      return formatter(data._invoiceBack);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceBack.fromDynamic;
      data._invoiceBack = parser(value);
    }
  ),
  "invoiceBill": (
    getter: (data) => data._invoiceBill,
    setter: (data, value) => data._invoiceBill = value as TypeOrderCustomInvoiceBill?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceBill.toDynamic;
      return formatter(data._invoiceBill);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceBill.fromDynamic;
      data._invoiceBill = parser(value);
    }
  ),
  "invoiceSubmit": (
    getter: (data) => data._invoiceSubmit,
    setter: (data, value) => data._invoiceSubmit = value as TypeOrderCustomInvoiceSubmit?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceSubmit.toDynamic;
      return formatter(data._invoiceSubmit);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceSubmit.fromDynamic;
      data._invoiceSubmit = parser(value);
    }
  ),
  "log": (
    getter: (data) => data._log,
    setter: (data, value) => data._log = value as TypeOrderCustomLog?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomLog.toDynamic;
      return formatter(data._log);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomLog.fromDynamic;
      data._log = parser(value);
    }
  ),
};

class TypeOrderCustom extends IDataBasic implements IDataDynamic {
  TypeOrderCustom({
    TypeOrderCustomInvoice? invoice,
    TypeOrderCustomInvoiceBack? invoiceBack,
    TypeOrderCustomInvoiceBill? invoiceBill,
    TypeOrderCustomInvoiceSubmit? invoiceSubmit,
    TypeOrderCustomLog? log
  }):
    _invoice = invoice,
    _invoiceBack = invoiceBack,
    _invoiceBill = invoiceBill,
    _invoiceSubmit = invoiceSubmit,
    _log = log;

  static TypeOrderCustom? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustom();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustom_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustom: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustom? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustom_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustom_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustom_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeOrderCustomInvoice? _invoice;

  TypeOrderCustomInvoice get invoice{
    return _invoice!;
  }

  TypeOrderCustomInvoice? getInvoice(){
    return _invoice;
  }

  set invoice(TypeOrderCustomInvoice data){
    _invoice = data;
  }

  void setInvoice(TypeOrderCustomInvoice? data){
    _invoice = data;
  }

  TypeOrderCustomInvoiceBack? _invoiceBack;

  TypeOrderCustomInvoiceBack get invoiceBack{
    return _invoiceBack!;
  }

  TypeOrderCustomInvoiceBack? getInvoiceBack(){
    return _invoiceBack;
  }

  set invoiceBack(TypeOrderCustomInvoiceBack data){
    _invoiceBack = data;
  }

  void setInvoiceBack(TypeOrderCustomInvoiceBack? data){
    _invoiceBack = data;
  }

  TypeOrderCustomInvoiceBill? _invoiceBill;

  TypeOrderCustomInvoiceBill get invoiceBill{
    return _invoiceBill!;
  }

  TypeOrderCustomInvoiceBill? getInvoiceBill(){
    return _invoiceBill;
  }

  set invoiceBill(TypeOrderCustomInvoiceBill data){
    _invoiceBill = data;
  }

  void setInvoiceBill(TypeOrderCustomInvoiceBill? data){
    _invoiceBill = data;
  }

  TypeOrderCustomInvoiceSubmit? _invoiceSubmit;

  TypeOrderCustomInvoiceSubmit get invoiceSubmit{
    return _invoiceSubmit!;
  }

  TypeOrderCustomInvoiceSubmit? getInvoiceSubmit(){
    return _invoiceSubmit;
  }

  set invoiceSubmit(TypeOrderCustomInvoiceSubmit data){
    _invoiceSubmit = data;
  }

  void setInvoiceSubmit(TypeOrderCustomInvoiceSubmit? data){
    _invoiceSubmit = data;
  }

  TypeOrderCustomLog? _log;

  TypeOrderCustomLog get log{
    return _log!;
  }

  TypeOrderCustomLog? getLog(){
    return _log;
  }

  set log(TypeOrderCustomLog data){
    _log = data;
  }

  void setLog(TypeOrderCustomLog? data){
    _log = data;
  }

}

class FTypeOrderCustomInvoice extends IDataField {
  static const goodsRemark = FTypeOrderCustomInvoice('goodsRemark');
  static const taxNumber = FTypeOrderCustomInvoice('taxNumber');
  const FTypeOrderCustomInvoice(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoice> _TypeOrderCustomInvoice_fields = {
  "goodsRemark": (
    getter: (data) => data._goodsRemark,
    setter: (data, value) => data._goodsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._goodsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._goodsRemark = parser(value);
    }
  ),
  "taxNumber": (
    getter: (data) => data._taxNumber,
    setter: (data, value) => data._taxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxNumber = parser(value);
    }
  ),
};

class TypeOrderCustomInvoice extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoice({
    String? goodsRemark,
    String? taxNumber
  }):
    _goodsRemark = goodsRemark,
    _taxNumber = taxNumber;

  static TypeOrderCustomInvoice? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoice();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoice_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoice: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoice? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoice_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoice_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoice_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _goodsRemark;

  String get goodsRemark{
    return _goodsRemark!;
  }

  String? getGoodsRemark(){
    return _goodsRemark;
  }

  set goodsRemark(String data){
    _goodsRemark = data;
  }

  void setGoodsRemark(String? data){
    _goodsRemark = data;
  }

  String? _taxNumber;

  String get taxNumber{
    return _taxNumber!;
  }

  String? getTaxNumber(){
    return _taxNumber;
  }

  set taxNumber(String data){
    _taxNumber = data;
  }

  void setTaxNumber(String? data){
    _taxNumber = data;
  }

}

class FTypeOrderCustomInvoiceBack extends IDataField {
  static const backDate = FTypeOrderCustomInvoiceBack('backDate');
  static const state = FTypeOrderCustomInvoiceBack('state');
  const FTypeOrderCustomInvoiceBack(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBack> _TypeOrderCustomInvoiceBack_fields = {
  "backDate": (
    getter: (data) => data._backDate,
    setter: (data, value) => data._backDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._backDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._backDate = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderCustomInvoiceBackState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBackState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBackState.fromDynamic;
      data._state = parser(value);
    }
  ),
};

class TypeOrderCustomInvoiceBack extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBack({
    String? backDate,
    TypeEnumOrderCustomInvoiceBackState? state
  }):
    _backDate = backDate,
    _state = state;

  static TypeOrderCustomInvoiceBack? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBack();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBack_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBack: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBack? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBack_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBack_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBack_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _backDate;

  String get backDate{
    return _backDate!;
  }

  String? getBackDate(){
    return _backDate;
  }

  set backDate(String data){
    _backDate = data;
  }

  void setBackDate(String? data){
    _backDate = data;
  }

  TypeEnumOrderCustomInvoiceBackState? _state;

  TypeEnumOrderCustomInvoiceBackState get state{
    return _state!;
  }

  TypeEnumOrderCustomInvoiceBackState? getState(){
    return _state;
  }

  set state(TypeEnumOrderCustomInvoiceBackState data){
    _state = data;
  }

  void setState(TypeEnumOrderCustomInvoiceBackState? data){
    _state = data;
  }

}

class FTypeOrderCustomInvoiceBill extends IDataField {
  static const adjustedTotal = FTypeOrderCustomInvoiceBill('adjustedTotal');
  static const allTotal = FTypeOrderCustomInvoiceBill('allTotal');
  static const bills = FTypeOrderCustomInvoiceBill('bills');
  static const deferTotal = FTypeOrderCustomInvoiceBill('deferTotal');
  static const doneBillTotal = FTypeOrderCustomInvoiceBill('doneBillTotal');
  static const extraTotal = FTypeOrderCustomInvoiceBill('extraTotal');
  static const goodsTotal = FTypeOrderCustomInvoiceBill('goodsTotal');
  static const state = FTypeOrderCustomInvoiceBill('state');
  static const undoneBillTotal = FTypeOrderCustomInvoiceBill('undoneBillTotal');
  const FTypeOrderCustomInvoiceBill(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBill> _TypeOrderCustomInvoiceBill_fields = {
  "adjustedTotal": (
    getter: (data) => data._adjustedTotal,
    setter: (data, value) => data._adjustedTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adjustedTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adjustedTotal = parser(value);
    }
  ),
  "allTotal": (
    getter: (data) => data._allTotal,
    setter: (data, value) => data._allTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._allTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._allTotal = parser(value);
    }
  ),
  "bills": (
    getter: (data) => data._bills,
    setter: (data, value) => data._bills = value as List<TypeOrderCustomInvoiceBillHistory>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderCustomInvoiceBillHistory>((single){
        final handler = TypeOrderCustomInvoiceBillHistory.toDynamic;
        return handler(single)!;
      });
      return formatter(data._bills);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderCustomInvoiceBillHistory>((single){
        final handler = TypeOrderCustomInvoiceBillHistory.fromDynamic;
        return handler(single)!;
      });
      data._bills = parser(value);
    }
  ),
  "deferTotal": (
    getter: (data) => data._deferTotal,
    setter: (data, value) => data._deferTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._deferTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._deferTotal = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "extraTotal": (
    getter: (data) => data._extraTotal,
    setter: (data, value) => data._extraTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._extraTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._extraTotal = parser(value);
    }
  ),
  "goodsTotal": (
    getter: (data) => data._goodsTotal,
    setter: (data, value) => data._goodsTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._goodsTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._goodsTotal = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderCustomInvoiceBillState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBillState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBillState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
};

class TypeOrderCustomInvoiceBill extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBill({
    String? adjustedTotal,
    String? allTotal,
    List<TypeOrderCustomInvoiceBillHistory>? bills,
    String? deferTotal,
    String? doneBillTotal,
    String? extraTotal,
    String? goodsTotal,
    TypeEnumOrderCustomInvoiceBillState? state,
    String? undoneBillTotal
  }):
    _adjustedTotal = adjustedTotal,
    _allTotal = allTotal,
    _bills = bills,
    _deferTotal = deferTotal,
    _doneBillTotal = doneBillTotal,
    _extraTotal = extraTotal,
    _goodsTotal = goodsTotal,
    _state = state,
    _undoneBillTotal = undoneBillTotal;

  static TypeOrderCustomInvoiceBill? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBill();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBill_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBill: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBill? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBill_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBill_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBill_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _adjustedTotal;

  String get adjustedTotal{
    return _adjustedTotal!;
  }

  String? getAdjustedTotal(){
    return _adjustedTotal;
  }

  set adjustedTotal(String data){
    _adjustedTotal = data;
  }

  void setAdjustedTotal(String? data){
    _adjustedTotal = data;
  }

  String? _allTotal;

  String get allTotal{
    return _allTotal!;
  }

  String? getAllTotal(){
    return _allTotal;
  }

  set allTotal(String data){
    _allTotal = data;
  }

  void setAllTotal(String? data){
    _allTotal = data;
  }

  List<TypeOrderCustomInvoiceBillHistory>? _bills;

  List<TypeOrderCustomInvoiceBillHistory> get bills{
    return _bills!;
  }

  List<TypeOrderCustomInvoiceBillHistory>? getBills(){
    return _bills;
  }

  set bills(List<TypeOrderCustomInvoiceBillHistory> data){
    _bills = data;
  }

  void setBills(List<TypeOrderCustomInvoiceBillHistory>? data){
    _bills = data;
  }

  String? _deferTotal;

  String get deferTotal{
    return _deferTotal!;
  }

  String? getDeferTotal(){
    return _deferTotal;
  }

  set deferTotal(String data){
    _deferTotal = data;
  }

  void setDeferTotal(String? data){
    _deferTotal = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _extraTotal;

  String get extraTotal{
    return _extraTotal!;
  }

  String? getExtraTotal(){
    return _extraTotal;
  }

  set extraTotal(String data){
    _extraTotal = data;
  }

  void setExtraTotal(String? data){
    _extraTotal = data;
  }

  String? _goodsTotal;

  String get goodsTotal{
    return _goodsTotal!;
  }

  String? getGoodsTotal(){
    return _goodsTotal;
  }

  set goodsTotal(String data){
    _goodsTotal = data;
  }

  void setGoodsTotal(String? data){
    _goodsTotal = data;
  }

  TypeEnumOrderCustomInvoiceBillState? _state;

  TypeEnumOrderCustomInvoiceBillState get state{
    return _state!;
  }

  TypeEnumOrderCustomInvoiceBillState? getState(){
    return _state;
  }

  set state(TypeEnumOrderCustomInvoiceBillState data){
    _state = data;
  }

  void setState(TypeEnumOrderCustomInvoiceBillState? data){
    _state = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

}

class FTypeOrderCustomInvoiceBillHistory extends IDataField {
  static const billDate = FTypeOrderCustomInvoiceBillHistory('billDate');
  static const billOrderId = FTypeOrderCustomInvoiceBillHistory('billOrderId');
  static const billOrderNumber = FTypeOrderCustomInvoiceBillHistory('billOrderNumber');
  static const billOrderType = FTypeOrderCustomInvoiceBillHistory('billOrderType');
  static const billTotal = FTypeOrderCustomInvoiceBillHistory('billTotal');
  static const cashAccountId = FTypeOrderCustomInvoiceBillHistory('cashAccountId');
  static const cashAccountName = FTypeOrderCustomInvoiceBillHistory('cashAccountName');
  const FTypeOrderCustomInvoiceBillHistory(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBillHistory> _TypeOrderCustomInvoiceBillHistory_fields = {
  "billDate": (
    getter: (data) => data._billDate,
    setter: (data, value) => data._billDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billDate = parser(value);
    }
  ),
  "billOrderId": (
    getter: (data) => data._billOrderId,
    setter: (data, value) => data._billOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._billOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._billOrderId = parser(value);
    }
  ),
  "billOrderNumber": (
    getter: (data) => data._billOrderNumber,
    setter: (data, value) => data._billOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billOrderNumber = parser(value);
    }
  ),
  "billOrderType": (
    getter: (data) => data._billOrderType,
    setter: (data, value) => data._billOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._billOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._billOrderType = parser(value);
    }
  ),
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "cashAccountId": (
    getter: (data) => data._cashAccountId,
    setter: (data, value) => data._cashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._cashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._cashAccountId = parser(value);
    }
  ),
  "cashAccountName": (
    getter: (data) => data._cashAccountName,
    setter: (data, value) => data._cashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashAccountName = parser(value);
    }
  ),
};

class TypeOrderCustomInvoiceBillHistory extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBillHistory({
    String? billDate,
    int? billOrderId,
    String? billOrderNumber,
    TypeEnumOrderType? billOrderType,
    String? billTotal,
    int? cashAccountId,
    String? cashAccountName
  }):
    _billDate = billDate,
    _billOrderId = billOrderId,
    _billOrderNumber = billOrderNumber,
    _billOrderType = billOrderType,
    _billTotal = billTotal,
    _cashAccountId = cashAccountId,
    _cashAccountName = cashAccountName;

  static TypeOrderCustomInvoiceBillHistory? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBillHistory();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBillHistory: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBillHistory? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBillHistory_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billDate;

  String get billDate{
    return _billDate!;
  }

  String? getBillDate(){
    return _billDate;
  }

  set billDate(String data){
    _billDate = data;
  }

  void setBillDate(String? data){
    _billDate = data;
  }

  int? _billOrderId;

  int get billOrderId{
    return _billOrderId!;
  }

  int? getBillOrderId(){
    return _billOrderId;
  }

  set billOrderId(int data){
    _billOrderId = data;
  }

  void setBillOrderId(int? data){
    _billOrderId = data;
  }

  String? _billOrderNumber;

  String get billOrderNumber{
    return _billOrderNumber!;
  }

  String? getBillOrderNumber(){
    return _billOrderNumber;
  }

  set billOrderNumber(String data){
    _billOrderNumber = data;
  }

  void setBillOrderNumber(String? data){
    _billOrderNumber = data;
  }

  TypeEnumOrderType? _billOrderType;

  TypeEnumOrderType get billOrderType{
    return _billOrderType!;
  }

  TypeEnumOrderType? getBillOrderType(){
    return _billOrderType;
  }

  set billOrderType(TypeEnumOrderType data){
    _billOrderType = data;
  }

  void setBillOrderType(TypeEnumOrderType? data){
    _billOrderType = data;
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  int? _cashAccountId;

  int get cashAccountId{
    return _cashAccountId!;
  }

  int? getCashAccountId(){
    return _cashAccountId;
  }

  set cashAccountId(int data){
    _cashAccountId = data;
  }

  void setCashAccountId(int? data){
    _cashAccountId = data;
  }

  String? _cashAccountName;

  String get cashAccountName{
    return _cashAccountName!;
  }

  String? getCashAccountName(){
    return _cashAccountName;
  }

  set cashAccountName(String data){
    _cashAccountName = data;
  }

  void setCashAccountName(String? data){
    _cashAccountName = data;
  }

}

class FTypeOrderCustomInvoiceSubmit extends IDataField {
  static const contactId = FTypeOrderCustomInvoiceSubmit('contactId');
  static const contactInfo = FTypeOrderCustomInvoiceSubmit('contactInfo');
  static const contractNumber = FTypeOrderCustomInvoiceSubmit('contractNumber');
  static const invoiceDate = FTypeOrderCustomInvoiceSubmit('invoiceDate');
  static const invoiceNumber = FTypeOrderCustomInvoiceSubmit('invoiceNumber');
  static const invoiceReceiveDate = FTypeOrderCustomInvoiceSubmit('invoiceReceiveDate');
  static const invoiceTotal = FTypeOrderCustomInvoiceSubmit('invoiceTotal');
  static const state = FTypeOrderCustomInvoiceSubmit('state');
  const FTypeOrderCustomInvoiceSubmit(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceSubmit> _TypeOrderCustomInvoiceSubmit_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactInfo": (
    getter: (data) => data._contactInfo,
    setter: (data, value) => data._contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._contactInfo = parser(value);
    }
  ),
  "contractNumber": (
    getter: (data) => data._contractNumber,
    setter: (data, value) => data._contractNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contractNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contractNumber = parser(value);
    }
  ),
  "invoiceDate": (
    getter: (data) => data._invoiceDate,
    setter: (data, value) => data._invoiceDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceDate = parser(value);
    }
  ),
  "invoiceNumber": (
    getter: (data) => data._invoiceNumber,
    setter: (data, value) => data._invoiceNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceNumber = parser(value);
    }
  ),
  "invoiceReceiveDate": (
    getter: (data) => data._invoiceReceiveDate,
    setter: (data, value) => data._invoiceReceiveDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceReceiveDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceReceiveDate = parser(value);
    }
  ),
  "invoiceTotal": (
    getter: (data) => data._invoiceTotal,
    setter: (data, value) => data._invoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceTotal = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderCustomInvoiceSubmitState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceSubmitState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceSubmitState.fromDynamic;
      data._state = parser(value);
    }
  ),
};

class TypeOrderCustomInvoiceSubmit extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceSubmit({
    int? contactId,
    TypeContact? contactInfo,
    String? contractNumber,
    String? invoiceDate,
    String? invoiceNumber,
    String? invoiceReceiveDate,
    String? invoiceTotal,
    TypeEnumOrderCustomInvoiceSubmitState? state
  }):
    _contactId = contactId,
    _contactInfo = contactInfo,
    _contractNumber = contractNumber,
    _invoiceDate = invoiceDate,
    _invoiceNumber = invoiceNumber,
    _invoiceReceiveDate = invoiceReceiveDate,
    _invoiceTotal = invoiceTotal,
    _state = state;

  static TypeOrderCustomInvoiceSubmit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceSubmit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceSubmit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceSubmit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceSubmit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  TypeContact? _contactInfo;

  TypeContact get contactInfo{
    return _contactInfo!;
  }

  TypeContact? getContactInfo(){
    return _contactInfo;
  }

  set contactInfo(TypeContact data){
    _contactInfo = data;
  }

  void setContactInfo(TypeContact? data){
    _contactInfo = data;
  }

  String? _contractNumber;

  String get contractNumber{
    return _contractNumber!;
  }

  String? getContractNumber(){
    return _contractNumber;
  }

  set contractNumber(String data){
    _contractNumber = data;
  }

  void setContractNumber(String? data){
    _contractNumber = data;
  }

  String? _invoiceDate;

  String get invoiceDate{
    return _invoiceDate!;
  }

  String? getInvoiceDate(){
    return _invoiceDate;
  }

  set invoiceDate(String data){
    _invoiceDate = data;
  }

  void setInvoiceDate(String? data){
    _invoiceDate = data;
  }

  String? _invoiceNumber;

  String get invoiceNumber{
    return _invoiceNumber!;
  }

  String? getInvoiceNumber(){
    return _invoiceNumber;
  }

  set invoiceNumber(String data){
    _invoiceNumber = data;
  }

  void setInvoiceNumber(String? data){
    _invoiceNumber = data;
  }

  String? _invoiceReceiveDate;

  String get invoiceReceiveDate{
    return _invoiceReceiveDate!;
  }

  String? getInvoiceReceiveDate(){
    return _invoiceReceiveDate;
  }

  set invoiceReceiveDate(String data){
    _invoiceReceiveDate = data;
  }

  void setInvoiceReceiveDate(String? data){
    _invoiceReceiveDate = data;
  }

  String? _invoiceTotal;

  String get invoiceTotal{
    return _invoiceTotal!;
  }

  String? getInvoiceTotal(){
    return _invoiceTotal;
  }

  set invoiceTotal(String data){
    _invoiceTotal = data;
  }

  void setInvoiceTotal(String? data){
    _invoiceTotal = data;
  }

  TypeEnumOrderCustomInvoiceSubmitState? _state;

  TypeEnumOrderCustomInvoiceSubmitState get state{
    return _state!;
  }

  TypeEnumOrderCustomInvoiceSubmitState? getState(){
    return _state;
  }

  set state(TypeEnumOrderCustomInvoiceSubmitState data){
    _state = data;
  }

  void setState(TypeEnumOrderCustomInvoiceSubmitState? data){
    _state = data;
  }

}

class FTypeOrderCustomLog extends IDataField {
  static const logs = FTypeOrderCustomLog('logs');
  const FTypeOrderCustomLog(super.key);
}

final FieldReflectInfo<TypeOrderCustomLog> _TypeOrderCustomLog_fields = {
  "logs": (
    getter: (data) => data._logs,
    setter: (data, value) => data._logs = value as List<TypeOrderCustomLogSingle>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderCustomLogSingle>((single){
        final handler = TypeOrderCustomLogSingle.toDynamic;
        return handler(single)!;
      });
      return formatter(data._logs);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderCustomLogSingle>((single){
        final handler = TypeOrderCustomLogSingle.fromDynamic;
        return handler(single)!;
      });
      data._logs = parser(value);
    }
  ),
};

class TypeOrderCustomLog extends IDataBasic implements IDataDynamic {
  TypeOrderCustomLog({
    List<TypeOrderCustomLogSingle>? logs
  }):
    _logs = logs;

  static TypeOrderCustomLog? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomLog();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomLog_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomLog: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomLog? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomLog_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomLog_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomLog_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderCustomLogSingle>? _logs;

  List<TypeOrderCustomLogSingle> get logs{
    return _logs!;
  }

  List<TypeOrderCustomLogSingle>? getLogs(){
    return _logs;
  }

  set logs(List<TypeOrderCustomLogSingle> data){
    _logs = data;
  }

  void setLogs(List<TypeOrderCustomLogSingle>? data){
    _logs = data;
  }

}

class FTypeOrderCustomLogSingle extends IDataField {
  static const date = FTypeOrderCustomLogSingle('date');
  static const employeeId = FTypeOrderCustomLogSingle('employeeId');
  static const employeeName = FTypeOrderCustomLogSingle('employeeName');
  static const msg = FTypeOrderCustomLogSingle('msg');
  const FTypeOrderCustomLogSingle(super.key);
}

final FieldReflectInfo<TypeOrderCustomLogSingle> _TypeOrderCustomLogSingle_fields = {
  "date": (
    getter: (data) => data._date,
    setter: (data, value) => data._date = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._date);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._date = parser(value);
    }
  ),
  "employeeId": (
    getter: (data) => data._employeeId,
    setter: (data, value) => data._employeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._employeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._employeeId = parser(value);
    }
  ),
  "employeeName": (
    getter: (data) => data._employeeName,
    setter: (data, value) => data._employeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._employeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._employeeName = parser(value);
    }
  ),
  "msg": (
    getter: (data) => data._msg,
    setter: (data, value) => data._msg = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._msg);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._msg = parser(value);
    }
  ),
};

class TypeOrderCustomLogSingle extends IDataBasic implements IDataDynamic {
  TypeOrderCustomLogSingle({
    String? date,
    int? employeeId,
    String? employeeName,
    String? msg
  }):
    _date = date,
    _employeeId = employeeId,
    _employeeName = employeeName,
    _msg = msg;

  static TypeOrderCustomLogSingle? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomLogSingle();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomLogSingle_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomLogSingle: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomLogSingle? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomLogSingle_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomLogSingle_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomLogSingle_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _date;

  String get date{
    return _date!;
  }

  String? getDate(){
    return _date;
  }

  set date(String data){
    _date = data;
  }

  void setDate(String? data){
    _date = data;
  }

  int? _employeeId;

  int get employeeId{
    return _employeeId!;
  }

  int? getEmployeeId(){
    return _employeeId;
  }

  set employeeId(int data){
    _employeeId = data;
  }

  void setEmployeeId(int? data){
    _employeeId = data;
  }

  String? _employeeName;

  String get employeeName{
    return _employeeName!;
  }

  String? getEmployeeName(){
    return _employeeName;
  }

  set employeeName(String data){
    _employeeName = data;
  }

  void setEmployeeName(String? data){
    _employeeName = data;
  }

  String? _msg;

  String get msg{
    return _msg!;
  }

  String? getMsg(){
    return _msg;
  }

  set msg(String data){
    _msg = data;
  }

  void setMsg(String? data){
    _msg = data;
  }

}

class FTypeOrderGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeOrderGroupQueryDTO('beginOrderDate');
  static const data = FTypeOrderGroupQueryDTO('data');
  static const endOrderDate = FTypeOrderGroupQueryDTO('endOrderDate');
  static const pageIndex = FTypeOrderGroupQueryDTO('pageIndex');
  static const pageSize = FTypeOrderGroupQueryDTO('pageSize');
  static const sum = FTypeOrderGroupQueryDTO('sum');
  const FTypeOrderGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderGroupQueryDTO> _TypeOrderGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data._beginOrderDate,
    setter: (data, value) => data._beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginOrderDate = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderGroupQueryDataDTO>((single){
        final handler = TypeOrderGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderGroupQueryDataDTO>((single){
        final handler = TypeOrderGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "endOrderDate": (
    getter: (data) => data._endOrderDate,
    setter: (data, value) => data._endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endOrderDate = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderGroupQueryDataDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderGroupQueryDataDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderGroupQueryDTO({
    String? beginOrderDate,
    List<TypeOrderGroupQueryDataDTO>? data,
    String? endOrderDate,
    int? pageIndex,
    int? pageSize,
    TypeOrderGroupQueryDataDTO? sum
  }):
    _beginOrderDate = beginOrderDate,
    _data = data,
    _endOrderDate = endOrderDate,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginOrderDate;

  String get beginOrderDate{
    return _beginOrderDate!;
  }

  String? getBeginOrderDate(){
    return _beginOrderDate;
  }

  set beginOrderDate(String data){
    _beginOrderDate = data;
  }

  void setBeginOrderDate(String? data){
    _beginOrderDate = data;
  }

  List<TypeOrderGroupQueryDataDTO>? _data;

  List<TypeOrderGroupQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderGroupQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderGroupQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderGroupQueryDataDTO>? data){
    _data = data;
  }

  String? _endOrderDate;

  String get endOrderDate{
    return _endOrderDate!;
  }

  String? getEndOrderDate(){
    return _endOrderDate;
  }

  set endOrderDate(String data){
    _endOrderDate = data;
  }

  void setEndOrderDate(String? data){
    _endOrderDate = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderGroupQueryDataDTO? _sum;

  TypeOrderGroupQueryDataDTO get sum{
    return _sum!;
  }

  TypeOrderGroupQueryDataDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderGroupQueryDataDTO data){
    _sum = data;
  }

  void setSum(TypeOrderGroupQueryDataDTO? data){
    _sum = data;
  }

}

class FTypeOrderGroupQueryDataDTO extends IDataField {
  static const beginOrderDate = FTypeOrderGroupQueryDataDTO('beginOrderDate');
  static const billCount = FTypeOrderGroupQueryDataDTO('billCount');
  static const billTotal = FTypeOrderGroupQueryDataDTO('billTotal');
  static const contactId = FTypeOrderGroupQueryDataDTO('contactId');
  static const count = FTypeOrderGroupQueryDataDTO('count');
  static const discountTotal = FTypeOrderGroupQueryDataDTO('discountTotal');
  static const doneBillTotal = FTypeOrderGroupQueryDataDTO('doneBillTotal');
  static const endOrderDate = FTypeOrderGroupQueryDataDTO('endOrderDate');
  static const hasFinishBillCount = FTypeOrderGroupQueryDataDTO('hasFinishBillCount');
  static const hasNotFinishBillCount = FTypeOrderGroupQueryDataDTO('hasNotFinishBillCount');
  static const id = FTypeOrderGroupQueryDataDTO('id');
  static const manageEmployeeId = FTypeOrderGroupQueryDataDTO('manageEmployeeId');
  static const name = FTypeOrderGroupQueryDataDTO('name');
  static const preTaxTotal = FTypeOrderGroupQueryDataDTO('preTaxTotal');
  static const total = FTypeOrderGroupQueryDataDTO('total');
  static const undoneBillTotal = FTypeOrderGroupQueryDataDTO('undoneBillTotal');
  const FTypeOrderGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderGroupQueryDataDTO> _TypeOrderGroupQueryDataDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data._beginOrderDate,
    setter: (data, value) => data._beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginOrderDate = parser(value);
    }
  ),
  "billCount": (
    getter: (data) => data._billCount,
    setter: (data, value) => data._billCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._billCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._billCount = parser(value);
    }
  ),
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "endOrderDate": (
    getter: (data) => data._endOrderDate,
    setter: (data, value) => data._endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endOrderDate = parser(value);
    }
  ),
  "hasFinishBillCount": (
    getter: (data) => data._hasFinishBillCount,
    setter: (data, value) => data._hasFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasFinishBillCount = parser(value);
    }
  ),
  "hasNotFinishBillCount": (
    getter: (data) => data._hasNotFinishBillCount,
    setter: (data, value) => data._hasNotFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasNotFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasNotFinishBillCount = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
};

class TypeOrderGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderGroupQueryDataDTO({
    String? beginOrderDate,
    int? billCount,
    String? billTotal,
    int? contactId,
    int? count,
    String? discountTotal,
    String? doneBillTotal,
    String? endOrderDate,
    int? hasFinishBillCount,
    int? hasNotFinishBillCount,
    String? id,
    int? manageEmployeeId,
    String? name,
    String? preTaxTotal,
    String? total,
    String? undoneBillTotal
  }):
    _beginOrderDate = beginOrderDate,
    _billCount = billCount,
    _billTotal = billTotal,
    _contactId = contactId,
    _count = count,
    _discountTotal = discountTotal,
    _doneBillTotal = doneBillTotal,
    _endOrderDate = endOrderDate,
    _hasFinishBillCount = hasFinishBillCount,
    _hasNotFinishBillCount = hasNotFinishBillCount,
    _id = id,
    _manageEmployeeId = manageEmployeeId,
    _name = name,
    _preTaxTotal = preTaxTotal,
    _total = total,
    _undoneBillTotal = undoneBillTotal;

  static TypeOrderGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginOrderDate;

  String get beginOrderDate{
    return _beginOrderDate!;
  }

  String? getBeginOrderDate(){
    return _beginOrderDate;
  }

  set beginOrderDate(String data){
    _beginOrderDate = data;
  }

  void setBeginOrderDate(String? data){
    _beginOrderDate = data;
  }

  int? _billCount;

  int get billCount{
    return _billCount!;
  }

  int? getBillCount(){
    return _billCount;
  }

  set billCount(int data){
    _billCount = data;
  }

  void setBillCount(int? data){
    _billCount = data;
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _endOrderDate;

  String get endOrderDate{
    return _endOrderDate!;
  }

  String? getEndOrderDate(){
    return _endOrderDate;
  }

  set endOrderDate(String data){
    _endOrderDate = data;
  }

  void setEndOrderDate(String? data){
    _endOrderDate = data;
  }

  int? _hasFinishBillCount;

  int get hasFinishBillCount{
    return _hasFinishBillCount!;
  }

  int? getHasFinishBillCount(){
    return _hasFinishBillCount;
  }

  set hasFinishBillCount(int data){
    _hasFinishBillCount = data;
  }

  void setHasFinishBillCount(int? data){
    _hasFinishBillCount = data;
  }

  int? _hasNotFinishBillCount;

  int get hasNotFinishBillCount{
    return _hasNotFinishBillCount!;
  }

  int? getHasNotFinishBillCount(){
    return _hasNotFinishBillCount;
  }

  set hasNotFinishBillCount(int data){
    _hasNotFinishBillCount = data;
  }

  void setHasNotFinishBillCount(int? data){
    _hasNotFinishBillCount = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

}

class FTypeOrderInvoiceQueryDTO extends IDataField {
  static const data = FTypeOrderInvoiceQueryDTO('data');
  static const pageIndex = FTypeOrderInvoiceQueryDTO('pageIndex');
  static const pageSize = FTypeOrderInvoiceQueryDTO('pageSize');
  static const sum = FTypeOrderInvoiceQueryDTO('sum');
  const FTypeOrderInvoiceQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQueryDTO> _TypeOrderInvoiceQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderInvoiceQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderInvoiceQueryDataDTO>((single){
        final handler = TypeOrderInvoiceQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderInvoiceQueryDataDTO>((single){
        final handler = TypeOrderInvoiceQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderInvoiceQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderInvoiceQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderInvoiceQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderInvoiceQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQueryDTO({
    List<TypeOrderInvoiceQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeOrderInvoiceQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderInvoiceQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderInvoiceQueryDataDTO>? _data;

  List<TypeOrderInvoiceQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderInvoiceQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderInvoiceQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderInvoiceQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderInvoiceQuerySumDTO? _sum;

  TypeOrderInvoiceQuerySumDTO get sum{
    return _sum!;
  }

  TypeOrderInvoiceQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderInvoiceQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeOrderInvoiceQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeOrderInvoiceQueryDataDTO extends IDataField {
  static const contactId = FTypeOrderInvoiceQueryDataDTO('contactId');
  static const contactName = FTypeOrderInvoiceQueryDataDTO('contactName');
  static const drawEmployeeId = FTypeOrderInvoiceQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderInvoiceQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderInvoiceQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderInvoiceQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderInvoiceQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderInvoiceQueryDataDTO('entryAccountTime');
  static const id = FTypeOrderInvoiceQueryDataDTO('id');
  static const invoiceBackDate = FTypeOrderInvoiceQueryDataDTO('invoiceBackDate');
  static const invoiceBackState = FTypeOrderInvoiceQueryDataDTO('invoiceBackState');
  static const invoiceBillAdjustedTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillAdjustedTotal');
  static const invoiceBillAllTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillAllTotal');
  static const invoiceBillDeferTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillDeferTotal');
  static const invoiceBillDoneBillTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillDoneBillTotal');
  static const invoiceBillExtraTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillExtraTotal');
  static const invoiceBillGoodsTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillGoodsTotal');
  static const invoiceBillState = FTypeOrderInvoiceQueryDataDTO('invoiceBillState');
  static const invoiceBillUndoneBillTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillUndoneBillTotal');
  static const invoiceGoodsRemark = FTypeOrderInvoiceQueryDataDTO('invoiceGoodsRemark');
  static const invoiceSubmitContactId = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContactId');
  static const invoiceSubmitContactName = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContactName');
  static const invoiceSubmitContractNumber = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContractNumber');
  static const invoiceSubmitInvoiceDate = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceDate');
  static const invoiceSubmitInvoiceNumber = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceNumber');
  static const invoiceSubmitInvoiceReceiveDate = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceReceiveDate');
  static const invoiceSubmitInvoiceTotal = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceTotal');
  static const invoiceSubmitState = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitState');
  static const invoiceTaxNumber = FTypeOrderInvoiceQueryDataDTO('invoiceTaxNumber');
  static const manageEmployeeId = FTypeOrderInvoiceQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderInvoiceQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderInvoiceQueryDataDTO('number');
  static const orderDate = FTypeOrderInvoiceQueryDataDTO('orderDate');
  static const printTimes = FTypeOrderInvoiceQueryDataDTO('printTimes');
  static const remark = FTypeOrderInvoiceQueryDataDTO('remark');
  static const state = FTypeOrderInvoiceQueryDataDTO('state');
  static const summaryRemark = FTypeOrderInvoiceQueryDataDTO('summaryRemark');
  static const type = FTypeOrderInvoiceQueryDataDTO('type');
  const FTypeOrderInvoiceQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQueryDataDTO> _TypeOrderInvoiceQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "drawEmployeeName": (
    getter: (data) => data._drawEmployeeName,
    setter: (data, value) => data._drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawEmployeeName = parser(value);
    }
  ),
  "drawTime": (
    getter: (data) => data._drawTime,
    setter: (data, value) => data._drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawTime = parser(value);
    }
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data._entryAccountEmployeeId,
    setter: (data, value) => data._entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._entryAccountEmployeeId = parser(value);
    }
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data._entryAccountEmployeeName,
    setter: (data, value) => data._entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountEmployeeName = parser(value);
    }
  ),
  "entryAccountTime": (
    getter: (data) => data._entryAccountTime,
    setter: (data, value) => data._entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "invoiceBackDate": (
    getter: (data) => data._invoiceBackDate,
    setter: (data, value) => data._invoiceBackDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBackDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBackDate = parser(value);
    }
  ),
  "invoiceBackState": (
    getter: (data) => data._invoiceBackState,
    setter: (data, value) => data._invoiceBackState = value as TypeEnumOrderCustomInvoiceBackState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBackState.toDynamic;
      return formatter(data._invoiceBackState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBackState.fromDynamic;
      data._invoiceBackState = parser(value);
    }
  ),
  "invoiceBillAdjustedTotal": (
    getter: (data) => data._invoiceBillAdjustedTotal,
    setter: (data, value) => data._invoiceBillAdjustedTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillAdjustedTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillAdjustedTotal = parser(value);
    }
  ),
  "invoiceBillAllTotal": (
    getter: (data) => data._invoiceBillAllTotal,
    setter: (data, value) => data._invoiceBillAllTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillAllTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillAllTotal = parser(value);
    }
  ),
  "invoiceBillDeferTotal": (
    getter: (data) => data._invoiceBillDeferTotal,
    setter: (data, value) => data._invoiceBillDeferTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillDeferTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillDeferTotal = parser(value);
    }
  ),
  "invoiceBillDoneBillTotal": (
    getter: (data) => data._invoiceBillDoneBillTotal,
    setter: (data, value) => data._invoiceBillDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillDoneBillTotal = parser(value);
    }
  ),
  "invoiceBillExtraTotal": (
    getter: (data) => data._invoiceBillExtraTotal,
    setter: (data, value) => data._invoiceBillExtraTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillExtraTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillExtraTotal = parser(value);
    }
  ),
  "invoiceBillGoodsTotal": (
    getter: (data) => data._invoiceBillGoodsTotal,
    setter: (data, value) => data._invoiceBillGoodsTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillGoodsTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillGoodsTotal = parser(value);
    }
  ),
  "invoiceBillState": (
    getter: (data) => data._invoiceBillState,
    setter: (data, value) => data._invoiceBillState = value as TypeEnumOrderCustomInvoiceBillState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBillState.toDynamic;
      return formatter(data._invoiceBillState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBillState.fromDynamic;
      data._invoiceBillState = parser(value);
    }
  ),
  "invoiceBillUndoneBillTotal": (
    getter: (data) => data._invoiceBillUndoneBillTotal,
    setter: (data, value) => data._invoiceBillUndoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceBillUndoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceBillUndoneBillTotal = parser(value);
    }
  ),
  "invoiceGoodsRemark": (
    getter: (data) => data._invoiceGoodsRemark,
    setter: (data, value) => data._invoiceGoodsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceGoodsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceGoodsRemark = parser(value);
    }
  ),
  "invoiceSubmitContactId": (
    getter: (data) => data._invoiceSubmitContactId,
    setter: (data, value) => data._invoiceSubmitContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._invoiceSubmitContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._invoiceSubmitContactId = parser(value);
    }
  ),
  "invoiceSubmitContactName": (
    getter: (data) => data._invoiceSubmitContactName,
    setter: (data, value) => data._invoiceSubmitContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitContactName = parser(value);
    }
  ),
  "invoiceSubmitContractNumber": (
    getter: (data) => data._invoiceSubmitContractNumber,
    setter: (data, value) => data._invoiceSubmitContractNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitContractNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitContractNumber = parser(value);
    }
  ),
  "invoiceSubmitInvoiceDate": (
    getter: (data) => data._invoiceSubmitInvoiceDate,
    setter: (data, value) => data._invoiceSubmitInvoiceDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitInvoiceDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitInvoiceDate = parser(value);
    }
  ),
  "invoiceSubmitInvoiceNumber": (
    getter: (data) => data._invoiceSubmitInvoiceNumber,
    setter: (data, value) => data._invoiceSubmitInvoiceNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitInvoiceNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitInvoiceNumber = parser(value);
    }
  ),
  "invoiceSubmitInvoiceReceiveDate": (
    getter: (data) => data._invoiceSubmitInvoiceReceiveDate,
    setter: (data, value) => data._invoiceSubmitInvoiceReceiveDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitInvoiceReceiveDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitInvoiceReceiveDate = parser(value);
    }
  ),
  "invoiceSubmitInvoiceTotal": (
    getter: (data) => data._invoiceSubmitInvoiceTotal,
    setter: (data, value) => data._invoiceSubmitInvoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceSubmitInvoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceSubmitInvoiceTotal = parser(value);
    }
  ),
  "invoiceSubmitState": (
    getter: (data) => data._invoiceSubmitState,
    setter: (data, value) => data._invoiceSubmitState = value as TypeEnumOrderCustomInvoiceSubmitState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceSubmitState.toDynamic;
      return formatter(data._invoiceSubmitState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceSubmitState.fromDynamic;
      data._invoiceSubmitState = parser(value);
    }
  ),
  "invoiceTaxNumber": (
    getter: (data) => data._invoiceTaxNumber,
    setter: (data, value) => data._invoiceTaxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._invoiceTaxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._invoiceTaxNumber = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "manageEmployeeName": (
    getter: (data) => data._manageEmployeeName,
    setter: (data, value) => data._manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._manageEmployeeName = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "printTimes": (
    getter: (data) => data._printTimes,
    setter: (data, value) => data._printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._printTimes = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "summaryRemark": (
    getter: (data) => data._summaryRemark,
    setter: (data, value) => data._summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._summaryRemark = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._type = parser(value);
    }
  ),
};

class TypeOrderInvoiceQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQueryDataDTO({
    int? contactId,
    String? contactName,
    int? drawEmployeeId,
    String? drawEmployeeName,
    String? drawTime,
    int? entryAccountEmployeeId,
    String? entryAccountEmployeeName,
    String? entryAccountTime,
    int? id,
    String? invoiceBackDate,
    TypeEnumOrderCustomInvoiceBackState? invoiceBackState,
    String? invoiceBillAdjustedTotal,
    String? invoiceBillAllTotal,
    String? invoiceBillDeferTotal,
    String? invoiceBillDoneBillTotal,
    String? invoiceBillExtraTotal,
    String? invoiceBillGoodsTotal,
    TypeEnumOrderCustomInvoiceBillState? invoiceBillState,
    String? invoiceBillUndoneBillTotal,
    String? invoiceGoodsRemark,
    int? invoiceSubmitContactId,
    String? invoiceSubmitContactName,
    String? invoiceSubmitContractNumber,
    String? invoiceSubmitInvoiceDate,
    String? invoiceSubmitInvoiceNumber,
    String? invoiceSubmitInvoiceReceiveDate,
    String? invoiceSubmitInvoiceTotal,
    TypeEnumOrderCustomInvoiceSubmitState? invoiceSubmitState,
    String? invoiceTaxNumber,
    int? manageEmployeeId,
    String? manageEmployeeName,
    String? number,
    String? orderDate,
    int? printTimes,
    String? remark,
    TypeEnumOrderState? state,
    String? summaryRemark,
    TypeEnumOrderType? type
  }):
    _contactId = contactId,
    _contactName = contactName,
    _drawEmployeeId = drawEmployeeId,
    _drawEmployeeName = drawEmployeeName,
    _drawTime = drawTime,
    _entryAccountEmployeeId = entryAccountEmployeeId,
    _entryAccountEmployeeName = entryAccountEmployeeName,
    _entryAccountTime = entryAccountTime,
    _id = id,
    _invoiceBackDate = invoiceBackDate,
    _invoiceBackState = invoiceBackState,
    _invoiceBillAdjustedTotal = invoiceBillAdjustedTotal,
    _invoiceBillAllTotal = invoiceBillAllTotal,
    _invoiceBillDeferTotal = invoiceBillDeferTotal,
    _invoiceBillDoneBillTotal = invoiceBillDoneBillTotal,
    _invoiceBillExtraTotal = invoiceBillExtraTotal,
    _invoiceBillGoodsTotal = invoiceBillGoodsTotal,
    _invoiceBillState = invoiceBillState,
    _invoiceBillUndoneBillTotal = invoiceBillUndoneBillTotal,
    _invoiceGoodsRemark = invoiceGoodsRemark,
    _invoiceSubmitContactId = invoiceSubmitContactId,
    _invoiceSubmitContactName = invoiceSubmitContactName,
    _invoiceSubmitContractNumber = invoiceSubmitContractNumber,
    _invoiceSubmitInvoiceDate = invoiceSubmitInvoiceDate,
    _invoiceSubmitInvoiceNumber = invoiceSubmitInvoiceNumber,
    _invoiceSubmitInvoiceReceiveDate = invoiceSubmitInvoiceReceiveDate,
    _invoiceSubmitInvoiceTotal = invoiceSubmitInvoiceTotal,
    _invoiceSubmitState = invoiceSubmitState,
    _invoiceTaxNumber = invoiceTaxNumber,
    _manageEmployeeId = manageEmployeeId,
    _manageEmployeeName = manageEmployeeName,
    _number = number,
    _orderDate = orderDate,
    _printTimes = printTimes,
    _remark = remark,
    _state = state,
    _summaryRemark = summaryRemark,
    _type = type;

  static TypeOrderInvoiceQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  String? _drawEmployeeName;

  String get drawEmployeeName{
    return _drawEmployeeName!;
  }

  String? getDrawEmployeeName(){
    return _drawEmployeeName;
  }

  set drawEmployeeName(String data){
    _drawEmployeeName = data;
  }

  void setDrawEmployeeName(String? data){
    _drawEmployeeName = data;
  }

  String? _drawTime;

  String get drawTime{
    return _drawTime!;
  }

  String? getDrawTime(){
    return _drawTime;
  }

  set drawTime(String data){
    _drawTime = data;
  }

  void setDrawTime(String? data){
    _drawTime = data;
  }

  int? _entryAccountEmployeeId;

  int get entryAccountEmployeeId{
    return _entryAccountEmployeeId!;
  }

  int? getEntryAccountEmployeeId(){
    return _entryAccountEmployeeId;
  }

  set entryAccountEmployeeId(int data){
    _entryAccountEmployeeId = data;
  }

  void setEntryAccountEmployeeId(int? data){
    _entryAccountEmployeeId = data;
  }

  String? _entryAccountEmployeeName;

  String get entryAccountEmployeeName{
    return _entryAccountEmployeeName!;
  }

  String? getEntryAccountEmployeeName(){
    return _entryAccountEmployeeName;
  }

  set entryAccountEmployeeName(String data){
    _entryAccountEmployeeName = data;
  }

  void setEntryAccountEmployeeName(String? data){
    _entryAccountEmployeeName = data;
  }

  String? _entryAccountTime;

  String get entryAccountTime{
    return _entryAccountTime!;
  }

  String? getEntryAccountTime(){
    return _entryAccountTime;
  }

  set entryAccountTime(String data){
    _entryAccountTime = data;
  }

  void setEntryAccountTime(String? data){
    _entryAccountTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _invoiceBackDate;

  String get invoiceBackDate{
    return _invoiceBackDate!;
  }

  String? getInvoiceBackDate(){
    return _invoiceBackDate;
  }

  set invoiceBackDate(String data){
    _invoiceBackDate = data;
  }

  void setInvoiceBackDate(String? data){
    _invoiceBackDate = data;
  }

  TypeEnumOrderCustomInvoiceBackState? _invoiceBackState;

  TypeEnumOrderCustomInvoiceBackState get invoiceBackState{
    return _invoiceBackState!;
  }

  TypeEnumOrderCustomInvoiceBackState? getInvoiceBackState(){
    return _invoiceBackState;
  }

  set invoiceBackState(TypeEnumOrderCustomInvoiceBackState data){
    _invoiceBackState = data;
  }

  void setInvoiceBackState(TypeEnumOrderCustomInvoiceBackState? data){
    _invoiceBackState = data;
  }

  String? _invoiceBillAdjustedTotal;

  String get invoiceBillAdjustedTotal{
    return _invoiceBillAdjustedTotal!;
  }

  String? getInvoiceBillAdjustedTotal(){
    return _invoiceBillAdjustedTotal;
  }

  set invoiceBillAdjustedTotal(String data){
    _invoiceBillAdjustedTotal = data;
  }

  void setInvoiceBillAdjustedTotal(String? data){
    _invoiceBillAdjustedTotal = data;
  }

  String? _invoiceBillAllTotal;

  String get invoiceBillAllTotal{
    return _invoiceBillAllTotal!;
  }

  String? getInvoiceBillAllTotal(){
    return _invoiceBillAllTotal;
  }

  set invoiceBillAllTotal(String data){
    _invoiceBillAllTotal = data;
  }

  void setInvoiceBillAllTotal(String? data){
    _invoiceBillAllTotal = data;
  }

  String? _invoiceBillDeferTotal;

  String get invoiceBillDeferTotal{
    return _invoiceBillDeferTotal!;
  }

  String? getInvoiceBillDeferTotal(){
    return _invoiceBillDeferTotal;
  }

  set invoiceBillDeferTotal(String data){
    _invoiceBillDeferTotal = data;
  }

  void setInvoiceBillDeferTotal(String? data){
    _invoiceBillDeferTotal = data;
  }

  String? _invoiceBillDoneBillTotal;

  String get invoiceBillDoneBillTotal{
    return _invoiceBillDoneBillTotal!;
  }

  String? getInvoiceBillDoneBillTotal(){
    return _invoiceBillDoneBillTotal;
  }

  set invoiceBillDoneBillTotal(String data){
    _invoiceBillDoneBillTotal = data;
  }

  void setInvoiceBillDoneBillTotal(String? data){
    _invoiceBillDoneBillTotal = data;
  }

  String? _invoiceBillExtraTotal;

  String get invoiceBillExtraTotal{
    return _invoiceBillExtraTotal!;
  }

  String? getInvoiceBillExtraTotal(){
    return _invoiceBillExtraTotal;
  }

  set invoiceBillExtraTotal(String data){
    _invoiceBillExtraTotal = data;
  }

  void setInvoiceBillExtraTotal(String? data){
    _invoiceBillExtraTotal = data;
  }

  String? _invoiceBillGoodsTotal;

  String get invoiceBillGoodsTotal{
    return _invoiceBillGoodsTotal!;
  }

  String? getInvoiceBillGoodsTotal(){
    return _invoiceBillGoodsTotal;
  }

  set invoiceBillGoodsTotal(String data){
    _invoiceBillGoodsTotal = data;
  }

  void setInvoiceBillGoodsTotal(String? data){
    _invoiceBillGoodsTotal = data;
  }

  TypeEnumOrderCustomInvoiceBillState? _invoiceBillState;

  TypeEnumOrderCustomInvoiceBillState get invoiceBillState{
    return _invoiceBillState!;
  }

  TypeEnumOrderCustomInvoiceBillState? getInvoiceBillState(){
    return _invoiceBillState;
  }

  set invoiceBillState(TypeEnumOrderCustomInvoiceBillState data){
    _invoiceBillState = data;
  }

  void setInvoiceBillState(TypeEnumOrderCustomInvoiceBillState? data){
    _invoiceBillState = data;
  }

  String? _invoiceBillUndoneBillTotal;

  String get invoiceBillUndoneBillTotal{
    return _invoiceBillUndoneBillTotal!;
  }

  String? getInvoiceBillUndoneBillTotal(){
    return _invoiceBillUndoneBillTotal;
  }

  set invoiceBillUndoneBillTotal(String data){
    _invoiceBillUndoneBillTotal = data;
  }

  void setInvoiceBillUndoneBillTotal(String? data){
    _invoiceBillUndoneBillTotal = data;
  }

  String? _invoiceGoodsRemark;

  String get invoiceGoodsRemark{
    return _invoiceGoodsRemark!;
  }

  String? getInvoiceGoodsRemark(){
    return _invoiceGoodsRemark;
  }

  set invoiceGoodsRemark(String data){
    _invoiceGoodsRemark = data;
  }

  void setInvoiceGoodsRemark(String? data){
    _invoiceGoodsRemark = data;
  }

  int? _invoiceSubmitContactId;

  int get invoiceSubmitContactId{
    return _invoiceSubmitContactId!;
  }

  int? getInvoiceSubmitContactId(){
    return _invoiceSubmitContactId;
  }

  set invoiceSubmitContactId(int data){
    _invoiceSubmitContactId = data;
  }

  void setInvoiceSubmitContactId(int? data){
    _invoiceSubmitContactId = data;
  }

  String? _invoiceSubmitContactName;

  String get invoiceSubmitContactName{
    return _invoiceSubmitContactName!;
  }

  String? getInvoiceSubmitContactName(){
    return _invoiceSubmitContactName;
  }

  set invoiceSubmitContactName(String data){
    _invoiceSubmitContactName = data;
  }

  void setInvoiceSubmitContactName(String? data){
    _invoiceSubmitContactName = data;
  }

  String? _invoiceSubmitContractNumber;

  String get invoiceSubmitContractNumber{
    return _invoiceSubmitContractNumber!;
  }

  String? getInvoiceSubmitContractNumber(){
    return _invoiceSubmitContractNumber;
  }

  set invoiceSubmitContractNumber(String data){
    _invoiceSubmitContractNumber = data;
  }

  void setInvoiceSubmitContractNumber(String? data){
    _invoiceSubmitContractNumber = data;
  }

  String? _invoiceSubmitInvoiceDate;

  String get invoiceSubmitInvoiceDate{
    return _invoiceSubmitInvoiceDate!;
  }

  String? getInvoiceSubmitInvoiceDate(){
    return _invoiceSubmitInvoiceDate;
  }

  set invoiceSubmitInvoiceDate(String data){
    _invoiceSubmitInvoiceDate = data;
  }

  void setInvoiceSubmitInvoiceDate(String? data){
    _invoiceSubmitInvoiceDate = data;
  }

  String? _invoiceSubmitInvoiceNumber;

  String get invoiceSubmitInvoiceNumber{
    return _invoiceSubmitInvoiceNumber!;
  }

  String? getInvoiceSubmitInvoiceNumber(){
    return _invoiceSubmitInvoiceNumber;
  }

  set invoiceSubmitInvoiceNumber(String data){
    _invoiceSubmitInvoiceNumber = data;
  }

  void setInvoiceSubmitInvoiceNumber(String? data){
    _invoiceSubmitInvoiceNumber = data;
  }

  String? _invoiceSubmitInvoiceReceiveDate;

  String get invoiceSubmitInvoiceReceiveDate{
    return _invoiceSubmitInvoiceReceiveDate!;
  }

  String? getInvoiceSubmitInvoiceReceiveDate(){
    return _invoiceSubmitInvoiceReceiveDate;
  }

  set invoiceSubmitInvoiceReceiveDate(String data){
    _invoiceSubmitInvoiceReceiveDate = data;
  }

  void setInvoiceSubmitInvoiceReceiveDate(String? data){
    _invoiceSubmitInvoiceReceiveDate = data;
  }

  String? _invoiceSubmitInvoiceTotal;

  String get invoiceSubmitInvoiceTotal{
    return _invoiceSubmitInvoiceTotal!;
  }

  String? getInvoiceSubmitInvoiceTotal(){
    return _invoiceSubmitInvoiceTotal;
  }

  set invoiceSubmitInvoiceTotal(String data){
    _invoiceSubmitInvoiceTotal = data;
  }

  void setInvoiceSubmitInvoiceTotal(String? data){
    _invoiceSubmitInvoiceTotal = data;
  }

  TypeEnumOrderCustomInvoiceSubmitState? _invoiceSubmitState;

  TypeEnumOrderCustomInvoiceSubmitState get invoiceSubmitState{
    return _invoiceSubmitState!;
  }

  TypeEnumOrderCustomInvoiceSubmitState? getInvoiceSubmitState(){
    return _invoiceSubmitState;
  }

  set invoiceSubmitState(TypeEnumOrderCustomInvoiceSubmitState data){
    _invoiceSubmitState = data;
  }

  void setInvoiceSubmitState(TypeEnumOrderCustomInvoiceSubmitState? data){
    _invoiceSubmitState = data;
  }

  String? _invoiceTaxNumber;

  String get invoiceTaxNumber{
    return _invoiceTaxNumber!;
  }

  String? getInvoiceTaxNumber(){
    return _invoiceTaxNumber;
  }

  set invoiceTaxNumber(String data){
    _invoiceTaxNumber = data;
  }

  void setInvoiceTaxNumber(String? data){
    _invoiceTaxNumber = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _manageEmployeeName;

  String get manageEmployeeName{
    return _manageEmployeeName!;
  }

  String? getManageEmployeeName(){
    return _manageEmployeeName;
  }

  set manageEmployeeName(String data){
    _manageEmployeeName = data;
  }

  void setManageEmployeeName(String? data){
    _manageEmployeeName = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _printTimes;

  int get printTimes{
    return _printTimes!;
  }

  int? getPrintTimes(){
    return _printTimes;
  }

  set printTimes(int data){
    _printTimes = data;
  }

  void setPrintTimes(int? data){
    _printTimes = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  TypeEnumOrderState? _state;

  TypeEnumOrderState get state{
    return _state!;
  }

  TypeEnumOrderState? getState(){
    return _state;
  }

  set state(TypeEnumOrderState data){
    _state = data;
  }

  void setState(TypeEnumOrderState? data){
    _state = data;
  }

  String? _summaryRemark;

  String get summaryRemark{
    return _summaryRemark!;
  }

  String? getSummaryRemark(){
    return _summaryRemark;
  }

  set summaryRemark(String data){
    _summaryRemark = data;
  }

  void setSummaryRemark(String? data){
    _summaryRemark = data;
  }

  TypeEnumOrderType? _type;

  TypeEnumOrderType get type{
    return _type!;
  }

  TypeEnumOrderType? getType(){
    return _type;
  }

  set type(TypeEnumOrderType data){
    _type = data;
  }

  void setType(TypeEnumOrderType? data){
    _type = data;
  }

}

class FTypeOrderInvoiceQuerySumDTO extends IDataField {
  static const count = FTypeOrderInvoiceQuerySumDTO('count');
  const FTypeOrderInvoiceQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQuerySumDTO> _TypeOrderInvoiceQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
};

class TypeOrderInvoiceQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQuerySumDTO({
    int? count
  }):
    _count = count;

  static TypeOrderInvoiceQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

}

class FTypeOrderItem extends IDataField {
  static const aliasItemName = FTypeOrderItem('aliasItemName');
  static const aliasItemNumber = FTypeOrderItem('aliasItemNumber');
  static const amount = FTypeOrderItem('amount');
  static const basicAmount = FTypeOrderItem('basicAmount');
  static const basicUnitInfo = FTypeOrderItem('basicUnitInfo');
  static const bomCostPrice = FTypeOrderItem('bomCostPrice');
  static const bomCostTotal = FTypeOrderItem('bomCostTotal');
  static const bomPrice = FTypeOrderItem('bomPrice');
  static const bomTotal = FTypeOrderItem('bomTotal');
  static const costPrice = FTypeOrderItem('costPrice');
  static const costTotal = FTypeOrderItem('costTotal');
  static const customField1 = FTypeOrderItem('customField1');
  static const customField2 = FTypeOrderItem('customField2');
  static const customField3 = FTypeOrderItem('customField3');
  static const customField4 = FTypeOrderItem('customField4');
  static const customField5 = FTypeOrderItem('customField5');
  static const customField6 = FTypeOrderItem('customField6');
  static const customField7 = FTypeOrderItem('customField7');
  static const customField8 = FTypeOrderItem('customField8');
  static const discount = FTypeOrderItem('discount');
  static const discountPrice = FTypeOrderItem('discountPrice');
  static const discountTotal = FTypeOrderItem('discountTotal');
  static const doneExecuteAmount = FTypeOrderItem('doneExecuteAmount');
  static const fee = FTypeOrderItem('fee');
  static const feePrice = FTypeOrderItem('feePrice');
  static const feeTotal = FTypeOrderItem('feeTotal');
  static const id = FTypeOrderItem('id');
  static const itemId = FTypeOrderItem('itemId');
  static const itemInfo = FTypeOrderItem('itemInfo');
  static const itemPurchasePrice = FTypeOrderItem('itemPurchasePrice');
  static const itemWholeSalesPrice = FTypeOrderItem('itemWholeSalesPrice');
  static const newAmount = FTypeOrderItem('newAmount');
  static const oldAmount = FTypeOrderItem('oldAmount');
  static const oldPrice = FTypeOrderItem('oldPrice');
  static const oldTotal = FTypeOrderItem('oldTotal');
  static const orderDirection = FTypeOrderItem('orderDirection');
  static const orderState = FTypeOrderItem('orderState');
  static const orderStockType = FTypeOrderItem('orderStockType');
  static const orderSubContractStockType = FTypeOrderItem('orderSubContractStockType');
  static const preTaxPrice = FTypeOrderItem('preTaxPrice');
  static const preTaxTotal = FTypeOrderItem('preTaxTotal');
  static const price = FTypeOrderItem('price');
  static const profitRate = FTypeOrderItem('profitRate');
  static const profitTotal = FTypeOrderItem('profitTotal');
  static const refChangeItemId = FTypeOrderItem('refChangeItemId');
  static const refParentItemId = FTypeOrderItem('refParentItemId');
  static const remark = FTypeOrderItem('remark');
  static const stockExecutes = FTypeOrderItem('stockExecutes');
  static const stockLocation = FTypeOrderItem('stockLocation');
  static const stockRemains = FTypeOrderItem('stockRemains');
  static const storeId = FTypeOrderItem('storeId');
  static const subContractStockRemains = FTypeOrderItem('subContractStockRemains');
  static const tax = FTypeOrderItem('tax');
  static const taxOnlyTotal = FTypeOrderItem('taxOnlyTotal');
  static const total = FTypeOrderItem('total');
  static const undoneExecuteAmount = FTypeOrderItem('undoneExecuteAmount');
  static const unitConvert = FTypeOrderItem('unitConvert');
  static const unitId = FTypeOrderItem('unitId');
  static const unitInfo = FTypeOrderItem('unitInfo');
  const FTypeOrderItem(super.key);
}

final FieldReflectInfo<TypeOrderItem> _TypeOrderItem_fields = {
  "aliasItemName": (
    getter: (data) => data._aliasItemName,
    setter: (data, value) => data._aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemName = parser(value);
    }
  ),
  "aliasItemNumber": (
    getter: (data) => data._aliasItemNumber,
    setter: (data, value) => data._aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemNumber = parser(value);
    }
  ),
  "amount": (
    getter: (data) => data._amount,
    setter: (data, value) => data._amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._amount = parser(value);
    }
  ),
  "basicAmount": (
    getter: (data) => data._basicAmount,
    setter: (data, value) => data._basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._basicAmount = parser(value);
    }
  ),
  "basicUnitInfo": (
    getter: (data) => data._basicUnitInfo,
    setter: (data, value) => data._basicUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._basicUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._basicUnitInfo = parser(value);
    }
  ),
  "bomCostPrice": (
    getter: (data) => data._bomCostPrice,
    setter: (data, value) => data._bomCostPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomCostPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomCostPrice = parser(value);
    }
  ),
  "bomCostTotal": (
    getter: (data) => data._bomCostTotal,
    setter: (data, value) => data._bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomCostTotal = parser(value);
    }
  ),
  "bomPrice": (
    getter: (data) => data._bomPrice,
    setter: (data, value) => data._bomPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomPrice = parser(value);
    }
  ),
  "bomTotal": (
    getter: (data) => data._bomTotal,
    setter: (data, value) => data._bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomTotal = parser(value);
    }
  ),
  "costPrice": (
    getter: (data) => data._costPrice,
    setter: (data, value) => data._costPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costPrice = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "customField1": (
    getter: (data) => data._customField1,
    setter: (data, value) => data._customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField1 = parser(value);
    }
  ),
  "customField2": (
    getter: (data) => data._customField2,
    setter: (data, value) => data._customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField2 = parser(value);
    }
  ),
  "customField3": (
    getter: (data) => data._customField3,
    setter: (data, value) => data._customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField3 = parser(value);
    }
  ),
  "customField4": (
    getter: (data) => data._customField4,
    setter: (data, value) => data._customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField4 = parser(value);
    }
  ),
  "customField5": (
    getter: (data) => data._customField5,
    setter: (data, value) => data._customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField5 = parser(value);
    }
  ),
  "customField6": (
    getter: (data) => data._customField6,
    setter: (data, value) => data._customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField6 = parser(value);
    }
  ),
  "customField7": (
    getter: (data) => data._customField7,
    setter: (data, value) => data._customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField7 = parser(value);
    }
  ),
  "customField8": (
    getter: (data) => data._customField8,
    setter: (data, value) => data._customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField8 = parser(value);
    }
  ),
  "discount": (
    getter: (data) => data._discount,
    setter: (data, value) => data._discount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discount = parser(value);
    }
  ),
  "discountPrice": (
    getter: (data) => data._discountPrice,
    setter: (data, value) => data._discountPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountPrice = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "fee": (
    getter: (data) => data._fee,
    setter: (data, value) => data._fee = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._fee);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._fee = parser(value);
    }
  ),
  "feePrice": (
    getter: (data) => data._feePrice,
    setter: (data, value) => data._feePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feePrice = parser(value);
    }
  ),
  "feeTotal": (
    getter: (data) => data._feeTotal,
    setter: (data, value) => data._feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeTotal = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemInfo": (
    getter: (data) => data._itemInfo,
    setter: (data, value) => data._itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data._itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data._itemInfo = parser(value);
    }
  ),
  "itemPurchasePrice": (
    getter: (data) => data._itemPurchasePrice,
    setter: (data, value) => data._itemPurchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemPurchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemPurchasePrice = parser(value);
    }
  ),
  "itemWholeSalesPrice": (
    getter: (data) => data._itemWholeSalesPrice,
    setter: (data, value) => data._itemWholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemWholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemWholeSalesPrice = parser(value);
    }
  ),
  "newAmount": (
    getter: (data) => data._newAmount,
    setter: (data, value) => data._newAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._newAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._newAmount = parser(value);
    }
  ),
  "oldAmount": (
    getter: (data) => data._oldAmount,
    setter: (data, value) => data._oldAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._oldAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._oldAmount = parser(value);
    }
  ),
  "oldPrice": (
    getter: (data) => data._oldPrice,
    setter: (data, value) => data._oldPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._oldPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._oldPrice = parser(value);
    }
  ),
  "oldTotal": (
    getter: (data) => data._oldTotal,
    setter: (data, value) => data._oldTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._oldTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._oldTotal = parser(value);
    }
  ),
  "orderDirection": (
    getter: (data) => data._orderDirection,
    setter: (data, value) => data._orderDirection = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDirection);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDirection = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderStockType": (
    getter: (data) => data._orderStockType,
    setter: (data, value) => data._orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderStockType = parser(value);
    }
  ),
  "orderSubContractStockType": (
    getter: (data) => data._orderSubContractStockType,
    setter: (data, value) => data._orderSubContractStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderSubContractStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderSubContractStockType = parser(value);
    }
  ),
  "preTaxPrice": (
    getter: (data) => data._preTaxPrice,
    setter: (data, value) => data._preTaxPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxPrice = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "refChangeItemId": (
    getter: (data) => data._refChangeItemId,
    setter: (data, value) => data._refChangeItemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._refChangeItemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._refChangeItemId = parser(value);
    }
  ),
  "refParentItemId": (
    getter: (data) => data._refParentItemId,
    setter: (data, value) => data._refParentItemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._refParentItemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._refParentItemId = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "stockExecutes": (
    getter: (data) => data._stockExecutes,
    setter: (data, value) => data._stockExecutes = value as List<TypeOrderItemExecute>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemExecute>((single){
        final handler = TypeOrderItemExecute.toDynamic;
        return handler(single)!;
      });
      return formatter(data._stockExecutes);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemExecute>((single){
        final handler = TypeOrderItemExecute.fromDynamic;
        return handler(single)!;
      });
      data._stockExecutes = parser(value);
    }
  ),
  "stockLocation": (
    getter: (data) => data._stockLocation,
    setter: (data, value) => data._stockLocation = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockLocation);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockLocation = parser(value);
    }
  ),
  "stockRemains": (
    getter: (data) => data._stockRemains,
    setter: (data, value) => data._stockRemains = value as List<TypeOrderItemRemain>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.toDynamic;
        return handler(single)!;
      });
      return formatter(data._stockRemains);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.fromDynamic;
        return handler(single)!;
      });
      data._stockRemains = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "subContractStockRemains": (
    getter: (data) => data._subContractStockRemains,
    setter: (data, value) => data._subContractStockRemains = value as List<TypeOrderItemRemain>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.toDynamic;
        return handler(single)!;
      });
      return formatter(data._subContractStockRemains);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.fromDynamic;
        return handler(single)!;
      });
      data._subContractStockRemains = parser(value);
    }
  ),
  "tax": (
    getter: (data) => data._tax,
    setter: (data, value) => data._tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._tax = parser(value);
    }
  ),
  "taxOnlyTotal": (
    getter: (data) => data._taxOnlyTotal,
    setter: (data, value) => data._taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxOnlyTotal = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
  "unitConvert": (
    getter: (data) => data._unitConvert,
    setter: (data, value) => data._unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvert = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitInfo": (
    getter: (data) => data._unitInfo,
    setter: (data, value) => data._unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data._unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data._unitInfo = parser(value);
    }
  ),
};

class TypeOrderItem extends IDataBasic implements IDataDynamic {
  TypeOrderItem({
    String? aliasItemName,
    String? aliasItemNumber,
    String? amount,
    String? basicAmount,
    TypeUnit? basicUnitInfo,
    String? bomCostPrice,
    String? bomCostTotal,
    String? bomPrice,
    String? bomTotal,
    String? costPrice,
    String? costTotal,
    String? customField1,
    String? customField2,
    String? customField3,
    String? customField4,
    String? customField5,
    String? customField6,
    String? customField7,
    String? customField8,
    String? discount,
    String? discountPrice,
    String? discountTotal,
    String? doneExecuteAmount,
    String? fee,
    String? feePrice,
    String? feeTotal,
    int? id,
    int? itemId,
    TypeItem? itemInfo,
    String? itemPurchasePrice,
    String? itemWholeSalesPrice,
    String? newAmount,
    String? oldAmount,
    String? oldPrice,
    String? oldTotal,
    int? orderDirection,
    TypeEnumOrderState? orderState,
    int? orderStockType,
    int? orderSubContractStockType,
    String? preTaxPrice,
    String? preTaxTotal,
    String? price,
    String? profitRate,
    String? profitTotal,
    int? refChangeItemId,
    int? refParentItemId,
    String? remark,
    List<TypeOrderItemExecute>? stockExecutes,
    String? stockLocation,
    List<TypeOrderItemRemain>? stockRemains,
    int? storeId,
    List<TypeOrderItemRemain>? subContractStockRemains,
    String? tax,
    String? taxOnlyTotal,
    String? total,
    String? undoneExecuteAmount,
    String? unitConvert,
    int? unitId,
    TypeUnit? unitInfo
  }):
    _aliasItemName = aliasItemName,
    _aliasItemNumber = aliasItemNumber,
    _amount = amount,
    _basicAmount = basicAmount,
    _basicUnitInfo = basicUnitInfo,
    _bomCostPrice = bomCostPrice,
    _bomCostTotal = bomCostTotal,
    _bomPrice = bomPrice,
    _bomTotal = bomTotal,
    _costPrice = costPrice,
    _costTotal = costTotal,
    _customField1 = customField1,
    _customField2 = customField2,
    _customField3 = customField3,
    _customField4 = customField4,
    _customField5 = customField5,
    _customField6 = customField6,
    _customField7 = customField7,
    _customField8 = customField8,
    _discount = discount,
    _discountPrice = discountPrice,
    _discountTotal = discountTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _fee = fee,
    _feePrice = feePrice,
    _feeTotal = feeTotal,
    _id = id,
    _itemId = itemId,
    _itemInfo = itemInfo,
    _itemPurchasePrice = itemPurchasePrice,
    _itemWholeSalesPrice = itemWholeSalesPrice,
    _newAmount = newAmount,
    _oldAmount = oldAmount,
    _oldPrice = oldPrice,
    _oldTotal = oldTotal,
    _orderDirection = orderDirection,
    _orderState = orderState,
    _orderStockType = orderStockType,
    _orderSubContractStockType = orderSubContractStockType,
    _preTaxPrice = preTaxPrice,
    _preTaxTotal = preTaxTotal,
    _price = price,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _refChangeItemId = refChangeItemId,
    _refParentItemId = refParentItemId,
    _remark = remark,
    _stockExecutes = stockExecutes,
    _stockLocation = stockLocation,
    _stockRemains = stockRemains,
    _storeId = storeId,
    _subContractStockRemains = subContractStockRemains,
    _tax = tax,
    _taxOnlyTotal = taxOnlyTotal,
    _total = total,
    _undoneExecuteAmount = undoneExecuteAmount,
    _unitConvert = unitConvert,
    _unitId = unitId,
    _unitInfo = unitInfo;

  static TypeOrderItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _aliasItemName;

  String get aliasItemName{
    return _aliasItemName!;
  }

  String? getAliasItemName(){
    return _aliasItemName;
  }

  set aliasItemName(String data){
    _aliasItemName = data;
  }

  void setAliasItemName(String? data){
    _aliasItemName = data;
  }

  String? _aliasItemNumber;

  String get aliasItemNumber{
    return _aliasItemNumber!;
  }

  String? getAliasItemNumber(){
    return _aliasItemNumber;
  }

  set aliasItemNumber(String data){
    _aliasItemNumber = data;
  }

  void setAliasItemNumber(String? data){
    _aliasItemNumber = data;
  }

  String? _amount;

  String get amount{
    return _amount!;
  }

  String? getAmount(){
    return _amount;
  }

  set amount(String data){
    _amount = data;
  }

  void setAmount(String? data){
    _amount = data;
  }

  String? _basicAmount;

  String get basicAmount{
    return _basicAmount!;
  }

  String? getBasicAmount(){
    return _basicAmount;
  }

  set basicAmount(String data){
    _basicAmount = data;
  }

  void setBasicAmount(String? data){
    _basicAmount = data;
  }

  TypeUnit? _basicUnitInfo;

  TypeUnit get basicUnitInfo{
    return _basicUnitInfo!;
  }

  TypeUnit? getBasicUnitInfo(){
    return _basicUnitInfo;
  }

  set basicUnitInfo(TypeUnit data){
    _basicUnitInfo = data;
  }

  void setBasicUnitInfo(TypeUnit? data){
    _basicUnitInfo = data;
  }

  String? _bomCostPrice;

  String get bomCostPrice{
    return _bomCostPrice!;
  }

  String? getBomCostPrice(){
    return _bomCostPrice;
  }

  set bomCostPrice(String data){
    _bomCostPrice = data;
  }

  void setBomCostPrice(String? data){
    _bomCostPrice = data;
  }

  String? _bomCostTotal;

  String get bomCostTotal{
    return _bomCostTotal!;
  }

  String? getBomCostTotal(){
    return _bomCostTotal;
  }

  set bomCostTotal(String data){
    _bomCostTotal = data;
  }

  void setBomCostTotal(String? data){
    _bomCostTotal = data;
  }

  String? _bomPrice;

  String get bomPrice{
    return _bomPrice!;
  }

  String? getBomPrice(){
    return _bomPrice;
  }

  set bomPrice(String data){
    _bomPrice = data;
  }

  void setBomPrice(String? data){
    _bomPrice = data;
  }

  String? _bomTotal;

  String get bomTotal{
    return _bomTotal!;
  }

  String? getBomTotal(){
    return _bomTotal;
  }

  set bomTotal(String data){
    _bomTotal = data;
  }

  void setBomTotal(String? data){
    _bomTotal = data;
  }

  String? _costPrice;

  String get costPrice{
    return _costPrice!;
  }

  String? getCostPrice(){
    return _costPrice;
  }

  set costPrice(String data){
    _costPrice = data;
  }

  void setCostPrice(String? data){
    _costPrice = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  String? _customField1;

  String get customField1{
    return _customField1!;
  }

  String? getCustomField1(){
    return _customField1;
  }

  set customField1(String data){
    _customField1 = data;
  }

  void setCustomField1(String? data){
    _customField1 = data;
  }

  String? _customField2;

  String get customField2{
    return _customField2!;
  }

  String? getCustomField2(){
    return _customField2;
  }

  set customField2(String data){
    _customField2 = data;
  }

  void setCustomField2(String? data){
    _customField2 = data;
  }

  String? _customField3;

  String get customField3{
    return _customField3!;
  }

  String? getCustomField3(){
    return _customField3;
  }

  set customField3(String data){
    _customField3 = data;
  }

  void setCustomField3(String? data){
    _customField3 = data;
  }

  String? _customField4;

  String get customField4{
    return _customField4!;
  }

  String? getCustomField4(){
    return _customField4;
  }

  set customField4(String data){
    _customField4 = data;
  }

  void setCustomField4(String? data){
    _customField4 = data;
  }

  String? _customField5;

  String get customField5{
    return _customField5!;
  }

  String? getCustomField5(){
    return _customField5;
  }

  set customField5(String data){
    _customField5 = data;
  }

  void setCustomField5(String? data){
    _customField5 = data;
  }

  String? _customField6;

  String get customField6{
    return _customField6!;
  }

  String? getCustomField6(){
    return _customField6;
  }

  set customField6(String data){
    _customField6 = data;
  }

  void setCustomField6(String? data){
    _customField6 = data;
  }

  String? _customField7;

  String get customField7{
    return _customField7!;
  }

  String? getCustomField7(){
    return _customField7;
  }

  set customField7(String data){
    _customField7 = data;
  }

  void setCustomField7(String? data){
    _customField7 = data;
  }

  String? _customField8;

  String get customField8{
    return _customField8!;
  }

  String? getCustomField8(){
    return _customField8;
  }

  set customField8(String data){
    _customField8 = data;
  }

  void setCustomField8(String? data){
    _customField8 = data;
  }

  String? _discount;

  String get discount{
    return _discount!;
  }

  String? getDiscount(){
    return _discount;
  }

  set discount(String data){
    _discount = data;
  }

  void setDiscount(String? data){
    _discount = data;
  }

  String? _discountPrice;

  String get discountPrice{
    return _discountPrice!;
  }

  String? getDiscountPrice(){
    return _discountPrice;
  }

  set discountPrice(String data){
    _discountPrice = data;
  }

  void setDiscountPrice(String? data){
    _discountPrice = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  String? _fee;

  String get fee{
    return _fee!;
  }

  String? getFee(){
    return _fee;
  }

  set fee(String data){
    _fee = data;
  }

  void setFee(String? data){
    _fee = data;
  }

  String? _feePrice;

  String get feePrice{
    return _feePrice!;
  }

  String? getFeePrice(){
    return _feePrice;
  }

  set feePrice(String data){
    _feePrice = data;
  }

  void setFeePrice(String? data){
    _feePrice = data;
  }

  String? _feeTotal;

  String get feeTotal{
    return _feeTotal!;
  }

  String? getFeeTotal(){
    return _feeTotal;
  }

  set feeTotal(String data){
    _feeTotal = data;
  }

  void setFeeTotal(String? data){
    _feeTotal = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  TypeItem? _itemInfo;

  TypeItem get itemInfo{
    return _itemInfo!;
  }

  TypeItem? getItemInfo(){
    return _itemInfo;
  }

  set itemInfo(TypeItem data){
    _itemInfo = data;
  }

  void setItemInfo(TypeItem? data){
    _itemInfo = data;
  }

  String? _itemPurchasePrice;

  String get itemPurchasePrice{
    return _itemPurchasePrice!;
  }

  String? getItemPurchasePrice(){
    return _itemPurchasePrice;
  }

  set itemPurchasePrice(String data){
    _itemPurchasePrice = data;
  }

  void setItemPurchasePrice(String? data){
    _itemPurchasePrice = data;
  }

  String? _itemWholeSalesPrice;

  String get itemWholeSalesPrice{
    return _itemWholeSalesPrice!;
  }

  String? getItemWholeSalesPrice(){
    return _itemWholeSalesPrice;
  }

  set itemWholeSalesPrice(String data){
    _itemWholeSalesPrice = data;
  }

  void setItemWholeSalesPrice(String? data){
    _itemWholeSalesPrice = data;
  }

  String? _newAmount;

  String get newAmount{
    return _newAmount!;
  }

  String? getNewAmount(){
    return _newAmount;
  }

  set newAmount(String data){
    _newAmount = data;
  }

  void setNewAmount(String? data){
    _newAmount = data;
  }

  String? _oldAmount;

  String get oldAmount{
    return _oldAmount!;
  }

  String? getOldAmount(){
    return _oldAmount;
  }

  set oldAmount(String data){
    _oldAmount = data;
  }

  void setOldAmount(String? data){
    _oldAmount = data;
  }

  String? _oldPrice;

  String get oldPrice{
    return _oldPrice!;
  }

  String? getOldPrice(){
    return _oldPrice;
  }

  set oldPrice(String data){
    _oldPrice = data;
  }

  void setOldPrice(String? data){
    _oldPrice = data;
  }

  String? _oldTotal;

  String get oldTotal{
    return _oldTotal!;
  }

  String? getOldTotal(){
    return _oldTotal;
  }

  set oldTotal(String data){
    _oldTotal = data;
  }

  void setOldTotal(String? data){
    _oldTotal = data;
  }

  int? _orderDirection;

  int get orderDirection{
    return _orderDirection!;
  }

  int? getOrderDirection(){
    return _orderDirection;
  }

  set orderDirection(int data){
    _orderDirection = data;
  }

  void setOrderDirection(int? data){
    _orderDirection = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  int? _orderStockType;

  int get orderStockType{
    return _orderStockType!;
  }

  int? getOrderStockType(){
    return _orderStockType;
  }

  set orderStockType(int data){
    _orderStockType = data;
  }

  void setOrderStockType(int? data){
    _orderStockType = data;
  }

  int? _orderSubContractStockType;

  int get orderSubContractStockType{
    return _orderSubContractStockType!;
  }

  int? getOrderSubContractStockType(){
    return _orderSubContractStockType;
  }

  set orderSubContractStockType(int data){
    _orderSubContractStockType = data;
  }

  void setOrderSubContractStockType(int? data){
    _orderSubContractStockType = data;
  }

  String? _preTaxPrice;

  String get preTaxPrice{
    return _preTaxPrice!;
  }

  String? getPreTaxPrice(){
    return _preTaxPrice;
  }

  set preTaxPrice(String data){
    _preTaxPrice = data;
  }

  void setPreTaxPrice(String? data){
    _preTaxPrice = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  int? _refChangeItemId;

  int get refChangeItemId{
    return _refChangeItemId!;
  }

  int? getRefChangeItemId(){
    return _refChangeItemId;
  }

  set refChangeItemId(int data){
    _refChangeItemId = data;
  }

  void setRefChangeItemId(int? data){
    _refChangeItemId = data;
  }

  int? _refParentItemId;

  int get refParentItemId{
    return _refParentItemId!;
  }

  int? getRefParentItemId(){
    return _refParentItemId;
  }

  set refParentItemId(int data){
    _refParentItemId = data;
  }

  void setRefParentItemId(int? data){
    _refParentItemId = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  List<TypeOrderItemExecute>? _stockExecutes;

  List<TypeOrderItemExecute> get stockExecutes{
    return _stockExecutes!;
  }

  List<TypeOrderItemExecute>? getStockExecutes(){
    return _stockExecutes;
  }

  set stockExecutes(List<TypeOrderItemExecute> data){
    _stockExecutes = data;
  }

  void setStockExecutes(List<TypeOrderItemExecute>? data){
    _stockExecutes = data;
  }

  String? _stockLocation;

  String get stockLocation{
    return _stockLocation!;
  }

  String? getStockLocation(){
    return _stockLocation;
  }

  set stockLocation(String data){
    _stockLocation = data;
  }

  void setStockLocation(String? data){
    _stockLocation = data;
  }

  List<TypeOrderItemRemain>? _stockRemains;

  List<TypeOrderItemRemain> get stockRemains{
    return _stockRemains!;
  }

  List<TypeOrderItemRemain>? getStockRemains(){
    return _stockRemains;
  }

  set stockRemains(List<TypeOrderItemRemain> data){
    _stockRemains = data;
  }

  void setStockRemains(List<TypeOrderItemRemain>? data){
    _stockRemains = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  List<TypeOrderItemRemain>? _subContractStockRemains;

  List<TypeOrderItemRemain> get subContractStockRemains{
    return _subContractStockRemains!;
  }

  List<TypeOrderItemRemain>? getSubContractStockRemains(){
    return _subContractStockRemains;
  }

  set subContractStockRemains(List<TypeOrderItemRemain> data){
    _subContractStockRemains = data;
  }

  void setSubContractStockRemains(List<TypeOrderItemRemain>? data){
    _subContractStockRemains = data;
  }

  String? _tax;

  String get tax{
    return _tax!;
  }

  String? getTax(){
    return _tax;
  }

  set tax(String data){
    _tax = data;
  }

  void setTax(String? data){
    _tax = data;
  }

  String? _taxOnlyTotal;

  String get taxOnlyTotal{
    return _taxOnlyTotal!;
  }

  String? getTaxOnlyTotal(){
    return _taxOnlyTotal;
  }

  set taxOnlyTotal(String data){
    _taxOnlyTotal = data;
  }

  void setTaxOnlyTotal(String? data){
    _taxOnlyTotal = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

  String? _unitConvert;

  String get unitConvert{
    return _unitConvert!;
  }

  String? getUnitConvert(){
    return _unitConvert;
  }

  set unitConvert(String data){
    _unitConvert = data;
  }

  void setUnitConvert(String? data){
    _unitConvert = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  TypeUnit? _unitInfo;

  TypeUnit get unitInfo{
    return _unitInfo!;
  }

  TypeUnit? getUnitInfo(){
    return _unitInfo;
  }

  set unitInfo(TypeUnit data){
    _unitInfo = data;
  }

  void setUnitInfo(TypeUnit? data){
    _unitInfo = data;
  }

}

class FTypeOrderItemExecute extends IDataField {
  static const amount = FTypeOrderItemExecute('amount');
  static const orderId = FTypeOrderItemExecute('orderId');
  static const orderNumber = FTypeOrderItemExecute('orderNumber');
  static const orderType = FTypeOrderItemExecute('orderType');
  const FTypeOrderItemExecute(super.key);
}

final FieldReflectInfo<TypeOrderItemExecute> _TypeOrderItemExecute_fields = {
  "amount": (
    getter: (data) => data._amount,
    setter: (data, value) => data._amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._amount = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
};

class TypeOrderItemExecute extends IDataBasic implements IDataDynamic {
  TypeOrderItemExecute({
    String? amount,
    int? orderId,
    String? orderNumber,
    TypeEnumOrderType? orderType
  }):
    _amount = amount,
    _orderId = orderId,
    _orderNumber = orderNumber,
    _orderType = orderType;

  static TypeOrderItemExecute? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemExecute();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemExecute_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemExecute: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemExecute? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemExecute_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemExecute_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemExecute_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _amount;

  String get amount{
    return _amount!;
  }

  String? getAmount(){
    return _amount;
  }

  set amount(String data){
    _amount = data;
  }

  void setAmount(String? data){
    _amount = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

}

class FTypeOrderItemGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeOrderItemGroupQueryDTO('beginOrderDate');
  static const data = FTypeOrderItemGroupQueryDTO('data');
  static const endOrderDate = FTypeOrderItemGroupQueryDTO('endOrderDate');
  static const pageIndex = FTypeOrderItemGroupQueryDTO('pageIndex');
  static const pageSize = FTypeOrderItemGroupQueryDTO('pageSize');
  static const sum = FTypeOrderItemGroupQueryDTO('sum');
  const FTypeOrderItemGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemGroupQueryDTO> _TypeOrderItemGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data._beginOrderDate,
    setter: (data, value) => data._beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginOrderDate = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderItemGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemGroupQueryDataDTO>((single){
        final handler = TypeOrderItemGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemGroupQueryDataDTO>((single){
        final handler = TypeOrderItemGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "endOrderDate": (
    getter: (data) => data._endOrderDate,
    setter: (data, value) => data._endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endOrderDate = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderItemGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderItemGroupQueryDataDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderItemGroupQueryDataDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderItemGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemGroupQueryDTO({
    String? beginOrderDate,
    List<TypeOrderItemGroupQueryDataDTO>? data,
    String? endOrderDate,
    int? pageIndex,
    int? pageSize,
    TypeOrderItemGroupQueryDataDTO? sum
  }):
    _beginOrderDate = beginOrderDate,
    _data = data,
    _endOrderDate = endOrderDate,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderItemGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginOrderDate;

  String get beginOrderDate{
    return _beginOrderDate!;
  }

  String? getBeginOrderDate(){
    return _beginOrderDate;
  }

  set beginOrderDate(String data){
    _beginOrderDate = data;
  }

  void setBeginOrderDate(String? data){
    _beginOrderDate = data;
  }

  List<TypeOrderItemGroupQueryDataDTO>? _data;

  List<TypeOrderItemGroupQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderItemGroupQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderItemGroupQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderItemGroupQueryDataDTO>? data){
    _data = data;
  }

  String? _endOrderDate;

  String get endOrderDate{
    return _endOrderDate!;
  }

  String? getEndOrderDate(){
    return _endOrderDate;
  }

  set endOrderDate(String data){
    _endOrderDate = data;
  }

  void setEndOrderDate(String? data){
    _endOrderDate = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderItemGroupQueryDataDTO? _sum;

  TypeOrderItemGroupQueryDataDTO get sum{
    return _sum!;
  }

  TypeOrderItemGroupQueryDataDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderItemGroupQueryDataDTO data){
    _sum = data;
  }

  void setSum(TypeOrderItemGroupQueryDataDTO? data){
    _sum = data;
  }

}

class FTypeOrderItemGroupQueryDataDTO extends IDataField {
  static const averageCostPricePerAmount = FTypeOrderItemGroupQueryDataDTO('averageCostPricePerAmount');
  static const averagePricePerAmount = FTypeOrderItemGroupQueryDataDTO('averagePricePerAmount');
  static const averageTotalPerContact = FTypeOrderItemGroupQueryDataDTO('averageTotalPerContact');
  static const averageTotalPerOrder = FTypeOrderItemGroupQueryDataDTO('averageTotalPerOrder');
  static const beginOrderDate = FTypeOrderItemGroupQueryDataDTO('beginOrderDate');
  static const contactCount = FTypeOrderItemGroupQueryDataDTO('contactCount');
  static const contactId = FTypeOrderItemGroupQueryDataDTO('contactId');
  static const costTotal = FTypeOrderItemGroupQueryDataDTO('costTotal');
  static const count = FTypeOrderItemGroupQueryDataDTO('count');
  static const discountTotal = FTypeOrderItemGroupQueryDataDTO('discountTotal');
  static const endOrderDate = FTypeOrderItemGroupQueryDataDTO('endOrderDate');
  static const id = FTypeOrderItemGroupQueryDataDTO('id');
  static const itemId = FTypeOrderItemGroupQueryDataDTO('itemId');
  static const itemModelRemark = FTypeOrderItemGroupQueryDataDTO('itemModelRemark');
  static const itemSpecsRemark = FTypeOrderItemGroupQueryDataDTO('itemSpecsRemark');
  static const manageEmployeeId = FTypeOrderItemGroupQueryDataDTO('manageEmployeeId');
  static const name = FTypeOrderItemGroupQueryDataDTO('name');
  static const normalTotalAmount = FTypeOrderItemGroupQueryDataDTO('normalTotalAmount');
  static const orderCount = FTypeOrderItemGroupQueryDataDTO('orderCount');
  static const preTaxTotal = FTypeOrderItemGroupQueryDataDTO('preTaxTotal');
  static const profitRate = FTypeOrderItemGroupQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderItemGroupQueryDataDTO('profitTotal');
  static const returnRate = FTypeOrderItemGroupQueryDataDTO('returnRate');
  static const returnTotalAmount = FTypeOrderItemGroupQueryDataDTO('returnTotalAmount');
  static const total = FTypeOrderItemGroupQueryDataDTO('total');
  static const totalAmount = FTypeOrderItemGroupQueryDataDTO('totalAmount');
  static const totalBasicAmount = FTypeOrderItemGroupQueryDataDTO('totalBasicAmount');
  static const totalUnitConvertAmount = FTypeOrderItemGroupQueryDataDTO('totalUnitConvertAmount');
  static const unitConvertDesc = FTypeOrderItemGroupQueryDataDTO('unitConvertDesc');
  static const unitId = FTypeOrderItemGroupQueryDataDTO('unitId');
  static const unitName = FTypeOrderItemGroupQueryDataDTO('unitName');
  const FTypeOrderItemGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemGroupQueryDataDTO> _TypeOrderItemGroupQueryDataDTO_fields = {
  "averageCostPricePerAmount": (
    getter: (data) => data._averageCostPricePerAmount,
    setter: (data, value) => data._averageCostPricePerAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._averageCostPricePerAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._averageCostPricePerAmount = parser(value);
    }
  ),
  "averagePricePerAmount": (
    getter: (data) => data._averagePricePerAmount,
    setter: (data, value) => data._averagePricePerAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._averagePricePerAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._averagePricePerAmount = parser(value);
    }
  ),
  "averageTotalPerContact": (
    getter: (data) => data._averageTotalPerContact,
    setter: (data, value) => data._averageTotalPerContact = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._averageTotalPerContact);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._averageTotalPerContact = parser(value);
    }
  ),
  "averageTotalPerOrder": (
    getter: (data) => data._averageTotalPerOrder,
    setter: (data, value) => data._averageTotalPerOrder = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._averageTotalPerOrder);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._averageTotalPerOrder = parser(value);
    }
  ),
  "beginOrderDate": (
    getter: (data) => data._beginOrderDate,
    setter: (data, value) => data._beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginOrderDate = parser(value);
    }
  ),
  "contactCount": (
    getter: (data) => data._contactCount,
    setter: (data, value) => data._contactCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactCount = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "endOrderDate": (
    getter: (data) => data._endOrderDate,
    setter: (data, value) => data._endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endOrderDate = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "normalTotalAmount": (
    getter: (data) => data._normalTotalAmount,
    setter: (data, value) => data._normalTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._normalTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._normalTotalAmount = parser(value);
    }
  ),
  "orderCount": (
    getter: (data) => data._orderCount,
    setter: (data, value) => data._orderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderCount = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "returnRate": (
    getter: (data) => data._returnRate,
    setter: (data, value) => data._returnRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._returnRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._returnRate = parser(value);
    }
  ),
  "returnTotalAmount": (
    getter: (data) => data._returnTotalAmount,
    setter: (data, value) => data._returnTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._returnTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._returnTotalAmount = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "totalAmount": (
    getter: (data) => data._totalAmount,
    setter: (data, value) => data._totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalAmount = parser(value);
    }
  ),
  "totalBasicAmount": (
    getter: (data) => data._totalBasicAmount,
    setter: (data, value) => data._totalBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalBasicAmount = parser(value);
    }
  ),
  "totalUnitConvertAmount": (
    getter: (data) => data._totalUnitConvertAmount,
    setter: (data, value) => data._totalUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalUnitConvertAmount = parser(value);
    }
  ),
  "unitConvertDesc": (
    getter: (data) => data._unitConvertDesc,
    setter: (data, value) => data._unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertDesc = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitName": (
    getter: (data) => data._unitName,
    setter: (data, value) => data._unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitName = parser(value);
    }
  ),
};

class TypeOrderItemGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemGroupQueryDataDTO({
    String? averageCostPricePerAmount,
    String? averagePricePerAmount,
    String? averageTotalPerContact,
    String? averageTotalPerOrder,
    String? beginOrderDate,
    int? contactCount,
    int? contactId,
    String? costTotal,
    int? count,
    String? discountTotal,
    String? endOrderDate,
    String? id,
    int? itemId,
    String? itemModelRemark,
    String? itemSpecsRemark,
    int? manageEmployeeId,
    String? name,
    String? normalTotalAmount,
    int? orderCount,
    String? preTaxTotal,
    String? profitRate,
    String? profitTotal,
    String? returnRate,
    String? returnTotalAmount,
    String? total,
    String? totalAmount,
    String? totalBasicAmount,
    String? totalUnitConvertAmount,
    String? unitConvertDesc,
    int? unitId,
    String? unitName
  }):
    _averageCostPricePerAmount = averageCostPricePerAmount,
    _averagePricePerAmount = averagePricePerAmount,
    _averageTotalPerContact = averageTotalPerContact,
    _averageTotalPerOrder = averageTotalPerOrder,
    _beginOrderDate = beginOrderDate,
    _contactCount = contactCount,
    _contactId = contactId,
    _costTotal = costTotal,
    _count = count,
    _discountTotal = discountTotal,
    _endOrderDate = endOrderDate,
    _id = id,
    _itemId = itemId,
    _itemModelRemark = itemModelRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _manageEmployeeId = manageEmployeeId,
    _name = name,
    _normalTotalAmount = normalTotalAmount,
    _orderCount = orderCount,
    _preTaxTotal = preTaxTotal,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _returnRate = returnRate,
    _returnTotalAmount = returnTotalAmount,
    _total = total,
    _totalAmount = totalAmount,
    _totalBasicAmount = totalBasicAmount,
    _totalUnitConvertAmount = totalUnitConvertAmount,
    _unitConvertDesc = unitConvertDesc,
    _unitId = unitId,
    _unitName = unitName;

  static TypeOrderItemGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _averageCostPricePerAmount;

  String get averageCostPricePerAmount{
    return _averageCostPricePerAmount!;
  }

  String? getAverageCostPricePerAmount(){
    return _averageCostPricePerAmount;
  }

  set averageCostPricePerAmount(String data){
    _averageCostPricePerAmount = data;
  }

  void setAverageCostPricePerAmount(String? data){
    _averageCostPricePerAmount = data;
  }

  String? _averagePricePerAmount;

  String get averagePricePerAmount{
    return _averagePricePerAmount!;
  }

  String? getAveragePricePerAmount(){
    return _averagePricePerAmount;
  }

  set averagePricePerAmount(String data){
    _averagePricePerAmount = data;
  }

  void setAveragePricePerAmount(String? data){
    _averagePricePerAmount = data;
  }

  String? _averageTotalPerContact;

  String get averageTotalPerContact{
    return _averageTotalPerContact!;
  }

  String? getAverageTotalPerContact(){
    return _averageTotalPerContact;
  }

  set averageTotalPerContact(String data){
    _averageTotalPerContact = data;
  }

  void setAverageTotalPerContact(String? data){
    _averageTotalPerContact = data;
  }

  String? _averageTotalPerOrder;

  String get averageTotalPerOrder{
    return _averageTotalPerOrder!;
  }

  String? getAverageTotalPerOrder(){
    return _averageTotalPerOrder;
  }

  set averageTotalPerOrder(String data){
    _averageTotalPerOrder = data;
  }

  void setAverageTotalPerOrder(String? data){
    _averageTotalPerOrder = data;
  }

  String? _beginOrderDate;

  String get beginOrderDate{
    return _beginOrderDate!;
  }

  String? getBeginOrderDate(){
    return _beginOrderDate;
  }

  set beginOrderDate(String data){
    _beginOrderDate = data;
  }

  void setBeginOrderDate(String? data){
    _beginOrderDate = data;
  }

  int? _contactCount;

  int get contactCount{
    return _contactCount!;
  }

  int? getContactCount(){
    return _contactCount;
  }

  set contactCount(int data){
    _contactCount = data;
  }

  void setContactCount(int? data){
    _contactCount = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _endOrderDate;

  String get endOrderDate{
    return _endOrderDate!;
  }

  String? getEndOrderDate(){
    return _endOrderDate;
  }

  set endOrderDate(String data){
    _endOrderDate = data;
  }

  void setEndOrderDate(String? data){
    _endOrderDate = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _normalTotalAmount;

  String get normalTotalAmount{
    return _normalTotalAmount!;
  }

  String? getNormalTotalAmount(){
    return _normalTotalAmount;
  }

  set normalTotalAmount(String data){
    _normalTotalAmount = data;
  }

  void setNormalTotalAmount(String? data){
    _normalTotalAmount = data;
  }

  int? _orderCount;

  int get orderCount{
    return _orderCount!;
  }

  int? getOrderCount(){
    return _orderCount;
  }

  set orderCount(int data){
    _orderCount = data;
  }

  void setOrderCount(int? data){
    _orderCount = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  String? _returnRate;

  String get returnRate{
    return _returnRate!;
  }

  String? getReturnRate(){
    return _returnRate;
  }

  set returnRate(String data){
    _returnRate = data;
  }

  void setReturnRate(String? data){
    _returnRate = data;
  }

  String? _returnTotalAmount;

  String get returnTotalAmount{
    return _returnTotalAmount!;
  }

  String? getReturnTotalAmount(){
    return _returnTotalAmount;
  }

  set returnTotalAmount(String data){
    _returnTotalAmount = data;
  }

  void setReturnTotalAmount(String? data){
    _returnTotalAmount = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _totalAmount;

  String get totalAmount{
    return _totalAmount!;
  }

  String? getTotalAmount(){
    return _totalAmount;
  }

  set totalAmount(String data){
    _totalAmount = data;
  }

  void setTotalAmount(String? data){
    _totalAmount = data;
  }

  String? _totalBasicAmount;

  String get totalBasicAmount{
    return _totalBasicAmount!;
  }

  String? getTotalBasicAmount(){
    return _totalBasicAmount;
  }

  set totalBasicAmount(String data){
    _totalBasicAmount = data;
  }

  void setTotalBasicAmount(String? data){
    _totalBasicAmount = data;
  }

  String? _totalUnitConvertAmount;

  String get totalUnitConvertAmount{
    return _totalUnitConvertAmount!;
  }

  String? getTotalUnitConvertAmount(){
    return _totalUnitConvertAmount;
  }

  set totalUnitConvertAmount(String data){
    _totalUnitConvertAmount = data;
  }

  void setTotalUnitConvertAmount(String? data){
    _totalUnitConvertAmount = data;
  }

  String? _unitConvertDesc;

  String get unitConvertDesc{
    return _unitConvertDesc!;
  }

  String? getUnitConvertDesc(){
    return _unitConvertDesc;
  }

  set unitConvertDesc(String data){
    _unitConvertDesc = data;
  }

  void setUnitConvertDesc(String? data){
    _unitConvertDesc = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  String? _unitName;

  String get unitName{
    return _unitName!;
  }

  String? getUnitName(){
    return _unitName;
  }

  set unitName(String data){
    _unitName = data;
  }

  void setUnitName(String? data){
    _unitName = data;
  }

}

class FTypeOrderItemQueryDTO extends IDataField {
  static const data = FTypeOrderItemQueryDTO('data');
  static const pageIndex = FTypeOrderItemQueryDTO('pageIndex');
  static const pageSize = FTypeOrderItemQueryDTO('pageSize');
  static const sum = FTypeOrderItemQueryDTO('sum');
  const FTypeOrderItemQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQueryDTO> _TypeOrderItemQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderItemQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemQueryDataDTO>((single){
        final handler = TypeOrderItemQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemQueryDataDTO>((single){
        final handler = TypeOrderItemQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderItemQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderItemQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderItemQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderItemQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQueryDTO({
    List<TypeOrderItemQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeOrderItemQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderItemQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderItemQueryDataDTO>? _data;

  List<TypeOrderItemQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderItemQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderItemQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderItemQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderItemQuerySumDTO? _sum;

  TypeOrderItemQuerySumDTO get sum{
    return _sum!;
  }

  TypeOrderItemQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderItemQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeOrderItemQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeOrderItemQueryDataDTO extends IDataField {
  static const aliasItemName = FTypeOrderItemQueryDataDTO('aliasItemName');
  static const aliasItemNumber = FTypeOrderItemQueryDataDTO('aliasItemNumber');
  static const amount = FTypeOrderItemQueryDataDTO('amount');
  static const attachmentCount = FTypeOrderItemQueryDataDTO('attachmentCount');
  static const attachmentSize = FTypeOrderItemQueryDataDTO('attachmentSize');
  static const basicAmount = FTypeOrderItemQueryDataDTO('basicAmount');
  static const commonAmount = FTypeOrderItemQueryDataDTO('commonAmount');
  static const commonUnitName = FTypeOrderItemQueryDataDTO('commonUnitName');
  static const costPrice = FTypeOrderItemQueryDataDTO('costPrice');
  static const costTotal = FTypeOrderItemQueryDataDTO('costTotal');
  static const customField1 = FTypeOrderItemQueryDataDTO('customField1');
  static const customField2 = FTypeOrderItemQueryDataDTO('customField2');
  static const customField3 = FTypeOrderItemQueryDataDTO('customField3');
  static const customField4 = FTypeOrderItemQueryDataDTO('customField4');
  static const customField5 = FTypeOrderItemQueryDataDTO('customField5');
  static const customField6 = FTypeOrderItemQueryDataDTO('customField6');
  static const customField7 = FTypeOrderItemQueryDataDTO('customField7');
  static const customField8 = FTypeOrderItemQueryDataDTO('customField8');
  static const discountPrice = FTypeOrderItemQueryDataDTO('discountPrice');
  static const discountTotal = FTypeOrderItemQueryDataDTO('discountTotal');
  static const doneExecuteAmount = FTypeOrderItemQueryDataDTO('doneExecuteAmount');
  static const id = FTypeOrderItemQueryDataDTO('id');
  static const image1 = FTypeOrderItemQueryDataDTO('image1');
  static const itemId = FTypeOrderItemQueryDataDTO('itemId');
  static const itemImageInfo1 = FTypeOrderItemQueryDataDTO('itemImageInfo1');
  static const itemModelRemark = FTypeOrderItemQueryDataDTO('itemModelRemark');
  static const itemName = FTypeOrderItemQueryDataDTO('itemName');
  static const itemNumber = FTypeOrderItemQueryDataDTO('itemNumber');
  static const itemSpecsRemark = FTypeOrderItemQueryDataDTO('itemSpecsRemark');
  static const itemStoreId = FTypeOrderItemQueryDataDTO('itemStoreId');
  static const itemStoreName = FTypeOrderItemQueryDataDTO('itemStoreName');
  static const itemsOrder = FTypeOrderItemQueryDataDTO('itemsOrder');
  static const orderContactId = FTypeOrderItemQueryDataDTO('orderContactId');
  static const orderContactName = FTypeOrderItemQueryDataDTO('orderContactName');
  static const orderCustomField1 = FTypeOrderItemQueryDataDTO('orderCustomField1');
  static const orderCustomField2 = FTypeOrderItemQueryDataDTO('orderCustomField2');
  static const orderCustomField3 = FTypeOrderItemQueryDataDTO('orderCustomField3');
  static const orderCustomField4 = FTypeOrderItemQueryDataDTO('orderCustomField4');
  static const orderCustomField5 = FTypeOrderItemQueryDataDTO('orderCustomField5');
  static const orderCustomField6 = FTypeOrderItemQueryDataDTO('orderCustomField6');
  static const orderCustomField7 = FTypeOrderItemQueryDataDTO('orderCustomField7');
  static const orderCustomField8 = FTypeOrderItemQueryDataDTO('orderCustomField8');
  static const orderDate = FTypeOrderItemQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeOrderItemQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeOrderItemQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeOrderItemQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeOrderItemQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeOrderItemQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeOrderItemQueryDataDTO('orderEntryAccountTime');
  static const orderHasStockExecute = FTypeOrderItemQueryDataDTO('orderHasStockExecute');
  static const orderId = FTypeOrderItemQueryDataDTO('orderId');
  static const orderInStoreId = FTypeOrderItemQueryDataDTO('orderInStoreId');
  static const orderInStoreName = FTypeOrderItemQueryDataDTO('orderInStoreName');
  static const orderManageEmployeeId = FTypeOrderItemQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeOrderItemQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeOrderItemQueryDataDTO('orderNumber');
  static const orderOutStoreId = FTypeOrderItemQueryDataDTO('orderOutStoreId');
  static const orderOutStoreName = FTypeOrderItemQueryDataDTO('orderOutStoreName');
  static const orderRedState = FTypeOrderItemQueryDataDTO('orderRedState');
  static const orderRemark = FTypeOrderItemQueryDataDTO('orderRemark');
  static const orderState = FTypeOrderItemQueryDataDTO('orderState');
  static const orderSummaryRemark = FTypeOrderItemQueryDataDTO('orderSummaryRemark');
  static const orderTotal = FTypeOrderItemQueryDataDTO('orderTotal');
  static const orderTotalAmount = FTypeOrderItemQueryDataDTO('orderTotalAmount');
  static const orderType = FTypeOrderItemQueryDataDTO('orderType');
  static const orderUndoneExecuteAmount = FTypeOrderItemQueryDataDTO('orderUndoneExecuteAmount');
  static const parentSourceOrderInfo = FTypeOrderItemQueryDataDTO('parentSourceOrderInfo');
  static const preTaxPrice = FTypeOrderItemQueryDataDTO('preTaxPrice');
  static const preTaxTotal = FTypeOrderItemQueryDataDTO('preTaxTotal');
  static const price = FTypeOrderItemQueryDataDTO('price');
  static const profitRate = FTypeOrderItemQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderItemQueryDataDTO('profitTotal');
  static const remark = FTypeOrderItemQueryDataDTO('remark');
  static const stockLocation = FTypeOrderItemQueryDataDTO('stockLocation');
  static const tax = FTypeOrderItemQueryDataDTO('tax');
  static const total = FTypeOrderItemQueryDataDTO('total');
  static const undoneExecuteAmount = FTypeOrderItemQueryDataDTO('undoneExecuteAmount');
  static const unitConvertAmount = FTypeOrderItemQueryDataDTO('unitConvertAmount');
  static const unitConvertDesc = FTypeOrderItemQueryDataDTO('unitConvertDesc');
  static const unitId = FTypeOrderItemQueryDataDTO('unitId');
  static const unitName = FTypeOrderItemQueryDataDTO('unitName');
  const FTypeOrderItemQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQueryDataDTO> _TypeOrderItemQueryDataDTO_fields = {
  "aliasItemName": (
    getter: (data) => data._aliasItemName,
    setter: (data, value) => data._aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemName = parser(value);
    }
  ),
  "aliasItemNumber": (
    getter: (data) => data._aliasItemNumber,
    setter: (data, value) => data._aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._aliasItemNumber = parser(value);
    }
  ),
  "amount": (
    getter: (data) => data._amount,
    setter: (data, value) => data._amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._amount = parser(value);
    }
  ),
  "attachmentCount": (
    getter: (data) => data._attachmentCount,
    setter: (data, value) => data._attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentCount = parser(value);
    }
  ),
  "attachmentSize": (
    getter: (data) => data._attachmentSize,
    setter: (data, value) => data._attachmentSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._attachmentSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._attachmentSize = parser(value);
    }
  ),
  "basicAmount": (
    getter: (data) => data._basicAmount,
    setter: (data, value) => data._basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._basicAmount = parser(value);
    }
  ),
  "commonAmount": (
    getter: (data) => data._commonAmount,
    setter: (data, value) => data._commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonAmount = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "costPrice": (
    getter: (data) => data._costPrice,
    setter: (data, value) => data._costPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costPrice = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "customField1": (
    getter: (data) => data._customField1,
    setter: (data, value) => data._customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField1 = parser(value);
    }
  ),
  "customField2": (
    getter: (data) => data._customField2,
    setter: (data, value) => data._customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField2 = parser(value);
    }
  ),
  "customField3": (
    getter: (data) => data._customField3,
    setter: (data, value) => data._customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField3 = parser(value);
    }
  ),
  "customField4": (
    getter: (data) => data._customField4,
    setter: (data, value) => data._customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField4 = parser(value);
    }
  ),
  "customField5": (
    getter: (data) => data._customField5,
    setter: (data, value) => data._customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField5 = parser(value);
    }
  ),
  "customField6": (
    getter: (data) => data._customField6,
    setter: (data, value) => data._customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField6 = parser(value);
    }
  ),
  "customField7": (
    getter: (data) => data._customField7,
    setter: (data, value) => data._customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField7 = parser(value);
    }
  ),
  "customField8": (
    getter: (data) => data._customField8,
    setter: (data, value) => data._customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField8 = parser(value);
    }
  ),
  "discountPrice": (
    getter: (data) => data._discountPrice,
    setter: (data, value) => data._discountPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountPrice = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "image1": (
    getter: (data) => data._image1,
    setter: (data, value) => data._image1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._image1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._image1 = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemImageInfo1": (
    getter: (data) => data._itemImageInfo1,
    setter: (data, value) => data._itemImageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data._itemImageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data._itemImageInfo1 = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemStoreId": (
    getter: (data) => data._itemStoreId,
    setter: (data, value) => data._itemStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemStoreId = parser(value);
    }
  ),
  "itemStoreName": (
    getter: (data) => data._itemStoreName,
    setter: (data, value) => data._itemStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemStoreName = parser(value);
    }
  ),
  "itemsOrder": (
    getter: (data) => data._itemsOrder,
    setter: (data, value) => data._itemsOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemsOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemsOrder = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderCustomField1": (
    getter: (data) => data._orderCustomField1,
    setter: (data, value) => data._orderCustomField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField1 = parser(value);
    }
  ),
  "orderCustomField2": (
    getter: (data) => data._orderCustomField2,
    setter: (data, value) => data._orderCustomField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField2 = parser(value);
    }
  ),
  "orderCustomField3": (
    getter: (data) => data._orderCustomField3,
    setter: (data, value) => data._orderCustomField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField3 = parser(value);
    }
  ),
  "orderCustomField4": (
    getter: (data) => data._orderCustomField4,
    setter: (data, value) => data._orderCustomField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField4 = parser(value);
    }
  ),
  "orderCustomField5": (
    getter: (data) => data._orderCustomField5,
    setter: (data, value) => data._orderCustomField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField5 = parser(value);
    }
  ),
  "orderCustomField6": (
    getter: (data) => data._orderCustomField6,
    setter: (data, value) => data._orderCustomField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField6 = parser(value);
    }
  ),
  "orderCustomField7": (
    getter: (data) => data._orderCustomField7,
    setter: (data, value) => data._orderCustomField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField7 = parser(value);
    }
  ),
  "orderCustomField8": (
    getter: (data) => data._orderCustomField8,
    setter: (data, value) => data._orderCustomField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderCustomField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderCustomField8 = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderHasStockExecute": (
    getter: (data) => data._orderHasStockExecute,
    setter: (data, value) => data._orderHasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderHasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderHasStockExecute = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderInStoreId": (
    getter: (data) => data._orderInStoreId,
    setter: (data, value) => data._orderInStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderInStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderInStoreId = parser(value);
    }
  ),
  "orderInStoreName": (
    getter: (data) => data._orderInStoreName,
    setter: (data, value) => data._orderInStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderInStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderInStoreName = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderOutStoreId": (
    getter: (data) => data._orderOutStoreId,
    setter: (data, value) => data._orderOutStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderOutStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderOutStoreId = parser(value);
    }
  ),
  "orderOutStoreName": (
    getter: (data) => data._orderOutStoreName,
    setter: (data, value) => data._orderOutStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderOutStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderOutStoreName = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderRemark": (
    getter: (data) => data._orderRemark,
    setter: (data, value) => data._orderRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderRemark = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderSummaryRemark": (
    getter: (data) => data._orderSummaryRemark,
    setter: (data, value) => data._orderSummaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSummaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSummaryRemark = parser(value);
    }
  ),
  "orderTotal": (
    getter: (data) => data._orderTotal,
    setter: (data, value) => data._orderTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderTotal = parser(value);
    }
  ),
  "orderTotalAmount": (
    getter: (data) => data._orderTotalAmount,
    setter: (data, value) => data._orderTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderTotalAmount = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "orderUndoneExecuteAmount": (
    getter: (data) => data._orderUndoneExecuteAmount,
    setter: (data, value) => data._orderUndoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderUndoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderUndoneExecuteAmount = parser(value);
    }
  ),
  "parentSourceOrderInfo": (
    getter: (data) => data._parentSourceOrderInfo,
    setter: (data, value) => data._parentSourceOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._parentSourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._parentSourceOrderInfo = parser(value);
    }
  ),
  "preTaxPrice": (
    getter: (data) => data._preTaxPrice,
    setter: (data, value) => data._preTaxPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxPrice = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "stockLocation": (
    getter: (data) => data._stockLocation,
    setter: (data, value) => data._stockLocation = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockLocation);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockLocation = parser(value);
    }
  ),
  "tax": (
    getter: (data) => data._tax,
    setter: (data, value) => data._tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._tax = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
  "unitConvertAmount": (
    getter: (data) => data._unitConvertAmount,
    setter: (data, value) => data._unitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertAmount = parser(value);
    }
  ),
  "unitConvertDesc": (
    getter: (data) => data._unitConvertDesc,
    setter: (data, value) => data._unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitConvertDesc = parser(value);
    }
  ),
  "unitId": (
    getter: (data) => data._unitId,
    setter: (data, value) => data._unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._unitId = parser(value);
    }
  ),
  "unitName": (
    getter: (data) => data._unitName,
    setter: (data, value) => data._unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._unitName = parser(value);
    }
  ),
};

class TypeOrderItemQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQueryDataDTO({
    String? aliasItemName,
    String? aliasItemNumber,
    String? amount,
    int? attachmentCount,
    int? attachmentSize,
    String? basicAmount,
    String? commonAmount,
    String? commonUnitName,
    String? costPrice,
    String? costTotal,
    String? customField1,
    String? customField2,
    String? customField3,
    String? customField4,
    String? customField5,
    String? customField6,
    String? customField7,
    String? customField8,
    String? discountPrice,
    String? discountTotal,
    String? doneExecuteAmount,
    int? id,
    String? image1,
    int? itemId,
    TypeImageInfo? itemImageInfo1,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    String? itemSpecsRemark,
    int? itemStoreId,
    String? itemStoreName,
    int? itemsOrder,
    int? orderContactId,
    String? orderContactName,
    String? orderCustomField1,
    String? orderCustomField2,
    String? orderCustomField3,
    String? orderCustomField4,
    String? orderCustomField5,
    String? orderCustomField6,
    String? orderCustomField7,
    String? orderCustomField8,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderHasStockExecute,
    int? orderId,
    int? orderInStoreId,
    String? orderInStoreName,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    int? orderOutStoreId,
    String? orderOutStoreName,
    TypeEnumOrderRedState? orderRedState,
    String? orderRemark,
    TypeEnumOrderState? orderState,
    String? orderSummaryRemark,
    String? orderTotal,
    String? orderTotalAmount,
    TypeEnumOrderType? orderType,
    String? orderUndoneExecuteAmount,
    String? parentSourceOrderInfo,
    String? preTaxPrice,
    String? preTaxTotal,
    String? price,
    String? profitRate,
    String? profitTotal,
    String? remark,
    String? stockLocation,
    String? tax,
    String? total,
    String? undoneExecuteAmount,
    String? unitConvertAmount,
    String? unitConvertDesc,
    int? unitId,
    String? unitName
  }):
    _aliasItemName = aliasItemName,
    _aliasItemNumber = aliasItemNumber,
    _amount = amount,
    _attachmentCount = attachmentCount,
    _attachmentSize = attachmentSize,
    _basicAmount = basicAmount,
    _commonAmount = commonAmount,
    _commonUnitName = commonUnitName,
    _costPrice = costPrice,
    _costTotal = costTotal,
    _customField1 = customField1,
    _customField2 = customField2,
    _customField3 = customField3,
    _customField4 = customField4,
    _customField5 = customField5,
    _customField6 = customField6,
    _customField7 = customField7,
    _customField8 = customField8,
    _discountPrice = discountPrice,
    _discountTotal = discountTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _id = id,
    _image1 = image1,
    _itemId = itemId,
    _itemImageInfo1 = itemImageInfo1,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemSpecsRemark = itemSpecsRemark,
    _itemStoreId = itemStoreId,
    _itemStoreName = itemStoreName,
    _itemsOrder = itemsOrder,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderCustomField1 = orderCustomField1,
    _orderCustomField2 = orderCustomField2,
    _orderCustomField3 = orderCustomField3,
    _orderCustomField4 = orderCustomField4,
    _orderCustomField5 = orderCustomField5,
    _orderCustomField6 = orderCustomField6,
    _orderCustomField7 = orderCustomField7,
    _orderCustomField8 = orderCustomField8,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderHasStockExecute = orderHasStockExecute,
    _orderId = orderId,
    _orderInStoreId = orderInStoreId,
    _orderInStoreName = orderInStoreName,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderOutStoreId = orderOutStoreId,
    _orderOutStoreName = orderOutStoreName,
    _orderRedState = orderRedState,
    _orderRemark = orderRemark,
    _orderState = orderState,
    _orderSummaryRemark = orderSummaryRemark,
    _orderTotal = orderTotal,
    _orderTotalAmount = orderTotalAmount,
    _orderType = orderType,
    _orderUndoneExecuteAmount = orderUndoneExecuteAmount,
    _parentSourceOrderInfo = parentSourceOrderInfo,
    _preTaxPrice = preTaxPrice,
    _preTaxTotal = preTaxTotal,
    _price = price,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _remark = remark,
    _stockLocation = stockLocation,
    _tax = tax,
    _total = total,
    _undoneExecuteAmount = undoneExecuteAmount,
    _unitConvertAmount = unitConvertAmount,
    _unitConvertDesc = unitConvertDesc,
    _unitId = unitId,
    _unitName = unitName;

  static TypeOrderItemQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _aliasItemName;

  String get aliasItemName{
    return _aliasItemName!;
  }

  String? getAliasItemName(){
    return _aliasItemName;
  }

  set aliasItemName(String data){
    _aliasItemName = data;
  }

  void setAliasItemName(String? data){
    _aliasItemName = data;
  }

  String? _aliasItemNumber;

  String get aliasItemNumber{
    return _aliasItemNumber!;
  }

  String? getAliasItemNumber(){
    return _aliasItemNumber;
  }

  set aliasItemNumber(String data){
    _aliasItemNumber = data;
  }

  void setAliasItemNumber(String? data){
    _aliasItemNumber = data;
  }

  String? _amount;

  String get amount{
    return _amount!;
  }

  String? getAmount(){
    return _amount;
  }

  set amount(String data){
    _amount = data;
  }

  void setAmount(String? data){
    _amount = data;
  }

  int? _attachmentCount;

  int get attachmentCount{
    return _attachmentCount!;
  }

  int? getAttachmentCount(){
    return _attachmentCount;
  }

  set attachmentCount(int data){
    _attachmentCount = data;
  }

  void setAttachmentCount(int? data){
    _attachmentCount = data;
  }

  int? _attachmentSize;

  int get attachmentSize{
    return _attachmentSize!;
  }

  int? getAttachmentSize(){
    return _attachmentSize;
  }

  set attachmentSize(int data){
    _attachmentSize = data;
  }

  void setAttachmentSize(int? data){
    _attachmentSize = data;
  }

  String? _basicAmount;

  String get basicAmount{
    return _basicAmount!;
  }

  String? getBasicAmount(){
    return _basicAmount;
  }

  set basicAmount(String data){
    _basicAmount = data;
  }

  void setBasicAmount(String? data){
    _basicAmount = data;
  }

  String? _commonAmount;

  String get commonAmount{
    return _commonAmount!;
  }

  String? getCommonAmount(){
    return _commonAmount;
  }

  set commonAmount(String data){
    _commonAmount = data;
  }

  void setCommonAmount(String? data){
    _commonAmount = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  String? _costPrice;

  String get costPrice{
    return _costPrice!;
  }

  String? getCostPrice(){
    return _costPrice;
  }

  set costPrice(String data){
    _costPrice = data;
  }

  void setCostPrice(String? data){
    _costPrice = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  String? _customField1;

  String get customField1{
    return _customField1!;
  }

  String? getCustomField1(){
    return _customField1;
  }

  set customField1(String data){
    _customField1 = data;
  }

  void setCustomField1(String? data){
    _customField1 = data;
  }

  String? _customField2;

  String get customField2{
    return _customField2!;
  }

  String? getCustomField2(){
    return _customField2;
  }

  set customField2(String data){
    _customField2 = data;
  }

  void setCustomField2(String? data){
    _customField2 = data;
  }

  String? _customField3;

  String get customField3{
    return _customField3!;
  }

  String? getCustomField3(){
    return _customField3;
  }

  set customField3(String data){
    _customField3 = data;
  }

  void setCustomField3(String? data){
    _customField3 = data;
  }

  String? _customField4;

  String get customField4{
    return _customField4!;
  }

  String? getCustomField4(){
    return _customField4;
  }

  set customField4(String data){
    _customField4 = data;
  }

  void setCustomField4(String? data){
    _customField4 = data;
  }

  String? _customField5;

  String get customField5{
    return _customField5!;
  }

  String? getCustomField5(){
    return _customField5;
  }

  set customField5(String data){
    _customField5 = data;
  }

  void setCustomField5(String? data){
    _customField5 = data;
  }

  String? _customField6;

  String get customField6{
    return _customField6!;
  }

  String? getCustomField6(){
    return _customField6;
  }

  set customField6(String data){
    _customField6 = data;
  }

  void setCustomField6(String? data){
    _customField6 = data;
  }

  String? _customField7;

  String get customField7{
    return _customField7!;
  }

  String? getCustomField7(){
    return _customField7;
  }

  set customField7(String data){
    _customField7 = data;
  }

  void setCustomField7(String? data){
    _customField7 = data;
  }

  String? _customField8;

  String get customField8{
    return _customField8!;
  }

  String? getCustomField8(){
    return _customField8;
  }

  set customField8(String data){
    _customField8 = data;
  }

  void setCustomField8(String? data){
    _customField8 = data;
  }

  String? _discountPrice;

  String get discountPrice{
    return _discountPrice!;
  }

  String? getDiscountPrice(){
    return _discountPrice;
  }

  set discountPrice(String data){
    _discountPrice = data;
  }

  void setDiscountPrice(String? data){
    _discountPrice = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _image1;

  String get image1{
    return _image1!;
  }

  String? getImage1(){
    return _image1;
  }

  set image1(String data){
    _image1 = data;
  }

  void setImage1(String? data){
    _image1 = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  TypeImageInfo? _itemImageInfo1;

  TypeImageInfo get itemImageInfo1{
    return _itemImageInfo1!;
  }

  TypeImageInfo? getItemImageInfo1(){
    return _itemImageInfo1;
  }

  set itemImageInfo1(TypeImageInfo data){
    _itemImageInfo1 = data;
  }

  void setItemImageInfo1(TypeImageInfo? data){
    _itemImageInfo1 = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  int? _itemStoreId;

  int get itemStoreId{
    return _itemStoreId!;
  }

  int? getItemStoreId(){
    return _itemStoreId;
  }

  set itemStoreId(int data){
    _itemStoreId = data;
  }

  void setItemStoreId(int? data){
    _itemStoreId = data;
  }

  String? _itemStoreName;

  String get itemStoreName{
    return _itemStoreName!;
  }

  String? getItemStoreName(){
    return _itemStoreName;
  }

  set itemStoreName(String data){
    _itemStoreName = data;
  }

  void setItemStoreName(String? data){
    _itemStoreName = data;
  }

  int? _itemsOrder;

  int get itemsOrder{
    return _itemsOrder!;
  }

  int? getItemsOrder(){
    return _itemsOrder;
  }

  set itemsOrder(int data){
    _itemsOrder = data;
  }

  void setItemsOrder(int? data){
    _itemsOrder = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderCustomField1;

  String get orderCustomField1{
    return _orderCustomField1!;
  }

  String? getOrderCustomField1(){
    return _orderCustomField1;
  }

  set orderCustomField1(String data){
    _orderCustomField1 = data;
  }

  void setOrderCustomField1(String? data){
    _orderCustomField1 = data;
  }

  String? _orderCustomField2;

  String get orderCustomField2{
    return _orderCustomField2!;
  }

  String? getOrderCustomField2(){
    return _orderCustomField2;
  }

  set orderCustomField2(String data){
    _orderCustomField2 = data;
  }

  void setOrderCustomField2(String? data){
    _orderCustomField2 = data;
  }

  String? _orderCustomField3;

  String get orderCustomField3{
    return _orderCustomField3!;
  }

  String? getOrderCustomField3(){
    return _orderCustomField3;
  }

  set orderCustomField3(String data){
    _orderCustomField3 = data;
  }

  void setOrderCustomField3(String? data){
    _orderCustomField3 = data;
  }

  String? _orderCustomField4;

  String get orderCustomField4{
    return _orderCustomField4!;
  }

  String? getOrderCustomField4(){
    return _orderCustomField4;
  }

  set orderCustomField4(String data){
    _orderCustomField4 = data;
  }

  void setOrderCustomField4(String? data){
    _orderCustomField4 = data;
  }

  String? _orderCustomField5;

  String get orderCustomField5{
    return _orderCustomField5!;
  }

  String? getOrderCustomField5(){
    return _orderCustomField5;
  }

  set orderCustomField5(String data){
    _orderCustomField5 = data;
  }

  void setOrderCustomField5(String? data){
    _orderCustomField5 = data;
  }

  String? _orderCustomField6;

  String get orderCustomField6{
    return _orderCustomField6!;
  }

  String? getOrderCustomField6(){
    return _orderCustomField6;
  }

  set orderCustomField6(String data){
    _orderCustomField6 = data;
  }

  void setOrderCustomField6(String? data){
    _orderCustomField6 = data;
  }

  String? _orderCustomField7;

  String get orderCustomField7{
    return _orderCustomField7!;
  }

  String? getOrderCustomField7(){
    return _orderCustomField7;
  }

  set orderCustomField7(String data){
    _orderCustomField7 = data;
  }

  void setOrderCustomField7(String? data){
    _orderCustomField7 = data;
  }

  String? _orderCustomField8;

  String get orderCustomField8{
    return _orderCustomField8!;
  }

  String? getOrderCustomField8(){
    return _orderCustomField8;
  }

  set orderCustomField8(String data){
    _orderCustomField8 = data;
  }

  void setOrderCustomField8(String? data){
    _orderCustomField8 = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderHasStockExecute;

  int get orderHasStockExecute{
    return _orderHasStockExecute!;
  }

  int? getOrderHasStockExecute(){
    return _orderHasStockExecute;
  }

  set orderHasStockExecute(int data){
    _orderHasStockExecute = data;
  }

  void setOrderHasStockExecute(int? data){
    _orderHasStockExecute = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderInStoreId;

  int get orderInStoreId{
    return _orderInStoreId!;
  }

  int? getOrderInStoreId(){
    return _orderInStoreId;
  }

  set orderInStoreId(int data){
    _orderInStoreId = data;
  }

  void setOrderInStoreId(int? data){
    _orderInStoreId = data;
  }

  String? _orderInStoreName;

  String get orderInStoreName{
    return _orderInStoreName!;
  }

  String? getOrderInStoreName(){
    return _orderInStoreName;
  }

  set orderInStoreName(String data){
    _orderInStoreName = data;
  }

  void setOrderInStoreName(String? data){
    _orderInStoreName = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  int? _orderOutStoreId;

  int get orderOutStoreId{
    return _orderOutStoreId!;
  }

  int? getOrderOutStoreId(){
    return _orderOutStoreId;
  }

  set orderOutStoreId(int data){
    _orderOutStoreId = data;
  }

  void setOrderOutStoreId(int? data){
    _orderOutStoreId = data;
  }

  String? _orderOutStoreName;

  String get orderOutStoreName{
    return _orderOutStoreName!;
  }

  String? getOrderOutStoreName(){
    return _orderOutStoreName;
  }

  set orderOutStoreName(String data){
    _orderOutStoreName = data;
  }

  void setOrderOutStoreName(String? data){
    _orderOutStoreName = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  String? _orderRemark;

  String get orderRemark{
    return _orderRemark!;
  }

  String? getOrderRemark(){
    return _orderRemark;
  }

  set orderRemark(String data){
    _orderRemark = data;
  }

  void setOrderRemark(String? data){
    _orderRemark = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  String? _orderSummaryRemark;

  String get orderSummaryRemark{
    return _orderSummaryRemark!;
  }

  String? getOrderSummaryRemark(){
    return _orderSummaryRemark;
  }

  set orderSummaryRemark(String data){
    _orderSummaryRemark = data;
  }

  void setOrderSummaryRemark(String? data){
    _orderSummaryRemark = data;
  }

  String? _orderTotal;

  String get orderTotal{
    return _orderTotal!;
  }

  String? getOrderTotal(){
    return _orderTotal;
  }

  set orderTotal(String data){
    _orderTotal = data;
  }

  void setOrderTotal(String? data){
    _orderTotal = data;
  }

  String? _orderTotalAmount;

  String get orderTotalAmount{
    return _orderTotalAmount!;
  }

  String? getOrderTotalAmount(){
    return _orderTotalAmount;
  }

  set orderTotalAmount(String data){
    _orderTotalAmount = data;
  }

  void setOrderTotalAmount(String? data){
    _orderTotalAmount = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _orderUndoneExecuteAmount;

  String get orderUndoneExecuteAmount{
    return _orderUndoneExecuteAmount!;
  }

  String? getOrderUndoneExecuteAmount(){
    return _orderUndoneExecuteAmount;
  }

  set orderUndoneExecuteAmount(String data){
    _orderUndoneExecuteAmount = data;
  }

  void setOrderUndoneExecuteAmount(String? data){
    _orderUndoneExecuteAmount = data;
  }

  String? _parentSourceOrderInfo;

  String get parentSourceOrderInfo{
    return _parentSourceOrderInfo!;
  }

  String? getParentSourceOrderInfo(){
    return _parentSourceOrderInfo;
  }

  set parentSourceOrderInfo(String data){
    _parentSourceOrderInfo = data;
  }

  void setParentSourceOrderInfo(String? data){
    _parentSourceOrderInfo = data;
  }

  String? _preTaxPrice;

  String get preTaxPrice{
    return _preTaxPrice!;
  }

  String? getPreTaxPrice(){
    return _preTaxPrice;
  }

  set preTaxPrice(String data){
    _preTaxPrice = data;
  }

  void setPreTaxPrice(String? data){
    _preTaxPrice = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _stockLocation;

  String get stockLocation{
    return _stockLocation!;
  }

  String? getStockLocation(){
    return _stockLocation;
  }

  set stockLocation(String data){
    _stockLocation = data;
  }

  void setStockLocation(String? data){
    _stockLocation = data;
  }

  String? _tax;

  String get tax{
    return _tax!;
  }

  String? getTax(){
    return _tax;
  }

  set tax(String data){
    _tax = data;
  }

  void setTax(String? data){
    _tax = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

  String? _unitConvertAmount;

  String get unitConvertAmount{
    return _unitConvertAmount!;
  }

  String? getUnitConvertAmount(){
    return _unitConvertAmount;
  }

  set unitConvertAmount(String data){
    _unitConvertAmount = data;
  }

  void setUnitConvertAmount(String? data){
    _unitConvertAmount = data;
  }

  String? _unitConvertDesc;

  String get unitConvertDesc{
    return _unitConvertDesc!;
  }

  String? getUnitConvertDesc(){
    return _unitConvertDesc;
  }

  set unitConvertDesc(String data){
    _unitConvertDesc = data;
  }

  void setUnitConvertDesc(String? data){
    _unitConvertDesc = data;
  }

  int? _unitId;

  int get unitId{
    return _unitId!;
  }

  int? getUnitId(){
    return _unitId;
  }

  set unitId(int data){
    _unitId = data;
  }

  void setUnitId(int? data){
    _unitId = data;
  }

  String? _unitName;

  String get unitName{
    return _unitName!;
  }

  String? getUnitName(){
    return _unitName;
  }

  set unitName(String data){
    _unitName = data;
  }

  void setUnitName(String? data){
    _unitName = data;
  }

}

class FTypeOrderItemQuerySumDTO extends IDataField {
  static const amount = FTypeOrderItemQuerySumDTO('amount');
  static const commonAmount = FTypeOrderItemQuerySumDTO('commonAmount');
  static const costTotal = FTypeOrderItemQuerySumDTO('costTotal');
  static const count = FTypeOrderItemQuerySumDTO('count');
  static const discountTotal = FTypeOrderItemQuerySumDTO('discountTotal');
  static const doneExecuteAmount = FTypeOrderItemQuerySumDTO('doneExecuteAmount');
  static const draftOrderCount = FTypeOrderItemQuerySumDTO('draftOrderCount');
  static const feeTotal = FTypeOrderItemQuerySumDTO('feeTotal');
  static const normalOrderCount = FTypeOrderItemQuerySumDTO('normalOrderCount');
  static const orderCount = FTypeOrderItemQuerySumDTO('orderCount');
  static const preTaxTotal = FTypeOrderItemQuerySumDTO('preTaxTotal');
  static const profitRate = FTypeOrderItemQuerySumDTO('profitRate');
  static const profitTotal = FTypeOrderItemQuerySumDTO('profitTotal');
  static const returnOrderCount = FTypeOrderItemQuerySumDTO('returnOrderCount');
  static const total = FTypeOrderItemQuerySumDTO('total');
  static const undoneExecuteAmount = FTypeOrderItemQuerySumDTO('undoneExecuteAmount');
  const FTypeOrderItemQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQuerySumDTO> _TypeOrderItemQuerySumDTO_fields = {
  "amount": (
    getter: (data) => data._amount,
    setter: (data, value) => data._amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._amount = parser(value);
    }
  ),
  "commonAmount": (
    getter: (data) => data._commonAmount,
    setter: (data, value) => data._commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonAmount = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "draftOrderCount": (
    getter: (data) => data._draftOrderCount,
    setter: (data, value) => data._draftOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._draftOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._draftOrderCount = parser(value);
    }
  ),
  "feeTotal": (
    getter: (data) => data._feeTotal,
    setter: (data, value) => data._feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeTotal = parser(value);
    }
  ),
  "normalOrderCount": (
    getter: (data) => data._normalOrderCount,
    setter: (data, value) => data._normalOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._normalOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._normalOrderCount = parser(value);
    }
  ),
  "orderCount": (
    getter: (data) => data._orderCount,
    setter: (data, value) => data._orderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderCount = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "returnOrderCount": (
    getter: (data) => data._returnOrderCount,
    setter: (data, value) => data._returnOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._returnOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._returnOrderCount = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
};

class TypeOrderItemQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQuerySumDTO({
    String? amount,
    String? commonAmount,
    String? costTotal,
    int? count,
    String? discountTotal,
    String? doneExecuteAmount,
    int? draftOrderCount,
    String? feeTotal,
    int? normalOrderCount,
    int? orderCount,
    String? preTaxTotal,
    String? profitRate,
    String? profitTotal,
    int? returnOrderCount,
    String? total,
    String? undoneExecuteAmount
  }):
    _amount = amount,
    _commonAmount = commonAmount,
    _costTotal = costTotal,
    _count = count,
    _discountTotal = discountTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _draftOrderCount = draftOrderCount,
    _feeTotal = feeTotal,
    _normalOrderCount = normalOrderCount,
    _orderCount = orderCount,
    _preTaxTotal = preTaxTotal,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _returnOrderCount = returnOrderCount,
    _total = total,
    _undoneExecuteAmount = undoneExecuteAmount;

  static TypeOrderItemQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _amount;

  String get amount{
    return _amount!;
  }

  String? getAmount(){
    return _amount;
  }

  set amount(String data){
    _amount = data;
  }

  void setAmount(String? data){
    _amount = data;
  }

  String? _commonAmount;

  String get commonAmount{
    return _commonAmount!;
  }

  String? getCommonAmount(){
    return _commonAmount;
  }

  set commonAmount(String data){
    _commonAmount = data;
  }

  void setCommonAmount(String? data){
    _commonAmount = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  int? _draftOrderCount;

  int get draftOrderCount{
    return _draftOrderCount!;
  }

  int? getDraftOrderCount(){
    return _draftOrderCount;
  }

  set draftOrderCount(int data){
    _draftOrderCount = data;
  }

  void setDraftOrderCount(int? data){
    _draftOrderCount = data;
  }

  String? _feeTotal;

  String get feeTotal{
    return _feeTotal!;
  }

  String? getFeeTotal(){
    return _feeTotal;
  }

  set feeTotal(String data){
    _feeTotal = data;
  }

  void setFeeTotal(String? data){
    _feeTotal = data;
  }

  int? _normalOrderCount;

  int get normalOrderCount{
    return _normalOrderCount!;
  }

  int? getNormalOrderCount(){
    return _normalOrderCount;
  }

  set normalOrderCount(int data){
    _normalOrderCount = data;
  }

  void setNormalOrderCount(int? data){
    _normalOrderCount = data;
  }

  int? _orderCount;

  int get orderCount{
    return _orderCount!;
  }

  int? getOrderCount(){
    return _orderCount;
  }

  set orderCount(int data){
    _orderCount = data;
  }

  void setOrderCount(int? data){
    _orderCount = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  int? _returnOrderCount;

  int get returnOrderCount{
    return _returnOrderCount!;
  }

  int? getReturnOrderCount(){
    return _returnOrderCount;
  }

  set returnOrderCount(int data){
    _returnOrderCount = data;
  }

  void setReturnOrderCount(int? data){
    _returnOrderCount = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

}

class FTypeOrderItemRemain extends IDataField {
  static const basicAmount = FTypeOrderItemRemain('basicAmount');
  static const costTotal = FTypeOrderItemRemain('costTotal');
  static const stockRemainId = FTypeOrderItemRemain('stockRemainId');
  static const stockRemainType = FTypeOrderItemRemain('stockRemainType');
  const FTypeOrderItemRemain(super.key);
}

final FieldReflectInfo<TypeOrderItemRemain> _TypeOrderItemRemain_fields = {
  "basicAmount": (
    getter: (data) => data._basicAmount,
    setter: (data, value) => data._basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._basicAmount = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "stockRemainId": (
    getter: (data) => data._stockRemainId,
    setter: (data, value) => data._stockRemainId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._stockRemainId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._stockRemainId = parser(value);
    }
  ),
  "stockRemainType": (
    getter: (data) => data._stockRemainType,
    setter: (data, value) => data._stockRemainType = value as TypeEnumOrderOrderItemStockRemainType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderOrderItemStockRemainType.toDynamic;
      return formatter(data._stockRemainType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderOrderItemStockRemainType.fromDynamic;
      data._stockRemainType = parser(value);
    }
  ),
};

class TypeOrderItemRemain extends IDataBasic implements IDataDynamic {
  TypeOrderItemRemain({
    String? basicAmount,
    String? costTotal,
    int? stockRemainId,
    TypeEnumOrderOrderItemStockRemainType? stockRemainType
  }):
    _basicAmount = basicAmount,
    _costTotal = costTotal,
    _stockRemainId = stockRemainId,
    _stockRemainType = stockRemainType;

  static TypeOrderItemRemain? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemRemain();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemRemain_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemRemain: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemRemain? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemRemain_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemRemain_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemRemain_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _basicAmount;

  String get basicAmount{
    return _basicAmount!;
  }

  String? getBasicAmount(){
    return _basicAmount;
  }

  set basicAmount(String data){
    _basicAmount = data;
  }

  void setBasicAmount(String? data){
    _basicAmount = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  int? _stockRemainId;

  int get stockRemainId{
    return _stockRemainId!;
  }

  int? getStockRemainId(){
    return _stockRemainId;
  }

  set stockRemainId(int data){
    _stockRemainId = data;
  }

  void setStockRemainId(int? data){
    _stockRemainId = data;
  }

  TypeEnumOrderOrderItemStockRemainType? _stockRemainType;

  TypeEnumOrderOrderItemStockRemainType get stockRemainType{
    return _stockRemainType!;
  }

  TypeEnumOrderOrderItemStockRemainType? getStockRemainType(){
    return _stockRemainType;
  }

  set stockRemainType(TypeEnumOrderOrderItemStockRemainType data){
    _stockRemainType = data;
  }

  void setStockRemainType(TypeEnumOrderOrderItemStockRemainType? data){
    _stockRemainType = data;
  }

}

class FTypeOrderNumberAndInsertId extends IDataField {
  static const insertUniqueId = FTypeOrderNumberAndInsertId('insertUniqueId');
  static const number = FTypeOrderNumberAndInsertId('number');
  const FTypeOrderNumberAndInsertId(super.key);
}

final FieldReflectInfo<TypeOrderNumberAndInsertId> _TypeOrderNumberAndInsertId_fields = {
  "insertUniqueId": (
    getter: (data) => data._insertUniqueId,
    setter: (data, value) => data._insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._insertUniqueId = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
};

class TypeOrderNumberAndInsertId extends IDataBasic implements IDataDynamic {
  TypeOrderNumberAndInsertId({
    int? insertUniqueId,
    String? number
  }):
    _insertUniqueId = insertUniqueId,
    _number = number;

  static TypeOrderNumberAndInsertId? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderNumberAndInsertId();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderNumberAndInsertId_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderNumberAndInsertId: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderNumberAndInsertId? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderNumberAndInsertId_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderNumberAndInsertId_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderNumberAndInsertId_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _insertUniqueId;

  int get insertUniqueId{
    return _insertUniqueId!;
  }

  int? getInsertUniqueId(){
    return _insertUniqueId;
  }

  set insertUniqueId(int data){
    _insertUniqueId = data;
  }

  void setInsertUniqueId(int? data){
    _insertUniqueId = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

}

class FTypeOrderProfitFlow extends IDataField {
  static const adpChange = FTypeOrderProfitFlow('adpChange');
  static const adrChange = FTypeOrderProfitFlow('adrChange');
  static const apChange = FTypeOrderProfitFlow('apChange');
  static const arChange = FTypeOrderProfitFlow('arChange');
  static const businessOrderId = FTypeOrderProfitFlow('businessOrderId');
  static const cashChange = FTypeOrderProfitFlow('cashChange');
  static const cashCreditChange = FTypeOrderProfitFlow('cashCreditChange');
  static const cashDebitChange = FTypeOrderProfitFlow('cashDebitChange');
  static const contactId = FTypeOrderProfitFlow('contactId');
  static const discount = FTypeOrderProfitFlow('discount');
  static const drawEmployeeId = FTypeOrderProfitFlow('drawEmployeeId');
  static const id = FTypeOrderProfitFlow('id');
  static const manageEmployeeId = FTypeOrderProfitFlow('manageEmployeeId');
  static const netProfit = FTypeOrderProfitFlow('netProfit');
  static const otherExpense = FTypeOrderProfitFlow('otherExpense');
  static const otherIncome = FTypeOrderProfitFlow('otherIncome');
  static const salesCost = FTypeOrderProfitFlow('salesCost');
  static const salesIncome = FTypeOrderProfitFlow('salesIncome');
  static const salesProfit = FTypeOrderProfitFlow('salesProfit');
  static const salesProfitRate = FTypeOrderProfitFlow('salesProfitRate');
  static const spendAdvancePayable = FTypeOrderProfitFlow('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderProfitFlow('spendAdvanceReceivable');
  static const stockChange = FTypeOrderProfitFlow('stockChange');
  static const stockCreditChange = FTypeOrderProfitFlow('stockCreditChange');
  static const stockDebitChange = FTypeOrderProfitFlow('stockDebitChange');
  static const storeId = FTypeOrderProfitFlow('storeId');
  const FTypeOrderProfitFlow(super.key);
}

final FieldReflectInfo<TypeOrderProfitFlow> _TypeOrderProfitFlow_fields = {
  "adpChange": (
    getter: (data) => data._adpChange,
    setter: (data, value) => data._adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adpChange = parser(value);
    }
  ),
  "adrChange": (
    getter: (data) => data._adrChange,
    setter: (data, value) => data._adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._adrChange = parser(value);
    }
  ),
  "apChange": (
    getter: (data) => data._apChange,
    setter: (data, value) => data._apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._apChange = parser(value);
    }
  ),
  "arChange": (
    getter: (data) => data._arChange,
    setter: (data, value) => data._arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._arChange = parser(value);
    }
  ),
  "businessOrderId": (
    getter: (data) => data._businessOrderId,
    setter: (data, value) => data._businessOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._businessOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._businessOrderId = parser(value);
    }
  ),
  "cashChange": (
    getter: (data) => data._cashChange,
    setter: (data, value) => data._cashChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashChange = parser(value);
    }
  ),
  "cashCreditChange": (
    getter: (data) => data._cashCreditChange,
    setter: (data, value) => data._cashCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashCreditChange = parser(value);
    }
  ),
  "cashDebitChange": (
    getter: (data) => data._cashDebitChange,
    setter: (data, value) => data._cashDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._cashDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._cashDebitChange = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "discount": (
    getter: (data) => data._discount,
    setter: (data, value) => data._discount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discount = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "netProfit": (
    getter: (data) => data._netProfit,
    setter: (data, value) => data._netProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._netProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._netProfit = parser(value);
    }
  ),
  "otherExpense": (
    getter: (data) => data._otherExpense,
    setter: (data, value) => data._otherExpense = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._otherExpense);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._otherExpense = parser(value);
    }
  ),
  "otherIncome": (
    getter: (data) => data._otherIncome,
    setter: (data, value) => data._otherIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._otherIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._otherIncome = parser(value);
    }
  ),
  "salesCost": (
    getter: (data) => data._salesCost,
    setter: (data, value) => data._salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesCost = parser(value);
    }
  ),
  "salesIncome": (
    getter: (data) => data._salesIncome,
    setter: (data, value) => data._salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesIncome = parser(value);
    }
  ),
  "salesProfit": (
    getter: (data) => data._salesProfit,
    setter: (data, value) => data._salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesProfit = parser(value);
    }
  ),
  "salesProfitRate": (
    getter: (data) => data._salesProfitRate,
    setter: (data, value) => data._salesProfitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesProfitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesProfitRate = parser(value);
    }
  ),
  "spendAdvancePayable": (
    getter: (data) => data._spendAdvancePayable,
    setter: (data, value) => data._spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvancePayable = parser(value);
    }
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data._spendAdvanceReceivable,
    setter: (data, value) => data._spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvanceReceivable = parser(value);
    }
  ),
  "stockChange": (
    getter: (data) => data._stockChange,
    setter: (data, value) => data._stockChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockChange = parser(value);
    }
  ),
  "stockCreditChange": (
    getter: (data) => data._stockCreditChange,
    setter: (data, value) => data._stockCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockCreditChange = parser(value);
    }
  ),
  "stockDebitChange": (
    getter: (data) => data._stockDebitChange,
    setter: (data, value) => data._stockDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockDebitChange = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
};

class TypeOrderProfitFlow extends IDataBasic implements IDataDynamic {
  TypeOrderProfitFlow({
    String? adpChange,
    String? adrChange,
    String? apChange,
    String? arChange,
    int? businessOrderId,
    String? cashChange,
    String? cashCreditChange,
    String? cashDebitChange,
    int? contactId,
    String? discount,
    int? drawEmployeeId,
    int? id,
    int? manageEmployeeId,
    String? netProfit,
    String? otherExpense,
    String? otherIncome,
    String? salesCost,
    String? salesIncome,
    String? salesProfit,
    String? salesProfitRate,
    String? spendAdvancePayable,
    String? spendAdvanceReceivable,
    String? stockChange,
    String? stockCreditChange,
    String? stockDebitChange,
    int? storeId
  }):
    _adpChange = adpChange,
    _adrChange = adrChange,
    _apChange = apChange,
    _arChange = arChange,
    _businessOrderId = businessOrderId,
    _cashChange = cashChange,
    _cashCreditChange = cashCreditChange,
    _cashDebitChange = cashDebitChange,
    _contactId = contactId,
    _discount = discount,
    _drawEmployeeId = drawEmployeeId,
    _id = id,
    _manageEmployeeId = manageEmployeeId,
    _netProfit = netProfit,
    _otherExpense = otherExpense,
    _otherIncome = otherIncome,
    _salesCost = salesCost,
    _salesIncome = salesIncome,
    _salesProfit = salesProfit,
    _salesProfitRate = salesProfitRate,
    _spendAdvancePayable = spendAdvancePayable,
    _spendAdvanceReceivable = spendAdvanceReceivable,
    _stockChange = stockChange,
    _stockCreditChange = stockCreditChange,
    _stockDebitChange = stockDebitChange,
    _storeId = storeId;

  static TypeOrderProfitFlow? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderProfitFlow();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderProfitFlow_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderProfitFlow: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderProfitFlow? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderProfitFlow_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderProfitFlow_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderProfitFlow_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _adpChange;

  String get adpChange{
    return _adpChange!;
  }

  String? getAdpChange(){
    return _adpChange;
  }

  set adpChange(String data){
    _adpChange = data;
  }

  void setAdpChange(String? data){
    _adpChange = data;
  }

  String? _adrChange;

  String get adrChange{
    return _adrChange!;
  }

  String? getAdrChange(){
    return _adrChange;
  }

  set adrChange(String data){
    _adrChange = data;
  }

  void setAdrChange(String? data){
    _adrChange = data;
  }

  String? _apChange;

  String get apChange{
    return _apChange!;
  }

  String? getApChange(){
    return _apChange;
  }

  set apChange(String data){
    _apChange = data;
  }

  void setApChange(String? data){
    _apChange = data;
  }

  String? _arChange;

  String get arChange{
    return _arChange!;
  }

  String? getArChange(){
    return _arChange;
  }

  set arChange(String data){
    _arChange = data;
  }

  void setArChange(String? data){
    _arChange = data;
  }

  int? _businessOrderId;

  int get businessOrderId{
    return _businessOrderId!;
  }

  int? getBusinessOrderId(){
    return _businessOrderId;
  }

  set businessOrderId(int data){
    _businessOrderId = data;
  }

  void setBusinessOrderId(int? data){
    _businessOrderId = data;
  }

  String? _cashChange;

  String get cashChange{
    return _cashChange!;
  }

  String? getCashChange(){
    return _cashChange;
  }

  set cashChange(String data){
    _cashChange = data;
  }

  void setCashChange(String? data){
    _cashChange = data;
  }

  String? _cashCreditChange;

  String get cashCreditChange{
    return _cashCreditChange!;
  }

  String? getCashCreditChange(){
    return _cashCreditChange;
  }

  set cashCreditChange(String data){
    _cashCreditChange = data;
  }

  void setCashCreditChange(String? data){
    _cashCreditChange = data;
  }

  String? _cashDebitChange;

  String get cashDebitChange{
    return _cashDebitChange!;
  }

  String? getCashDebitChange(){
    return _cashDebitChange;
  }

  set cashDebitChange(String data){
    _cashDebitChange = data;
  }

  void setCashDebitChange(String? data){
    _cashDebitChange = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _discount;

  String get discount{
    return _discount!;
  }

  String? getDiscount(){
    return _discount;
  }

  set discount(String data){
    _discount = data;
  }

  void setDiscount(String? data){
    _discount = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _netProfit;

  String get netProfit{
    return _netProfit!;
  }

  String? getNetProfit(){
    return _netProfit;
  }

  set netProfit(String data){
    _netProfit = data;
  }

  void setNetProfit(String? data){
    _netProfit = data;
  }

  String? _otherExpense;

  String get otherExpense{
    return _otherExpense!;
  }

  String? getOtherExpense(){
    return _otherExpense;
  }

  set otherExpense(String data){
    _otherExpense = data;
  }

  void setOtherExpense(String? data){
    _otherExpense = data;
  }

  String? _otherIncome;

  String get otherIncome{
    return _otherIncome!;
  }

  String? getOtherIncome(){
    return _otherIncome;
  }

  set otherIncome(String data){
    _otherIncome = data;
  }

  void setOtherIncome(String? data){
    _otherIncome = data;
  }

  String? _salesCost;

  String get salesCost{
    return _salesCost!;
  }

  String? getSalesCost(){
    return _salesCost;
  }

  set salesCost(String data){
    _salesCost = data;
  }

  void setSalesCost(String? data){
    _salesCost = data;
  }

  String? _salesIncome;

  String get salesIncome{
    return _salesIncome!;
  }

  String? getSalesIncome(){
    return _salesIncome;
  }

  set salesIncome(String data){
    _salesIncome = data;
  }

  void setSalesIncome(String? data){
    _salesIncome = data;
  }

  String? _salesProfit;

  String get salesProfit{
    return _salesProfit!;
  }

  String? getSalesProfit(){
    return _salesProfit;
  }

  set salesProfit(String data){
    _salesProfit = data;
  }

  void setSalesProfit(String? data){
    _salesProfit = data;
  }

  String? _salesProfitRate;

  String get salesProfitRate{
    return _salesProfitRate!;
  }

  String? getSalesProfitRate(){
    return _salesProfitRate;
  }

  set salesProfitRate(String data){
    _salesProfitRate = data;
  }

  void setSalesProfitRate(String? data){
    _salesProfitRate = data;
  }

  String? _spendAdvancePayable;

  String get spendAdvancePayable{
    return _spendAdvancePayable!;
  }

  String? getSpendAdvancePayable(){
    return _spendAdvancePayable;
  }

  set spendAdvancePayable(String data){
    _spendAdvancePayable = data;
  }

  void setSpendAdvancePayable(String? data){
    _spendAdvancePayable = data;
  }

  String? _spendAdvanceReceivable;

  String get spendAdvanceReceivable{
    return _spendAdvanceReceivable!;
  }

  String? getSpendAdvanceReceivable(){
    return _spendAdvanceReceivable;
  }

  set spendAdvanceReceivable(String data){
    _spendAdvanceReceivable = data;
  }

  void setSpendAdvanceReceivable(String? data){
    _spendAdvanceReceivable = data;
  }

  String? _stockChange;

  String get stockChange{
    return _stockChange!;
  }

  String? getStockChange(){
    return _stockChange;
  }

  set stockChange(String data){
    _stockChange = data;
  }

  void setStockChange(String? data){
    _stockChange = data;
  }

  String? _stockCreditChange;

  String get stockCreditChange{
    return _stockCreditChange!;
  }

  String? getStockCreditChange(){
    return _stockCreditChange;
  }

  set stockCreditChange(String data){
    _stockCreditChange = data;
  }

  void setStockCreditChange(String? data){
    _stockCreditChange = data;
  }

  String? _stockDebitChange;

  String get stockDebitChange{
    return _stockDebitChange!;
  }

  String? getStockDebitChange(){
    return _stockDebitChange;
  }

  set stockDebitChange(String data){
    _stockDebitChange = data;
  }

  void setStockDebitChange(String? data){
    _stockDebitChange = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

}

class FTypeOrderQueryDTO extends IDataField {
  static const data = FTypeOrderQueryDTO('data');
  static const pageIndex = FTypeOrderQueryDTO('pageIndex');
  static const pageSize = FTypeOrderQueryDTO('pageSize');
  static const sum = FTypeOrderQueryDTO('sum');
  const FTypeOrderQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderQueryDTO> _TypeOrderQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderQueryDataDTO>((single){
        final handler = TypeOrderQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderQueryDataDTO>((single){
        final handler = TypeOrderQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQueryDTO({
    List<TypeOrderQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeOrderQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderQueryDataDTO>? _data;

  List<TypeOrderQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderQuerySumDTO? _sum;

  TypeOrderQuerySumDTO get sum{
    return _sum!;
  }

  TypeOrderQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeOrderQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeOrderQueryDataDTO extends IDataField {
  static const accountDocumentOrderId = FTypeOrderQueryDataDTO('accountDocumentOrderId');
  static const billTotal = FTypeOrderQueryDataDTO('billTotal');
  static const billType = FTypeOrderQueryDataDTO('billType');
  static const bomCostTotal = FTypeOrderQueryDataDTO('bomCostTotal');
  static const bomTotal = FTypeOrderQueryDataDTO('bomTotal');
  static const contactId = FTypeOrderQueryDataDTO('contactId');
  static const contactName = FTypeOrderQueryDataDTO('contactName');
  static const contactPersonAddress = FTypeOrderQueryDataDTO('contactPersonAddress');
  static const contactPersonName = FTypeOrderQueryDataDTO('contactPersonName');
  static const contactPersonPhone = FTypeOrderQueryDataDTO('contactPersonPhone');
  static const costTotal = FTypeOrderQueryDataDTO('costTotal');
  static const customField1 = FTypeOrderQueryDataDTO('customField1');
  static const customField2 = FTypeOrderQueryDataDTO('customField2');
  static const customField3 = FTypeOrderQueryDataDTO('customField3');
  static const customField4 = FTypeOrderQueryDataDTO('customField4');
  static const customField5 = FTypeOrderQueryDataDTO('customField5');
  static const customField6 = FTypeOrderQueryDataDTO('customField6');
  static const customField7 = FTypeOrderQueryDataDTO('customField7');
  static const customField8 = FTypeOrderQueryDataDTO('customField8');
  static const discountTotal = FTypeOrderQueryDataDTO('discountTotal');
  static const documentType = FTypeOrderQueryDataDTO('documentType');
  static const doneBillTotal = FTypeOrderQueryDataDTO('doneBillTotal');
  static const doneExecuteAmount = FTypeOrderQueryDataDTO('doneExecuteAmount');
  static const drawEmployeeId = FTypeOrderQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderQueryDataDTO('entryAccountTime');
  static const feeTotal = FTypeOrderQueryDataDTO('feeTotal');
  static const hasBeenIssued = FTypeOrderQueryDataDTO('hasBeenIssued');
  static const hasBeenPurchased = FTypeOrderQueryDataDTO('hasBeenPurchased');
  static const hasBeenUsed = FTypeOrderQueryDataDTO('hasBeenUsed');
  static const hasFinishBill = FTypeOrderQueryDataDTO('hasFinishBill');
  static const hasStockExecute = FTypeOrderQueryDataDTO('hasStockExecute');
  static const id = FTypeOrderQueryDataDTO('id');
  static const inStoreId = FTypeOrderQueryDataDTO('inStoreId');
  static const inStoreName = FTypeOrderQueryDataDTO('inStoreName');
  static const manageEmployeeId = FTypeOrderQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderQueryDataDTO('number');
  static const orderDate = FTypeOrderQueryDataDTO('orderDate');
  static const outStoreId = FTypeOrderQueryDataDTO('outStoreId');
  static const outStoreName = FTypeOrderQueryDataDTO('outStoreName');
  static const payCashAccountId = FTypeOrderQueryDataDTO('payCashAccountId');
  static const payCashAccountName = FTypeOrderQueryDataDTO('payCashAccountName');
  static const payCashTotal = FTypeOrderQueryDataDTO('payCashTotal');
  static const payDiscount = FTypeOrderQueryDataDTO('payDiscount');
  static const preTaxTotal = FTypeOrderQueryDataDTO('preTaxTotal');
  static const printTimes = FTypeOrderQueryDataDTO('printTimes');
  static const profitRate = FTypeOrderQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderQueryDataDTO('profitTotal');
  static const receiveCashAccountId = FTypeOrderQueryDataDTO('receiveCashAccountId');
  static const receiveCashAccountName = FTypeOrderQueryDataDTO('receiveCashAccountName');
  static const receiveCashTotal = FTypeOrderQueryDataDTO('receiveCashTotal');
  static const receiveDiscount = FTypeOrderQueryDataDTO('receiveDiscount');
  static const redReverseOrderId = FTypeOrderQueryDataDTO('redReverseOrderId');
  static const redState = FTypeOrderQueryDataDTO('redState');
  static const remark = FTypeOrderQueryDataDTO('remark');
  static const sourceOrderInfo = FTypeOrderQueryDataDTO('sourceOrderInfo');
  static const spendAdvancePayable = FTypeOrderQueryDataDTO('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderQueryDataDTO('spendAdvanceReceivable');
  static const state = FTypeOrderQueryDataDTO('state');
  static const storeId = FTypeOrderQueryDataDTO('storeId');
  static const storeName = FTypeOrderQueryDataDTO('storeName');
  static const subType = FTypeOrderQueryDataDTO('subType');
  static const summaryRemark = FTypeOrderQueryDataDTO('summaryRemark');
  static const targetOrderInfo = FTypeOrderQueryDataDTO('targetOrderInfo');
  static const tax = FTypeOrderQueryDataDTO('tax');
  static const taxOnlyTotal = FTypeOrderQueryDataDTO('taxOnlyTotal');
  static const total = FTypeOrderQueryDataDTO('total');
  static const totalAmount = FTypeOrderQueryDataDTO('totalAmount');
  static const type = FTypeOrderQueryDataDTO('type');
  static const undoneBillTotal = FTypeOrderQueryDataDTO('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrderQueryDataDTO('undoneExecuteAmount');
  const FTypeOrderQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderQueryDataDTO> _TypeOrderQueryDataDTO_fields = {
  "accountDocumentOrderId": (
    getter: (data) => data._accountDocumentOrderId,
    setter: (data, value) => data._accountDocumentOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._accountDocumentOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._accountDocumentOrderId = parser(value);
    }
  ),
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "billType": (
    getter: (data) => data._billType,
    setter: (data, value) => data._billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data._billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data._billType = parser(value);
    }
  ),
  "bomCostTotal": (
    getter: (data) => data._bomCostTotal,
    setter: (data, value) => data._bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomCostTotal = parser(value);
    }
  ),
  "bomTotal": (
    getter: (data) => data._bomTotal,
    setter: (data, value) => data._bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bomTotal = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "contactPersonAddress": (
    getter: (data) => data._contactPersonAddress,
    setter: (data, value) => data._contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonAddress = parser(value);
    }
  ),
  "contactPersonName": (
    getter: (data) => data._contactPersonName,
    setter: (data, value) => data._contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonName = parser(value);
    }
  ),
  "contactPersonPhone": (
    getter: (data) => data._contactPersonPhone,
    setter: (data, value) => data._contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactPersonPhone = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "customField1": (
    getter: (data) => data._customField1,
    setter: (data, value) => data._customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField1 = parser(value);
    }
  ),
  "customField2": (
    getter: (data) => data._customField2,
    setter: (data, value) => data._customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField2 = parser(value);
    }
  ),
  "customField3": (
    getter: (data) => data._customField3,
    setter: (data, value) => data._customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField3 = parser(value);
    }
  ),
  "customField4": (
    getter: (data) => data._customField4,
    setter: (data, value) => data._customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField4 = parser(value);
    }
  ),
  "customField5": (
    getter: (data) => data._customField5,
    setter: (data, value) => data._customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField5 = parser(value);
    }
  ),
  "customField6": (
    getter: (data) => data._customField6,
    setter: (data, value) => data._customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField6 = parser(value);
    }
  ),
  "customField7": (
    getter: (data) => data._customField7,
    setter: (data, value) => data._customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField7 = parser(value);
    }
  ),
  "customField8": (
    getter: (data) => data._customField8,
    setter: (data, value) => data._customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._customField8 = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "documentType": (
    getter: (data) => data._documentType,
    setter: (data, value) => data._documentType = value as TypeEnumOrderDocumentType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderDocumentType.toDynamic;
      return formatter(data._documentType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderDocumentType.fromDynamic;
      data._documentType = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "drawEmployeeId": (
    getter: (data) => data._drawEmployeeId,
    setter: (data, value) => data._drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._drawEmployeeId = parser(value);
    }
  ),
  "drawEmployeeName": (
    getter: (data) => data._drawEmployeeName,
    setter: (data, value) => data._drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawEmployeeName = parser(value);
    }
  ),
  "drawTime": (
    getter: (data) => data._drawTime,
    setter: (data, value) => data._drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._drawTime = parser(value);
    }
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data._entryAccountEmployeeId,
    setter: (data, value) => data._entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._entryAccountEmployeeId = parser(value);
    }
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data._entryAccountEmployeeName,
    setter: (data, value) => data._entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountEmployeeName = parser(value);
    }
  ),
  "entryAccountTime": (
    getter: (data) => data._entryAccountTime,
    setter: (data, value) => data._entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._entryAccountTime = parser(value);
    }
  ),
  "feeTotal": (
    getter: (data) => data._feeTotal,
    setter: (data, value) => data._feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._feeTotal = parser(value);
    }
  ),
  "hasBeenIssued": (
    getter: (data) => data._hasBeenIssued,
    setter: (data, value) => data._hasBeenIssued = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenIssued);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenIssued = parser(value);
    }
  ),
  "hasBeenPurchased": (
    getter: (data) => data._hasBeenPurchased,
    setter: (data, value) => data._hasBeenPurchased = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenPurchased);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenPurchased = parser(value);
    }
  ),
  "hasBeenUsed": (
    getter: (data) => data._hasBeenUsed,
    setter: (data, value) => data._hasBeenUsed = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBeenUsed);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBeenUsed = parser(value);
    }
  ),
  "hasFinishBill": (
    getter: (data) => data._hasFinishBill,
    setter: (data, value) => data._hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasFinishBill = parser(value);
    }
  ),
  "hasStockExecute": (
    getter: (data) => data._hasStockExecute,
    setter: (data, value) => data._hasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasStockExecute = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "inStoreId": (
    getter: (data) => data._inStoreId,
    setter: (data, value) => data._inStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._inStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._inStoreId = parser(value);
    }
  ),
  "inStoreName": (
    getter: (data) => data._inStoreName,
    setter: (data, value) => data._inStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inStoreName = parser(value);
    }
  ),
  "manageEmployeeId": (
    getter: (data) => data._manageEmployeeId,
    setter: (data, value) => data._manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._manageEmployeeId = parser(value);
    }
  ),
  "manageEmployeeName": (
    getter: (data) => data._manageEmployeeName,
    setter: (data, value) => data._manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._manageEmployeeName = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "outStoreId": (
    getter: (data) => data._outStoreId,
    setter: (data, value) => data._outStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._outStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._outStoreId = parser(value);
    }
  ),
  "outStoreName": (
    getter: (data) => data._outStoreName,
    setter: (data, value) => data._outStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outStoreName = parser(value);
    }
  ),
  "payCashAccountId": (
    getter: (data) => data._payCashAccountId,
    setter: (data, value) => data._payCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._payCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._payCashAccountId = parser(value);
    }
  ),
  "payCashAccountName": (
    getter: (data) => data._payCashAccountName,
    setter: (data, value) => data._payCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payCashAccountName = parser(value);
    }
  ),
  "payCashTotal": (
    getter: (data) => data._payCashTotal,
    setter: (data, value) => data._payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payCashTotal = parser(value);
    }
  ),
  "payDiscount": (
    getter: (data) => data._payDiscount,
    setter: (data, value) => data._payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payDiscount = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "printTimes": (
    getter: (data) => data._printTimes,
    setter: (data, value) => data._printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._printTimes = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "receiveCashAccountId": (
    getter: (data) => data._receiveCashAccountId,
    setter: (data, value) => data._receiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._receiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._receiveCashAccountId = parser(value);
    }
  ),
  "receiveCashAccountName": (
    getter: (data) => data._receiveCashAccountName,
    setter: (data, value) => data._receiveCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashAccountName = parser(value);
    }
  ),
  "receiveCashTotal": (
    getter: (data) => data._receiveCashTotal,
    setter: (data, value) => data._receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashTotal = parser(value);
    }
  ),
  "receiveDiscount": (
    getter: (data) => data._receiveDiscount,
    setter: (data, value) => data._receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveDiscount = parser(value);
    }
  ),
  "redReverseOrderId": (
    getter: (data) => data._redReverseOrderId,
    setter: (data, value) => data._redReverseOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._redReverseOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._redReverseOrderId = parser(value);
    }
  ),
  "redState": (
    getter: (data) => data._redState,
    setter: (data, value) => data._redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._redState = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "sourceOrderInfo": (
    getter: (data) => data._sourceOrderInfo,
    setter: (data, value) => data._sourceOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sourceOrderInfo = parser(value);
    }
  ),
  "spendAdvancePayable": (
    getter: (data) => data._spendAdvancePayable,
    setter: (data, value) => data._spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvancePayable = parser(value);
    }
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data._spendAdvanceReceivable,
    setter: (data, value) => data._spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvanceReceivable = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._state = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "subType": (
    getter: (data) => data._subType,
    setter: (data, value) => data._subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data._subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data._subType = parser(value);
    }
  ),
  "summaryRemark": (
    getter: (data) => data._summaryRemark,
    setter: (data, value) => data._summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._summaryRemark = parser(value);
    }
  ),
  "targetOrderInfo": (
    getter: (data) => data._targetOrderInfo,
    setter: (data, value) => data._targetOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._targetOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._targetOrderInfo = parser(value);
    }
  ),
  "tax": (
    getter: (data) => data._tax,
    setter: (data, value) => data._tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._tax = parser(value);
    }
  ),
  "taxOnlyTotal": (
    getter: (data) => data._taxOnlyTotal,
    setter: (data, value) => data._taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._taxOnlyTotal = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "totalAmount": (
    getter: (data) => data._totalAmount,
    setter: (data, value) => data._totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalAmount = parser(value);
    }
  ),
  "type": (
    getter: (data) => data._type,
    setter: (data, value) => data._type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._type = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
};

class TypeOrderQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQueryDataDTO({
    int? accountDocumentOrderId,
    String? billTotal,
    TypeEnumOrderBillType? billType,
    String? bomCostTotal,
    String? bomTotal,
    int? contactId,
    String? contactName,
    String? contactPersonAddress,
    String? contactPersonName,
    String? contactPersonPhone,
    String? costTotal,
    String? customField1,
    String? customField2,
    String? customField3,
    String? customField4,
    String? customField5,
    String? customField6,
    String? customField7,
    String? customField8,
    String? discountTotal,
    TypeEnumOrderDocumentType? documentType,
    String? doneBillTotal,
    String? doneExecuteAmount,
    int? drawEmployeeId,
    String? drawEmployeeName,
    String? drawTime,
    int? entryAccountEmployeeId,
    String? entryAccountEmployeeName,
    String? entryAccountTime,
    String? feeTotal,
    int? hasBeenIssued,
    int? hasBeenPurchased,
    int? hasBeenUsed,
    int? hasFinishBill,
    int? hasStockExecute,
    int? id,
    int? inStoreId,
    String? inStoreName,
    int? manageEmployeeId,
    String? manageEmployeeName,
    String? number,
    String? orderDate,
    int? outStoreId,
    String? outStoreName,
    int? payCashAccountId,
    String? payCashAccountName,
    String? payCashTotal,
    String? payDiscount,
    String? preTaxTotal,
    int? printTimes,
    String? profitRate,
    String? profitTotal,
    int? receiveCashAccountId,
    String? receiveCashAccountName,
    String? receiveCashTotal,
    String? receiveDiscount,
    int? redReverseOrderId,
    TypeEnumOrderRedState? redState,
    String? remark,
    String? sourceOrderInfo,
    String? spendAdvancePayable,
    String? spendAdvanceReceivable,
    TypeEnumOrderState? state,
    int? storeId,
    String? storeName,
    TypeEnumOrderSubType? subType,
    String? summaryRemark,
    String? targetOrderInfo,
    String? tax,
    String? taxOnlyTotal,
    String? total,
    String? totalAmount,
    TypeEnumOrderType? type,
    String? undoneBillTotal,
    String? undoneExecuteAmount
  }):
    _accountDocumentOrderId = accountDocumentOrderId,
    _billTotal = billTotal,
    _billType = billType,
    _bomCostTotal = bomCostTotal,
    _bomTotal = bomTotal,
    _contactId = contactId,
    _contactName = contactName,
    _contactPersonAddress = contactPersonAddress,
    _contactPersonName = contactPersonName,
    _contactPersonPhone = contactPersonPhone,
    _costTotal = costTotal,
    _customField1 = customField1,
    _customField2 = customField2,
    _customField3 = customField3,
    _customField4 = customField4,
    _customField5 = customField5,
    _customField6 = customField6,
    _customField7 = customField7,
    _customField8 = customField8,
    _discountTotal = discountTotal,
    _documentType = documentType,
    _doneBillTotal = doneBillTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _drawEmployeeId = drawEmployeeId,
    _drawEmployeeName = drawEmployeeName,
    _drawTime = drawTime,
    _entryAccountEmployeeId = entryAccountEmployeeId,
    _entryAccountEmployeeName = entryAccountEmployeeName,
    _entryAccountTime = entryAccountTime,
    _feeTotal = feeTotal,
    _hasBeenIssued = hasBeenIssued,
    _hasBeenPurchased = hasBeenPurchased,
    _hasBeenUsed = hasBeenUsed,
    _hasFinishBill = hasFinishBill,
    _hasStockExecute = hasStockExecute,
    _id = id,
    _inStoreId = inStoreId,
    _inStoreName = inStoreName,
    _manageEmployeeId = manageEmployeeId,
    _manageEmployeeName = manageEmployeeName,
    _number = number,
    _orderDate = orderDate,
    _outStoreId = outStoreId,
    _outStoreName = outStoreName,
    _payCashAccountId = payCashAccountId,
    _payCashAccountName = payCashAccountName,
    _payCashTotal = payCashTotal,
    _payDiscount = payDiscount,
    _preTaxTotal = preTaxTotal,
    _printTimes = printTimes,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _receiveCashAccountId = receiveCashAccountId,
    _receiveCashAccountName = receiveCashAccountName,
    _receiveCashTotal = receiveCashTotal,
    _receiveDiscount = receiveDiscount,
    _redReverseOrderId = redReverseOrderId,
    _redState = redState,
    _remark = remark,
    _sourceOrderInfo = sourceOrderInfo,
    _spendAdvancePayable = spendAdvancePayable,
    _spendAdvanceReceivable = spendAdvanceReceivable,
    _state = state,
    _storeId = storeId,
    _storeName = storeName,
    _subType = subType,
    _summaryRemark = summaryRemark,
    _targetOrderInfo = targetOrderInfo,
    _tax = tax,
    _taxOnlyTotal = taxOnlyTotal,
    _total = total,
    _totalAmount = totalAmount,
    _type = type,
    _undoneBillTotal = undoneBillTotal,
    _undoneExecuteAmount = undoneExecuteAmount;

  static TypeOrderQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _accountDocumentOrderId;

  int get accountDocumentOrderId{
    return _accountDocumentOrderId!;
  }

  int? getAccountDocumentOrderId(){
    return _accountDocumentOrderId;
  }

  set accountDocumentOrderId(int data){
    _accountDocumentOrderId = data;
  }

  void setAccountDocumentOrderId(int? data){
    _accountDocumentOrderId = data;
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  TypeEnumOrderBillType? _billType;

  TypeEnumOrderBillType get billType{
    return _billType!;
  }

  TypeEnumOrderBillType? getBillType(){
    return _billType;
  }

  set billType(TypeEnumOrderBillType data){
    _billType = data;
  }

  void setBillType(TypeEnumOrderBillType? data){
    _billType = data;
  }

  String? _bomCostTotal;

  String get bomCostTotal{
    return _bomCostTotal!;
  }

  String? getBomCostTotal(){
    return _bomCostTotal;
  }

  set bomCostTotal(String data){
    _bomCostTotal = data;
  }

  void setBomCostTotal(String? data){
    _bomCostTotal = data;
  }

  String? _bomTotal;

  String get bomTotal{
    return _bomTotal!;
  }

  String? getBomTotal(){
    return _bomTotal;
  }

  set bomTotal(String data){
    _bomTotal = data;
  }

  void setBomTotal(String? data){
    _bomTotal = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _contactPersonAddress;

  String get contactPersonAddress{
    return _contactPersonAddress!;
  }

  String? getContactPersonAddress(){
    return _contactPersonAddress;
  }

  set contactPersonAddress(String data){
    _contactPersonAddress = data;
  }

  void setContactPersonAddress(String? data){
    _contactPersonAddress = data;
  }

  String? _contactPersonName;

  String get contactPersonName{
    return _contactPersonName!;
  }

  String? getContactPersonName(){
    return _contactPersonName;
  }

  set contactPersonName(String data){
    _contactPersonName = data;
  }

  void setContactPersonName(String? data){
    _contactPersonName = data;
  }

  String? _contactPersonPhone;

  String get contactPersonPhone{
    return _contactPersonPhone!;
  }

  String? getContactPersonPhone(){
    return _contactPersonPhone;
  }

  set contactPersonPhone(String data){
    _contactPersonPhone = data;
  }

  void setContactPersonPhone(String? data){
    _contactPersonPhone = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  String? _customField1;

  String get customField1{
    return _customField1!;
  }

  String? getCustomField1(){
    return _customField1;
  }

  set customField1(String data){
    _customField1 = data;
  }

  void setCustomField1(String? data){
    _customField1 = data;
  }

  String? _customField2;

  String get customField2{
    return _customField2!;
  }

  String? getCustomField2(){
    return _customField2;
  }

  set customField2(String data){
    _customField2 = data;
  }

  void setCustomField2(String? data){
    _customField2 = data;
  }

  String? _customField3;

  String get customField3{
    return _customField3!;
  }

  String? getCustomField3(){
    return _customField3;
  }

  set customField3(String data){
    _customField3 = data;
  }

  void setCustomField3(String? data){
    _customField3 = data;
  }

  String? _customField4;

  String get customField4{
    return _customField4!;
  }

  String? getCustomField4(){
    return _customField4;
  }

  set customField4(String data){
    _customField4 = data;
  }

  void setCustomField4(String? data){
    _customField4 = data;
  }

  String? _customField5;

  String get customField5{
    return _customField5!;
  }

  String? getCustomField5(){
    return _customField5;
  }

  set customField5(String data){
    _customField5 = data;
  }

  void setCustomField5(String? data){
    _customField5 = data;
  }

  String? _customField6;

  String get customField6{
    return _customField6!;
  }

  String? getCustomField6(){
    return _customField6;
  }

  set customField6(String data){
    _customField6 = data;
  }

  void setCustomField6(String? data){
    _customField6 = data;
  }

  String? _customField7;

  String get customField7{
    return _customField7!;
  }

  String? getCustomField7(){
    return _customField7;
  }

  set customField7(String data){
    _customField7 = data;
  }

  void setCustomField7(String? data){
    _customField7 = data;
  }

  String? _customField8;

  String get customField8{
    return _customField8!;
  }

  String? getCustomField8(){
    return _customField8;
  }

  set customField8(String data){
    _customField8 = data;
  }

  void setCustomField8(String? data){
    _customField8 = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  TypeEnumOrderDocumentType? _documentType;

  TypeEnumOrderDocumentType get documentType{
    return _documentType!;
  }

  TypeEnumOrderDocumentType? getDocumentType(){
    return _documentType;
  }

  set documentType(TypeEnumOrderDocumentType data){
    _documentType = data;
  }

  void setDocumentType(TypeEnumOrderDocumentType? data){
    _documentType = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  int? _drawEmployeeId;

  int get drawEmployeeId{
    return _drawEmployeeId!;
  }

  int? getDrawEmployeeId(){
    return _drawEmployeeId;
  }

  set drawEmployeeId(int data){
    _drawEmployeeId = data;
  }

  void setDrawEmployeeId(int? data){
    _drawEmployeeId = data;
  }

  String? _drawEmployeeName;

  String get drawEmployeeName{
    return _drawEmployeeName!;
  }

  String? getDrawEmployeeName(){
    return _drawEmployeeName;
  }

  set drawEmployeeName(String data){
    _drawEmployeeName = data;
  }

  void setDrawEmployeeName(String? data){
    _drawEmployeeName = data;
  }

  String? _drawTime;

  String get drawTime{
    return _drawTime!;
  }

  String? getDrawTime(){
    return _drawTime;
  }

  set drawTime(String data){
    _drawTime = data;
  }

  void setDrawTime(String? data){
    _drawTime = data;
  }

  int? _entryAccountEmployeeId;

  int get entryAccountEmployeeId{
    return _entryAccountEmployeeId!;
  }

  int? getEntryAccountEmployeeId(){
    return _entryAccountEmployeeId;
  }

  set entryAccountEmployeeId(int data){
    _entryAccountEmployeeId = data;
  }

  void setEntryAccountEmployeeId(int? data){
    _entryAccountEmployeeId = data;
  }

  String? _entryAccountEmployeeName;

  String get entryAccountEmployeeName{
    return _entryAccountEmployeeName!;
  }

  String? getEntryAccountEmployeeName(){
    return _entryAccountEmployeeName;
  }

  set entryAccountEmployeeName(String data){
    _entryAccountEmployeeName = data;
  }

  void setEntryAccountEmployeeName(String? data){
    _entryAccountEmployeeName = data;
  }

  String? _entryAccountTime;

  String get entryAccountTime{
    return _entryAccountTime!;
  }

  String? getEntryAccountTime(){
    return _entryAccountTime;
  }

  set entryAccountTime(String data){
    _entryAccountTime = data;
  }

  void setEntryAccountTime(String? data){
    _entryAccountTime = data;
  }

  String? _feeTotal;

  String get feeTotal{
    return _feeTotal!;
  }

  String? getFeeTotal(){
    return _feeTotal;
  }

  set feeTotal(String data){
    _feeTotal = data;
  }

  void setFeeTotal(String? data){
    _feeTotal = data;
  }

  int? _hasBeenIssued;

  int get hasBeenIssued{
    return _hasBeenIssued!;
  }

  int? getHasBeenIssued(){
    return _hasBeenIssued;
  }

  set hasBeenIssued(int data){
    _hasBeenIssued = data;
  }

  void setHasBeenIssued(int? data){
    _hasBeenIssued = data;
  }

  int? _hasBeenPurchased;

  int get hasBeenPurchased{
    return _hasBeenPurchased!;
  }

  int? getHasBeenPurchased(){
    return _hasBeenPurchased;
  }

  set hasBeenPurchased(int data){
    _hasBeenPurchased = data;
  }

  void setHasBeenPurchased(int? data){
    _hasBeenPurchased = data;
  }

  int? _hasBeenUsed;

  int get hasBeenUsed{
    return _hasBeenUsed!;
  }

  int? getHasBeenUsed(){
    return _hasBeenUsed;
  }

  set hasBeenUsed(int data){
    _hasBeenUsed = data;
  }

  void setHasBeenUsed(int? data){
    _hasBeenUsed = data;
  }

  int? _hasFinishBill;

  int get hasFinishBill{
    return _hasFinishBill!;
  }

  int? getHasFinishBill(){
    return _hasFinishBill;
  }

  set hasFinishBill(int data){
    _hasFinishBill = data;
  }

  void setHasFinishBill(int? data){
    _hasFinishBill = data;
  }

  int? _hasStockExecute;

  int get hasStockExecute{
    return _hasStockExecute!;
  }

  int? getHasStockExecute(){
    return _hasStockExecute;
  }

  set hasStockExecute(int data){
    _hasStockExecute = data;
  }

  void setHasStockExecute(int? data){
    _hasStockExecute = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _inStoreId;

  int get inStoreId{
    return _inStoreId!;
  }

  int? getInStoreId(){
    return _inStoreId;
  }

  set inStoreId(int data){
    _inStoreId = data;
  }

  void setInStoreId(int? data){
    _inStoreId = data;
  }

  String? _inStoreName;

  String get inStoreName{
    return _inStoreName!;
  }

  String? getInStoreName(){
    return _inStoreName;
  }

  set inStoreName(String data){
    _inStoreName = data;
  }

  void setInStoreName(String? data){
    _inStoreName = data;
  }

  int? _manageEmployeeId;

  int get manageEmployeeId{
    return _manageEmployeeId!;
  }

  int? getManageEmployeeId(){
    return _manageEmployeeId;
  }

  set manageEmployeeId(int data){
    _manageEmployeeId = data;
  }

  void setManageEmployeeId(int? data){
    _manageEmployeeId = data;
  }

  String? _manageEmployeeName;

  String get manageEmployeeName{
    return _manageEmployeeName!;
  }

  String? getManageEmployeeName(){
    return _manageEmployeeName;
  }

  set manageEmployeeName(String data){
    _manageEmployeeName = data;
  }

  void setManageEmployeeName(String? data){
    _manageEmployeeName = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _outStoreId;

  int get outStoreId{
    return _outStoreId!;
  }

  int? getOutStoreId(){
    return _outStoreId;
  }

  set outStoreId(int data){
    _outStoreId = data;
  }

  void setOutStoreId(int? data){
    _outStoreId = data;
  }

  String? _outStoreName;

  String get outStoreName{
    return _outStoreName!;
  }

  String? getOutStoreName(){
    return _outStoreName;
  }

  set outStoreName(String data){
    _outStoreName = data;
  }

  void setOutStoreName(String? data){
    _outStoreName = data;
  }

  int? _payCashAccountId;

  int get payCashAccountId{
    return _payCashAccountId!;
  }

  int? getPayCashAccountId(){
    return _payCashAccountId;
  }

  set payCashAccountId(int data){
    _payCashAccountId = data;
  }

  void setPayCashAccountId(int? data){
    _payCashAccountId = data;
  }

  String? _payCashAccountName;

  String get payCashAccountName{
    return _payCashAccountName!;
  }

  String? getPayCashAccountName(){
    return _payCashAccountName;
  }

  set payCashAccountName(String data){
    _payCashAccountName = data;
  }

  void setPayCashAccountName(String? data){
    _payCashAccountName = data;
  }

  String? _payCashTotal;

  String get payCashTotal{
    return _payCashTotal!;
  }

  String? getPayCashTotal(){
    return _payCashTotal;
  }

  set payCashTotal(String data){
    _payCashTotal = data;
  }

  void setPayCashTotal(String? data){
    _payCashTotal = data;
  }

  String? _payDiscount;

  String get payDiscount{
    return _payDiscount!;
  }

  String? getPayDiscount(){
    return _payDiscount;
  }

  set payDiscount(String data){
    _payDiscount = data;
  }

  void setPayDiscount(String? data){
    _payDiscount = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  int? _printTimes;

  int get printTimes{
    return _printTimes!;
  }

  int? getPrintTimes(){
    return _printTimes;
  }

  set printTimes(int data){
    _printTimes = data;
  }

  void setPrintTimes(int? data){
    _printTimes = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  int? _receiveCashAccountId;

  int get receiveCashAccountId{
    return _receiveCashAccountId!;
  }

  int? getReceiveCashAccountId(){
    return _receiveCashAccountId;
  }

  set receiveCashAccountId(int data){
    _receiveCashAccountId = data;
  }

  void setReceiveCashAccountId(int? data){
    _receiveCashAccountId = data;
  }

  String? _receiveCashAccountName;

  String get receiveCashAccountName{
    return _receiveCashAccountName!;
  }

  String? getReceiveCashAccountName(){
    return _receiveCashAccountName;
  }

  set receiveCashAccountName(String data){
    _receiveCashAccountName = data;
  }

  void setReceiveCashAccountName(String? data){
    _receiveCashAccountName = data;
  }

  String? _receiveCashTotal;

  String get receiveCashTotal{
    return _receiveCashTotal!;
  }

  String? getReceiveCashTotal(){
    return _receiveCashTotal;
  }

  set receiveCashTotal(String data){
    _receiveCashTotal = data;
  }

  void setReceiveCashTotal(String? data){
    _receiveCashTotal = data;
  }

  String? _receiveDiscount;

  String get receiveDiscount{
    return _receiveDiscount!;
  }

  String? getReceiveDiscount(){
    return _receiveDiscount;
  }

  set receiveDiscount(String data){
    _receiveDiscount = data;
  }

  void setReceiveDiscount(String? data){
    _receiveDiscount = data;
  }

  int? _redReverseOrderId;

  int get redReverseOrderId{
    return _redReverseOrderId!;
  }

  int? getRedReverseOrderId(){
    return _redReverseOrderId;
  }

  set redReverseOrderId(int data){
    _redReverseOrderId = data;
  }

  void setRedReverseOrderId(int? data){
    _redReverseOrderId = data;
  }

  TypeEnumOrderRedState? _redState;

  TypeEnumOrderRedState get redState{
    return _redState!;
  }

  TypeEnumOrderRedState? getRedState(){
    return _redState;
  }

  set redState(TypeEnumOrderRedState data){
    _redState = data;
  }

  void setRedState(TypeEnumOrderRedState? data){
    _redState = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _sourceOrderInfo;

  String get sourceOrderInfo{
    return _sourceOrderInfo!;
  }

  String? getSourceOrderInfo(){
    return _sourceOrderInfo;
  }

  set sourceOrderInfo(String data){
    _sourceOrderInfo = data;
  }

  void setSourceOrderInfo(String? data){
    _sourceOrderInfo = data;
  }

  String? _spendAdvancePayable;

  String get spendAdvancePayable{
    return _spendAdvancePayable!;
  }

  String? getSpendAdvancePayable(){
    return _spendAdvancePayable;
  }

  set spendAdvancePayable(String data){
    _spendAdvancePayable = data;
  }

  void setSpendAdvancePayable(String? data){
    _spendAdvancePayable = data;
  }

  String? _spendAdvanceReceivable;

  String get spendAdvanceReceivable{
    return _spendAdvanceReceivable!;
  }

  String? getSpendAdvanceReceivable(){
    return _spendAdvanceReceivable;
  }

  set spendAdvanceReceivable(String data){
    _spendAdvanceReceivable = data;
  }

  void setSpendAdvanceReceivable(String? data){
    _spendAdvanceReceivable = data;
  }

  TypeEnumOrderState? _state;

  TypeEnumOrderState get state{
    return _state!;
  }

  TypeEnumOrderState? getState(){
    return _state;
  }

  set state(TypeEnumOrderState data){
    _state = data;
  }

  void setState(TypeEnumOrderState? data){
    _state = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  TypeEnumOrderSubType? _subType;

  TypeEnumOrderSubType get subType{
    return _subType!;
  }

  TypeEnumOrderSubType? getSubType(){
    return _subType;
  }

  set subType(TypeEnumOrderSubType data){
    _subType = data;
  }

  void setSubType(TypeEnumOrderSubType? data){
    _subType = data;
  }

  String? _summaryRemark;

  String get summaryRemark{
    return _summaryRemark!;
  }

  String? getSummaryRemark(){
    return _summaryRemark;
  }

  set summaryRemark(String data){
    _summaryRemark = data;
  }

  void setSummaryRemark(String? data){
    _summaryRemark = data;
  }

  String? _targetOrderInfo;

  String get targetOrderInfo{
    return _targetOrderInfo!;
  }

  String? getTargetOrderInfo(){
    return _targetOrderInfo;
  }

  set targetOrderInfo(String data){
    _targetOrderInfo = data;
  }

  void setTargetOrderInfo(String? data){
    _targetOrderInfo = data;
  }

  String? _tax;

  String get tax{
    return _tax!;
  }

  String? getTax(){
    return _tax;
  }

  set tax(String data){
    _tax = data;
  }

  void setTax(String? data){
    _tax = data;
  }

  String? _taxOnlyTotal;

  String get taxOnlyTotal{
    return _taxOnlyTotal!;
  }

  String? getTaxOnlyTotal(){
    return _taxOnlyTotal;
  }

  set taxOnlyTotal(String data){
    _taxOnlyTotal = data;
  }

  void setTaxOnlyTotal(String? data){
    _taxOnlyTotal = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _totalAmount;

  String get totalAmount{
    return _totalAmount!;
  }

  String? getTotalAmount(){
    return _totalAmount;
  }

  set totalAmount(String data){
    _totalAmount = data;
  }

  void setTotalAmount(String? data){
    _totalAmount = data;
  }

  TypeEnumOrderType? _type;

  TypeEnumOrderType get type{
    return _type!;
  }

  TypeEnumOrderType? getType(){
    return _type;
  }

  set type(TypeEnumOrderType data){
    _type = data;
  }

  void setType(TypeEnumOrderType? data){
    _type = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

}

class FTypeOrderQuerySumDTO extends IDataField {
  static const billTotal = FTypeOrderQuerySumDTO('billTotal');
  static const costTotal = FTypeOrderQuerySumDTO('costTotal');
  static const count = FTypeOrderQuerySumDTO('count');
  static const discountTotal = FTypeOrderQuerySumDTO('discountTotal');
  static const doneBillTotal = FTypeOrderQuerySumDTO('doneBillTotal');
  static const doneExecuteAmount = FTypeOrderQuerySumDTO('doneExecuteAmount');
  static const hasFinishBillCount = FTypeOrderQuerySumDTO('hasFinishBillCount');
  static const hasNotFinishBillCount = FTypeOrderQuerySumDTO('hasNotFinishBillCount');
  static const payCashTotal = FTypeOrderQuerySumDTO('payCashTotal');
  static const payDiscount = FTypeOrderQuerySumDTO('payDiscount');
  static const preTaxTotal = FTypeOrderQuerySumDTO('preTaxTotal');
  static const profitRate = FTypeOrderQuerySumDTO('profitRate');
  static const profitTotal = FTypeOrderQuerySumDTO('profitTotal');
  static const receiveCashTotal = FTypeOrderQuerySumDTO('receiveCashTotal');
  static const receiveDiscount = FTypeOrderQuerySumDTO('receiveDiscount');
  static const spendAdvancePayable = FTypeOrderQuerySumDTO('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderQuerySumDTO('spendAdvanceReceivable');
  static const total = FTypeOrderQuerySumDTO('total');
  static const totalAmount = FTypeOrderQuerySumDTO('totalAmount');
  static const undoneBillTotal = FTypeOrderQuerySumDTO('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrderQuerySumDTO('undoneExecuteAmount');
  const FTypeOrderQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderQuerySumDTO> _TypeOrderQuerySumDTO_fields = {
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "costTotal": (
    getter: (data) => data._costTotal,
    setter: (data, value) => data._costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._costTotal = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "discountTotal": (
    getter: (data) => data._discountTotal,
    setter: (data, value) => data._discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountTotal = parser(value);
    }
  ),
  "doneBillTotal": (
    getter: (data) => data._doneBillTotal,
    setter: (data, value) => data._doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneBillTotal = parser(value);
    }
  ),
  "doneExecuteAmount": (
    getter: (data) => data._doneExecuteAmount,
    setter: (data, value) => data._doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._doneExecuteAmount = parser(value);
    }
  ),
  "hasFinishBillCount": (
    getter: (data) => data._hasFinishBillCount,
    setter: (data, value) => data._hasFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasFinishBillCount = parser(value);
    }
  ),
  "hasNotFinishBillCount": (
    getter: (data) => data._hasNotFinishBillCount,
    setter: (data, value) => data._hasNotFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasNotFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasNotFinishBillCount = parser(value);
    }
  ),
  "payCashTotal": (
    getter: (data) => data._payCashTotal,
    setter: (data, value) => data._payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payCashTotal = parser(value);
    }
  ),
  "payDiscount": (
    getter: (data) => data._payDiscount,
    setter: (data, value) => data._payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._payDiscount = parser(value);
    }
  ),
  "preTaxTotal": (
    getter: (data) => data._preTaxTotal,
    setter: (data, value) => data._preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._preTaxTotal = parser(value);
    }
  ),
  "profitRate": (
    getter: (data) => data._profitRate,
    setter: (data, value) => data._profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitRate = parser(value);
    }
  ),
  "profitTotal": (
    getter: (data) => data._profitTotal,
    setter: (data, value) => data._profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._profitTotal = parser(value);
    }
  ),
  "receiveCashTotal": (
    getter: (data) => data._receiveCashTotal,
    setter: (data, value) => data._receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveCashTotal = parser(value);
    }
  ),
  "receiveDiscount": (
    getter: (data) => data._receiveDiscount,
    setter: (data, value) => data._receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._receiveDiscount = parser(value);
    }
  ),
  "spendAdvancePayable": (
    getter: (data) => data._spendAdvancePayable,
    setter: (data, value) => data._spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvancePayable = parser(value);
    }
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data._spendAdvanceReceivable,
    setter: (data, value) => data._spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._spendAdvanceReceivable = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
  "totalAmount": (
    getter: (data) => data._totalAmount,
    setter: (data, value) => data._totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._totalAmount = parser(value);
    }
  ),
  "undoneBillTotal": (
    getter: (data) => data._undoneBillTotal,
    setter: (data, value) => data._undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneBillTotal = parser(value);
    }
  ),
  "undoneExecuteAmount": (
    getter: (data) => data._undoneExecuteAmount,
    setter: (data, value) => data._undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._undoneExecuteAmount = parser(value);
    }
  ),
};

class TypeOrderQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQuerySumDTO({
    String? billTotal,
    String? costTotal,
    int? count,
    String? discountTotal,
    String? doneBillTotal,
    String? doneExecuteAmount,
    int? hasFinishBillCount,
    int? hasNotFinishBillCount,
    String? payCashTotal,
    String? payDiscount,
    String? preTaxTotal,
    String? profitRate,
    String? profitTotal,
    String? receiveCashTotal,
    String? receiveDiscount,
    String? spendAdvancePayable,
    String? spendAdvanceReceivable,
    String? total,
    String? totalAmount,
    String? undoneBillTotal,
    String? undoneExecuteAmount
  }):
    _billTotal = billTotal,
    _costTotal = costTotal,
    _count = count,
    _discountTotal = discountTotal,
    _doneBillTotal = doneBillTotal,
    _doneExecuteAmount = doneExecuteAmount,
    _hasFinishBillCount = hasFinishBillCount,
    _hasNotFinishBillCount = hasNotFinishBillCount,
    _payCashTotal = payCashTotal,
    _payDiscount = payDiscount,
    _preTaxTotal = preTaxTotal,
    _profitRate = profitRate,
    _profitTotal = profitTotal,
    _receiveCashTotal = receiveCashTotal,
    _receiveDiscount = receiveDiscount,
    _spendAdvancePayable = spendAdvancePayable,
    _spendAdvanceReceivable = spendAdvanceReceivable,
    _total = total,
    _totalAmount = totalAmount,
    _undoneBillTotal = undoneBillTotal,
    _undoneExecuteAmount = undoneExecuteAmount;

  static TypeOrderQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  String? _costTotal;

  String get costTotal{
    return _costTotal!;
  }

  String? getCostTotal(){
    return _costTotal;
  }

  set costTotal(String data){
    _costTotal = data;
  }

  void setCostTotal(String? data){
    _costTotal = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _discountTotal;

  String get discountTotal{
    return _discountTotal!;
  }

  String? getDiscountTotal(){
    return _discountTotal;
  }

  set discountTotal(String data){
    _discountTotal = data;
  }

  void setDiscountTotal(String? data){
    _discountTotal = data;
  }

  String? _doneBillTotal;

  String get doneBillTotal{
    return _doneBillTotal!;
  }

  String? getDoneBillTotal(){
    return _doneBillTotal;
  }

  set doneBillTotal(String data){
    _doneBillTotal = data;
  }

  void setDoneBillTotal(String? data){
    _doneBillTotal = data;
  }

  String? _doneExecuteAmount;

  String get doneExecuteAmount{
    return _doneExecuteAmount!;
  }

  String? getDoneExecuteAmount(){
    return _doneExecuteAmount;
  }

  set doneExecuteAmount(String data){
    _doneExecuteAmount = data;
  }

  void setDoneExecuteAmount(String? data){
    _doneExecuteAmount = data;
  }

  int? _hasFinishBillCount;

  int get hasFinishBillCount{
    return _hasFinishBillCount!;
  }

  int? getHasFinishBillCount(){
    return _hasFinishBillCount;
  }

  set hasFinishBillCount(int data){
    _hasFinishBillCount = data;
  }

  void setHasFinishBillCount(int? data){
    _hasFinishBillCount = data;
  }

  int? _hasNotFinishBillCount;

  int get hasNotFinishBillCount{
    return _hasNotFinishBillCount!;
  }

  int? getHasNotFinishBillCount(){
    return _hasNotFinishBillCount;
  }

  set hasNotFinishBillCount(int data){
    _hasNotFinishBillCount = data;
  }

  void setHasNotFinishBillCount(int? data){
    _hasNotFinishBillCount = data;
  }

  String? _payCashTotal;

  String get payCashTotal{
    return _payCashTotal!;
  }

  String? getPayCashTotal(){
    return _payCashTotal;
  }

  set payCashTotal(String data){
    _payCashTotal = data;
  }

  void setPayCashTotal(String? data){
    _payCashTotal = data;
  }

  String? _payDiscount;

  String get payDiscount{
    return _payDiscount!;
  }

  String? getPayDiscount(){
    return _payDiscount;
  }

  set payDiscount(String data){
    _payDiscount = data;
  }

  void setPayDiscount(String? data){
    _payDiscount = data;
  }

  String? _preTaxTotal;

  String get preTaxTotal{
    return _preTaxTotal!;
  }

  String? getPreTaxTotal(){
    return _preTaxTotal;
  }

  set preTaxTotal(String data){
    _preTaxTotal = data;
  }

  void setPreTaxTotal(String? data){
    _preTaxTotal = data;
  }

  String? _profitRate;

  String get profitRate{
    return _profitRate!;
  }

  String? getProfitRate(){
    return _profitRate;
  }

  set profitRate(String data){
    _profitRate = data;
  }

  void setProfitRate(String? data){
    _profitRate = data;
  }

  String? _profitTotal;

  String get profitTotal{
    return _profitTotal!;
  }

  String? getProfitTotal(){
    return _profitTotal;
  }

  set profitTotal(String data){
    _profitTotal = data;
  }

  void setProfitTotal(String? data){
    _profitTotal = data;
  }

  String? _receiveCashTotal;

  String get receiveCashTotal{
    return _receiveCashTotal!;
  }

  String? getReceiveCashTotal(){
    return _receiveCashTotal;
  }

  set receiveCashTotal(String data){
    _receiveCashTotal = data;
  }

  void setReceiveCashTotal(String? data){
    _receiveCashTotal = data;
  }

  String? _receiveDiscount;

  String get receiveDiscount{
    return _receiveDiscount!;
  }

  String? getReceiveDiscount(){
    return _receiveDiscount;
  }

  set receiveDiscount(String data){
    _receiveDiscount = data;
  }

  void setReceiveDiscount(String? data){
    _receiveDiscount = data;
  }

  String? _spendAdvancePayable;

  String get spendAdvancePayable{
    return _spendAdvancePayable!;
  }

  String? getSpendAdvancePayable(){
    return _spendAdvancePayable;
  }

  set spendAdvancePayable(String data){
    _spendAdvancePayable = data;
  }

  void setSpendAdvancePayable(String? data){
    _spendAdvancePayable = data;
  }

  String? _spendAdvanceReceivable;

  String get spendAdvanceReceivable{
    return _spendAdvanceReceivable!;
  }

  String? getSpendAdvanceReceivable(){
    return _spendAdvanceReceivable;
  }

  set spendAdvanceReceivable(String data){
    _spendAdvanceReceivable = data;
  }

  void setSpendAdvanceReceivable(String? data){
    _spendAdvanceReceivable = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

  String? _totalAmount;

  String get totalAmount{
    return _totalAmount!;
  }

  String? getTotalAmount(){
    return _totalAmount;
  }

  set totalAmount(String data){
    _totalAmount = data;
  }

  void setTotalAmount(String? data){
    _totalAmount = data;
  }

  String? _undoneBillTotal;

  String get undoneBillTotal{
    return _undoneBillTotal!;
  }

  String? getUndoneBillTotal(){
    return _undoneBillTotal;
  }

  set undoneBillTotal(String data){
    _undoneBillTotal = data;
  }

  void setUndoneBillTotal(String? data){
    _undoneBillTotal = data;
  }

  String? _undoneExecuteAmount;

  String get undoneExecuteAmount{
    return _undoneExecuteAmount!;
  }

  String? getUndoneExecuteAmount(){
    return _undoneExecuteAmount;
  }

  set undoneExecuteAmount(String data){
    _undoneExecuteAmount = data;
  }

  void setUndoneExecuteAmount(String? data){
    _undoneExecuteAmount = data;
  }

}

class FTypeOrderSourceOrderItem extends IDataField {
  static const orderId = FTypeOrderSourceOrderItem('orderId');
  static const orderNumber = FTypeOrderSourceOrderItem('orderNumber');
  static const orderType = FTypeOrderSourceOrderItem('orderType');
  const FTypeOrderSourceOrderItem(super.key);
}

final FieldReflectInfo<TypeOrderSourceOrderItem> _TypeOrderSourceOrderItem_fields = {
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
};

class TypeOrderSourceOrderItem extends IDataBasic implements IDataDynamic {
  TypeOrderSourceOrderItem({
    int? orderId,
    String? orderNumber,
    TypeEnumOrderType? orderType
  }):
    _orderId = orderId,
    _orderNumber = orderNumber,
    _orderType = orderType;

  static TypeOrderSourceOrderItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSourceOrderItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSourceOrderItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSourceOrderItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSourceOrderItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSourceOrderItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSourceOrderItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSourceOrderItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

}

class FTypeOrderSubOrder extends IDataField {
  static const billTotal = FTypeOrderSubOrder('billTotal');
  static const discountBill = FTypeOrderSubOrder('discountBill');
  static const id = FTypeOrderSubOrder('id');
  static const moneyBill = FTypeOrderSubOrder('moneyBill');
  static const remark = FTypeOrderSubOrder('remark');
  static const subOrderBillType = FTypeOrderSubOrder('subOrderBillType');
  static const subOrderContactId = FTypeOrderSubOrder('subOrderContactId');
  static const subOrderId = FTypeOrderSubOrder('subOrderId');
  static const subOrderInfo = FTypeOrderSubOrder('subOrderInfo');
  static const subOrderNumber = FTypeOrderSubOrder('subOrderNumber');
  static const subOrderType = FTypeOrderSubOrder('subOrderType');
  const FTypeOrderSubOrder(super.key);
}

final FieldReflectInfo<TypeOrderSubOrder> _TypeOrderSubOrder_fields = {
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "discountBill": (
    getter: (data) => data._discountBill,
    setter: (data, value) => data._discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountBill = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "moneyBill": (
    getter: (data) => data._moneyBill,
    setter: (data, value) => data._moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._moneyBill = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "subOrderBillType": (
    getter: (data) => data._subOrderBillType,
    setter: (data, value) => data._subOrderBillType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data._subOrderBillType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data._subOrderBillType = parser(value);
    }
  ),
  "subOrderContactId": (
    getter: (data) => data._subOrderContactId,
    setter: (data, value) => data._subOrderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._subOrderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._subOrderContactId = parser(value);
    }
  ),
  "subOrderId": (
    getter: (data) => data._subOrderId,
    setter: (data, value) => data._subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._subOrderId = parser(value);
    }
  ),
  "subOrderInfo": (
    getter: (data) => data._subOrderInfo,
    setter: (data, value) => data._subOrderInfo = value as TypeAutoInjectLiteOrder?,
    toDynamic: (data) {
      final formatter = TypeAutoInjectLiteOrder.toDynamic;
      return formatter(data._subOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAutoInjectLiteOrder.fromDynamic;
      data._subOrderInfo = parser(value);
    }
  ),
  "subOrderNumber": (
    getter: (data) => data._subOrderNumber,
    setter: (data, value) => data._subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderNumber = parser(value);
    }
  ),
  "subOrderType": (
    getter: (data) => data._subOrderType,
    setter: (data, value) => data._subOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._subOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._subOrderType = parser(value);
    }
  ),
};

class TypeOrderSubOrder extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrder({
    String? billTotal,
    String? discountBill,
    int? id,
    String? moneyBill,
    String? remark,
    TypeEnumOrderBillType? subOrderBillType,
    int? subOrderContactId,
    int? subOrderId,
    TypeAutoInjectLiteOrder? subOrderInfo,
    String? subOrderNumber,
    TypeEnumOrderType? subOrderType
  }):
    _billTotal = billTotal,
    _discountBill = discountBill,
    _id = id,
    _moneyBill = moneyBill,
    _remark = remark,
    _subOrderBillType = subOrderBillType,
    _subOrderContactId = subOrderContactId,
    _subOrderId = subOrderId,
    _subOrderInfo = subOrderInfo,
    _subOrderNumber = subOrderNumber,
    _subOrderType = subOrderType;

  static TypeOrderSubOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  String? _discountBill;

  String get discountBill{
    return _discountBill!;
  }

  String? getDiscountBill(){
    return _discountBill;
  }

  set discountBill(String data){
    _discountBill = data;
  }

  void setDiscountBill(String? data){
    _discountBill = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _moneyBill;

  String get moneyBill{
    return _moneyBill!;
  }

  String? getMoneyBill(){
    return _moneyBill;
  }

  set moneyBill(String data){
    _moneyBill = data;
  }

  void setMoneyBill(String? data){
    _moneyBill = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  TypeEnumOrderBillType? _subOrderBillType;

  TypeEnumOrderBillType get subOrderBillType{
    return _subOrderBillType!;
  }

  TypeEnumOrderBillType? getSubOrderBillType(){
    return _subOrderBillType;
  }

  set subOrderBillType(TypeEnumOrderBillType data){
    _subOrderBillType = data;
  }

  void setSubOrderBillType(TypeEnumOrderBillType? data){
    _subOrderBillType = data;
  }

  int? _subOrderContactId;

  int get subOrderContactId{
    return _subOrderContactId!;
  }

  int? getSubOrderContactId(){
    return _subOrderContactId;
  }

  set subOrderContactId(int data){
    _subOrderContactId = data;
  }

  void setSubOrderContactId(int? data){
    _subOrderContactId = data;
  }

  int? _subOrderId;

  int get subOrderId{
    return _subOrderId!;
  }

  int? getSubOrderId(){
    return _subOrderId;
  }

  set subOrderId(int data){
    _subOrderId = data;
  }

  void setSubOrderId(int? data){
    _subOrderId = data;
  }

  TypeAutoInjectLiteOrder? _subOrderInfo;

  TypeAutoInjectLiteOrder get subOrderInfo{
    return _subOrderInfo!;
  }

  TypeAutoInjectLiteOrder? getSubOrderInfo(){
    return _subOrderInfo;
  }

  set subOrderInfo(TypeAutoInjectLiteOrder data){
    _subOrderInfo = data;
  }

  void setSubOrderInfo(TypeAutoInjectLiteOrder? data){
    _subOrderInfo = data;
  }

  String? _subOrderNumber;

  String get subOrderNumber{
    return _subOrderNumber!;
  }

  String? getSubOrderNumber(){
    return _subOrderNumber;
  }

  set subOrderNumber(String data){
    _subOrderNumber = data;
  }

  void setSubOrderNumber(String? data){
    _subOrderNumber = data;
  }

  TypeEnumOrderType? _subOrderType;

  TypeEnumOrderType get subOrderType{
    return _subOrderType!;
  }

  TypeEnumOrderType? getSubOrderType(){
    return _subOrderType;
  }

  set subOrderType(TypeEnumOrderType data){
    _subOrderType = data;
  }

  void setSubOrderType(TypeEnumOrderType? data){
    _subOrderType = data;
  }

}

class FTypeOrderSubOrderQueryDTO extends IDataField {
  static const data = FTypeOrderSubOrderQueryDTO('data');
  static const pageIndex = FTypeOrderSubOrderQueryDTO('pageIndex');
  static const pageSize = FTypeOrderSubOrderQueryDTO('pageSize');
  static const sum = FTypeOrderSubOrderQueryDTO('sum');
  const FTypeOrderSubOrderQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQueryDTO> _TypeOrderSubOrderQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOrderSubOrderQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubOrderQueryDataDTO>((single){
        final handler = TypeOrderSubOrderQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubOrderQueryDataDTO>((single){
        final handler = TypeOrderSubOrderQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeOrderSubOrderQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderSubOrderQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSubOrderQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeOrderSubOrderQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQueryDTO({
    List<TypeOrderSubOrderQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeOrderSubOrderQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeOrderSubOrderQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderSubOrderQueryDataDTO>? _data;

  List<TypeOrderSubOrderQueryDataDTO> get data{
    return _data!;
  }

  List<TypeOrderSubOrderQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeOrderSubOrderQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeOrderSubOrderQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeOrderSubOrderQuerySumDTO? _sum;

  TypeOrderSubOrderQuerySumDTO get sum{
    return _sum!;
  }

  TypeOrderSubOrderQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeOrderSubOrderQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeOrderSubOrderQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeOrderSubOrderQueryDataDTO extends IDataField {
  static const billTotal = FTypeOrderSubOrderQueryDataDTO('billTotal');
  static const discountBill = FTypeOrderSubOrderQueryDataDTO('discountBill');
  static const id = FTypeOrderSubOrderQueryDataDTO('id');
  static const moneyBill = FTypeOrderSubOrderQueryDataDTO('moneyBill');
  static const orderBillType = FTypeOrderSubOrderQueryDataDTO('orderBillType');
  static const orderContactId = FTypeOrderSubOrderQueryDataDTO('orderContactId');
  static const orderContactName = FTypeOrderSubOrderQueryDataDTO('orderContactName');
  static const orderDate = FTypeOrderSubOrderQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeOrderSubOrderQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeOrderSubOrderQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeOrderSubOrderQueryDataDTO('orderNumber');
  static const orderPayCashAccountId = FTypeOrderSubOrderQueryDataDTO('orderPayCashAccountId');
  static const orderPayCashAccountName = FTypeOrderSubOrderQueryDataDTO('orderPayCashAccountName');
  static const orderReceiveCashAccountId = FTypeOrderSubOrderQueryDataDTO('orderReceiveCashAccountId');
  static const orderReceiveCashAccountName = FTypeOrderSubOrderQueryDataDTO('orderReceiveCashAccountName');
  static const orderRedState = FTypeOrderSubOrderQueryDataDTO('orderRedState');
  static const orderRemark = FTypeOrderSubOrderQueryDataDTO('orderRemark');
  static const orderState = FTypeOrderSubOrderQueryDataDTO('orderState');
  static const orderType = FTypeOrderSubOrderQueryDataDTO('orderType');
  static const remark = FTypeOrderSubOrderQueryDataDTO('remark');
  static const subOrderBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderBillTotal');
  static const subOrderDoneBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderDoneBillTotal');
  static const subOrderId = FTypeOrderSubOrderQueryDataDTO('subOrderId');
  static const subOrderNumber = FTypeOrderSubOrderQueryDataDTO('subOrderNumber');
  static const subOrderStoreId = FTypeOrderSubOrderQueryDataDTO('subOrderStoreId');
  static const subOrderStoreName = FTypeOrderSubOrderQueryDataDTO('subOrderStoreName');
  static const subOrderType = FTypeOrderSubOrderQueryDataDTO('subOrderType');
  static const subOrderUnDoneBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderUnDoneBillTotal');
  const FTypeOrderSubOrderQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQueryDataDTO> _TypeOrderSubOrderQueryDataDTO_fields = {
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "discountBill": (
    getter: (data) => data._discountBill,
    setter: (data, value) => data._discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountBill = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "moneyBill": (
    getter: (data) => data._moneyBill,
    setter: (data, value) => data._moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._moneyBill = parser(value);
    }
  ),
  "orderBillType": (
    getter: (data) => data._orderBillType,
    setter: (data, value) => data._orderBillType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data._orderBillType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data._orderBillType = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderPayCashAccountId": (
    getter: (data) => data._orderPayCashAccountId,
    setter: (data, value) => data._orderPayCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderPayCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderPayCashAccountId = parser(value);
    }
  ),
  "orderPayCashAccountName": (
    getter: (data) => data._orderPayCashAccountName,
    setter: (data, value) => data._orderPayCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderPayCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderPayCashAccountName = parser(value);
    }
  ),
  "orderReceiveCashAccountId": (
    getter: (data) => data._orderReceiveCashAccountId,
    setter: (data, value) => data._orderReceiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderReceiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderReceiveCashAccountId = parser(value);
    }
  ),
  "orderReceiveCashAccountName": (
    getter: (data) => data._orderReceiveCashAccountName,
    setter: (data, value) => data._orderReceiveCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderReceiveCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderReceiveCashAccountName = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderRemark": (
    getter: (data) => data._orderRemark,
    setter: (data, value) => data._orderRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderRemark = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "subOrderBillTotal": (
    getter: (data) => data._subOrderBillTotal,
    setter: (data, value) => data._subOrderBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderBillTotal = parser(value);
    }
  ),
  "subOrderDoneBillTotal": (
    getter: (data) => data._subOrderDoneBillTotal,
    setter: (data, value) => data._subOrderDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderDoneBillTotal = parser(value);
    }
  ),
  "subOrderId": (
    getter: (data) => data._subOrderId,
    setter: (data, value) => data._subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._subOrderId = parser(value);
    }
  ),
  "subOrderNumber": (
    getter: (data) => data._subOrderNumber,
    setter: (data, value) => data._subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderNumber = parser(value);
    }
  ),
  "subOrderStoreId": (
    getter: (data) => data._subOrderStoreId,
    setter: (data, value) => data._subOrderStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._subOrderStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._subOrderStoreId = parser(value);
    }
  ),
  "subOrderStoreName": (
    getter: (data) => data._subOrderStoreName,
    setter: (data, value) => data._subOrderStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderStoreName = parser(value);
    }
  ),
  "subOrderType": (
    getter: (data) => data._subOrderType,
    setter: (data, value) => data._subOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._subOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._subOrderType = parser(value);
    }
  ),
  "subOrderUnDoneBillTotal": (
    getter: (data) => data._subOrderUnDoneBillTotal,
    setter: (data, value) => data._subOrderUnDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._subOrderUnDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._subOrderUnDoneBillTotal = parser(value);
    }
  ),
};

class TypeOrderSubOrderQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQueryDataDTO({
    String? billTotal,
    String? discountBill,
    int? id,
    String? moneyBill,
    TypeEnumOrderBillType? orderBillType,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    int? orderPayCashAccountId,
    String? orderPayCashAccountName,
    int? orderReceiveCashAccountId,
    String? orderReceiveCashAccountName,
    TypeEnumOrderRedState? orderRedState,
    String? orderRemark,
    TypeEnumOrderState? orderState,
    TypeEnumOrderType? orderType,
    String? remark,
    String? subOrderBillTotal,
    String? subOrderDoneBillTotal,
    int? subOrderId,
    String? subOrderNumber,
    int? subOrderStoreId,
    String? subOrderStoreName,
    TypeEnumOrderType? subOrderType,
    String? subOrderUnDoneBillTotal
  }):
    _billTotal = billTotal,
    _discountBill = discountBill,
    _id = id,
    _moneyBill = moneyBill,
    _orderBillType = orderBillType,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderPayCashAccountId = orderPayCashAccountId,
    _orderPayCashAccountName = orderPayCashAccountName,
    _orderReceiveCashAccountId = orderReceiveCashAccountId,
    _orderReceiveCashAccountName = orderReceiveCashAccountName,
    _orderRedState = orderRedState,
    _orderRemark = orderRemark,
    _orderState = orderState,
    _orderType = orderType,
    _remark = remark,
    _subOrderBillTotal = subOrderBillTotal,
    _subOrderDoneBillTotal = subOrderDoneBillTotal,
    _subOrderId = subOrderId,
    _subOrderNumber = subOrderNumber,
    _subOrderStoreId = subOrderStoreId,
    _subOrderStoreName = subOrderStoreName,
    _subOrderType = subOrderType,
    _subOrderUnDoneBillTotal = subOrderUnDoneBillTotal;

  static TypeOrderSubOrderQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  String? _discountBill;

  String get discountBill{
    return _discountBill!;
  }

  String? getDiscountBill(){
    return _discountBill;
  }

  set discountBill(String data){
    _discountBill = data;
  }

  void setDiscountBill(String? data){
    _discountBill = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _moneyBill;

  String get moneyBill{
    return _moneyBill!;
  }

  String? getMoneyBill(){
    return _moneyBill;
  }

  set moneyBill(String data){
    _moneyBill = data;
  }

  void setMoneyBill(String? data){
    _moneyBill = data;
  }

  TypeEnumOrderBillType? _orderBillType;

  TypeEnumOrderBillType get orderBillType{
    return _orderBillType!;
  }

  TypeEnumOrderBillType? getOrderBillType(){
    return _orderBillType;
  }

  set orderBillType(TypeEnumOrderBillType data){
    _orderBillType = data;
  }

  void setOrderBillType(TypeEnumOrderBillType? data){
    _orderBillType = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  int? _orderPayCashAccountId;

  int get orderPayCashAccountId{
    return _orderPayCashAccountId!;
  }

  int? getOrderPayCashAccountId(){
    return _orderPayCashAccountId;
  }

  set orderPayCashAccountId(int data){
    _orderPayCashAccountId = data;
  }

  void setOrderPayCashAccountId(int? data){
    _orderPayCashAccountId = data;
  }

  String? _orderPayCashAccountName;

  String get orderPayCashAccountName{
    return _orderPayCashAccountName!;
  }

  String? getOrderPayCashAccountName(){
    return _orderPayCashAccountName;
  }

  set orderPayCashAccountName(String data){
    _orderPayCashAccountName = data;
  }

  void setOrderPayCashAccountName(String? data){
    _orderPayCashAccountName = data;
  }

  int? _orderReceiveCashAccountId;

  int get orderReceiveCashAccountId{
    return _orderReceiveCashAccountId!;
  }

  int? getOrderReceiveCashAccountId(){
    return _orderReceiveCashAccountId;
  }

  set orderReceiveCashAccountId(int data){
    _orderReceiveCashAccountId = data;
  }

  void setOrderReceiveCashAccountId(int? data){
    _orderReceiveCashAccountId = data;
  }

  String? _orderReceiveCashAccountName;

  String get orderReceiveCashAccountName{
    return _orderReceiveCashAccountName!;
  }

  String? getOrderReceiveCashAccountName(){
    return _orderReceiveCashAccountName;
  }

  set orderReceiveCashAccountName(String data){
    _orderReceiveCashAccountName = data;
  }

  void setOrderReceiveCashAccountName(String? data){
    _orderReceiveCashAccountName = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  String? _orderRemark;

  String get orderRemark{
    return _orderRemark!;
  }

  String? getOrderRemark(){
    return _orderRemark;
  }

  set orderRemark(String data){
    _orderRemark = data;
  }

  void setOrderRemark(String? data){
    _orderRemark = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _subOrderBillTotal;

  String get subOrderBillTotal{
    return _subOrderBillTotal!;
  }

  String? getSubOrderBillTotal(){
    return _subOrderBillTotal;
  }

  set subOrderBillTotal(String data){
    _subOrderBillTotal = data;
  }

  void setSubOrderBillTotal(String? data){
    _subOrderBillTotal = data;
  }

  String? _subOrderDoneBillTotal;

  String get subOrderDoneBillTotal{
    return _subOrderDoneBillTotal!;
  }

  String? getSubOrderDoneBillTotal(){
    return _subOrderDoneBillTotal;
  }

  set subOrderDoneBillTotal(String data){
    _subOrderDoneBillTotal = data;
  }

  void setSubOrderDoneBillTotal(String? data){
    _subOrderDoneBillTotal = data;
  }

  int? _subOrderId;

  int get subOrderId{
    return _subOrderId!;
  }

  int? getSubOrderId(){
    return _subOrderId;
  }

  set subOrderId(int data){
    _subOrderId = data;
  }

  void setSubOrderId(int? data){
    _subOrderId = data;
  }

  String? _subOrderNumber;

  String get subOrderNumber{
    return _subOrderNumber!;
  }

  String? getSubOrderNumber(){
    return _subOrderNumber;
  }

  set subOrderNumber(String data){
    _subOrderNumber = data;
  }

  void setSubOrderNumber(String? data){
    _subOrderNumber = data;
  }

  int? _subOrderStoreId;

  int get subOrderStoreId{
    return _subOrderStoreId!;
  }

  int? getSubOrderStoreId(){
    return _subOrderStoreId;
  }

  set subOrderStoreId(int data){
    _subOrderStoreId = data;
  }

  void setSubOrderStoreId(int? data){
    _subOrderStoreId = data;
  }

  String? _subOrderStoreName;

  String get subOrderStoreName{
    return _subOrderStoreName!;
  }

  String? getSubOrderStoreName(){
    return _subOrderStoreName;
  }

  set subOrderStoreName(String data){
    _subOrderStoreName = data;
  }

  void setSubOrderStoreName(String? data){
    _subOrderStoreName = data;
  }

  TypeEnumOrderType? _subOrderType;

  TypeEnumOrderType get subOrderType{
    return _subOrderType!;
  }

  TypeEnumOrderType? getSubOrderType(){
    return _subOrderType;
  }

  set subOrderType(TypeEnumOrderType data){
    _subOrderType = data;
  }

  void setSubOrderType(TypeEnumOrderType? data){
    _subOrderType = data;
  }

  String? _subOrderUnDoneBillTotal;

  String get subOrderUnDoneBillTotal{
    return _subOrderUnDoneBillTotal!;
  }

  String? getSubOrderUnDoneBillTotal(){
    return _subOrderUnDoneBillTotal;
  }

  set subOrderUnDoneBillTotal(String data){
    _subOrderUnDoneBillTotal = data;
  }

  void setSubOrderUnDoneBillTotal(String? data){
    _subOrderUnDoneBillTotal = data;
  }

}

class FTypeOrderSubOrderQuerySumDTO extends IDataField {
  static const billTotal = FTypeOrderSubOrderQuerySumDTO('billTotal');
  static const count = FTypeOrderSubOrderQuerySumDTO('count');
  static const discountBill = FTypeOrderSubOrderQuerySumDTO('discountBill');
  static const moneyBill = FTypeOrderSubOrderQuerySumDTO('moneyBill');
  const FTypeOrderSubOrderQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQuerySumDTO> _TypeOrderSubOrderQuerySumDTO_fields = {
  "billTotal": (
    getter: (data) => data._billTotal,
    setter: (data, value) => data._billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._billTotal = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "discountBill": (
    getter: (data) => data._discountBill,
    setter: (data, value) => data._discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._discountBill = parser(value);
    }
  ),
  "moneyBill": (
    getter: (data) => data._moneyBill,
    setter: (data, value) => data._moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._moneyBill = parser(value);
    }
  ),
};

class TypeOrderSubOrderQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQuerySumDTO({
    String? billTotal,
    int? count,
    String? discountBill,
    String? moneyBill
  }):
    _billTotal = billTotal,
    _count = count,
    _discountBill = discountBill,
    _moneyBill = moneyBill;

  static TypeOrderSubOrderQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _billTotal;

  String get billTotal{
    return _billTotal!;
  }

  String? getBillTotal(){
    return _billTotal;
  }

  set billTotal(String data){
    _billTotal = data;
  }

  void setBillTotal(String? data){
    _billTotal = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _discountBill;

  String get discountBill{
    return _discountBill!;
  }

  String? getDiscountBill(){
    return _discountBill;
  }

  set discountBill(String data){
    _discountBill = data;
  }

  void setDiscountBill(String? data){
    _discountBill = data;
  }

  String? _moneyBill;

  String get moneyBill{
    return _moneyBill!;
  }

  String? getMoneyBill(){
    return _moneyBill;
  }

  set moneyBill(String data){
    _moneyBill = data;
  }

  void setMoneyBill(String? data){
    _moneyBill = data;
  }

}

class FTypeOrderSubject extends IDataField {
  static const accountId = FTypeOrderSubject('accountId');
  static const accountInfo = FTypeOrderSubject('accountInfo');
  static const auxiliaryContactId = FTypeOrderSubject('auxiliaryContactId');
  static const auxiliaryContactInfo = FTypeOrderSubject('auxiliaryContactInfo');
  static const auxiliaryEmployeeId = FTypeOrderSubject('auxiliaryEmployeeId');
  static const auxiliaryEmployeeInfo = FTypeOrderSubject('auxiliaryEmployeeInfo');
  static const auxiliaryStoreId = FTypeOrderSubject('auxiliaryStoreId');
  static const auxiliaryStoreInfo = FTypeOrderSubject('auxiliaryStoreInfo');
  static const id = FTypeOrderSubject('id');
  static const remark = FTypeOrderSubject('remark');
  static const total = FTypeOrderSubject('total');
  const FTypeOrderSubject(super.key);
}

final FieldReflectInfo<TypeOrderSubject> _TypeOrderSubject_fields = {
  "accountId": (
    getter: (data) => data._accountId,
    setter: (data, value) => data._accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._accountId = parser(value);
    }
  ),
  "accountInfo": (
    getter: (data) => data._accountInfo,
    setter: (data, value) => data._accountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data._accountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data._accountInfo = parser(value);
    }
  ),
  "auxiliaryContactId": (
    getter: (data) => data._auxiliaryContactId,
    setter: (data, value) => data._auxiliaryContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryContactId = parser(value);
    }
  ),
  "auxiliaryContactInfo": (
    getter: (data) => data._auxiliaryContactInfo,
    setter: (data, value) => data._auxiliaryContactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data._auxiliaryContactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data._auxiliaryContactInfo = parser(value);
    }
  ),
  "auxiliaryEmployeeId": (
    getter: (data) => data._auxiliaryEmployeeId,
    setter: (data, value) => data._auxiliaryEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryEmployeeId = parser(value);
    }
  ),
  "auxiliaryEmployeeInfo": (
    getter: (data) => data._auxiliaryEmployeeInfo,
    setter: (data, value) => data._auxiliaryEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data._auxiliaryEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data._auxiliaryEmployeeInfo = parser(value);
    }
  ),
  "auxiliaryStoreId": (
    getter: (data) => data._auxiliaryStoreId,
    setter: (data, value) => data._auxiliaryStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._auxiliaryStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._auxiliaryStoreId = parser(value);
    }
  ),
  "auxiliaryStoreInfo": (
    getter: (data) => data._auxiliaryStoreInfo,
    setter: (data, value) => data._auxiliaryStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._auxiliaryStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._auxiliaryStoreInfo = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeOrderSubject extends IDataBasic implements IDataDynamic {
  TypeOrderSubject({
    int? accountId,
    TypeAccount? accountInfo,
    int? auxiliaryContactId,
    TypeContact? auxiliaryContactInfo,
    int? auxiliaryEmployeeId,
    TypeEmployee? auxiliaryEmployeeInfo,
    int? auxiliaryStoreId,
    TypeStore? auxiliaryStoreInfo,
    int? id,
    String? remark,
    String? total
  }):
    _accountId = accountId,
    _accountInfo = accountInfo,
    _auxiliaryContactId = auxiliaryContactId,
    _auxiliaryContactInfo = auxiliaryContactInfo,
    _auxiliaryEmployeeId = auxiliaryEmployeeId,
    _auxiliaryEmployeeInfo = auxiliaryEmployeeInfo,
    _auxiliaryStoreId = auxiliaryStoreId,
    _auxiliaryStoreInfo = auxiliaryStoreInfo,
    _id = id,
    _remark = remark,
    _total = total;

  static TypeOrderSubject? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubject();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubject_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubject: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubject? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubject_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubject_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubject_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _accountId;

  int get accountId{
    return _accountId!;
  }

  int? getAccountId(){
    return _accountId;
  }

  set accountId(int data){
    _accountId = data;
  }

  void setAccountId(int? data){
    _accountId = data;
  }

  TypeAccount? _accountInfo;

  TypeAccount get accountInfo{
    return _accountInfo!;
  }

  TypeAccount? getAccountInfo(){
    return _accountInfo;
  }

  set accountInfo(TypeAccount data){
    _accountInfo = data;
  }

  void setAccountInfo(TypeAccount? data){
    _accountInfo = data;
  }

  int? _auxiliaryContactId;

  int get auxiliaryContactId{
    return _auxiliaryContactId!;
  }

  int? getAuxiliaryContactId(){
    return _auxiliaryContactId;
  }

  set auxiliaryContactId(int data){
    _auxiliaryContactId = data;
  }

  void setAuxiliaryContactId(int? data){
    _auxiliaryContactId = data;
  }

  TypeContact? _auxiliaryContactInfo;

  TypeContact get auxiliaryContactInfo{
    return _auxiliaryContactInfo!;
  }

  TypeContact? getAuxiliaryContactInfo(){
    return _auxiliaryContactInfo;
  }

  set auxiliaryContactInfo(TypeContact data){
    _auxiliaryContactInfo = data;
  }

  void setAuxiliaryContactInfo(TypeContact? data){
    _auxiliaryContactInfo = data;
  }

  int? _auxiliaryEmployeeId;

  int get auxiliaryEmployeeId{
    return _auxiliaryEmployeeId!;
  }

  int? getAuxiliaryEmployeeId(){
    return _auxiliaryEmployeeId;
  }

  set auxiliaryEmployeeId(int data){
    _auxiliaryEmployeeId = data;
  }

  void setAuxiliaryEmployeeId(int? data){
    _auxiliaryEmployeeId = data;
  }

  TypeEmployee? _auxiliaryEmployeeInfo;

  TypeEmployee get auxiliaryEmployeeInfo{
    return _auxiliaryEmployeeInfo!;
  }

  TypeEmployee? getAuxiliaryEmployeeInfo(){
    return _auxiliaryEmployeeInfo;
  }

  set auxiliaryEmployeeInfo(TypeEmployee data){
    _auxiliaryEmployeeInfo = data;
  }

  void setAuxiliaryEmployeeInfo(TypeEmployee? data){
    _auxiliaryEmployeeInfo = data;
  }

  int? _auxiliaryStoreId;

  int get auxiliaryStoreId{
    return _auxiliaryStoreId!;
  }

  int? getAuxiliaryStoreId(){
    return _auxiliaryStoreId;
  }

  set auxiliaryStoreId(int data){
    _auxiliaryStoreId = data;
  }

  void setAuxiliaryStoreId(int? data){
    _auxiliaryStoreId = data;
  }

  TypeStore? _auxiliaryStoreInfo;

  TypeStore get auxiliaryStoreInfo{
    return _auxiliaryStoreInfo!;
  }

  TypeStore? getAuxiliaryStoreInfo(){
    return _auxiliaryStoreInfo;
  }

  set auxiliaryStoreInfo(TypeStore data){
    _auxiliaryStoreInfo = data;
  }

  void setAuxiliaryStoreInfo(TypeStore? data){
    _auxiliaryStoreInfo = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeOutput extends IDataField {
  static const constraints = FTypeOutput('constraints');
  static const state = FTypeOutput('state');
  const FTypeOutput(super.key);
}

final FieldReflectInfo<TypeOutput> _TypeOutput_fields = {
  "constraints": (
    getter: (data) => data._constraints,
    setter: (data, value) => data._constraints = value as List<TypeCombineConstraint>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeCombineConstraint>((single){
        final handler = TypeCombineConstraint.toDynamic;
        return handler(single)!;
      });
      return formatter(data._constraints);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeCombineConstraint>((single){
        final handler = TypeCombineConstraint.fromDynamic;
        return handler(single)!;
      });
      data._constraints = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeColumnState?,
    toDynamic: (data) {
      final formatter = TypeColumnState.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeColumnState.fromDynamic;
      data._state = parser(value);
    }
  ),
};

class TypeOutput extends IDataBasic implements IDataDynamic {
  TypeOutput({
    List<TypeCombineConstraint>? constraints,
    TypeColumnState? state
  }):
    _constraints = constraints,
    _state = state;

  static TypeOutput? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOutput();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOutput_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOutput: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOutput? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOutput_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOutput_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOutput_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeCombineConstraint>? _constraints;

  List<TypeCombineConstraint> get constraints{
    return _constraints!;
  }

  List<TypeCombineConstraint>? getConstraints(){
    return _constraints;
  }

  set constraints(List<TypeCombineConstraint> data){
    _constraints = data;
  }

  void setConstraints(List<TypeCombineConstraint>? data){
    _constraints = data;
  }

  TypeColumnState? _state;

  TypeColumnState get state{
    return _state!;
  }

  TypeColumnState? getState(){
    return _state;
  }

  set state(TypeColumnState data){
    _state = data;
  }

  void setState(TypeColumnState? data){
    _state = data;
  }

}

class FTypePageListAccount extends IDataField {
  static const count = FTypePageListAccount('count');
  static const data = FTypePageListAccount('data');
  static const pageIndex = FTypePageListAccount('pageIndex');
  static const pageSize = FTypePageListAccount('pageSize');
  const FTypePageListAccount(super.key);
}

final FieldReflectInfo<TypePageListAccount> _TypePageListAccount_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccount>((single){
        final handler = TypeAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
        final handler = TypeAccount.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListAccount extends IDataBasic implements IDataDynamic {
  TypePageListAccount({
    int? count,
    List<TypeAccount>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeAccount>? _data;

  List<TypeAccount> get data{
    return _data!;
  }

  List<TypeAccount>? getData(){
    return _data;
  }

  set data(List<TypeAccount> data){
    _data = data;
  }

  void setData(List<TypeAccount>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListAssembleTemplate extends IDataField {
  static const count = FTypePageListAssembleTemplate('count');
  static const data = FTypePageListAssembleTemplate('data');
  static const pageIndex = FTypePageListAssembleTemplate('pageIndex');
  static const pageSize = FTypePageListAssembleTemplate('pageSize');
  const FTypePageListAssembleTemplate(super.key);
}

final FieldReflectInfo<TypePageListAssembleTemplate> _TypePageListAssembleTemplate_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAssembleTemplate>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAssembleTemplate>((single){
        final handler = TypeAssembleTemplate.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAssembleTemplate>((single){
        final handler = TypeAssembleTemplate.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListAssembleTemplate extends IDataBasic implements IDataDynamic {
  TypePageListAssembleTemplate({
    int? count,
    List<TypeAssembleTemplate>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListAssembleTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAssembleTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAssembleTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAssembleTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAssembleTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeAssembleTemplate>? _data;

  List<TypeAssembleTemplate> get data{
    return _data!;
  }

  List<TypeAssembleTemplate>? getData(){
    return _data;
  }

  set data(List<TypeAssembleTemplate> data){
    _data = data;
  }

  void setData(List<TypeAssembleTemplate>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListAttachment extends IDataField {
  static const count = FTypePageListAttachment('count');
  static const data = FTypePageListAttachment('data');
  static const pageIndex = FTypePageListAttachment('pageIndex');
  static const pageSize = FTypePageListAttachment('pageSize');
  const FTypePageListAttachment(super.key);
}

final FieldReflectInfo<TypePageListAttachment> _TypePageListAttachment_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeAttachment>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAttachment>((single){
        final handler = TypeAttachment.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAttachment>((single){
        final handler = TypeAttachment.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListAttachment extends IDataBasic implements IDataDynamic {
  TypePageListAttachment({
    int? count,
    List<TypeAttachment>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListAttachment? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAttachment();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAttachment_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAttachment: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAttachment? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAttachment_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAttachment_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAttachment_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeAttachment>? _data;

  List<TypeAttachment> get data{
    return _data!;
  }

  List<TypeAttachment>? getData(){
    return _data;
  }

  set data(List<TypeAttachment> data){
    _data = data;
  }

  void setData(List<TypeAttachment>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListBackendTask extends IDataField {
  static const count = FTypePageListBackendTask('count');
  static const data = FTypePageListBackendTask('data');
  static const pageIndex = FTypePageListBackendTask('pageIndex');
  static const pageSize = FTypePageListBackendTask('pageSize');
  const FTypePageListBackendTask(super.key);
}

final FieldReflectInfo<TypePageListBackendTask> _TypePageListBackendTask_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeBackendTask>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeBackendTask>((single){
        final handler = TypeBackendTask.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeBackendTask>((single){
        final handler = TypeBackendTask.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListBackendTask extends IDataBasic implements IDataDynamic {
  TypePageListBackendTask({
    int? count,
    List<TypeBackendTask>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListBackendTask? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListBackendTask();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListBackendTask_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListBackendTask: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListBackendTask? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListBackendTask_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListBackendTask_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListBackendTask_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeBackendTask>? _data;

  List<TypeBackendTask> get data{
    return _data!;
  }

  List<TypeBackendTask>? getData(){
    return _data;
  }

  set data(List<TypeBackendTask> data){
    _data = data;
  }

  void setData(List<TypeBackendTask>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListContact extends IDataField {
  static const count = FTypePageListContact('count');
  static const data = FTypePageListContact('data');
  static const pageIndex = FTypePageListContact('pageIndex');
  static const pageSize = FTypePageListContact('pageSize');
  const FTypePageListContact(super.key);
}

final FieldReflectInfo<TypePageListContact> _TypePageListContact_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeContact>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContact>((single){
        final handler = TypeContact.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
        final handler = TypeContact.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListContact extends IDataBasic implements IDataDynamic {
  TypePageListContact({
    int? count,
    List<TypeContact>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListContact? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListContact();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListContact_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListContact: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListContact? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListContact_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListContact_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListContact_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeContact>? _data;

  List<TypeContact> get data{
    return _data!;
  }

  List<TypeContact>? getData(){
    return _data;
  }

  set data(List<TypeContact> data){
    _data = data;
  }

  void setData(List<TypeContact>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListEmployee extends IDataField {
  static const count = FTypePageListEmployee('count');
  static const data = FTypePageListEmployee('data');
  static const pageIndex = FTypePageListEmployee('pageIndex');
  static const pageSize = FTypePageListEmployee('pageSize');
  const FTypePageListEmployee(super.key);
}

final FieldReflectInfo<TypePageListEmployee> _TypePageListEmployee_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeEmployee>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeEmployee>((single){
        final handler = TypeEmployee.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeEmployee>((single){
        final handler = TypeEmployee.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListEmployee extends IDataBasic implements IDataDynamic {
  TypePageListEmployee({
    int? count,
    List<TypeEmployee>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListEmployee? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListEmployee();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListEmployee_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListEmployee: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListEmployee? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListEmployee_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListEmployee_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListEmployee_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeEmployee>? _data;

  List<TypeEmployee> get data{
    return _data!;
  }

  List<TypeEmployee>? getData(){
    return _data;
  }

  set data(List<TypeEmployee> data){
    _data = data;
  }

  void setData(List<TypeEmployee>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListItem extends IDataField {
  static const count = FTypePageListItem('count');
  static const data = FTypePageListItem('data');
  static const pageIndex = FTypePageListItem('pageIndex');
  static const pageSize = FTypePageListItem('pageSize');
  const FTypePageListItem(super.key);
}

final FieldReflectInfo<TypePageListItem> _TypePageListItem_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItem>((single){
        final handler = TypeItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
        final handler = TypeItem.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListItem extends IDataBasic implements IDataDynamic {
  TypePageListItem({
    int? count,
    List<TypeItem>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeItem>? _data;

  List<TypeItem> get data{
    return _data!;
  }

  List<TypeItem>? getData(){
    return _data;
  }

  set data(List<TypeItem> data){
    _data = data;
  }

  void setData(List<TypeItem>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListOperator extends IDataField {
  static const count = FTypePageListOperator('count');
  static const data = FTypePageListOperator('data');
  static const pageIndex = FTypePageListOperator('pageIndex');
  static const pageSize = FTypePageListOperator('pageSize');
  const FTypePageListOperator(super.key);
}

final FieldReflectInfo<TypePageListOperator> _TypePageListOperator_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeOperator>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperator>((single){
        final handler = TypeOperator.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperator>((single){
        final handler = TypeOperator.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListOperator extends IDataBasic implements IDataDynamic {
  TypePageListOperator({
    int? count,
    List<TypeOperator>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListOperator? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListOperator();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListOperator_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListOperator: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListOperator? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListOperator_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListOperator_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListOperator_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeOperator>? _data;

  List<TypeOperator> get data{
    return _data!;
  }

  List<TypeOperator>? getData(){
    return _data;
  }

  set data(List<TypeOperator> data){
    _data = data;
  }

  void setData(List<TypeOperator>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListStore extends IDataField {
  static const count = FTypePageListStore('count');
  static const data = FTypePageListStore('data');
  static const pageIndex = FTypePageListStore('pageIndex');
  static const pageSize = FTypePageListStore('pageSize');
  const FTypePageListStore(super.key);
}

final FieldReflectInfo<TypePageListStore> _TypePageListStore_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStore>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStore>((single){
        final handler = TypeStore.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
        final handler = TypeStore.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListStore extends IDataBasic implements IDataDynamic {
  TypePageListStore({
    int? count,
    List<TypeStore>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListStore? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListStore();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListStore_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListStore: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListStore? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListStore_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListStore_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListStore_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeStore>? _data;

  List<TypeStore> get data{
    return _data!;
  }

  List<TypeStore>? getData(){
    return _data;
  }

  set data(List<TypeStore> data){
    _data = data;
  }

  void setData(List<TypeStore>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePageListUnit extends IDataField {
  static const count = FTypePageListUnit('count');
  static const data = FTypePageListUnit('data');
  static const pageIndex = FTypePageListUnit('pageIndex');
  static const pageSize = FTypePageListUnit('pageSize');
  const FTypePageListUnit(super.key);
}

final FieldReflectInfo<TypePageListUnit> _TypePageListUnit_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeUnit>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeUnit>((single){
        final handler = TypeUnit.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeUnit>((single){
        final handler = TypeUnit.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
};

class TypePageListUnit extends IDataBasic implements IDataDynamic {
  TypePageListUnit({
    int? count,
    List<TypeUnit>? data,
    int? pageIndex,
    int? pageSize
  }):
    _count = count,
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize;

  static TypePageListUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  List<TypeUnit>? _data;

  List<TypeUnit> get data{
    return _data!;
  }

  List<TypeUnit>? getData(){
    return _data;
  }

  set data(List<TypeUnit> data){
    _data = data;
  }

  void setData(List<TypeUnit>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

}

class FTypePriceTrack extends IDataField {
  static const contactId = FTypePriceTrack('contactId');
  static const createTime = FTypePriceTrack('createTime');
  static const id = FTypePriceTrack('id');
  static const itemId = FTypePriceTrack('itemId');
  static const lastTrackPrice = FTypePriceTrack('lastTrackPrice');
  static const lastTrackTime = FTypePriceTrack('lastTrackTime');
  static const mode = FTypePriceTrack('mode');
  static const modifyTime = FTypePriceTrack('modifyTime');
  static const sourceOrderId = FTypePriceTrack('sourceOrderId');
  static const sourceOrderNumber = FTypePriceTrack('sourceOrderNumber');
  static const sourceOrderType = FTypePriceTrack('sourceOrderType');
  const FTypePriceTrack(super.key);
}

final FieldReflectInfo<TypePriceTrack> _TypePriceTrack_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "lastTrackPrice": (
    getter: (data) => data._lastTrackPrice,
    setter: (data, value) => data._lastTrackPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._lastTrackPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._lastTrackPrice = parser(value);
    }
  ),
  "lastTrackTime": (
    getter: (data) => data._lastTrackTime,
    setter: (data, value) => data._lastTrackTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._lastTrackTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._lastTrackTime = parser(value);
    }
  ),
  "mode": (
    getter: (data) => data._mode,
    setter: (data, value) => data._mode = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._mode);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._mode = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "sourceOrderId": (
    getter: (data) => data._sourceOrderId,
    setter: (data, value) => data._sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sourceOrderId = parser(value);
    }
  ),
  "sourceOrderNumber": (
    getter: (data) => data._sourceOrderNumber,
    setter: (data, value) => data._sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sourceOrderNumber = parser(value);
    }
  ),
  "sourceOrderType": (
    getter: (data) => data._sourceOrderType,
    setter: (data, value) => data._sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._sourceOrderType = parser(value);
    }
  ),
};

class TypePriceTrack extends IDataBasic implements IDataDynamic {
  TypePriceTrack({
    int? contactId,
    String? createTime,
    String? id,
    int? itemId,
    String? lastTrackPrice,
    String? lastTrackTime,
    int? mode,
    String? modifyTime,
    int? sourceOrderId,
    String? sourceOrderNumber,
    TypeEnumOrderType? sourceOrderType
  }):
    _contactId = contactId,
    _createTime = createTime,
    _id = id,
    _itemId = itemId,
    _lastTrackPrice = lastTrackPrice,
    _lastTrackTime = lastTrackTime,
    _mode = mode,
    _modifyTime = modifyTime,
    _sourceOrderId = sourceOrderId,
    _sourceOrderNumber = sourceOrderNumber,
    _sourceOrderType = sourceOrderType;

  static TypePriceTrack? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrack();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrack_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrack: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrack? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrack_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrack_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrack_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _lastTrackPrice;

  String get lastTrackPrice{
    return _lastTrackPrice!;
  }

  String? getLastTrackPrice(){
    return _lastTrackPrice;
  }

  set lastTrackPrice(String data){
    _lastTrackPrice = data;
  }

  void setLastTrackPrice(String? data){
    _lastTrackPrice = data;
  }

  String? _lastTrackTime;

  String get lastTrackTime{
    return _lastTrackTime!;
  }

  String? getLastTrackTime(){
    return _lastTrackTime;
  }

  set lastTrackTime(String data){
    _lastTrackTime = data;
  }

  void setLastTrackTime(String? data){
    _lastTrackTime = data;
  }

  int? _mode;

  int get mode{
    return _mode!;
  }

  int? getMode(){
    return _mode;
  }

  set mode(int data){
    _mode = data;
  }

  void setMode(int? data){
    _mode = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  int? _sourceOrderId;

  int get sourceOrderId{
    return _sourceOrderId!;
  }

  int? getSourceOrderId(){
    return _sourceOrderId;
  }

  set sourceOrderId(int data){
    _sourceOrderId = data;
  }

  void setSourceOrderId(int? data){
    _sourceOrderId = data;
  }

  String? _sourceOrderNumber;

  String get sourceOrderNumber{
    return _sourceOrderNumber!;
  }

  String? getSourceOrderNumber(){
    return _sourceOrderNumber;
  }

  set sourceOrderNumber(String data){
    _sourceOrderNumber = data;
  }

  void setSourceOrderNumber(String? data){
    _sourceOrderNumber = data;
  }

  TypeEnumOrderType? _sourceOrderType;

  TypeEnumOrderType get sourceOrderType{
    return _sourceOrderType!;
  }

  TypeEnumOrderType? getSourceOrderType(){
    return _sourceOrderType;
  }

  set sourceOrderType(TypeEnumOrderType data){
    _sourceOrderType = data;
  }

  void setSourceOrderType(TypeEnumOrderType? data){
    _sourceOrderType = data;
  }

}

class FTypePriceTrackQueryDTO extends IDataField {
  static const data = FTypePriceTrackQueryDTO('data');
  static const pageIndex = FTypePriceTrackQueryDTO('pageIndex');
  static const pageSize = FTypePriceTrackQueryDTO('pageSize');
  static const sum = FTypePriceTrackQueryDTO('sum');
  const FTypePriceTrackQueryDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQueryDTO> _TypePriceTrackQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypePriceTrackQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypePriceTrackQueryDataDTO>((single){
        final handler = TypePriceTrackQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypePriceTrackQueryDataDTO>((single){
        final handler = TypePriceTrackQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypePriceTrackQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypePriceTrackQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypePriceTrackQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypePriceTrackQueryDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQueryDTO({
    List<TypePriceTrackQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypePriceTrackQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypePriceTrackQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypePriceTrackQueryDataDTO>? _data;

  List<TypePriceTrackQueryDataDTO> get data{
    return _data!;
  }

  List<TypePriceTrackQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypePriceTrackQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypePriceTrackQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypePriceTrackQuerySumDTO? _sum;

  TypePriceTrackQuerySumDTO get sum{
    return _sum!;
  }

  TypePriceTrackQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypePriceTrackQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypePriceTrackQuerySumDTO? data){
    _sum = data;
  }

}

class FTypePriceTrackQueryDataDTO extends IDataField {
  static const contactId = FTypePriceTrackQueryDataDTO('contactId');
  static const contactName = FTypePriceTrackQueryDataDTO('contactName');
  static const contactNumber = FTypePriceTrackQueryDataDTO('contactNumber');
  static const contactParentId = FTypePriceTrackQueryDataDTO('contactParentId');
  static const contactParentName = FTypePriceTrackQueryDataDTO('contactParentName');
  static const id = FTypePriceTrackQueryDataDTO('id');
  static const itemCommonUnitConvert = FTypePriceTrackQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypePriceTrackQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypePriceTrackQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypePriceTrackQueryDataDTO('itemId');
  static const itemIsEnabled = FTypePriceTrackQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypePriceTrackQueryDataDTO('itemModelRemark');
  static const itemName = FTypePriceTrackQueryDataDTO('itemName');
  static const itemNumber = FTypePriceTrackQueryDataDTO('itemNumber');
  static const itemRemark = FTypePriceTrackQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypePriceTrackQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypePriceTrackQueryDataDTO('itemUnitConvertDesc');
  static const lastTrackPrice = FTypePriceTrackQueryDataDTO('lastTrackPrice');
  static const lastTrackTime = FTypePriceTrackQueryDataDTO('lastTrackTime');
  static const sourceOrderId = FTypePriceTrackQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypePriceTrackQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypePriceTrackQueryDataDTO('sourceOrderType');
  const FTypePriceTrackQueryDataDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQueryDataDTO> _TypePriceTrackQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "contactNumber": (
    getter: (data) => data._contactNumber,
    setter: (data, value) => data._contactNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactNumber = parser(value);
    }
  ),
  "contactParentId": (
    getter: (data) => data._contactParentId,
    setter: (data, value) => data._contactParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactParentId = parser(value);
    }
  ),
  "contactParentName": (
    getter: (data) => data._contactParentName,
    setter: (data, value) => data._contactParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactParentName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "lastTrackPrice": (
    getter: (data) => data._lastTrackPrice,
    setter: (data, value) => data._lastTrackPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._lastTrackPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._lastTrackPrice = parser(value);
    }
  ),
  "lastTrackTime": (
    getter: (data) => data._lastTrackTime,
    setter: (data, value) => data._lastTrackTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._lastTrackTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._lastTrackTime = parser(value);
    }
  ),
  "sourceOrderId": (
    getter: (data) => data._sourceOrderId,
    setter: (data, value) => data._sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sourceOrderId = parser(value);
    }
  ),
  "sourceOrderNumber": (
    getter: (data) => data._sourceOrderNumber,
    setter: (data, value) => data._sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sourceOrderNumber = parser(value);
    }
  ),
  "sourceOrderType": (
    getter: (data) => data._sourceOrderType,
    setter: (data, value) => data._sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._sourceOrderType = parser(value);
    }
  ),
};

class TypePriceTrackQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQueryDataDTO({
    int? contactId,
    String? contactName,
    String? contactNumber,
    int? contactParentId,
    String? contactParentName,
    String? id,
    String? itemCommonUnitConvert,
    String? itemCommonUnitId,
    String? itemCommonUnitName,
    int? itemId,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    String? itemRemark,
    String? itemSpecsRemark,
    String? itemUnitConvertDesc,
    String? lastTrackPrice,
    String? lastTrackTime,
    int? sourceOrderId,
    String? sourceOrderNumber,
    TypeEnumOrderType? sourceOrderType
  }):
    _contactId = contactId,
    _contactName = contactName,
    _contactNumber = contactNumber,
    _contactParentId = contactParentId,
    _contactParentName = contactParentName,
    _id = id,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemId = itemId,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemRemark = itemRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _lastTrackPrice = lastTrackPrice,
    _lastTrackTime = lastTrackTime,
    _sourceOrderId = sourceOrderId,
    _sourceOrderNumber = sourceOrderNumber,
    _sourceOrderType = sourceOrderType;

  static TypePriceTrackQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _contactNumber;

  String get contactNumber{
    return _contactNumber!;
  }

  String? getContactNumber(){
    return _contactNumber;
  }

  set contactNumber(String data){
    _contactNumber = data;
  }

  void setContactNumber(String? data){
    _contactNumber = data;
  }

  int? _contactParentId;

  int get contactParentId{
    return _contactParentId!;
  }

  int? getContactParentId(){
    return _contactParentId;
  }

  set contactParentId(int data){
    _contactParentId = data;
  }

  void setContactParentId(int? data){
    _contactParentId = data;
  }

  String? _contactParentName;

  String get contactParentName{
    return _contactParentName!;
  }

  String? getContactParentName(){
    return _contactParentName;
  }

  set contactParentName(String data){
    _contactParentName = data;
  }

  void setContactParentName(String? data){
    _contactParentName = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  String? _itemCommonUnitId;

  String get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  String? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(String data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(String? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  String? _lastTrackPrice;

  String get lastTrackPrice{
    return _lastTrackPrice!;
  }

  String? getLastTrackPrice(){
    return _lastTrackPrice;
  }

  set lastTrackPrice(String data){
    _lastTrackPrice = data;
  }

  void setLastTrackPrice(String? data){
    _lastTrackPrice = data;
  }

  String? _lastTrackTime;

  String get lastTrackTime{
    return _lastTrackTime!;
  }

  String? getLastTrackTime(){
    return _lastTrackTime;
  }

  set lastTrackTime(String data){
    _lastTrackTime = data;
  }

  void setLastTrackTime(String? data){
    _lastTrackTime = data;
  }

  int? _sourceOrderId;

  int get sourceOrderId{
    return _sourceOrderId!;
  }

  int? getSourceOrderId(){
    return _sourceOrderId;
  }

  set sourceOrderId(int data){
    _sourceOrderId = data;
  }

  void setSourceOrderId(int? data){
    _sourceOrderId = data;
  }

  String? _sourceOrderNumber;

  String get sourceOrderNumber{
    return _sourceOrderNumber!;
  }

  String? getSourceOrderNumber(){
    return _sourceOrderNumber;
  }

  set sourceOrderNumber(String data){
    _sourceOrderNumber = data;
  }

  void setSourceOrderNumber(String? data){
    _sourceOrderNumber = data;
  }

  TypeEnumOrderType? _sourceOrderType;

  TypeEnumOrderType get sourceOrderType{
    return _sourceOrderType!;
  }

  TypeEnumOrderType? getSourceOrderType(){
    return _sourceOrderType;
  }

  set sourceOrderType(TypeEnumOrderType data){
    _sourceOrderType = data;
  }

  void setSourceOrderType(TypeEnumOrderType? data){
    _sourceOrderType = data;
  }

}

class FTypePriceTrackQuerySumDTO extends IDataField {
  static const count = FTypePriceTrackQuerySumDTO('count');
  const FTypePriceTrackQuerySumDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQuerySumDTO> _TypePriceTrackQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
};

class TypePriceTrackQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQuerySumDTO({
    int? count
  }):
    _count = count;

  static TypePriceTrackQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

}

class FTypePrintTemplate extends IDataField {
  static const createTime = FTypePrintTemplate('createTime');
  static const id = FTypePrintTemplate('id');
  static const modifyTime = FTypePrintTemplate('modifyTime');
  static const name = FTypePrintTemplate('name');
  static const printScript = FTypePrintTemplate('printScript');
  static const sceneId = FTypePrintTemplate('sceneId');
  static const sortWeight = FTypePrintTemplate('sortWeight');
  static const templateScript = FTypePrintTemplate('templateScript');
  const FTypePrintTemplate(super.key);
}

final FieldReflectInfo<TypePrintTemplate> _TypePrintTemplate_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "printScript": (
    getter: (data) => data._printScript,
    setter: (data, value) => data._printScript = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._printScript);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._printScript = parser(value);
    }
  ),
  "sceneId": (
    getter: (data) => data._sceneId,
    setter: (data, value) => data._sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sceneId = parser(value);
    }
  ),
  "sortWeight": (
    getter: (data) => data._sortWeight,
    setter: (data, value) => data._sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sortWeight = parser(value);
    }
  ),
  "templateScript": (
    getter: (data) => data._templateScript,
    setter: (data, value) => data._templateScript = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._templateScript);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._templateScript = parser(value);
    }
  ),
};

class TypePrintTemplate extends IDataBasic implements IDataDynamic {
  TypePrintTemplate({
    String? createTime,
    int? id,
    String? modifyTime,
    String? name,
    String? printScript,
    String? sceneId,
    int? sortWeight,
    String? templateScript
  }):
    _createTime = createTime,
    _id = id,
    _modifyTime = modifyTime,
    _name = name,
    _printScript = printScript,
    _sceneId = sceneId,
    _sortWeight = sortWeight,
    _templateScript = templateScript;

  static TypePrintTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePrintTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePrintTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePrintTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePrintTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePrintTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePrintTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePrintTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _printScript;

  String get printScript{
    return _printScript!;
  }

  String? getPrintScript(){
    return _printScript;
  }

  set printScript(String data){
    _printScript = data;
  }

  void setPrintScript(String? data){
    _printScript = data;
  }

  String? _sceneId;

  String get sceneId{
    return _sceneId!;
  }

  String? getSceneId(){
    return _sceneId;
  }

  set sceneId(String data){
    _sceneId = data;
  }

  void setSceneId(String? data){
    _sceneId = data;
  }

  int? _sortWeight;

  int get sortWeight{
    return _sortWeight!;
  }

  int? getSortWeight(){
    return _sortWeight;
  }

  set sortWeight(int data){
    _sortWeight = data;
  }

  void setSortWeight(int? data){
    _sortWeight = data;
  }

  String? _templateScript;

  String get templateScript{
    return _templateScript!;
  }

  String? getTemplateScript(){
    return _templateScript;
  }

  set templateScript(String data){
    _templateScript = data;
  }

  void setTemplateScript(String? data){
    _templateScript = data;
  }

}

class FTypeQueryCrossTabColumn extends IDataField {
  static const field = FTypeQueryCrossTabColumn('field');
  static const groupId = FTypeQueryCrossTabColumn('groupId');
  static const name = FTypeQueryCrossTabColumn('name');
  const FTypeQueryCrossTabColumn(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabColumn> _TypeQueryCrossTabColumn_fields = {
  "field": (
    getter: (data) => data._field,
    setter: (data, value) => data._field = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._field);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._field = parser(value);
    }
  ),
  "groupId": (
    getter: (data) => data._groupId,
    setter: (data, value) => data._groupId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._groupId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._groupId = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
};

class TypeQueryCrossTabColumn extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabColumn({
    String? field,
    String? groupId,
    String? name
  }):
    _field = field,
    _groupId = groupId,
    _name = name;

  static TypeQueryCrossTabColumn? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabColumn();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabColumn_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabColumn: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabColumn? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabColumn_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabColumn_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabColumn_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _field;

  String get field{
    return _field!;
  }

  String? getField(){
    return _field;
  }

  set field(String data){
    _field = data;
  }

  void setField(String? data){
    _field = data;
  }

  String? _groupId;

  String get groupId{
    return _groupId!;
  }

  String? getGroupId(){
    return _groupId;
  }

  set groupId(String data){
    _groupId = data;
  }

  void setGroupId(String? data){
    _groupId = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

}

class FTypeQueryCrossTabGroupColumn extends IDataField {
  static const beginDate = FTypeQueryCrossTabGroupColumn('beginDate');
  static const endDate = FTypeQueryCrossTabGroupColumn('endDate');
  static const id = FTypeQueryCrossTabGroupColumn('id');
  static const name = FTypeQueryCrossTabGroupColumn('name');
  const FTypeQueryCrossTabGroupColumn(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabGroupColumn> _TypeQueryCrossTabGroupColumn_fields = {
  "beginDate": (
    getter: (data) => data._beginDate,
    setter: (data, value) => data._beginDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginDate = parser(value);
    }
  ),
  "endDate": (
    getter: (data) => data._endDate,
    setter: (data, value) => data._endDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endDate = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
};

class TypeQueryCrossTabGroupColumn extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabGroupColumn({
    String? beginDate,
    String? endDate,
    String? id,
    String? name
  }):
    _beginDate = beginDate,
    _endDate = endDate,
    _id = id,
    _name = name;

  static TypeQueryCrossTabGroupColumn? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabGroupColumn();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabGroupColumn_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabGroupColumn: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabGroupColumn? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabGroupColumn_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabGroupColumn_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabGroupColumn_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginDate;

  String get beginDate{
    return _beginDate!;
  }

  String? getBeginDate(){
    return _beginDate;
  }

  set beginDate(String data){
    _beginDate = data;
  }

  void setBeginDate(String? data){
    _beginDate = data;
  }

  String? _endDate;

  String get endDate{
    return _endDate!;
  }

  String? getEndDate(){
    return _endDate;
  }

  set endDate(String data){
    _endDate = data;
  }

  void setEndDate(String? data){
    _endDate = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

}

class FTypeQueryCrossTabResult extends IDataField {
  static const beginDate = FTypeQueryCrossTabResult('beginDate');
  static const cells = FTypeQueryCrossTabResult('cells');
  static const columns = FTypeQueryCrossTabResult('columns');
  static const endDate = FTypeQueryCrossTabResult('endDate');
  static const groups = FTypeQueryCrossTabResult('groups');
  static const pageIndex = FTypeQueryCrossTabResult('pageIndex');
  static const pageSize = FTypeQueryCrossTabResult('pageSize');
  static const sum = FTypeQueryCrossTabResult('sum');
  const FTypeQueryCrossTabResult(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabResult> _TypeQueryCrossTabResult_fields = {
  "beginDate": (
    getter: (data) => data._beginDate,
    setter: (data, value) => data._beginDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._beginDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._beginDate = parser(value);
    }
  ),
  "cells": (
    getter: (data) => data._cells,
    setter: (data, value) => data._cells = value as List<List<Object>>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<List<Object>>((single){
        final handler = ListHelper.wrapToDynamic<Object>((single){
          final handler = ObjectHelper.toDynamic;
          return handler(single)!;
        });
        return handler(single)!;
      });
      return formatter(data._cells);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<List<Object>>((single){
        final handler = ListHelper.wrapFromDynamic<Object>((single){
          final handler = ObjectHelper.fromDynamic;
          return handler(single)!;
        });
        return handler(single)!;
      });
      data._cells = parser(value);
    }
  ),
  "columns": (
    getter: (data) => data._columns,
    setter: (data, value) => data._columns = value as List<TypeQueryCrossTabColumn>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeQueryCrossTabColumn>((single){
        final handler = TypeQueryCrossTabColumn.toDynamic;
        return handler(single)!;
      });
      return formatter(data._columns);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeQueryCrossTabColumn>((single){
        final handler = TypeQueryCrossTabColumn.fromDynamic;
        return handler(single)!;
      });
      data._columns = parser(value);
    }
  ),
  "endDate": (
    getter: (data) => data._endDate,
    setter: (data, value) => data._endDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._endDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._endDate = parser(value);
    }
  ),
  "groups": (
    getter: (data) => data._groups,
    setter: (data, value) => data._groups = value as List<TypeQueryCrossTabGroupColumn>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeQueryCrossTabGroupColumn>((single){
        final handler = TypeQueryCrossTabGroupColumn.toDynamic;
        return handler(single)!;
      });
      return formatter(data._groups);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeQueryCrossTabGroupColumn>((single){
        final handler = TypeQueryCrossTabGroupColumn.fromDynamic;
        return handler(single)!;
      });
      data._groups = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as List<Object>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<Object>((single){
        final handler = ObjectHelper.toDynamic;
        return handler(single)!;
      });
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<Object>((single){
        final handler = ObjectHelper.fromDynamic;
        return handler(single)!;
      });
      data._sum = parser(value);
    }
  ),
};

class TypeQueryCrossTabResult extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabResult({
    String? beginDate,
    List<List<Object>>? cells,
    List<TypeQueryCrossTabColumn>? columns,
    String? endDate,
    List<TypeQueryCrossTabGroupColumn>? groups,
    int? pageIndex,
    int? pageSize,
    List<Object>? sum
  }):
    _beginDate = beginDate,
    _cells = cells,
    _columns = columns,
    _endDate = endDate,
    _groups = groups,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeQueryCrossTabResult? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabResult();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabResult_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabResult: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabResult? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabResult_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabResult_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabResult_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _beginDate;

  String get beginDate{
    return _beginDate!;
  }

  String? getBeginDate(){
    return _beginDate;
  }

  set beginDate(String data){
    _beginDate = data;
  }

  void setBeginDate(String? data){
    _beginDate = data;
  }

  List<List<Object>>? _cells;

  List<List<Object>> get cells{
    return _cells!;
  }

  List<List<Object>>? getCells(){
    return _cells;
  }

  set cells(List<List<Object>> data){
    _cells = data;
  }

  void setCells(List<List<Object>>? data){
    _cells = data;
  }

  List<TypeQueryCrossTabColumn>? _columns;

  List<TypeQueryCrossTabColumn> get columns{
    return _columns!;
  }

  List<TypeQueryCrossTabColumn>? getColumns(){
    return _columns;
  }

  set columns(List<TypeQueryCrossTabColumn> data){
    _columns = data;
  }

  void setColumns(List<TypeQueryCrossTabColumn>? data){
    _columns = data;
  }

  String? _endDate;

  String get endDate{
    return _endDate!;
  }

  String? getEndDate(){
    return _endDate;
  }

  set endDate(String data){
    _endDate = data;
  }

  void setEndDate(String? data){
    _endDate = data;
  }

  List<TypeQueryCrossTabGroupColumn>? _groups;

  List<TypeQueryCrossTabGroupColumn> get groups{
    return _groups!;
  }

  List<TypeQueryCrossTabGroupColumn>? getGroups(){
    return _groups;
  }

  set groups(List<TypeQueryCrossTabGroupColumn> data){
    _groups = data;
  }

  void setGroups(List<TypeQueryCrossTabGroupColumn>? data){
    _groups = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  List<Object>? _sum;

  List<Object> get sum{
    return _sum!;
  }

  List<Object>? getSum(){
    return _sum;
  }

  set sum(List<Object> data){
    _sum = data;
  }

  void setSum(List<Object>? data){
    _sum = data;
  }

}

class FTypeStock extends IDataField {
  static const bookAmount = FTypeStock('bookAmount');
  static const bookTotal = FTypeStock('bookTotal');
  static const createTime = FTypeStock('createTime');
  static const hasBusinessLink = FTypeStock('hasBusinessLink');
  static const id = FTypeStock('id');
  static const initialAmount = FTypeStock('initialAmount');
  static const initialPrice = FTypeStock('initialPrice');
  static const initialUnitId = FTypeStock('initialUnitId');
  static const itemId = FTypeStock('itemId');
  static const locations = FTypeStock('locations');
  static const modifyTime = FTypeStock('modifyTime');
  static const price = FTypeStock('price');
  static const purchaseTransitAmount = FTypeStock('purchaseTransitAmount');
  static const purchaseTransitRemark = FTypeStock('purchaseTransitRemark');
  static const remainAge = FTypeStock('remainAge');
  static const remainAgeSum = FTypeStock('remainAgeSum');
  static const storeId = FTypeStock('storeId');
  static const waitingInAmount = FTypeStock('waitingInAmount');
  static const waitingOutAmount = FTypeStock('waitingOutAmount');
  const FTypeStock(super.key);
}

final FieldReflectInfo<TypeStock> _TypeStock_fields = {
  "bookAmount": (
    getter: (data) => data._bookAmount,
    setter: (data, value) => data._bookAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bookAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bookAmount = parser(value);
    }
  ),
  "bookTotal": (
    getter: (data) => data._bookTotal,
    setter: (data, value) => data._bookTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bookTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bookTotal = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "initialAmount": (
    getter: (data) => data._initialAmount,
    setter: (data, value) => data._initialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialAmount = parser(value);
    }
  ),
  "initialPrice": (
    getter: (data) => data._initialPrice,
    setter: (data, value) => data._initialPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._initialPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._initialPrice = parser(value);
    }
  ),
  "initialUnitId": (
    getter: (data) => data._initialUnitId,
    setter: (data, value) => data._initialUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._initialUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._initialUnitId = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "locations": (
    getter: (data) => data._locations,
    setter: (data, value) => data._locations = value as List<TypeStockLocationDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._locations);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.fromDynamic;
        return handler(single)!;
      });
      data._locations = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "purchaseTransitAmount": (
    getter: (data) => data._purchaseTransitAmount,
    setter: (data, value) => data._purchaseTransitAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitAmount = parser(value);
    }
  ),
  "purchaseTransitRemark": (
    getter: (data) => data._purchaseTransitRemark,
    setter: (data, value) => data._purchaseTransitRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitRemark = parser(value);
    }
  ),
  "remainAge": (
    getter: (data) => data._remainAge,
    setter: (data, value) => data._remainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remainAge = parser(value);
    }
  ),
  "remainAgeSum": (
    getter: (data) => data._remainAgeSum,
    setter: (data, value) => data._remainAgeSum = value as double?,
    toDynamic: (data) {
      final formatter = DoubleHelper.toDynamic;
      return formatter(data._remainAgeSum);
    },
    fromDynamic: (data, value) {
      final parser = DoubleHelper.fromDynamic;
      data._remainAgeSum = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "waitingInAmount": (
    getter: (data) => data._waitingInAmount,
    setter: (data, value) => data._waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingInAmount = parser(value);
    }
  ),
  "waitingOutAmount": (
    getter: (data) => data._waitingOutAmount,
    setter: (data, value) => data._waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingOutAmount = parser(value);
    }
  ),
};

class TypeStock extends IDataBasic implements IDataDynamic {
  TypeStock({
    String? bookAmount,
    String? bookTotal,
    String? createTime,
    int? hasBusinessLink,
    String? id,
    String? initialAmount,
    String? initialPrice,
    int? initialUnitId,
    int? itemId,
    List<TypeStockLocationDTO>? locations,
    String? modifyTime,
    String? price,
    String? purchaseTransitAmount,
    String? purchaseTransitRemark,
    String? remainAge,
    double? remainAgeSum,
    int? storeId,
    String? waitingInAmount,
    String? waitingOutAmount
  }):
    _bookAmount = bookAmount,
    _bookTotal = bookTotal,
    _createTime = createTime,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _initialAmount = initialAmount,
    _initialPrice = initialPrice,
    _initialUnitId = initialUnitId,
    _itemId = itemId,
    _locations = locations,
    _modifyTime = modifyTime,
    _price = price,
    _purchaseTransitAmount = purchaseTransitAmount,
    _purchaseTransitRemark = purchaseTransitRemark,
    _remainAge = remainAge,
    _remainAgeSum = remainAgeSum,
    _storeId = storeId,
    _waitingInAmount = waitingInAmount,
    _waitingOutAmount = waitingOutAmount;

  static TypeStock? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStock();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStock_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStock: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStock? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStock_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStock_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStock_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _bookAmount;

  String get bookAmount{
    return _bookAmount!;
  }

  String? getBookAmount(){
    return _bookAmount;
  }

  set bookAmount(String data){
    _bookAmount = data;
  }

  void setBookAmount(String? data){
    _bookAmount = data;
  }

  String? _bookTotal;

  String get bookTotal{
    return _bookTotal!;
  }

  String? getBookTotal(){
    return _bookTotal;
  }

  set bookTotal(String data){
    _bookTotal = data;
  }

  void setBookTotal(String? data){
    _bookTotal = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _initialAmount;

  String get initialAmount{
    return _initialAmount!;
  }

  String? getInitialAmount(){
    return _initialAmount;
  }

  set initialAmount(String data){
    _initialAmount = data;
  }

  void setInitialAmount(String? data){
    _initialAmount = data;
  }

  String? _initialPrice;

  String get initialPrice{
    return _initialPrice!;
  }

  String? getInitialPrice(){
    return _initialPrice;
  }

  set initialPrice(String data){
    _initialPrice = data;
  }

  void setInitialPrice(String? data){
    _initialPrice = data;
  }

  int? _initialUnitId;

  int get initialUnitId{
    return _initialUnitId!;
  }

  int? getInitialUnitId(){
    return _initialUnitId;
  }

  set initialUnitId(int data){
    _initialUnitId = data;
  }

  void setInitialUnitId(int? data){
    _initialUnitId = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  List<TypeStockLocationDTO>? _locations;

  List<TypeStockLocationDTO> get locations{
    return _locations!;
  }

  List<TypeStockLocationDTO>? getLocations(){
    return _locations;
  }

  set locations(List<TypeStockLocationDTO> data){
    _locations = data;
  }

  void setLocations(List<TypeStockLocationDTO>? data){
    _locations = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _purchaseTransitAmount;

  String get purchaseTransitAmount{
    return _purchaseTransitAmount!;
  }

  String? getPurchaseTransitAmount(){
    return _purchaseTransitAmount;
  }

  set purchaseTransitAmount(String data){
    _purchaseTransitAmount = data;
  }

  void setPurchaseTransitAmount(String? data){
    _purchaseTransitAmount = data;
  }

  String? _purchaseTransitRemark;

  String get purchaseTransitRemark{
    return _purchaseTransitRemark!;
  }

  String? getPurchaseTransitRemark(){
    return _purchaseTransitRemark;
  }

  set purchaseTransitRemark(String data){
    _purchaseTransitRemark = data;
  }

  void setPurchaseTransitRemark(String? data){
    _purchaseTransitRemark = data;
  }

  String? _remainAge;

  String get remainAge{
    return _remainAge!;
  }

  String? getRemainAge(){
    return _remainAge;
  }

  set remainAge(String data){
    _remainAge = data;
  }

  void setRemainAge(String? data){
    _remainAge = data;
  }

  double? _remainAgeSum;

  double get remainAgeSum{
    return _remainAgeSum!;
  }

  double? getRemainAgeSum(){
    return _remainAgeSum;
  }

  set remainAgeSum(double data){
    _remainAgeSum = data;
  }

  void setRemainAgeSum(double? data){
    _remainAgeSum = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _waitingInAmount;

  String get waitingInAmount{
    return _waitingInAmount!;
  }

  String? getWaitingInAmount(){
    return _waitingInAmount;
  }

  set waitingInAmount(String data){
    _waitingInAmount = data;
  }

  void setWaitingInAmount(String? data){
    _waitingInAmount = data;
  }

  String? _waitingOutAmount;

  String get waitingOutAmount{
    return _waitingOutAmount!;
  }

  String? getWaitingOutAmount(){
    return _waitingOutAmount;
  }

  set waitingOutAmount(String data){
    _waitingOutAmount = data;
  }

  void setWaitingOutAmount(String? data){
    _waitingOutAmount = data;
  }

}

class FTypeStockDetailQueryDTO extends IDataField {
  static const data = FTypeStockDetailQueryDTO('data');
  static const pageIndex = FTypeStockDetailQueryDTO('pageIndex');
  static const pageSize = FTypeStockDetailQueryDTO('pageSize');
  static const sum = FTypeStockDetailQueryDTO('sum');
  const FTypeStockDetailQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQueryDTO> _TypeStockDetailQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockDetailQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockDetailQueryDataDTO>((single){
        final handler = TypeStockDetailQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockDetailQueryDataDTO>((single){
        final handler = TypeStockDetailQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockDetailQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockDetailQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockDetailQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockDetailQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQueryDTO({
    List<TypeStockDetailQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockDetailQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockDetailQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockDetailQueryDataDTO>? _data;

  List<TypeStockDetailQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockDetailQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockDetailQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockDetailQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockDetailQuerySumDTO? _sum;

  TypeStockDetailQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockDetailQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockDetailQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockDetailQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockDetailQueryDataDTO extends IDataField {
  static const commonAmount = FTypeStockDetailQueryDataDTO('commonAmount');
  static const commonPrice = FTypeStockDetailQueryDataDTO('commonPrice');
  static const commonUnitId = FTypeStockDetailQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockDetailQueryDataDTO('commonUnitName');
  static const id = FTypeStockDetailQueryDataDTO('id');
  static const itemId = FTypeStockDetailQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockDetailQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockDetailQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockDetailQueryDataDTO('itemSpecsRemark');
  static const itemsOrder = FTypeStockDetailQueryDataDTO('itemsOrder');
  static const orderContactId = FTypeStockDetailQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockDetailQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockDetailQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockDetailQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockDetailQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockDetailQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockDetailQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockDetailQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockDetailQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockDetailQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockDetailQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockDetailQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockDetailQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockDetailQueryDataDTO('orderRedState');
  static const orderState = FTypeStockDetailQueryDataDTO('orderState');
  static const orderStockType = FTypeStockDetailQueryDataDTO('orderStockType');
  static const orderType = FTypeStockDetailQueryDataDTO('orderType');
  static const remark = FTypeStockDetailQueryDataDTO('remark');
  static const storeId = FTypeStockDetailQueryDataDTO('storeId');
  static const storeName = FTypeStockDetailQueryDataDTO('storeName');
  static const total = FTypeStockDetailQueryDataDTO('total');
  const FTypeStockDetailQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQueryDataDTO> _TypeStockDetailQueryDataDTO_fields = {
  "commonAmount": (
    getter: (data) => data._commonAmount,
    setter: (data, value) => data._commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonAmount = parser(value);
    }
  ),
  "commonPrice": (
    getter: (data) => data._commonPrice,
    setter: (data, value) => data._commonPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonPrice = parser(value);
    }
  ),
  "commonUnitId": (
    getter: (data) => data._commonUnitId,
    setter: (data, value) => data._commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._commonUnitId = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemsOrder": (
    getter: (data) => data._itemsOrder,
    setter: (data, value) => data._itemsOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemsOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemsOrder = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderStockType": (
    getter: (data) => data._orderStockType,
    setter: (data, value) => data._orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderStockType = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockDetailQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQueryDataDTO({
    String? commonAmount,
    String? commonPrice,
    int? commonUnitId,
    String? commonUnitName,
    int? id,
    int? itemId,
    String? itemModelRemark,
    String? itemName,
    String? itemSpecsRemark,
    int? itemsOrder,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    int? orderStockType,
    TypeEnumOrderType? orderType,
    String? remark,
    int? storeId,
    String? storeName,
    String? total
  }):
    _commonAmount = commonAmount,
    _commonPrice = commonPrice,
    _commonUnitId = commonUnitId,
    _commonUnitName = commonUnitName,
    _id = id,
    _itemId = itemId,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemSpecsRemark = itemSpecsRemark,
    _itemsOrder = itemsOrder,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderStockType = orderStockType,
    _orderType = orderType,
    _remark = remark,
    _storeId = storeId,
    _storeName = storeName,
    _total = total;

  static TypeStockDetailQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _commonAmount;

  String get commonAmount{
    return _commonAmount!;
  }

  String? getCommonAmount(){
    return _commonAmount;
  }

  set commonAmount(String data){
    _commonAmount = data;
  }

  void setCommonAmount(String? data){
    _commonAmount = data;
  }

  String? _commonPrice;

  String get commonPrice{
    return _commonPrice!;
  }

  String? getCommonPrice(){
    return _commonPrice;
  }

  set commonPrice(String data){
    _commonPrice = data;
  }

  void setCommonPrice(String? data){
    _commonPrice = data;
  }

  int? _commonUnitId;

  int get commonUnitId{
    return _commonUnitId!;
  }

  int? getCommonUnitId(){
    return _commonUnitId;
  }

  set commonUnitId(int data){
    _commonUnitId = data;
  }

  void setCommonUnitId(int? data){
    _commonUnitId = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  int? _itemsOrder;

  int get itemsOrder{
    return _itemsOrder!;
  }

  int? getItemsOrder(){
    return _itemsOrder;
  }

  set itemsOrder(int data){
    _itemsOrder = data;
  }

  void setItemsOrder(int? data){
    _itemsOrder = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  int? _orderStockType;

  int get orderStockType{
    return _orderStockType!;
  }

  int? getOrderStockType(){
    return _orderStockType;
  }

  set orderStockType(int data){
    _orderStockType = data;
  }

  void setOrderStockType(int? data){
    _orderStockType = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockDetailQuerySumDTO extends IDataField {
  static const commonAmount = FTypeStockDetailQuerySumDTO('commonAmount');
  static const count = FTypeStockDetailQuerySumDTO('count');
  static const total = FTypeStockDetailQuerySumDTO('total');
  const FTypeStockDetailQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQuerySumDTO> _TypeStockDetailQuerySumDTO_fields = {
  "commonAmount": (
    getter: (data) => data._commonAmount,
    setter: (data, value) => data._commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonAmount = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockDetailQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQuerySumDTO({
    String? commonAmount,
    int? count,
    String? total
  }):
    _commonAmount = commonAmount,
    _count = count,
    _total = total;

  static TypeStockDetailQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _commonAmount;

  String get commonAmount{
    return _commonAmount!;
  }

  String? getCommonAmount(){
    return _commonAmount;
  }

  set commonAmount(String data){
    _commonAmount = data;
  }

  void setCommonAmount(String? data){
    _commonAmount = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockFlowQueryDTO extends IDataField {
  static const data = FTypeStockFlowQueryDTO('data');
  static const pageIndex = FTypeStockFlowQueryDTO('pageIndex');
  static const pageSize = FTypeStockFlowQueryDTO('pageSize');
  static const sum = FTypeStockFlowQueryDTO('sum');
  const FTypeStockFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQueryDTO> _TypeStockFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockFlowQueryDataDTO>((single){
        final handler = TypeStockFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockFlowQueryDataDTO>((single){
        final handler = TypeStockFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockFlowQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockFlowQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQueryDTO({
    List<TypeStockFlowQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockFlowQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockFlowQueryDataDTO>? _data;

  List<TypeStockFlowQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockFlowQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockFlowQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockFlowQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockFlowQuerySumDTO? _sum;

  TypeStockFlowQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockFlowQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockFlowQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockFlowQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeStockFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockFlowQueryDataDTO('commonUnitName');
  static const id = FTypeStockFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeStockFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeStockFlowQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockFlowQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockFlowQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockFlowQueryDataDTO('itemSpecsRemark');
  static const orderContactId = FTypeStockFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeStockFlowQueryDataDTO('orderState');
  static const orderStockType = FTypeStockFlowQueryDataDTO('orderStockType');
  static const orderType = FTypeStockFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeStockFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeStockFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeStockFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeStockFlowQueryDataDTO('previousTotal');
  static const price = FTypeStockFlowQueryDataDTO('price');
  static const remark = FTypeStockFlowQueryDataDTO('remark');
  static const storeId = FTypeStockFlowQueryDataDTO('storeId');
  static const storeName = FTypeStockFlowQueryDataDTO('storeName');
  static const total = FTypeStockFlowQueryDataDTO('total');
  const FTypeStockFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQueryDataDTO> _TypeStockFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data._commonUnitId,
    setter: (data, value) => data._commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._commonUnitId = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderStockType": (
    getter: (data) => data._orderStockType,
    setter: (data, value) => data._orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderStockType = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "previousCommonAmount": (
    getter: (data) => data._previousCommonAmount,
    setter: (data, value) => data._previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousCommonAmount = parser(value);
    }
  ),
  "previousPrice": (
    getter: (data) => data._previousPrice,
    setter: (data, value) => data._previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousPrice = parser(value);
    }
  ),
  "previousTotal": (
    getter: (data) => data._previousTotal,
    setter: (data, value) => data._previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousTotal = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQueryDataDTO({
    int? commonUnitId,
    String? commonUnitName,
    int? id,
    String? inboundCommonAmount,
    int? itemId,
    String? itemModelRemark,
    String? itemName,
    String? itemSpecsRemark,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    int? orderStockType,
    TypeEnumOrderType? orderType,
    String? outboundCommonAmount,
    String? previousCommonAmount,
    String? previousPrice,
    String? previousTotal,
    String? price,
    String? remark,
    int? storeId,
    String? storeName,
    String? total
  }):
    _commonUnitId = commonUnitId,
    _commonUnitName = commonUnitName,
    _id = id,
    _inboundCommonAmount = inboundCommonAmount,
    _itemId = itemId,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemSpecsRemark = itemSpecsRemark,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderStockType = orderStockType,
    _orderType = orderType,
    _outboundCommonAmount = outboundCommonAmount,
    _previousCommonAmount = previousCommonAmount,
    _previousPrice = previousPrice,
    _previousTotal = previousTotal,
    _price = price,
    _remark = remark,
    _storeId = storeId,
    _storeName = storeName,
    _total = total;

  static TypeStockFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _commonUnitId;

  int get commonUnitId{
    return _commonUnitId!;
  }

  int? getCommonUnitId(){
    return _commonUnitId;
  }

  set commonUnitId(int data){
    _commonUnitId = data;
  }

  void setCommonUnitId(int? data){
    _commonUnitId = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  int? _orderStockType;

  int get orderStockType{
    return _orderStockType!;
  }

  int? getOrderStockType(){
    return _orderStockType;
  }

  set orderStockType(int data){
    _orderStockType = data;
  }

  void setOrderStockType(int? data){
    _orderStockType = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _previousCommonAmount;

  String get previousCommonAmount{
    return _previousCommonAmount!;
  }

  String? getPreviousCommonAmount(){
    return _previousCommonAmount;
  }

  set previousCommonAmount(String data){
    _previousCommonAmount = data;
  }

  void setPreviousCommonAmount(String? data){
    _previousCommonAmount = data;
  }

  String? _previousPrice;

  String get previousPrice{
    return _previousPrice!;
  }

  String? getPreviousPrice(){
    return _previousPrice;
  }

  set previousPrice(String data){
    _previousPrice = data;
  }

  void setPreviousPrice(String? data){
    _previousPrice = data;
  }

  String? _previousTotal;

  String get previousTotal{
    return _previousTotal!;
  }

  String? getPreviousTotal(){
    return _previousTotal;
  }

  set previousTotal(String data){
    _previousTotal = data;
  }

  void setPreviousTotal(String? data){
    _previousTotal = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockFlowQuerySumDTO extends IDataField {
  static const count = FTypeStockFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeStockFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeStockFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeStockFlowQuerySumDTO('total');
  const FTypeStockFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQuerySumDTO> _TypeStockFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQuerySumDTO({
    int? count,
    String? inboundCommonAmount,
    String? outboundCommonAmount,
    String? total
  }):
    _count = count,
    _inboundCommonAmount = inboundCommonAmount,
    _outboundCommonAmount = outboundCommonAmount,
    _total = total;

  static TypeStockFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockLocationDTO extends IDataField {
  static const hasStock = FTypeStockLocationDTO('hasStock');
  static const name = FTypeStockLocationDTO('name');
  const FTypeStockLocationDTO(super.key);
}

final FieldReflectInfo<TypeStockLocationDTO> _TypeStockLocationDTO_fields = {
  "hasStock": (
    getter: (data) => data._hasStock,
    setter: (data, value) => data._hasStock = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasStock);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasStock = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
};

class TypeStockLocationDTO extends IDataBasic implements IDataDynamic {
  TypeStockLocationDTO({
    int? hasStock,
    String? name
  }):
    _hasStock = hasStock,
    _name = name;

  static TypeStockLocationDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockLocationDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockLocationDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockLocationDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockLocationDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockLocationDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockLocationDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockLocationDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _hasStock;

  int get hasStock{
    return _hasStock!;
  }

  int? getHasStock(){
    return _hasStock;
  }

  set hasStock(int data){
    _hasStock = data;
  }

  void setHasStock(int? data){
    _hasStock = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

}

class FTypeStockPrice extends IDataField {
  static const id = FTypeStockPrice('id');
  static const latestRemainContactId = FTypeStockPrice('latestRemainContactId');
  static const latestRemainContactName = FTypeStockPrice('latestRemainContactName');
  static const latestRemainPrice = FTypeStockPrice('latestRemainPrice');
  static const locations = FTypeStockPrice('locations');
  static const stockAmount = FTypeStockPrice('stockAmount');
  static const stockAveragePrice = FTypeStockPrice('stockAveragePrice');
  const FTypeStockPrice(super.key);
}

final FieldReflectInfo<TypeStockPrice> _TypeStockPrice_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "latestRemainContactId": (
    getter: (data) => data._latestRemainContactId,
    setter: (data, value) => data._latestRemainContactId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._latestRemainContactId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._latestRemainContactId = parser(value);
    }
  ),
  "latestRemainContactName": (
    getter: (data) => data._latestRemainContactName,
    setter: (data, value) => data._latestRemainContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._latestRemainContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._latestRemainContactName = parser(value);
    }
  ),
  "latestRemainPrice": (
    getter: (data) => data._latestRemainPrice,
    setter: (data, value) => data._latestRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._latestRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._latestRemainPrice = parser(value);
    }
  ),
  "locations": (
    getter: (data) => data._locations,
    setter: (data, value) => data._locations = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._locations);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._locations = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockAveragePrice": (
    getter: (data) => data._stockAveragePrice,
    setter: (data, value) => data._stockAveragePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAveragePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAveragePrice = parser(value);
    }
  ),
};

class TypeStockPrice extends IDataBasic implements IDataDynamic {
  TypeStockPrice({
    String? id,
    String? latestRemainContactId,
    String? latestRemainContactName,
    String? latestRemainPrice,
    String? locations,
    String? stockAmount,
    String? stockAveragePrice
  }):
    _id = id,
    _latestRemainContactId = latestRemainContactId,
    _latestRemainContactName = latestRemainContactName,
    _latestRemainPrice = latestRemainPrice,
    _locations = locations,
    _stockAmount = stockAmount,
    _stockAveragePrice = stockAveragePrice;

  static TypeStockPrice? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockPrice();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockPrice_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockPrice: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockPrice? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockPrice_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockPrice_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockPrice_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _latestRemainContactId;

  String get latestRemainContactId{
    return _latestRemainContactId!;
  }

  String? getLatestRemainContactId(){
    return _latestRemainContactId;
  }

  set latestRemainContactId(String data){
    _latestRemainContactId = data;
  }

  void setLatestRemainContactId(String? data){
    _latestRemainContactId = data;
  }

  String? _latestRemainContactName;

  String get latestRemainContactName{
    return _latestRemainContactName!;
  }

  String? getLatestRemainContactName(){
    return _latestRemainContactName;
  }

  set latestRemainContactName(String data){
    _latestRemainContactName = data;
  }

  void setLatestRemainContactName(String? data){
    _latestRemainContactName = data;
  }

  String? _latestRemainPrice;

  String get latestRemainPrice{
    return _latestRemainPrice!;
  }

  String? getLatestRemainPrice(){
    return _latestRemainPrice;
  }

  set latestRemainPrice(String data){
    _latestRemainPrice = data;
  }

  void setLatestRemainPrice(String? data){
    _latestRemainPrice = data;
  }

  String? _locations;

  String get locations{
    return _locations!;
  }

  String? getLocations(){
    return _locations;
  }

  set locations(String data){
    _locations = data;
  }

  void setLocations(String? data){
    _locations = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockAveragePrice;

  String get stockAveragePrice{
    return _stockAveragePrice!;
  }

  String? getStockAveragePrice(){
    return _stockAveragePrice;
  }

  set stockAveragePrice(String data){
    _stockAveragePrice = data;
  }

  void setStockAveragePrice(String? data){
    _stockAveragePrice = data;
  }

}

class FTypeStockQueryDTO extends IDataField {
  static const data = FTypeStockQueryDTO('data');
  static const pageIndex = FTypeStockQueryDTO('pageIndex');
  static const pageSize = FTypeStockQueryDTO('pageSize');
  static const sum = FTypeStockQueryDTO('sum');
  const FTypeStockQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockQueryDTO> _TypeStockQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockQueryDataDTO>((single){
        final handler = TypeStockQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockQueryDataDTO>((single){
        final handler = TypeStockQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockQueryDTO({
    List<TypeStockQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockQueryDataDTO>? _data;

  List<TypeStockQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockQuerySumDTO? _sum;

  TypeStockQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockQueryDataDTO extends IDataField {
  static const availableAmount = FTypeStockQueryDataDTO('availableAmount');
  static const id = FTypeStockQueryDataDTO('id');
  static const itemBasicUnitId = FTypeStockQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeStockQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeStockQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeStockQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeStockQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockQueryDataDTO('itemName');
  static const itemNumber = FTypeStockQueryDataDTO('itemNumber');
  static const itemParentId = FTypeStockQueryDataDTO('itemParentId');
  static const itemParentName = FTypeStockQueryDataDTO('itemParentName');
  static const itemRemark = FTypeStockQueryDataDTO('itemRemark');
  static const itemSortWeight = FTypeStockQueryDataDTO('itemSortWeight');
  static const itemSpecsRemark = FTypeStockQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeStockQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeStockQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeStockQueryDataDTO('itemUnitConverts');
  static const stockAmount = FTypeStockQueryDataDTO('stockAmount');
  static const stockBasicAmount = FTypeStockQueryDataDTO('stockBasicAmount');
  static const stockInitialAmount = FTypeStockQueryDataDTO('stockInitialAmount');
  static const stockInitialPrice = FTypeStockQueryDataDTO('stockInitialPrice');
  static const stockInitialTotal = FTypeStockQueryDataDTO('stockInitialTotal');
  static const stockInitialUnit = FTypeStockQueryDataDTO('stockInitialUnit');
  static const stockInitialUnitId = FTypeStockQueryDataDTO('stockInitialUnitId');
  static const stockLocations = FTypeStockQueryDataDTO('stockLocations');
  static const stockPrice = FTypeStockQueryDataDTO('stockPrice');
  static const stockPurchaseTransitAmount = FTypeStockQueryDataDTO('stockPurchaseTransitAmount');
  static const stockPurchaseTransitRemark = FTypeStockQueryDataDTO('stockPurchaseTransitRemark');
  static const stockRemainAge = FTypeStockQueryDataDTO('stockRemainAge');
  static const stockTotal = FTypeStockQueryDataDTO('stockTotal');
  static const storeId = FTypeStockQueryDataDTO('storeId');
  static const storeName = FTypeStockQueryDataDTO('storeName');
  static const storeNumber = FTypeStockQueryDataDTO('storeNumber');
  static const waitingInAmount = FTypeStockQueryDataDTO('waitingInAmount');
  static const waitingOutAmount = FTypeStockQueryDataDTO('waitingOutAmount');
  const FTypeStockQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockQueryDataDTO> _TypeStockQueryDataDTO_fields = {
  "availableAmount": (
    getter: (data) => data._availableAmount,
    setter: (data, value) => data._availableAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableAmount = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemBasicUnitId": (
    getter: (data) => data._itemBasicUnitId,
    setter: (data, value) => data._itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitId = parser(value);
    }
  ),
  "itemBasicUnitName": (
    getter: (data) => data._itemBasicUnitName,
    setter: (data, value) => data._itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitName = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemParentId": (
    getter: (data) => data._itemParentId,
    setter: (data, value) => data._itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemParentId = parser(value);
    }
  ),
  "itemParentName": (
    getter: (data) => data._itemParentName,
    setter: (data, value) => data._itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemParentName = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSortWeight": (
    getter: (data) => data._itemSortWeight,
    setter: (data, value) => data._itemSortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemSortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemSortWeight = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemTreePath": (
    getter: (data) => data._itemTreePath,
    setter: (data, value) => data._itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemTreePath = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "itemUnitConverts": (
    getter: (data) => data._itemUnitConverts,
    setter: (data, value) => data._itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data._itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data._itemUnitConverts = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockBasicAmount": (
    getter: (data) => data._stockBasicAmount,
    setter: (data, value) => data._stockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockBasicAmount = parser(value);
    }
  ),
  "stockInitialAmount": (
    getter: (data) => data._stockInitialAmount,
    setter: (data, value) => data._stockInitialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockInitialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockInitialAmount = parser(value);
    }
  ),
  "stockInitialPrice": (
    getter: (data) => data._stockInitialPrice,
    setter: (data, value) => data._stockInitialPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockInitialPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockInitialPrice = parser(value);
    }
  ),
  "stockInitialTotal": (
    getter: (data) => data._stockInitialTotal,
    setter: (data, value) => data._stockInitialTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockInitialTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockInitialTotal = parser(value);
    }
  ),
  "stockInitialUnit": (
    getter: (data) => data._stockInitialUnit,
    setter: (data, value) => data._stockInitialUnit = value as TypeAutoInjectLiteUnit?,
    toDynamic: (data) {
      final formatter = TypeAutoInjectLiteUnit.toDynamic;
      return formatter(data._stockInitialUnit);
    },
    fromDynamic: (data, value) {
      final parser = TypeAutoInjectLiteUnit.fromDynamic;
      data._stockInitialUnit = parser(value);
    }
  ),
  "stockInitialUnitId": (
    getter: (data) => data._stockInitialUnitId,
    setter: (data, value) => data._stockInitialUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._stockInitialUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._stockInitialUnitId = parser(value);
    }
  ),
  "stockLocations": (
    getter: (data) => data._stockLocations,
    setter: (data, value) => data._stockLocations = value as List<TypeStockLocationDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._stockLocations);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.fromDynamic;
        return handler(single)!;
      });
      data._stockLocations = parser(value);
    }
  ),
  "stockPrice": (
    getter: (data) => data._stockPrice,
    setter: (data, value) => data._stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPrice = parser(value);
    }
  ),
  "stockPurchaseTransitAmount": (
    getter: (data) => data._stockPurchaseTransitAmount,
    setter: (data, value) => data._stockPurchaseTransitAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPurchaseTransitAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPurchaseTransitAmount = parser(value);
    }
  ),
  "stockPurchaseTransitRemark": (
    getter: (data) => data._stockPurchaseTransitRemark,
    setter: (data, value) => data._stockPurchaseTransitRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPurchaseTransitRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPurchaseTransitRemark = parser(value);
    }
  ),
  "stockRemainAge": (
    getter: (data) => data._stockRemainAge,
    setter: (data, value) => data._stockRemainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAge = parser(value);
    }
  ),
  "stockTotal": (
    getter: (data) => data._stockTotal,
    setter: (data, value) => data._stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockTotal = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "storeNumber": (
    getter: (data) => data._storeNumber,
    setter: (data, value) => data._storeNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeNumber = parser(value);
    }
  ),
  "waitingInAmount": (
    getter: (data) => data._waitingInAmount,
    setter: (data, value) => data._waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingInAmount = parser(value);
    }
  ),
  "waitingOutAmount": (
    getter: (data) => data._waitingOutAmount,
    setter: (data, value) => data._waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingOutAmount = parser(value);
    }
  ),
};

class TypeStockQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockQueryDataDTO({
    String? availableAmount,
    String? id,
    String? itemBasicUnitId,
    String? itemBasicUnitName,
    String? itemCommonUnitConvert,
    String? itemCommonUnitId,
    String? itemCommonUnitName,
    int? itemId,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    int? itemParentId,
    String? itemParentName,
    String? itemRemark,
    int? itemSortWeight,
    String? itemSpecsRemark,
    String? itemTreePath,
    String? itemUnitConvertDesc,
    List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts,
    String? stockAmount,
    String? stockBasicAmount,
    String? stockInitialAmount,
    String? stockInitialPrice,
    String? stockInitialTotal,
    TypeAutoInjectLiteUnit? stockInitialUnit,
    int? stockInitialUnitId,
    List<TypeStockLocationDTO>? stockLocations,
    String? stockPrice,
    String? stockPurchaseTransitAmount,
    String? stockPurchaseTransitRemark,
    String? stockRemainAge,
    String? stockTotal,
    int? storeId,
    String? storeName,
    String? storeNumber,
    String? waitingInAmount,
    String? waitingOutAmount
  }):
    _availableAmount = availableAmount,
    _id = id,
    _itemBasicUnitId = itemBasicUnitId,
    _itemBasicUnitName = itemBasicUnitName,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemId = itemId,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemParentId = itemParentId,
    _itemParentName = itemParentName,
    _itemRemark = itemRemark,
    _itemSortWeight = itemSortWeight,
    _itemSpecsRemark = itemSpecsRemark,
    _itemTreePath = itemTreePath,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _itemUnitConverts = itemUnitConverts,
    _stockAmount = stockAmount,
    _stockBasicAmount = stockBasicAmount,
    _stockInitialAmount = stockInitialAmount,
    _stockInitialPrice = stockInitialPrice,
    _stockInitialTotal = stockInitialTotal,
    _stockInitialUnit = stockInitialUnit,
    _stockInitialUnitId = stockInitialUnitId,
    _stockLocations = stockLocations,
    _stockPrice = stockPrice,
    _stockPurchaseTransitAmount = stockPurchaseTransitAmount,
    _stockPurchaseTransitRemark = stockPurchaseTransitRemark,
    _stockRemainAge = stockRemainAge,
    _stockTotal = stockTotal,
    _storeId = storeId,
    _storeName = storeName,
    _storeNumber = storeNumber,
    _waitingInAmount = waitingInAmount,
    _waitingOutAmount = waitingOutAmount;

  static TypeStockQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _availableAmount;

  String get availableAmount{
    return _availableAmount!;
  }

  String? getAvailableAmount(){
    return _availableAmount;
  }

  set availableAmount(String data){
    _availableAmount = data;
  }

  void setAvailableAmount(String? data){
    _availableAmount = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _itemBasicUnitId;

  String get itemBasicUnitId{
    return _itemBasicUnitId!;
  }

  String? getItemBasicUnitId(){
    return _itemBasicUnitId;
  }

  set itemBasicUnitId(String data){
    _itemBasicUnitId = data;
  }

  void setItemBasicUnitId(String? data){
    _itemBasicUnitId = data;
  }

  String? _itemBasicUnitName;

  String get itemBasicUnitName{
    return _itemBasicUnitName!;
  }

  String? getItemBasicUnitName(){
    return _itemBasicUnitName;
  }

  set itemBasicUnitName(String data){
    _itemBasicUnitName = data;
  }

  void setItemBasicUnitName(String? data){
    _itemBasicUnitName = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  String? _itemCommonUnitId;

  String get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  String? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(String data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(String? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  int? _itemParentId;

  int get itemParentId{
    return _itemParentId!;
  }

  int? getItemParentId(){
    return _itemParentId;
  }

  set itemParentId(int data){
    _itemParentId = data;
  }

  void setItemParentId(int? data){
    _itemParentId = data;
  }

  String? _itemParentName;

  String get itemParentName{
    return _itemParentName!;
  }

  String? getItemParentName(){
    return _itemParentName;
  }

  set itemParentName(String data){
    _itemParentName = data;
  }

  void setItemParentName(String? data){
    _itemParentName = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  int? _itemSortWeight;

  int get itemSortWeight{
    return _itemSortWeight!;
  }

  int? getItemSortWeight(){
    return _itemSortWeight;
  }

  set itemSortWeight(int data){
    _itemSortWeight = data;
  }

  void setItemSortWeight(int? data){
    _itemSortWeight = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemTreePath;

  String get itemTreePath{
    return _itemTreePath!;
  }

  String? getItemTreePath(){
    return _itemTreePath;
  }

  set itemTreePath(String data){
    _itemTreePath = data;
  }

  void setItemTreePath(String? data){
    _itemTreePath = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? _itemUnitConverts;

  List<TypeAutoInjectLiteItemUnitConvert> get itemUnitConverts{
    return _itemUnitConverts!;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? getItemUnitConverts(){
    return _itemUnitConverts;
  }

  set itemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert> data){
    _itemUnitConverts = data;
  }

  void setItemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert>? data){
    _itemUnitConverts = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockBasicAmount;

  String get stockBasicAmount{
    return _stockBasicAmount!;
  }

  String? getStockBasicAmount(){
    return _stockBasicAmount;
  }

  set stockBasicAmount(String data){
    _stockBasicAmount = data;
  }

  void setStockBasicAmount(String? data){
    _stockBasicAmount = data;
  }

  String? _stockInitialAmount;

  String get stockInitialAmount{
    return _stockInitialAmount!;
  }

  String? getStockInitialAmount(){
    return _stockInitialAmount;
  }

  set stockInitialAmount(String data){
    _stockInitialAmount = data;
  }

  void setStockInitialAmount(String? data){
    _stockInitialAmount = data;
  }

  String? _stockInitialPrice;

  String get stockInitialPrice{
    return _stockInitialPrice!;
  }

  String? getStockInitialPrice(){
    return _stockInitialPrice;
  }

  set stockInitialPrice(String data){
    _stockInitialPrice = data;
  }

  void setStockInitialPrice(String? data){
    _stockInitialPrice = data;
  }

  String? _stockInitialTotal;

  String get stockInitialTotal{
    return _stockInitialTotal!;
  }

  String? getStockInitialTotal(){
    return _stockInitialTotal;
  }

  set stockInitialTotal(String data){
    _stockInitialTotal = data;
  }

  void setStockInitialTotal(String? data){
    _stockInitialTotal = data;
  }

  TypeAutoInjectLiteUnit? _stockInitialUnit;

  TypeAutoInjectLiteUnit get stockInitialUnit{
    return _stockInitialUnit!;
  }

  TypeAutoInjectLiteUnit? getStockInitialUnit(){
    return _stockInitialUnit;
  }

  set stockInitialUnit(TypeAutoInjectLiteUnit data){
    _stockInitialUnit = data;
  }

  void setStockInitialUnit(TypeAutoInjectLiteUnit? data){
    _stockInitialUnit = data;
  }

  int? _stockInitialUnitId;

  int get stockInitialUnitId{
    return _stockInitialUnitId!;
  }

  int? getStockInitialUnitId(){
    return _stockInitialUnitId;
  }

  set stockInitialUnitId(int data){
    _stockInitialUnitId = data;
  }

  void setStockInitialUnitId(int? data){
    _stockInitialUnitId = data;
  }

  List<TypeStockLocationDTO>? _stockLocations;

  List<TypeStockLocationDTO> get stockLocations{
    return _stockLocations!;
  }

  List<TypeStockLocationDTO>? getStockLocations(){
    return _stockLocations;
  }

  set stockLocations(List<TypeStockLocationDTO> data){
    _stockLocations = data;
  }

  void setStockLocations(List<TypeStockLocationDTO>? data){
    _stockLocations = data;
  }

  String? _stockPrice;

  String get stockPrice{
    return _stockPrice!;
  }

  String? getStockPrice(){
    return _stockPrice;
  }

  set stockPrice(String data){
    _stockPrice = data;
  }

  void setStockPrice(String? data){
    _stockPrice = data;
  }

  String? _stockPurchaseTransitAmount;

  String get stockPurchaseTransitAmount{
    return _stockPurchaseTransitAmount!;
  }

  String? getStockPurchaseTransitAmount(){
    return _stockPurchaseTransitAmount;
  }

  set stockPurchaseTransitAmount(String data){
    _stockPurchaseTransitAmount = data;
  }

  void setStockPurchaseTransitAmount(String? data){
    _stockPurchaseTransitAmount = data;
  }

  String? _stockPurchaseTransitRemark;

  String get stockPurchaseTransitRemark{
    return _stockPurchaseTransitRemark!;
  }

  String? getStockPurchaseTransitRemark(){
    return _stockPurchaseTransitRemark;
  }

  set stockPurchaseTransitRemark(String data){
    _stockPurchaseTransitRemark = data;
  }

  void setStockPurchaseTransitRemark(String? data){
    _stockPurchaseTransitRemark = data;
  }

  String? _stockRemainAge;

  String get stockRemainAge{
    return _stockRemainAge!;
  }

  String? getStockRemainAge(){
    return _stockRemainAge;
  }

  set stockRemainAge(String data){
    _stockRemainAge = data;
  }

  void setStockRemainAge(String? data){
    _stockRemainAge = data;
  }

  String? _stockTotal;

  String get stockTotal{
    return _stockTotal!;
  }

  String? getStockTotal(){
    return _stockTotal;
  }

  set stockTotal(String data){
    _stockTotal = data;
  }

  void setStockTotal(String? data){
    _stockTotal = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  String? _storeNumber;

  String get storeNumber{
    return _storeNumber!;
  }

  String? getStoreNumber(){
    return _storeNumber;
  }

  set storeNumber(String data){
    _storeNumber = data;
  }

  void setStoreNumber(String? data){
    _storeNumber = data;
  }

  String? _waitingInAmount;

  String get waitingInAmount{
    return _waitingInAmount!;
  }

  String? getWaitingInAmount(){
    return _waitingInAmount;
  }

  set waitingInAmount(String data){
    _waitingInAmount = data;
  }

  void setWaitingInAmount(String? data){
    _waitingInAmount = data;
  }

  String? _waitingOutAmount;

  String get waitingOutAmount{
    return _waitingOutAmount!;
  }

  String? getWaitingOutAmount(){
    return _waitingOutAmount;
  }

  set waitingOutAmount(String data){
    _waitingOutAmount = data;
  }

  void setWaitingOutAmount(String? data){
    _waitingOutAmount = data;
  }

}

class FTypeStockQuerySumDTO extends IDataField {
  static const availableAmount = FTypeStockQuerySumDTO('availableAmount');
  static const count = FTypeStockQuerySumDTO('count');
  static const stockAmount = FTypeStockQuerySumDTO('stockAmount');
  static const stockInitialAmount = FTypeStockQuerySumDTO('stockInitialAmount');
  static const stockInitialTotal = FTypeStockQuerySumDTO('stockInitialTotal');
  static const stockPrice = FTypeStockQuerySumDTO('stockPrice');
  static const stockTotal = FTypeStockQuerySumDTO('stockTotal');
  static const validAmount = FTypeStockQuerySumDTO('validAmount');
  static const validTotal = FTypeStockQuerySumDTO('validTotal');
  static const waitingInAmount = FTypeStockQuerySumDTO('waitingInAmount');
  static const waitingOutAmount = FTypeStockQuerySumDTO('waitingOutAmount');
  const FTypeStockQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockQuerySumDTO> _TypeStockQuerySumDTO_fields = {
  "availableAmount": (
    getter: (data) => data._availableAmount,
    setter: (data, value) => data._availableAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableAmount = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockInitialAmount": (
    getter: (data) => data._stockInitialAmount,
    setter: (data, value) => data._stockInitialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockInitialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockInitialAmount = parser(value);
    }
  ),
  "stockInitialTotal": (
    getter: (data) => data._stockInitialTotal,
    setter: (data, value) => data._stockInitialTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockInitialTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockInitialTotal = parser(value);
    }
  ),
  "stockPrice": (
    getter: (data) => data._stockPrice,
    setter: (data, value) => data._stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPrice = parser(value);
    }
  ),
  "stockTotal": (
    getter: (data) => data._stockTotal,
    setter: (data, value) => data._stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockTotal = parser(value);
    }
  ),
  "validAmount": (
    getter: (data) => data._validAmount,
    setter: (data, value) => data._validAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._validAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._validAmount = parser(value);
    }
  ),
  "validTotal": (
    getter: (data) => data._validTotal,
    setter: (data, value) => data._validTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._validTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._validTotal = parser(value);
    }
  ),
  "waitingInAmount": (
    getter: (data) => data._waitingInAmount,
    setter: (data, value) => data._waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingInAmount = parser(value);
    }
  ),
  "waitingOutAmount": (
    getter: (data) => data._waitingOutAmount,
    setter: (data, value) => data._waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingOutAmount = parser(value);
    }
  ),
};

class TypeStockQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockQuerySumDTO({
    String? availableAmount,
    int? count,
    String? stockAmount,
    String? stockInitialAmount,
    String? stockInitialTotal,
    String? stockPrice,
    String? stockTotal,
    String? validAmount,
    String? validTotal,
    String? waitingInAmount,
    String? waitingOutAmount
  }):
    _availableAmount = availableAmount,
    _count = count,
    _stockAmount = stockAmount,
    _stockInitialAmount = stockInitialAmount,
    _stockInitialTotal = stockInitialTotal,
    _stockPrice = stockPrice,
    _stockTotal = stockTotal,
    _validAmount = validAmount,
    _validTotal = validTotal,
    _waitingInAmount = waitingInAmount,
    _waitingOutAmount = waitingOutAmount;

  static TypeStockQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _availableAmount;

  String get availableAmount{
    return _availableAmount!;
  }

  String? getAvailableAmount(){
    return _availableAmount;
  }

  set availableAmount(String data){
    _availableAmount = data;
  }

  void setAvailableAmount(String? data){
    _availableAmount = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockInitialAmount;

  String get stockInitialAmount{
    return _stockInitialAmount!;
  }

  String? getStockInitialAmount(){
    return _stockInitialAmount;
  }

  set stockInitialAmount(String data){
    _stockInitialAmount = data;
  }

  void setStockInitialAmount(String? data){
    _stockInitialAmount = data;
  }

  String? _stockInitialTotal;

  String get stockInitialTotal{
    return _stockInitialTotal!;
  }

  String? getStockInitialTotal(){
    return _stockInitialTotal;
  }

  set stockInitialTotal(String data){
    _stockInitialTotal = data;
  }

  void setStockInitialTotal(String? data){
    _stockInitialTotal = data;
  }

  String? _stockPrice;

  String get stockPrice{
    return _stockPrice!;
  }

  String? getStockPrice(){
    return _stockPrice;
  }

  set stockPrice(String data){
    _stockPrice = data;
  }

  void setStockPrice(String? data){
    _stockPrice = data;
  }

  String? _stockTotal;

  String get stockTotal{
    return _stockTotal!;
  }

  String? getStockTotal(){
    return _stockTotal;
  }

  set stockTotal(String data){
    _stockTotal = data;
  }

  void setStockTotal(String? data){
    _stockTotal = data;
  }

  String? _validAmount;

  String get validAmount{
    return _validAmount!;
  }

  String? getValidAmount(){
    return _validAmount;
  }

  set validAmount(String data){
    _validAmount = data;
  }

  void setValidAmount(String? data){
    _validAmount = data;
  }

  String? _validTotal;

  String get validTotal{
    return _validTotal!;
  }

  String? getValidTotal(){
    return _validTotal;
  }

  set validTotal(String data){
    _validTotal = data;
  }

  void setValidTotal(String? data){
    _validTotal = data;
  }

  String? _waitingInAmount;

  String get waitingInAmount{
    return _waitingInAmount!;
  }

  String? getWaitingInAmount(){
    return _waitingInAmount;
  }

  set waitingInAmount(String data){
    _waitingInAmount = data;
  }

  void setWaitingInAmount(String? data){
    _waitingInAmount = data;
  }

  String? _waitingOutAmount;

  String get waitingOutAmount{
    return _waitingOutAmount!;
  }

  String? getWaitingOutAmount(){
    return _waitingOutAmount;
  }

  set waitingOutAmount(String data){
    _waitingOutAmount = data;
  }

  void setWaitingOutAmount(String? data){
    _waitingOutAmount = data;
  }

}

class FTypeStockRemainFlowQueryDTO extends IDataField {
  static const data = FTypeStockRemainFlowQueryDTO('data');
  static const pageIndex = FTypeStockRemainFlowQueryDTO('pageIndex');
  static const pageSize = FTypeStockRemainFlowQueryDTO('pageSize');
  static const sum = FTypeStockRemainFlowQueryDTO('sum');
  const FTypeStockRemainFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQueryDTO> _TypeStockRemainFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockRemainFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockRemainFlowQueryDataDTO>((single){
        final handler = TypeStockRemainFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockRemainFlowQueryDataDTO>((single){
        final handler = TypeStockRemainFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockRemainFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockRemainFlowQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockRemainFlowQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockRemainFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQueryDTO({
    List<TypeStockRemainFlowQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockRemainFlowQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockRemainFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockRemainFlowQueryDataDTO>? _data;

  List<TypeStockRemainFlowQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockRemainFlowQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockRemainFlowQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockRemainFlowQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockRemainFlowQuerySumDTO? _sum;

  TypeStockRemainFlowQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockRemainFlowQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockRemainFlowQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockRemainFlowQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockRemainFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeStockRemainFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockRemainFlowQueryDataDTO('commonUnitName');
  static const id = FTypeStockRemainFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeStockRemainFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeStockRemainFlowQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockRemainFlowQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockRemainFlowQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockRemainFlowQueryDataDTO('itemSpecsRemark');
  static const orderContactId = FTypeStockRemainFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockRemainFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockRemainFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockRemainFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockRemainFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockRemainFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockRemainFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeStockRemainFlowQueryDataDTO('orderState');
  static const orderStockType = FTypeStockRemainFlowQueryDataDTO('orderStockType');
  static const orderType = FTypeStockRemainFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeStockRemainFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeStockRemainFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeStockRemainFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeStockRemainFlowQueryDataDTO('previousTotal');
  static const price = FTypeStockRemainFlowQueryDataDTO('price');
  static const remark = FTypeStockRemainFlowQueryDataDTO('remark');
  static const storeId = FTypeStockRemainFlowQueryDataDTO('storeId');
  static const storeName = FTypeStockRemainFlowQueryDataDTO('storeName');
  static const total = FTypeStockRemainFlowQueryDataDTO('total');
  const FTypeStockRemainFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQueryDataDTO> _TypeStockRemainFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data._commonUnitId,
    setter: (data, value) => data._commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._commonUnitId = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderStockType": (
    getter: (data) => data._orderStockType,
    setter: (data, value) => data._orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderStockType = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "previousCommonAmount": (
    getter: (data) => data._previousCommonAmount,
    setter: (data, value) => data._previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousCommonAmount = parser(value);
    }
  ),
  "previousPrice": (
    getter: (data) => data._previousPrice,
    setter: (data, value) => data._previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousPrice = parser(value);
    }
  ),
  "previousTotal": (
    getter: (data) => data._previousTotal,
    setter: (data, value) => data._previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousTotal = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockRemainFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQueryDataDTO({
    int? commonUnitId,
    String? commonUnitName,
    int? id,
    String? inboundCommonAmount,
    int? itemId,
    String? itemModelRemark,
    String? itemName,
    String? itemSpecsRemark,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    int? orderStockType,
    TypeEnumOrderType? orderType,
    String? outboundCommonAmount,
    String? previousCommonAmount,
    String? previousPrice,
    String? previousTotal,
    String? price,
    String? remark,
    int? storeId,
    String? storeName,
    String? total
  }):
    _commonUnitId = commonUnitId,
    _commonUnitName = commonUnitName,
    _id = id,
    _inboundCommonAmount = inboundCommonAmount,
    _itemId = itemId,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemSpecsRemark = itemSpecsRemark,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderStockType = orderStockType,
    _orderType = orderType,
    _outboundCommonAmount = outboundCommonAmount,
    _previousCommonAmount = previousCommonAmount,
    _previousPrice = previousPrice,
    _previousTotal = previousTotal,
    _price = price,
    _remark = remark,
    _storeId = storeId,
    _storeName = storeName,
    _total = total;

  static TypeStockRemainFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _commonUnitId;

  int get commonUnitId{
    return _commonUnitId!;
  }

  int? getCommonUnitId(){
    return _commonUnitId;
  }

  set commonUnitId(int data){
    _commonUnitId = data;
  }

  void setCommonUnitId(int? data){
    _commonUnitId = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  int? _orderStockType;

  int get orderStockType{
    return _orderStockType!;
  }

  int? getOrderStockType(){
    return _orderStockType;
  }

  set orderStockType(int data){
    _orderStockType = data;
  }

  void setOrderStockType(int? data){
    _orderStockType = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _previousCommonAmount;

  String get previousCommonAmount{
    return _previousCommonAmount!;
  }

  String? getPreviousCommonAmount(){
    return _previousCommonAmount;
  }

  set previousCommonAmount(String data){
    _previousCommonAmount = data;
  }

  void setPreviousCommonAmount(String? data){
    _previousCommonAmount = data;
  }

  String? _previousPrice;

  String get previousPrice{
    return _previousPrice!;
  }

  String? getPreviousPrice(){
    return _previousPrice;
  }

  set previousPrice(String data){
    _previousPrice = data;
  }

  void setPreviousPrice(String? data){
    _previousPrice = data;
  }

  String? _previousTotal;

  String get previousTotal{
    return _previousTotal!;
  }

  String? getPreviousTotal(){
    return _previousTotal;
  }

  set previousTotal(String data){
    _previousTotal = data;
  }

  void setPreviousTotal(String? data){
    _previousTotal = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockRemainFlowQuerySumDTO extends IDataField {
  static const count = FTypeStockRemainFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeStockRemainFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeStockRemainFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeStockRemainFlowQuerySumDTO('total');
  const FTypeStockRemainFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQuerySumDTO> _TypeStockRemainFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeStockRemainFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQuerySumDTO({
    int? count,
    String? inboundCommonAmount,
    String? outboundCommonAmount,
    String? total
  }):
    _count = count,
    _inboundCommonAmount = inboundCommonAmount,
    _outboundCommonAmount = outboundCommonAmount,
    _total = total;

  static TypeStockRemainFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeStockRemainQueryDTO extends IDataField {
  static const data = FTypeStockRemainQueryDTO('data');
  static const pageIndex = FTypeStockRemainQueryDTO('pageIndex');
  static const pageSize = FTypeStockRemainQueryDTO('pageSize');
  static const sum = FTypeStockRemainQueryDTO('sum');
  const FTypeStockRemainQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQueryDTO> _TypeStockRemainQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockRemainQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockRemainQueryDataDTO>((single){
        final handler = TypeStockRemainQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockRemainQueryDataDTO>((single){
        final handler = TypeStockRemainQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockRemainQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockRemainQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockRemainQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockRemainQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQueryDTO({
    List<TypeStockRemainQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockRemainQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockRemainQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockRemainQueryDataDTO>? _data;

  List<TypeStockRemainQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockRemainQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockRemainQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockRemainQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockRemainQuerySumDTO? _sum;

  TypeStockRemainQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockRemainQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockRemainQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockRemainQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockRemainQueryDataDTO extends IDataField {
  static const id = FTypeStockRemainQueryDataDTO('id');
  static const itemBasicUnitId = FTypeStockRemainQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeStockRemainQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeStockRemainQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockRemainQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockRemainQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeStockRemainQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeStockRemainQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockRemainQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockRemainQueryDataDTO('itemName');
  static const itemNumber = FTypeStockRemainQueryDataDTO('itemNumber');
  static const itemRemark = FTypeStockRemainQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeStockRemainQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypeStockRemainQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeStockRemainQueryDataDTO('itemUnitConverts');
  static const sourceOrderId = FTypeStockRemainQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypeStockRemainQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypeStockRemainQueryDataDTO('sourceOrderType');
  static const stockId = FTypeStockRemainQueryDataDTO('stockId');
  static const stockRemainAmount = FTypeStockRemainQueryDataDTO('stockRemainAmount');
  static const stockRemainBasicAmount = FTypeStockRemainQueryDataDTO('stockRemainBasicAmount');
  static const stockRemainPrice = FTypeStockRemainQueryDataDTO('stockRemainPrice');
  static const stockRemainPutOnShelfTime = FTypeStockRemainQueryDataDTO('stockRemainPutOnShelfTime');
  static const stockRemainRemark = FTypeStockRemainQueryDataDTO('stockRemainRemark');
  static const stockRemainTotal = FTypeStockRemainQueryDataDTO('stockRemainTotal');
  static const storeId = FTypeStockRemainQueryDataDTO('storeId');
  static const storeName = FTypeStockRemainQueryDataDTO('storeName');
  const FTypeStockRemainQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQueryDataDTO> _TypeStockRemainQueryDataDTO_fields = {
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemBasicUnitId": (
    getter: (data) => data._itemBasicUnitId,
    setter: (data, value) => data._itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitId = parser(value);
    }
  ),
  "itemBasicUnitName": (
    getter: (data) => data._itemBasicUnitName,
    setter: (data, value) => data._itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitName = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "itemUnitConverts": (
    getter: (data) => data._itemUnitConverts,
    setter: (data, value) => data._itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data._itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data._itemUnitConverts = parser(value);
    }
  ),
  "sourceOrderId": (
    getter: (data) => data._sourceOrderId,
    setter: (data, value) => data._sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sourceOrderId = parser(value);
    }
  ),
  "sourceOrderNumber": (
    getter: (data) => data._sourceOrderNumber,
    setter: (data, value) => data._sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sourceOrderNumber = parser(value);
    }
  ),
  "sourceOrderType": (
    getter: (data) => data._sourceOrderType,
    setter: (data, value) => data._sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._sourceOrderType = parser(value);
    }
  ),
  "stockId": (
    getter: (data) => data._stockId,
    setter: (data, value) => data._stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockId = parser(value);
    }
  ),
  "stockRemainAmount": (
    getter: (data) => data._stockRemainAmount,
    setter: (data, value) => data._stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAmount = parser(value);
    }
  ),
  "stockRemainBasicAmount": (
    getter: (data) => data._stockRemainBasicAmount,
    setter: (data, value) => data._stockRemainBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainBasicAmount = parser(value);
    }
  ),
  "stockRemainPrice": (
    getter: (data) => data._stockRemainPrice,
    setter: (data, value) => data._stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPrice = parser(value);
    }
  ),
  "stockRemainPutOnShelfTime": (
    getter: (data) => data._stockRemainPutOnShelfTime,
    setter: (data, value) => data._stockRemainPutOnShelfTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPutOnShelfTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPutOnShelfTime = parser(value);
    }
  ),
  "stockRemainRemark": (
    getter: (data) => data._stockRemainRemark,
    setter: (data, value) => data._stockRemainRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainRemark = parser(value);
    }
  ),
  "stockRemainTotal": (
    getter: (data) => data._stockRemainTotal,
    setter: (data, value) => data._stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainTotal = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
};

class TypeStockRemainQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQueryDataDTO({
    int? id,
    String? itemBasicUnitId,
    String? itemBasicUnitName,
    String? itemCommonUnitConvert,
    String? itemCommonUnitId,
    String? itemCommonUnitName,
    int? itemId,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    String? itemRemark,
    String? itemSpecsRemark,
    String? itemUnitConvertDesc,
    List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts,
    int? sourceOrderId,
    String? sourceOrderNumber,
    TypeEnumOrderType? sourceOrderType,
    String? stockId,
    String? stockRemainAmount,
    String? stockRemainBasicAmount,
    String? stockRemainPrice,
    String? stockRemainPutOnShelfTime,
    String? stockRemainRemark,
    String? stockRemainTotal,
    int? storeId,
    String? storeName
  }):
    _id = id,
    _itemBasicUnitId = itemBasicUnitId,
    _itemBasicUnitName = itemBasicUnitName,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemId = itemId,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemRemark = itemRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _itemUnitConverts = itemUnitConverts,
    _sourceOrderId = sourceOrderId,
    _sourceOrderNumber = sourceOrderNumber,
    _sourceOrderType = sourceOrderType,
    _stockId = stockId,
    _stockRemainAmount = stockRemainAmount,
    _stockRemainBasicAmount = stockRemainBasicAmount,
    _stockRemainPrice = stockRemainPrice,
    _stockRemainPutOnShelfTime = stockRemainPutOnShelfTime,
    _stockRemainRemark = stockRemainRemark,
    _stockRemainTotal = stockRemainTotal,
    _storeId = storeId,
    _storeName = storeName;

  static TypeStockRemainQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _itemBasicUnitId;

  String get itemBasicUnitId{
    return _itemBasicUnitId!;
  }

  String? getItemBasicUnitId(){
    return _itemBasicUnitId;
  }

  set itemBasicUnitId(String data){
    _itemBasicUnitId = data;
  }

  void setItemBasicUnitId(String? data){
    _itemBasicUnitId = data;
  }

  String? _itemBasicUnitName;

  String get itemBasicUnitName{
    return _itemBasicUnitName!;
  }

  String? getItemBasicUnitName(){
    return _itemBasicUnitName;
  }

  set itemBasicUnitName(String data){
    _itemBasicUnitName = data;
  }

  void setItemBasicUnitName(String? data){
    _itemBasicUnitName = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  String? _itemCommonUnitId;

  String get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  String? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(String data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(String? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? _itemUnitConverts;

  List<TypeAutoInjectLiteItemUnitConvert> get itemUnitConverts{
    return _itemUnitConverts!;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? getItemUnitConverts(){
    return _itemUnitConverts;
  }

  set itemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert> data){
    _itemUnitConverts = data;
  }

  void setItemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert>? data){
    _itemUnitConverts = data;
  }

  int? _sourceOrderId;

  int get sourceOrderId{
    return _sourceOrderId!;
  }

  int? getSourceOrderId(){
    return _sourceOrderId;
  }

  set sourceOrderId(int data){
    _sourceOrderId = data;
  }

  void setSourceOrderId(int? data){
    _sourceOrderId = data;
  }

  String? _sourceOrderNumber;

  String get sourceOrderNumber{
    return _sourceOrderNumber!;
  }

  String? getSourceOrderNumber(){
    return _sourceOrderNumber;
  }

  set sourceOrderNumber(String data){
    _sourceOrderNumber = data;
  }

  void setSourceOrderNumber(String? data){
    _sourceOrderNumber = data;
  }

  TypeEnumOrderType? _sourceOrderType;

  TypeEnumOrderType get sourceOrderType{
    return _sourceOrderType!;
  }

  TypeEnumOrderType? getSourceOrderType(){
    return _sourceOrderType;
  }

  set sourceOrderType(TypeEnumOrderType data){
    _sourceOrderType = data;
  }

  void setSourceOrderType(TypeEnumOrderType? data){
    _sourceOrderType = data;
  }

  String? _stockId;

  String get stockId{
    return _stockId!;
  }

  String? getStockId(){
    return _stockId;
  }

  set stockId(String data){
    _stockId = data;
  }

  void setStockId(String? data){
    _stockId = data;
  }

  String? _stockRemainAmount;

  String get stockRemainAmount{
    return _stockRemainAmount!;
  }

  String? getStockRemainAmount(){
    return _stockRemainAmount;
  }

  set stockRemainAmount(String data){
    _stockRemainAmount = data;
  }

  void setStockRemainAmount(String? data){
    _stockRemainAmount = data;
  }

  String? _stockRemainBasicAmount;

  String get stockRemainBasicAmount{
    return _stockRemainBasicAmount!;
  }

  String? getStockRemainBasicAmount(){
    return _stockRemainBasicAmount;
  }

  set stockRemainBasicAmount(String data){
    _stockRemainBasicAmount = data;
  }

  void setStockRemainBasicAmount(String? data){
    _stockRemainBasicAmount = data;
  }

  String? _stockRemainPrice;

  String get stockRemainPrice{
    return _stockRemainPrice!;
  }

  String? getStockRemainPrice(){
    return _stockRemainPrice;
  }

  set stockRemainPrice(String data){
    _stockRemainPrice = data;
  }

  void setStockRemainPrice(String? data){
    _stockRemainPrice = data;
  }

  String? _stockRemainPutOnShelfTime;

  String get stockRemainPutOnShelfTime{
    return _stockRemainPutOnShelfTime!;
  }

  String? getStockRemainPutOnShelfTime(){
    return _stockRemainPutOnShelfTime;
  }

  set stockRemainPutOnShelfTime(String data){
    _stockRemainPutOnShelfTime = data;
  }

  void setStockRemainPutOnShelfTime(String? data){
    _stockRemainPutOnShelfTime = data;
  }

  String? _stockRemainRemark;

  String get stockRemainRemark{
    return _stockRemainRemark!;
  }

  String? getStockRemainRemark(){
    return _stockRemainRemark;
  }

  set stockRemainRemark(String data){
    _stockRemainRemark = data;
  }

  void setStockRemainRemark(String? data){
    _stockRemainRemark = data;
  }

  String? _stockRemainTotal;

  String get stockRemainTotal{
    return _stockRemainTotal!;
  }

  String? getStockRemainTotal(){
    return _stockRemainTotal;
  }

  set stockRemainTotal(String data){
    _stockRemainTotal = data;
  }

  void setStockRemainTotal(String? data){
    _stockRemainTotal = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

}

class FTypeStockRemainQuerySumDTO extends IDataField {
  static const count = FTypeStockRemainQuerySumDTO('count');
  static const stockRemainAmount = FTypeStockRemainQuerySumDTO('stockRemainAmount');
  static const stockRemainPrice = FTypeStockRemainQuerySumDTO('stockRemainPrice');
  static const stockRemainTotal = FTypeStockRemainQuerySumDTO('stockRemainTotal');
  const FTypeStockRemainQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQuerySumDTO> _TypeStockRemainQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "stockRemainAmount": (
    getter: (data) => data._stockRemainAmount,
    setter: (data, value) => data._stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAmount = parser(value);
    }
  ),
  "stockRemainPrice": (
    getter: (data) => data._stockRemainPrice,
    setter: (data, value) => data._stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPrice = parser(value);
    }
  ),
  "stockRemainTotal": (
    getter: (data) => data._stockRemainTotal,
    setter: (data, value) => data._stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainTotal = parser(value);
    }
  ),
};

class TypeStockRemainQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQuerySumDTO({
    int? count,
    String? stockRemainAmount,
    String? stockRemainPrice,
    String? stockRemainTotal
  }):
    _count = count,
    _stockRemainAmount = stockRemainAmount,
    _stockRemainPrice = stockRemainPrice,
    _stockRemainTotal = stockRemainTotal;

  static TypeStockRemainQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _stockRemainAmount;

  String get stockRemainAmount{
    return _stockRemainAmount!;
  }

  String? getStockRemainAmount(){
    return _stockRemainAmount;
  }

  set stockRemainAmount(String data){
    _stockRemainAmount = data;
  }

  void setStockRemainAmount(String? data){
    _stockRemainAmount = data;
  }

  String? _stockRemainPrice;

  String get stockRemainPrice{
    return _stockRemainPrice!;
  }

  String? getStockRemainPrice(){
    return _stockRemainPrice;
  }

  set stockRemainPrice(String data){
    _stockRemainPrice = data;
  }

  void setStockRemainPrice(String? data){
    _stockRemainPrice = data;
  }

  String? _stockRemainTotal;

  String get stockRemainTotal{
    return _stockRemainTotal!;
  }

  String? getStockRemainTotal(){
    return _stockRemainTotal;
  }

  set stockRemainTotal(String data){
    _stockRemainTotal = data;
  }

  void setStockRemainTotal(String? data){
    _stockRemainTotal = data;
  }

}

class FTypeStockReplenishQueryDTO extends IDataField {
  static const data = FTypeStockReplenishQueryDTO('data');
  static const pageIndex = FTypeStockReplenishQueryDTO('pageIndex');
  static const pageSize = FTypeStockReplenishQueryDTO('pageSize');
  static const sum = FTypeStockReplenishQueryDTO('sum');
  const FTypeStockReplenishQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQueryDTO> _TypeStockReplenishQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeStockReplenishQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockReplenishQueryDataDTO>((single){
        final handler = TypeStockReplenishQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockReplenishQueryDataDTO>((single){
        final handler = TypeStockReplenishQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeStockReplenishQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockReplenishQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockReplenishQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeStockReplenishQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQueryDTO({
    List<TypeStockReplenishQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeStockReplenishQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeStockReplenishQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockReplenishQueryDataDTO>? _data;

  List<TypeStockReplenishQueryDataDTO> get data{
    return _data!;
  }

  List<TypeStockReplenishQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeStockReplenishQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeStockReplenishQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeStockReplenishQuerySumDTO? _sum;

  TypeStockReplenishQuerySumDTO get sum{
    return _sum!;
  }

  TypeStockReplenishQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeStockReplenishQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeStockReplenishQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeStockReplenishQueryDataDTO extends IDataField {
  static const availableStockAmount = FTypeStockReplenishQueryDataDTO('availableStockAmount');
  static const availableStockDay = FTypeStockReplenishQueryDataDTO('availableStockDay');
  static const id = FTypeStockReplenishQueryDataDTO('id');
  static const isRegularType = FTypeStockReplenishQueryDataDTO('isRegularType');
  static const itemCommonUnitConvert = FTypeStockReplenishQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockReplenishQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockReplenishQueryDataDTO('itemCommonUnitName');
  static const itemIsEnabled = FTypeStockReplenishQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockReplenishQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockReplenishQueryDataDTO('itemName');
  static const itemNumber = FTypeStockReplenishQueryDataDTO('itemNumber');
  static const itemParentId = FTypeStockReplenishQueryDataDTO('itemParentId');
  static const itemParentName = FTypeStockReplenishQueryDataDTO('itemParentName');
  static const itemRemark = FTypeStockReplenishQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeStockReplenishQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeStockReplenishQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeStockReplenishQueryDataDTO('itemUnitConvertDesc');
  static const orderSalesAmount = FTypeStockReplenishQueryDataDTO('orderSalesAmount');
  static const orderSalesAmountPerDay = FTypeStockReplenishQueryDataDTO('orderSalesAmountPerDay');
  static const orderSalesTotal = FTypeStockReplenishQueryDataDTO('orderSalesTotal');
  static const planPurchaseAmount = FTypeStockReplenishQueryDataDTO('planPurchaseAmount');
  static const planPurchaseBasicAmount = FTypeStockReplenishQueryDataDTO('planPurchaseBasicAmount');
  static const planPurchaseUnitConvertAmount = FTypeStockReplenishQueryDataDTO('planPurchaseUnitConvertAmount');
  static const purchaseTransitStockAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockAmount');
  static const purchaseTransitStockBasicAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockBasicAmount');
  static const purchaseTransitStockRemark = FTypeStockReplenishQueryDataDTO('purchaseTransitStockRemark');
  static const purchaseTransitStockUnitConvertAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockUnitConvertAmount');
  static const stockAmount = FTypeStockReplenishQueryDataDTO('stockAmount');
  static const stockId = FTypeStockReplenishQueryDataDTO('stockId');
  static const stockWaitingInAmount = FTypeStockReplenishQueryDataDTO('stockWaitingInAmount');
  static const stockWaitingOutAmount = FTypeStockReplenishQueryDataDTO('stockWaitingOutAmount');
  const FTypeStockReplenishQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQueryDataDTO> _TypeStockReplenishQueryDataDTO_fields = {
  "availableStockAmount": (
    getter: (data) => data._availableStockAmount,
    setter: (data, value) => data._availableStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableStockAmount = parser(value);
    }
  ),
  "availableStockDay": (
    getter: (data) => data._availableStockDay,
    setter: (data, value) => data._availableStockDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableStockDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableStockDay = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isRegularType": (
    getter: (data) => data._isRegularType,
    setter: (data, value) => data._isRegularType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isRegularType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isRegularType = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemParentId": (
    getter: (data) => data._itemParentId,
    setter: (data, value) => data._itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemParentId = parser(value);
    }
  ),
  "itemParentName": (
    getter: (data) => data._itemParentName,
    setter: (data, value) => data._itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemParentName = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemTreePath": (
    getter: (data) => data._itemTreePath,
    setter: (data, value) => data._itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemTreePath = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "orderSalesAmount": (
    getter: (data) => data._orderSalesAmount,
    setter: (data, value) => data._orderSalesAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesAmount = parser(value);
    }
  ),
  "orderSalesAmountPerDay": (
    getter: (data) => data._orderSalesAmountPerDay,
    setter: (data, value) => data._orderSalesAmountPerDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesAmountPerDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesAmountPerDay = parser(value);
    }
  ),
  "orderSalesTotal": (
    getter: (data) => data._orderSalesTotal,
    setter: (data, value) => data._orderSalesTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesTotal = parser(value);
    }
  ),
  "planPurchaseAmount": (
    getter: (data) => data._planPurchaseAmount,
    setter: (data, value) => data._planPurchaseAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._planPurchaseAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._planPurchaseAmount = parser(value);
    }
  ),
  "planPurchaseBasicAmount": (
    getter: (data) => data._planPurchaseBasicAmount,
    setter: (data, value) => data._planPurchaseBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._planPurchaseBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._planPurchaseBasicAmount = parser(value);
    }
  ),
  "planPurchaseUnitConvertAmount": (
    getter: (data) => data._planPurchaseUnitConvertAmount,
    setter: (data, value) => data._planPurchaseUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._planPurchaseUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._planPurchaseUnitConvertAmount = parser(value);
    }
  ),
  "purchaseTransitStockAmount": (
    getter: (data) => data._purchaseTransitStockAmount,
    setter: (data, value) => data._purchaseTransitStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitStockAmount = parser(value);
    }
  ),
  "purchaseTransitStockBasicAmount": (
    getter: (data) => data._purchaseTransitStockBasicAmount,
    setter: (data, value) => data._purchaseTransitStockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitStockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitStockBasicAmount = parser(value);
    }
  ),
  "purchaseTransitStockRemark": (
    getter: (data) => data._purchaseTransitStockRemark,
    setter: (data, value) => data._purchaseTransitStockRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitStockRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitStockRemark = parser(value);
    }
  ),
  "purchaseTransitStockUnitConvertAmount": (
    getter: (data) => data._purchaseTransitStockUnitConvertAmount,
    setter: (data, value) => data._purchaseTransitStockUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitStockUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitStockUnitConvertAmount = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockId": (
    getter: (data) => data._stockId,
    setter: (data, value) => data._stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockId = parser(value);
    }
  ),
  "stockWaitingInAmount": (
    getter: (data) => data._stockWaitingInAmount,
    setter: (data, value) => data._stockWaitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockWaitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockWaitingInAmount = parser(value);
    }
  ),
  "stockWaitingOutAmount": (
    getter: (data) => data._stockWaitingOutAmount,
    setter: (data, value) => data._stockWaitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockWaitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockWaitingOutAmount = parser(value);
    }
  ),
};

class TypeStockReplenishQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQueryDataDTO({
    String? availableStockAmount,
    String? availableStockDay,
    int? id,
    int? isRegularType,
    String? itemCommonUnitConvert,
    int? itemCommonUnitId,
    String? itemCommonUnitName,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    int? itemParentId,
    String? itemParentName,
    String? itemRemark,
    String? itemSpecsRemark,
    String? itemTreePath,
    String? itemUnitConvertDesc,
    String? orderSalesAmount,
    String? orderSalesAmountPerDay,
    String? orderSalesTotal,
    String? planPurchaseAmount,
    String? planPurchaseBasicAmount,
    String? planPurchaseUnitConvertAmount,
    String? purchaseTransitStockAmount,
    String? purchaseTransitStockBasicAmount,
    String? purchaseTransitStockRemark,
    String? purchaseTransitStockUnitConvertAmount,
    String? stockAmount,
    String? stockId,
    String? stockWaitingInAmount,
    String? stockWaitingOutAmount
  }):
    _availableStockAmount = availableStockAmount,
    _availableStockDay = availableStockDay,
    _id = id,
    _isRegularType = isRegularType,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemParentId = itemParentId,
    _itemParentName = itemParentName,
    _itemRemark = itemRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _itemTreePath = itemTreePath,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _orderSalesAmount = orderSalesAmount,
    _orderSalesAmountPerDay = orderSalesAmountPerDay,
    _orderSalesTotal = orderSalesTotal,
    _planPurchaseAmount = planPurchaseAmount,
    _planPurchaseBasicAmount = planPurchaseBasicAmount,
    _planPurchaseUnitConvertAmount = planPurchaseUnitConvertAmount,
    _purchaseTransitStockAmount = purchaseTransitStockAmount,
    _purchaseTransitStockBasicAmount = purchaseTransitStockBasicAmount,
    _purchaseTransitStockRemark = purchaseTransitStockRemark,
    _purchaseTransitStockUnitConvertAmount = purchaseTransitStockUnitConvertAmount,
    _stockAmount = stockAmount,
    _stockId = stockId,
    _stockWaitingInAmount = stockWaitingInAmount,
    _stockWaitingOutAmount = stockWaitingOutAmount;

  static TypeStockReplenishQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _availableStockAmount;

  String get availableStockAmount{
    return _availableStockAmount!;
  }

  String? getAvailableStockAmount(){
    return _availableStockAmount;
  }

  set availableStockAmount(String data){
    _availableStockAmount = data;
  }

  void setAvailableStockAmount(String? data){
    _availableStockAmount = data;
  }

  String? _availableStockDay;

  String get availableStockDay{
    return _availableStockDay!;
  }

  String? getAvailableStockDay(){
    return _availableStockDay;
  }

  set availableStockDay(String data){
    _availableStockDay = data;
  }

  void setAvailableStockDay(String? data){
    _availableStockDay = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _isRegularType;

  int get isRegularType{
    return _isRegularType!;
  }

  int? getIsRegularType(){
    return _isRegularType;
  }

  set isRegularType(int data){
    _isRegularType = data;
  }

  void setIsRegularType(int? data){
    _isRegularType = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  int? _itemCommonUnitId;

  int get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  int? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(int data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(int? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  int? _itemParentId;

  int get itemParentId{
    return _itemParentId!;
  }

  int? getItemParentId(){
    return _itemParentId;
  }

  set itemParentId(int data){
    _itemParentId = data;
  }

  void setItemParentId(int? data){
    _itemParentId = data;
  }

  String? _itemParentName;

  String get itemParentName{
    return _itemParentName!;
  }

  String? getItemParentName(){
    return _itemParentName;
  }

  set itemParentName(String data){
    _itemParentName = data;
  }

  void setItemParentName(String? data){
    _itemParentName = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemTreePath;

  String get itemTreePath{
    return _itemTreePath!;
  }

  String? getItemTreePath(){
    return _itemTreePath;
  }

  set itemTreePath(String data){
    _itemTreePath = data;
  }

  void setItemTreePath(String? data){
    _itemTreePath = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  String? _orderSalesAmount;

  String get orderSalesAmount{
    return _orderSalesAmount!;
  }

  String? getOrderSalesAmount(){
    return _orderSalesAmount;
  }

  set orderSalesAmount(String data){
    _orderSalesAmount = data;
  }

  void setOrderSalesAmount(String? data){
    _orderSalesAmount = data;
  }

  String? _orderSalesAmountPerDay;

  String get orderSalesAmountPerDay{
    return _orderSalesAmountPerDay!;
  }

  String? getOrderSalesAmountPerDay(){
    return _orderSalesAmountPerDay;
  }

  set orderSalesAmountPerDay(String data){
    _orderSalesAmountPerDay = data;
  }

  void setOrderSalesAmountPerDay(String? data){
    _orderSalesAmountPerDay = data;
  }

  String? _orderSalesTotal;

  String get orderSalesTotal{
    return _orderSalesTotal!;
  }

  String? getOrderSalesTotal(){
    return _orderSalesTotal;
  }

  set orderSalesTotal(String data){
    _orderSalesTotal = data;
  }

  void setOrderSalesTotal(String? data){
    _orderSalesTotal = data;
  }

  String? _planPurchaseAmount;

  String get planPurchaseAmount{
    return _planPurchaseAmount!;
  }

  String? getPlanPurchaseAmount(){
    return _planPurchaseAmount;
  }

  set planPurchaseAmount(String data){
    _planPurchaseAmount = data;
  }

  void setPlanPurchaseAmount(String? data){
    _planPurchaseAmount = data;
  }

  String? _planPurchaseBasicAmount;

  String get planPurchaseBasicAmount{
    return _planPurchaseBasicAmount!;
  }

  String? getPlanPurchaseBasicAmount(){
    return _planPurchaseBasicAmount;
  }

  set planPurchaseBasicAmount(String data){
    _planPurchaseBasicAmount = data;
  }

  void setPlanPurchaseBasicAmount(String? data){
    _planPurchaseBasicAmount = data;
  }

  String? _planPurchaseUnitConvertAmount;

  String get planPurchaseUnitConvertAmount{
    return _planPurchaseUnitConvertAmount!;
  }

  String? getPlanPurchaseUnitConvertAmount(){
    return _planPurchaseUnitConvertAmount;
  }

  set planPurchaseUnitConvertAmount(String data){
    _planPurchaseUnitConvertAmount = data;
  }

  void setPlanPurchaseUnitConvertAmount(String? data){
    _planPurchaseUnitConvertAmount = data;
  }

  String? _purchaseTransitStockAmount;

  String get purchaseTransitStockAmount{
    return _purchaseTransitStockAmount!;
  }

  String? getPurchaseTransitStockAmount(){
    return _purchaseTransitStockAmount;
  }

  set purchaseTransitStockAmount(String data){
    _purchaseTransitStockAmount = data;
  }

  void setPurchaseTransitStockAmount(String? data){
    _purchaseTransitStockAmount = data;
  }

  String? _purchaseTransitStockBasicAmount;

  String get purchaseTransitStockBasicAmount{
    return _purchaseTransitStockBasicAmount!;
  }

  String? getPurchaseTransitStockBasicAmount(){
    return _purchaseTransitStockBasicAmount;
  }

  set purchaseTransitStockBasicAmount(String data){
    _purchaseTransitStockBasicAmount = data;
  }

  void setPurchaseTransitStockBasicAmount(String? data){
    _purchaseTransitStockBasicAmount = data;
  }

  String? _purchaseTransitStockRemark;

  String get purchaseTransitStockRemark{
    return _purchaseTransitStockRemark!;
  }

  String? getPurchaseTransitStockRemark(){
    return _purchaseTransitStockRemark;
  }

  set purchaseTransitStockRemark(String data){
    _purchaseTransitStockRemark = data;
  }

  void setPurchaseTransitStockRemark(String? data){
    _purchaseTransitStockRemark = data;
  }

  String? _purchaseTransitStockUnitConvertAmount;

  String get purchaseTransitStockUnitConvertAmount{
    return _purchaseTransitStockUnitConvertAmount!;
  }

  String? getPurchaseTransitStockUnitConvertAmount(){
    return _purchaseTransitStockUnitConvertAmount;
  }

  set purchaseTransitStockUnitConvertAmount(String data){
    _purchaseTransitStockUnitConvertAmount = data;
  }

  void setPurchaseTransitStockUnitConvertAmount(String? data){
    _purchaseTransitStockUnitConvertAmount = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockId;

  String get stockId{
    return _stockId!;
  }

  String? getStockId(){
    return _stockId;
  }

  set stockId(String data){
    _stockId = data;
  }

  void setStockId(String? data){
    _stockId = data;
  }

  String? _stockWaitingInAmount;

  String get stockWaitingInAmount{
    return _stockWaitingInAmount!;
  }

  String? getStockWaitingInAmount(){
    return _stockWaitingInAmount;
  }

  set stockWaitingInAmount(String data){
    _stockWaitingInAmount = data;
  }

  void setStockWaitingInAmount(String? data){
    _stockWaitingInAmount = data;
  }

  String? _stockWaitingOutAmount;

  String get stockWaitingOutAmount{
    return _stockWaitingOutAmount!;
  }

  String? getStockWaitingOutAmount(){
    return _stockWaitingOutAmount;
  }

  set stockWaitingOutAmount(String data){
    _stockWaitingOutAmount = data;
  }

  void setStockWaitingOutAmount(String? data){
    _stockWaitingOutAmount = data;
  }

}

class FTypeStockReplenishQuerySumDTO extends IDataField {
  static const availableStockAmount = FTypeStockReplenishQuerySumDTO('availableStockAmount');
  static const availableStockDay = FTypeStockReplenishQuerySumDTO('availableStockDay');
  static const count = FTypeStockReplenishQuerySumDTO('count');
  static const orderSalesAmount = FTypeStockReplenishQuerySumDTO('orderSalesAmount');
  static const orderSalesCostTotalPerDay = FTypeStockReplenishQuerySumDTO('orderSalesCostTotalPerDay');
  static const orderSalesTotal = FTypeStockReplenishQuerySumDTO('orderSalesTotal');
  static const purchaseTransitStockTotal = FTypeStockReplenishQuerySumDTO('purchaseTransitStockTotal');
  static const stockAmount = FTypeStockReplenishQuerySumDTO('stockAmount');
  static const stockTotal = FTypeStockReplenishQuerySumDTO('stockTotal');
  const FTypeStockReplenishQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQuerySumDTO> _TypeStockReplenishQuerySumDTO_fields = {
  "availableStockAmount": (
    getter: (data) => data._availableStockAmount,
    setter: (data, value) => data._availableStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableStockAmount = parser(value);
    }
  ),
  "availableStockDay": (
    getter: (data) => data._availableStockDay,
    setter: (data, value) => data._availableStockDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._availableStockDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._availableStockDay = parser(value);
    }
  ),
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "orderSalesAmount": (
    getter: (data) => data._orderSalesAmount,
    setter: (data, value) => data._orderSalesAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesAmount = parser(value);
    }
  ),
  "orderSalesCostTotalPerDay": (
    getter: (data) => data._orderSalesCostTotalPerDay,
    setter: (data, value) => data._orderSalesCostTotalPerDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesCostTotalPerDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesCostTotalPerDay = parser(value);
    }
  ),
  "orderSalesTotal": (
    getter: (data) => data._orderSalesTotal,
    setter: (data, value) => data._orderSalesTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderSalesTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderSalesTotal = parser(value);
    }
  ),
  "purchaseTransitStockTotal": (
    getter: (data) => data._purchaseTransitStockTotal,
    setter: (data, value) => data._purchaseTransitStockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseTransitStockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseTransitStockTotal = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockTotal": (
    getter: (data) => data._stockTotal,
    setter: (data, value) => data._stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockTotal = parser(value);
    }
  ),
};

class TypeStockReplenishQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQuerySumDTO({
    String? availableStockAmount,
    String? availableStockDay,
    int? count,
    String? orderSalesAmount,
    String? orderSalesCostTotalPerDay,
    String? orderSalesTotal,
    String? purchaseTransitStockTotal,
    String? stockAmount,
    String? stockTotal
  }):
    _availableStockAmount = availableStockAmount,
    _availableStockDay = availableStockDay,
    _count = count,
    _orderSalesAmount = orderSalesAmount,
    _orderSalesCostTotalPerDay = orderSalesCostTotalPerDay,
    _orderSalesTotal = orderSalesTotal,
    _purchaseTransitStockTotal = purchaseTransitStockTotal,
    _stockAmount = stockAmount,
    _stockTotal = stockTotal;

  static TypeStockReplenishQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _availableStockAmount;

  String get availableStockAmount{
    return _availableStockAmount!;
  }

  String? getAvailableStockAmount(){
    return _availableStockAmount;
  }

  set availableStockAmount(String data){
    _availableStockAmount = data;
  }

  void setAvailableStockAmount(String? data){
    _availableStockAmount = data;
  }

  String? _availableStockDay;

  String get availableStockDay{
    return _availableStockDay!;
  }

  String? getAvailableStockDay(){
    return _availableStockDay;
  }

  set availableStockDay(String data){
    _availableStockDay = data;
  }

  void setAvailableStockDay(String? data){
    _availableStockDay = data;
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _orderSalesAmount;

  String get orderSalesAmount{
    return _orderSalesAmount!;
  }

  String? getOrderSalesAmount(){
    return _orderSalesAmount;
  }

  set orderSalesAmount(String data){
    _orderSalesAmount = data;
  }

  void setOrderSalesAmount(String? data){
    _orderSalesAmount = data;
  }

  String? _orderSalesCostTotalPerDay;

  String get orderSalesCostTotalPerDay{
    return _orderSalesCostTotalPerDay!;
  }

  String? getOrderSalesCostTotalPerDay(){
    return _orderSalesCostTotalPerDay;
  }

  set orderSalesCostTotalPerDay(String data){
    _orderSalesCostTotalPerDay = data;
  }

  void setOrderSalesCostTotalPerDay(String? data){
    _orderSalesCostTotalPerDay = data;
  }

  String? _orderSalesTotal;

  String get orderSalesTotal{
    return _orderSalesTotal!;
  }

  String? getOrderSalesTotal(){
    return _orderSalesTotal;
  }

  set orderSalesTotal(String data){
    _orderSalesTotal = data;
  }

  void setOrderSalesTotal(String? data){
    _orderSalesTotal = data;
  }

  String? _purchaseTransitStockTotal;

  String get purchaseTransitStockTotal{
    return _purchaseTransitStockTotal!;
  }

  String? getPurchaseTransitStockTotal(){
    return _purchaseTransitStockTotal;
  }

  set purchaseTransitStockTotal(String data){
    _purchaseTransitStockTotal = data;
  }

  void setPurchaseTransitStockTotal(String? data){
    _purchaseTransitStockTotal = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockTotal;

  String get stockTotal{
    return _stockTotal!;
  }

  String? getStockTotal(){
    return _stockTotal;
  }

  set stockTotal(String data){
    _stockTotal = data;
  }

  void setStockTotal(String? data){
    _stockTotal = data;
  }

}

class FTypeStore extends IDataField {
  static const children = FTypeStore('children');
  static const createTime = FTypeStore('createTime');
  static const hasBusinessLink = FTypeStore('hasBusinessLink');
  static const id = FTypeStore('id');
  static const isCategory = FTypeStore('isCategory');
  static const isEnabled = FTypeStore('isEnabled');
  static const isSystem = FTypeStore('isSystem');
  static const modifyTime = FTypeStore('modifyTime');
  static const name = FTypeStore('name');
  static const number = FTypeStore('number');
  static const parentId = FTypeStore('parentId');
  static const parentInfo = FTypeStore('parentInfo');
  static const phone = FTypeStore('phone');
  static const remark = FTypeStore('remark');
  static const treeLevel = FTypeStore('treeLevel');
  static const treePath = FTypeStore('treePath');
  const FTypeStore(super.key);
}

final FieldReflectInfo<TypeStore> _TypeStore_fields = {
  "children": (
    getter: (data) => data._children,
    setter: (data, value) => data._children = value as List<TypeStore>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStore>((single){
        final handler = TypeStore.toDynamic;
        return handler(single)!;
      });
      return formatter(data._children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
        final handler = TypeStore.fromDynamic;
        return handler(single)!;
      });
      data._children = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isCategory": (
    getter: (data) => data._isCategory,
    setter: (data, value) => data._isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isCategory = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "isSystem": (
    getter: (data) => data._isSystem,
    setter: (data, value) => data._isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._isSystem = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "number": (
    getter: (data) => data._number,
    setter: (data, value) => data._number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._number = parser(value);
    }
  ),
  "parentId": (
    getter: (data) => data._parentId,
    setter: (data, value) => data._parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._parentId = parser(value);
    }
  ),
  "parentInfo": (
    getter: (data) => data._parentInfo,
    setter: (data, value) => data._parentInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data._parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data._parentInfo = parser(value);
    }
  ),
  "phone": (
    getter: (data) => data._phone,
    setter: (data, value) => data._phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._phone = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "treeLevel": (
    getter: (data) => data._treeLevel,
    setter: (data, value) => data._treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._treeLevel = parser(value);
    }
  ),
  "treePath": (
    getter: (data) => data._treePath,
    setter: (data, value) => data._treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._treePath = parser(value);
    }
  ),
};

class TypeStore extends IDataBasic implements IDataDynamic {
  TypeStore({
    List<TypeStore>? children,
    String? createTime,
    int? hasBusinessLink,
    int? id,
    int? isCategory,
    TypeEnumSoftEnableIsEnable? isEnabled,
    int? isSystem,
    String? modifyTime,
    String? name,
    String? number,
    int? parentId,
    TypeStore? parentInfo,
    String? phone,
    String? remark,
    int? treeLevel,
    String? treePath
  }):
    _children = children,
    _createTime = createTime,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _isCategory = isCategory,
    _isEnabled = isEnabled,
    _isSystem = isSystem,
    _modifyTime = modifyTime,
    _name = name,
    _number = number,
    _parentId = parentId,
    _parentInfo = parentInfo,
    _phone = phone,
    _remark = remark,
    _treeLevel = treeLevel,
    _treePath = treePath;

  static TypeStore? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStore();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStore_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStore: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStore? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStore_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStore_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStore_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStore>? _children;

  List<TypeStore> get children{
    return _children!;
  }

  List<TypeStore>? getChildren(){
    return _children;
  }

  set children(List<TypeStore> data){
    _children = data;
  }

  void setChildren(List<TypeStore>? data){
    _children = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  int? _isCategory;

  int get isCategory{
    return _isCategory!;
  }

  int? getIsCategory(){
    return _isCategory;
  }

  set isCategory(int data){
    _isCategory = data;
  }

  void setIsCategory(int? data){
    _isCategory = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  int? _isSystem;

  int get isSystem{
    return _isSystem!;
  }

  int? getIsSystem(){
    return _isSystem;
  }

  set isSystem(int data){
    _isSystem = data;
  }

  void setIsSystem(int? data){
    _isSystem = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _number;

  String get number{
    return _number!;
  }

  String? getNumber(){
    return _number;
  }

  set number(String data){
    _number = data;
  }

  void setNumber(String? data){
    _number = data;
  }

  int? _parentId;

  int get parentId{
    return _parentId!;
  }

  int? getParentId(){
    return _parentId;
  }

  set parentId(int data){
    _parentId = data;
  }

  void setParentId(int? data){
    _parentId = data;
  }

  TypeStore? _parentInfo;

  TypeStore get parentInfo{
    return _parentInfo!;
  }

  TypeStore? getParentInfo(){
    return _parentInfo;
  }

  set parentInfo(TypeStore data){
    _parentInfo = data;
  }

  void setParentInfo(TypeStore? data){
    _parentInfo = data;
  }

  String? _phone;

  String get phone{
    return _phone!;
  }

  String? getPhone(){
    return _phone;
  }

  set phone(String data){
    _phone = data;
  }

  void setPhone(String? data){
    _phone = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _treeLevel;

  int get treeLevel{
    return _treeLevel!;
  }

  int? getTreeLevel(){
    return _treeLevel;
  }

  set treeLevel(int data){
    _treeLevel = data;
  }

  void setTreeLevel(int? data){
    _treeLevel = data;
  }

  String? _treePath;

  String get treePath{
    return _treePath!;
  }

  String? getTreePath(){
    return _treePath;
  }

  set treePath(String data){
    _treePath = data;
  }

  void setTreePath(String? data){
    _treePath = data;
  }

}

class FTypeSubContractStock extends IDataField {
  static const bookAmount = FTypeSubContractStock('bookAmount');
  static const bookTotal = FTypeSubContractStock('bookTotal');
  static const contactId = FTypeSubContractStock('contactId');
  static const createTime = FTypeSubContractStock('createTime');
  static const hasBusinessLink = FTypeSubContractStock('hasBusinessLink');
  static const id = FTypeSubContractStock('id');
  static const itemId = FTypeSubContractStock('itemId');
  static const modifyTime = FTypeSubContractStock('modifyTime');
  static const price = FTypeSubContractStock('price');
  static const remainAge = FTypeSubContractStock('remainAge');
  static const remainAgeSum = FTypeSubContractStock('remainAgeSum');
  static const waitingInAmount = FTypeSubContractStock('waitingInAmount');
  static const waitingOutAmount = FTypeSubContractStock('waitingOutAmount');
  const FTypeSubContractStock(super.key);
}

final FieldReflectInfo<TypeSubContractStock> _TypeSubContractStock_fields = {
  "bookAmount": (
    getter: (data) => data._bookAmount,
    setter: (data, value) => data._bookAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bookAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bookAmount = parser(value);
    }
  ),
  "bookTotal": (
    getter: (data) => data._bookTotal,
    setter: (data, value) => data._bookTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._bookTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._bookTotal = parser(value);
    }
  ),
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "hasBusinessLink": (
    getter: (data) => data._hasBusinessLink,
    setter: (data, value) => data._hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasBusinessLink = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "remainAge": (
    getter: (data) => data._remainAge,
    setter: (data, value) => data._remainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remainAge = parser(value);
    }
  ),
  "remainAgeSum": (
    getter: (data) => data._remainAgeSum,
    setter: (data, value) => data._remainAgeSum = value as double?,
    toDynamic: (data) {
      final formatter = DoubleHelper.toDynamic;
      return formatter(data._remainAgeSum);
    },
    fromDynamic: (data, value) {
      final parser = DoubleHelper.fromDynamic;
      data._remainAgeSum = parser(value);
    }
  ),
  "waitingInAmount": (
    getter: (data) => data._waitingInAmount,
    setter: (data, value) => data._waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingInAmount = parser(value);
    }
  ),
  "waitingOutAmount": (
    getter: (data) => data._waitingOutAmount,
    setter: (data, value) => data._waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._waitingOutAmount = parser(value);
    }
  ),
};

class TypeSubContractStock extends IDataBasic implements IDataDynamic {
  TypeSubContractStock({
    String? bookAmount,
    String? bookTotal,
    int? contactId,
    String? createTime,
    int? hasBusinessLink,
    String? id,
    int? itemId,
    String? modifyTime,
    String? price,
    String? remainAge,
    double? remainAgeSum,
    String? waitingInAmount,
    String? waitingOutAmount
  }):
    _bookAmount = bookAmount,
    _bookTotal = bookTotal,
    _contactId = contactId,
    _createTime = createTime,
    _hasBusinessLink = hasBusinessLink,
    _id = id,
    _itemId = itemId,
    _modifyTime = modifyTime,
    _price = price,
    _remainAge = remainAge,
    _remainAgeSum = remainAgeSum,
    _waitingInAmount = waitingInAmount,
    _waitingOutAmount = waitingOutAmount;

  static TypeSubContractStock? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStock();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStock_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStock: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStock? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStock_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStock_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStock_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _bookAmount;

  String get bookAmount{
    return _bookAmount!;
  }

  String? getBookAmount(){
    return _bookAmount;
  }

  set bookAmount(String data){
    _bookAmount = data;
  }

  void setBookAmount(String? data){
    _bookAmount = data;
  }

  String? _bookTotal;

  String get bookTotal{
    return _bookTotal!;
  }

  String? getBookTotal(){
    return _bookTotal;
  }

  set bookTotal(String data){
    _bookTotal = data;
  }

  void setBookTotal(String? data){
    _bookTotal = data;
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _hasBusinessLink;

  int get hasBusinessLink{
    return _hasBusinessLink!;
  }

  int? getHasBusinessLink(){
    return _hasBusinessLink;
  }

  set hasBusinessLink(int data){
    _hasBusinessLink = data;
  }

  void setHasBusinessLink(int? data){
    _hasBusinessLink = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _remainAge;

  String get remainAge{
    return _remainAge!;
  }

  String? getRemainAge(){
    return _remainAge;
  }

  set remainAge(String data){
    _remainAge = data;
  }

  void setRemainAge(String? data){
    _remainAge = data;
  }

  double? _remainAgeSum;

  double get remainAgeSum{
    return _remainAgeSum!;
  }

  double? getRemainAgeSum(){
    return _remainAgeSum;
  }

  set remainAgeSum(double data){
    _remainAgeSum = data;
  }

  void setRemainAgeSum(double? data){
    _remainAgeSum = data;
  }

  String? _waitingInAmount;

  String get waitingInAmount{
    return _waitingInAmount!;
  }

  String? getWaitingInAmount(){
    return _waitingInAmount;
  }

  set waitingInAmount(String data){
    _waitingInAmount = data;
  }

  void setWaitingInAmount(String? data){
    _waitingInAmount = data;
  }

  String? _waitingOutAmount;

  String get waitingOutAmount{
    return _waitingOutAmount!;
  }

  String? getWaitingOutAmount(){
    return _waitingOutAmount;
  }

  set waitingOutAmount(String data){
    _waitingOutAmount = data;
  }

  void setWaitingOutAmount(String? data){
    _waitingOutAmount = data;
  }

}

class FTypeSubContractStockFlowQueryDTO extends IDataField {
  static const data = FTypeSubContractStockFlowQueryDTO('data');
  static const pageIndex = FTypeSubContractStockFlowQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockFlowQueryDTO('pageSize');
  static const sum = FTypeSubContractStockFlowQueryDTO('sum');
  const FTypeSubContractStockFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQueryDTO> _TypeSubContractStockFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeSubContractStockFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockFlowQueryDataDTO>((single){
        final handler = TypeSubContractStockFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockFlowQueryDataDTO>((single){
        final handler = TypeSubContractStockFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeSubContractStockFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockFlowQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockFlowQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeSubContractStockFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQueryDTO({
    List<TypeSubContractStockFlowQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeSubContractStockFlowQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeSubContractStockFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockFlowQueryDataDTO>? _data;

  List<TypeSubContractStockFlowQueryDataDTO> get data{
    return _data!;
  }

  List<TypeSubContractStockFlowQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeSubContractStockFlowQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeSubContractStockFlowQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeSubContractStockFlowQuerySumDTO? _sum;

  TypeSubContractStockFlowQuerySumDTO get sum{
    return _sum!;
  }

  TypeSubContractStockFlowQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeSubContractStockFlowQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeSubContractStockFlowQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeSubContractStockFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeSubContractStockFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeSubContractStockFlowQueryDataDTO('commonUnitName');
  static const id = FTypeSubContractStockFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeSubContractStockFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeSubContractStockFlowQueryDataDTO('itemId');
  static const itemName = FTypeSubContractStockFlowQueryDataDTO('itemName');
  static const orderContactId = FTypeSubContractStockFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeSubContractStockFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeSubContractStockFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeSubContractStockFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeSubContractStockFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeSubContractStockFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeSubContractStockFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeSubContractStockFlowQueryDataDTO('orderState');
  static const orderSubContractStockType = FTypeSubContractStockFlowQueryDataDTO('orderSubContractStockType');
  static const orderType = FTypeSubContractStockFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeSubContractStockFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeSubContractStockFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeSubContractStockFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeSubContractStockFlowQueryDataDTO('previousTotal');
  static const price = FTypeSubContractStockFlowQueryDataDTO('price');
  static const remark = FTypeSubContractStockFlowQueryDataDTO('remark');
  static const storeId = FTypeSubContractStockFlowQueryDataDTO('storeId');
  static const storeName = FTypeSubContractStockFlowQueryDataDTO('storeName');
  static const total = FTypeSubContractStockFlowQueryDataDTO('total');
  const FTypeSubContractStockFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQueryDataDTO> _TypeSubContractStockFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data._commonUnitId,
    setter: (data, value) => data._commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._commonUnitId = parser(value);
    }
  ),
  "commonUnitName": (
    getter: (data) => data._commonUnitName,
    setter: (data, value) => data._commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._commonUnitName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "orderContactId": (
    getter: (data) => data._orderContactId,
    setter: (data, value) => data._orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderContactId = parser(value);
    }
  ),
  "orderContactName": (
    getter: (data) => data._orderContactName,
    setter: (data, value) => data._orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderContactName = parser(value);
    }
  ),
  "orderDate": (
    getter: (data) => data._orderDate,
    setter: (data, value) => data._orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDate = parser(value);
    }
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data._orderDrawEmployeeId,
    setter: (data, value) => data._orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderDrawEmployeeId = parser(value);
    }
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data._orderDrawEmployeeName,
    setter: (data, value) => data._orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawEmployeeName = parser(value);
    }
  ),
  "orderDrawTime": (
    getter: (data) => data._orderDrawTime,
    setter: (data, value) => data._orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderDrawTime = parser(value);
    }
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data._orderEntryAccountEmployeeId,
    setter: (data, value) => data._orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderEntryAccountEmployeeId = parser(value);
    }
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data._orderEntryAccountEmployeeName,
    setter: (data, value) => data._orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountEmployeeName = parser(value);
    }
  ),
  "orderEntryAccountTime": (
    getter: (data) => data._orderEntryAccountTime,
    setter: (data, value) => data._orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderEntryAccountTime = parser(value);
    }
  ),
  "orderId": (
    getter: (data) => data._orderId,
    setter: (data, value) => data._orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderId = parser(value);
    }
  ),
  "orderManageEmployeeId": (
    getter: (data) => data._orderManageEmployeeId,
    setter: (data, value) => data._orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderManageEmployeeId = parser(value);
    }
  ),
  "orderManageEmployeeName": (
    getter: (data) => data._orderManageEmployeeName,
    setter: (data, value) => data._orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderManageEmployeeName = parser(value);
    }
  ),
  "orderNumber": (
    getter: (data) => data._orderNumber,
    setter: (data, value) => data._orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._orderNumber = parser(value);
    }
  ),
  "orderRedState": (
    getter: (data) => data._orderRedState,
    setter: (data, value) => data._orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data._orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data._orderRedState = parser(value);
    }
  ),
  "orderState": (
    getter: (data) => data._orderState,
    setter: (data, value) => data._orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data._orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data._orderState = parser(value);
    }
  ),
  "orderSubContractStockType": (
    getter: (data) => data._orderSubContractStockType,
    setter: (data, value) => data._orderSubContractStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._orderSubContractStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._orderSubContractStockType = parser(value);
    }
  ),
  "orderType": (
    getter: (data) => data._orderType,
    setter: (data, value) => data._orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._orderType = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "previousCommonAmount": (
    getter: (data) => data._previousCommonAmount,
    setter: (data, value) => data._previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousCommonAmount = parser(value);
    }
  ),
  "previousPrice": (
    getter: (data) => data._previousPrice,
    setter: (data, value) => data._previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousPrice = parser(value);
    }
  ),
  "previousTotal": (
    getter: (data) => data._previousTotal,
    setter: (data, value) => data._previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._previousTotal = parser(value);
    }
  ),
  "price": (
    getter: (data) => data._price,
    setter: (data, value) => data._price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._price = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
  "storeId": (
    getter: (data) => data._storeId,
    setter: (data, value) => data._storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._storeId = parser(value);
    }
  ),
  "storeName": (
    getter: (data) => data._storeName,
    setter: (data, value) => data._storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._storeName = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeSubContractStockFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQueryDataDTO({
    int? commonUnitId,
    String? commonUnitName,
    int? id,
    String? inboundCommonAmount,
    int? itemId,
    String? itemName,
    int? orderContactId,
    String? orderContactName,
    String? orderDate,
    int? orderDrawEmployeeId,
    String? orderDrawEmployeeName,
    String? orderDrawTime,
    int? orderEntryAccountEmployeeId,
    String? orderEntryAccountEmployeeName,
    String? orderEntryAccountTime,
    int? orderId,
    int? orderManageEmployeeId,
    String? orderManageEmployeeName,
    String? orderNumber,
    TypeEnumOrderRedState? orderRedState,
    TypeEnumOrderState? orderState,
    int? orderSubContractStockType,
    TypeEnumOrderType? orderType,
    String? outboundCommonAmount,
    String? previousCommonAmount,
    String? previousPrice,
    String? previousTotal,
    String? price,
    String? remark,
    int? storeId,
    String? storeName,
    String? total
  }):
    _commonUnitId = commonUnitId,
    _commonUnitName = commonUnitName,
    _id = id,
    _inboundCommonAmount = inboundCommonAmount,
    _itemId = itemId,
    _itemName = itemName,
    _orderContactId = orderContactId,
    _orderContactName = orderContactName,
    _orderDate = orderDate,
    _orderDrawEmployeeId = orderDrawEmployeeId,
    _orderDrawEmployeeName = orderDrawEmployeeName,
    _orderDrawTime = orderDrawTime,
    _orderEntryAccountEmployeeId = orderEntryAccountEmployeeId,
    _orderEntryAccountEmployeeName = orderEntryAccountEmployeeName,
    _orderEntryAccountTime = orderEntryAccountTime,
    _orderId = orderId,
    _orderManageEmployeeId = orderManageEmployeeId,
    _orderManageEmployeeName = orderManageEmployeeName,
    _orderNumber = orderNumber,
    _orderRedState = orderRedState,
    _orderState = orderState,
    _orderSubContractStockType = orderSubContractStockType,
    _orderType = orderType,
    _outboundCommonAmount = outboundCommonAmount,
    _previousCommonAmount = previousCommonAmount,
    _previousPrice = previousPrice,
    _previousTotal = previousTotal,
    _price = price,
    _remark = remark,
    _storeId = storeId,
    _storeName = storeName,
    _total = total;

  static TypeSubContractStockFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _commonUnitId;

  int get commonUnitId{
    return _commonUnitId!;
  }

  int? getCommonUnitId(){
    return _commonUnitId;
  }

  set commonUnitId(int data){
    _commonUnitId = data;
  }

  void setCommonUnitId(int? data){
    _commonUnitId = data;
  }

  String? _commonUnitName;

  String get commonUnitName{
    return _commonUnitName!;
  }

  String? getCommonUnitName(){
    return _commonUnitName;
  }

  set commonUnitName(String data){
    _commonUnitName = data;
  }

  void setCommonUnitName(String? data){
    _commonUnitName = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  int? _orderContactId;

  int get orderContactId{
    return _orderContactId!;
  }

  int? getOrderContactId(){
    return _orderContactId;
  }

  set orderContactId(int data){
    _orderContactId = data;
  }

  void setOrderContactId(int? data){
    _orderContactId = data;
  }

  String? _orderContactName;

  String get orderContactName{
    return _orderContactName!;
  }

  String? getOrderContactName(){
    return _orderContactName;
  }

  set orderContactName(String data){
    _orderContactName = data;
  }

  void setOrderContactName(String? data){
    _orderContactName = data;
  }

  String? _orderDate;

  String get orderDate{
    return _orderDate!;
  }

  String? getOrderDate(){
    return _orderDate;
  }

  set orderDate(String data){
    _orderDate = data;
  }

  void setOrderDate(String? data){
    _orderDate = data;
  }

  int? _orderDrawEmployeeId;

  int get orderDrawEmployeeId{
    return _orderDrawEmployeeId!;
  }

  int? getOrderDrawEmployeeId(){
    return _orderDrawEmployeeId;
  }

  set orderDrawEmployeeId(int data){
    _orderDrawEmployeeId = data;
  }

  void setOrderDrawEmployeeId(int? data){
    _orderDrawEmployeeId = data;
  }

  String? _orderDrawEmployeeName;

  String get orderDrawEmployeeName{
    return _orderDrawEmployeeName!;
  }

  String? getOrderDrawEmployeeName(){
    return _orderDrawEmployeeName;
  }

  set orderDrawEmployeeName(String data){
    _orderDrawEmployeeName = data;
  }

  void setOrderDrawEmployeeName(String? data){
    _orderDrawEmployeeName = data;
  }

  String? _orderDrawTime;

  String get orderDrawTime{
    return _orderDrawTime!;
  }

  String? getOrderDrawTime(){
    return _orderDrawTime;
  }

  set orderDrawTime(String data){
    _orderDrawTime = data;
  }

  void setOrderDrawTime(String? data){
    _orderDrawTime = data;
  }

  int? _orderEntryAccountEmployeeId;

  int get orderEntryAccountEmployeeId{
    return _orderEntryAccountEmployeeId!;
  }

  int? getOrderEntryAccountEmployeeId(){
    return _orderEntryAccountEmployeeId;
  }

  set orderEntryAccountEmployeeId(int data){
    _orderEntryAccountEmployeeId = data;
  }

  void setOrderEntryAccountEmployeeId(int? data){
    _orderEntryAccountEmployeeId = data;
  }

  String? _orderEntryAccountEmployeeName;

  String get orderEntryAccountEmployeeName{
    return _orderEntryAccountEmployeeName!;
  }

  String? getOrderEntryAccountEmployeeName(){
    return _orderEntryAccountEmployeeName;
  }

  set orderEntryAccountEmployeeName(String data){
    _orderEntryAccountEmployeeName = data;
  }

  void setOrderEntryAccountEmployeeName(String? data){
    _orderEntryAccountEmployeeName = data;
  }

  String? _orderEntryAccountTime;

  String get orderEntryAccountTime{
    return _orderEntryAccountTime!;
  }

  String? getOrderEntryAccountTime(){
    return _orderEntryAccountTime;
  }

  set orderEntryAccountTime(String data){
    _orderEntryAccountTime = data;
  }

  void setOrderEntryAccountTime(String? data){
    _orderEntryAccountTime = data;
  }

  int? _orderId;

  int get orderId{
    return _orderId!;
  }

  int? getOrderId(){
    return _orderId;
  }

  set orderId(int data){
    _orderId = data;
  }

  void setOrderId(int? data){
    _orderId = data;
  }

  int? _orderManageEmployeeId;

  int get orderManageEmployeeId{
    return _orderManageEmployeeId!;
  }

  int? getOrderManageEmployeeId(){
    return _orderManageEmployeeId;
  }

  set orderManageEmployeeId(int data){
    _orderManageEmployeeId = data;
  }

  void setOrderManageEmployeeId(int? data){
    _orderManageEmployeeId = data;
  }

  String? _orderManageEmployeeName;

  String get orderManageEmployeeName{
    return _orderManageEmployeeName!;
  }

  String? getOrderManageEmployeeName(){
    return _orderManageEmployeeName;
  }

  set orderManageEmployeeName(String data){
    _orderManageEmployeeName = data;
  }

  void setOrderManageEmployeeName(String? data){
    _orderManageEmployeeName = data;
  }

  String? _orderNumber;

  String get orderNumber{
    return _orderNumber!;
  }

  String? getOrderNumber(){
    return _orderNumber;
  }

  set orderNumber(String data){
    _orderNumber = data;
  }

  void setOrderNumber(String? data){
    _orderNumber = data;
  }

  TypeEnumOrderRedState? _orderRedState;

  TypeEnumOrderRedState get orderRedState{
    return _orderRedState!;
  }

  TypeEnumOrderRedState? getOrderRedState(){
    return _orderRedState;
  }

  set orderRedState(TypeEnumOrderRedState data){
    _orderRedState = data;
  }

  void setOrderRedState(TypeEnumOrderRedState? data){
    _orderRedState = data;
  }

  TypeEnumOrderState? _orderState;

  TypeEnumOrderState get orderState{
    return _orderState!;
  }

  TypeEnumOrderState? getOrderState(){
    return _orderState;
  }

  set orderState(TypeEnumOrderState data){
    _orderState = data;
  }

  void setOrderState(TypeEnumOrderState? data){
    _orderState = data;
  }

  int? _orderSubContractStockType;

  int get orderSubContractStockType{
    return _orderSubContractStockType!;
  }

  int? getOrderSubContractStockType(){
    return _orderSubContractStockType;
  }

  set orderSubContractStockType(int data){
    _orderSubContractStockType = data;
  }

  void setOrderSubContractStockType(int? data){
    _orderSubContractStockType = data;
  }

  TypeEnumOrderType? _orderType;

  TypeEnumOrderType get orderType{
    return _orderType!;
  }

  TypeEnumOrderType? getOrderType(){
    return _orderType;
  }

  set orderType(TypeEnumOrderType data){
    _orderType = data;
  }

  void setOrderType(TypeEnumOrderType? data){
    _orderType = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _previousCommonAmount;

  String get previousCommonAmount{
    return _previousCommonAmount!;
  }

  String? getPreviousCommonAmount(){
    return _previousCommonAmount;
  }

  set previousCommonAmount(String data){
    _previousCommonAmount = data;
  }

  void setPreviousCommonAmount(String? data){
    _previousCommonAmount = data;
  }

  String? _previousPrice;

  String get previousPrice{
    return _previousPrice!;
  }

  String? getPreviousPrice(){
    return _previousPrice;
  }

  set previousPrice(String data){
    _previousPrice = data;
  }

  void setPreviousPrice(String? data){
    _previousPrice = data;
  }

  String? _previousTotal;

  String get previousTotal{
    return _previousTotal!;
  }

  String? getPreviousTotal(){
    return _previousTotal;
  }

  set previousTotal(String data){
    _previousTotal = data;
  }

  void setPreviousTotal(String? data){
    _previousTotal = data;
  }

  String? _price;

  String get price{
    return _price!;
  }

  String? getPrice(){
    return _price;
  }

  set price(String data){
    _price = data;
  }

  void setPrice(String? data){
    _price = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

  int? _storeId;

  int get storeId{
    return _storeId!;
  }

  int? getStoreId(){
    return _storeId;
  }

  set storeId(int data){
    _storeId = data;
  }

  void setStoreId(int? data){
    _storeId = data;
  }

  String? _storeName;

  String get storeName{
    return _storeName!;
  }

  String? getStoreName(){
    return _storeName;
  }

  set storeName(String data){
    _storeName = data;
  }

  void setStoreName(String? data){
    _storeName = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeSubContractStockFlowQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeSubContractStockFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeSubContractStockFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeSubContractStockFlowQuerySumDTO('total');
  const FTypeSubContractStockFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQuerySumDTO> _TypeSubContractStockFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "inboundCommonAmount": (
    getter: (data) => data._inboundCommonAmount,
    setter: (data, value) => data._inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._inboundCommonAmount = parser(value);
    }
  ),
  "outboundCommonAmount": (
    getter: (data) => data._outboundCommonAmount,
    setter: (data, value) => data._outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._outboundCommonAmount = parser(value);
    }
  ),
  "total": (
    getter: (data) => data._total,
    setter: (data, value) => data._total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._total = parser(value);
    }
  ),
};

class TypeSubContractStockFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQuerySumDTO({
    int? count,
    String? inboundCommonAmount,
    String? outboundCommonAmount,
    String? total
  }):
    _count = count,
    _inboundCommonAmount = inboundCommonAmount,
    _outboundCommonAmount = outboundCommonAmount,
    _total = total;

  static TypeSubContractStockFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _inboundCommonAmount;

  String get inboundCommonAmount{
    return _inboundCommonAmount!;
  }

  String? getInboundCommonAmount(){
    return _inboundCommonAmount;
  }

  set inboundCommonAmount(String data){
    _inboundCommonAmount = data;
  }

  void setInboundCommonAmount(String? data){
    _inboundCommonAmount = data;
  }

  String? _outboundCommonAmount;

  String get outboundCommonAmount{
    return _outboundCommonAmount!;
  }

  String? getOutboundCommonAmount(){
    return _outboundCommonAmount;
  }

  set outboundCommonAmount(String data){
    _outboundCommonAmount = data;
  }

  void setOutboundCommonAmount(String? data){
    _outboundCommonAmount = data;
  }

  String? _total;

  String get total{
    return _total!;
  }

  String? getTotal(){
    return _total;
  }

  set total(String data){
    _total = data;
  }

  void setTotal(String? data){
    _total = data;
  }

}

class FTypeSubContractStockQueryDTO extends IDataField {
  static const data = FTypeSubContractStockQueryDTO('data');
  static const pageIndex = FTypeSubContractStockQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockQueryDTO('pageSize');
  static const sum = FTypeSubContractStockQueryDTO('sum');
  const FTypeSubContractStockQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQueryDTO> _TypeSubContractStockQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeSubContractStockQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockQueryDataDTO>((single){
        final handler = TypeSubContractStockQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockQueryDataDTO>((single){
        final handler = TypeSubContractStockQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeSubContractStockQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeSubContractStockQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQueryDTO({
    List<TypeSubContractStockQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeSubContractStockQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeSubContractStockQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockQueryDataDTO>? _data;

  List<TypeSubContractStockQueryDataDTO> get data{
    return _data!;
  }

  List<TypeSubContractStockQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeSubContractStockQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeSubContractStockQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeSubContractStockQuerySumDTO? _sum;

  TypeSubContractStockQuerySumDTO get sum{
    return _sum!;
  }

  TypeSubContractStockQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeSubContractStockQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeSubContractStockQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeSubContractStockQueryDataDTO extends IDataField {
  static const contactId = FTypeSubContractStockQueryDataDTO('contactId');
  static const contactName = FTypeSubContractStockQueryDataDTO('contactName');
  static const contactNumber = FTypeSubContractStockQueryDataDTO('contactNumber');
  static const id = FTypeSubContractStockQueryDataDTO('id');
  static const itemBasicUnitId = FTypeSubContractStockQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeSubContractStockQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeSubContractStockQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeSubContractStockQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeSubContractStockQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeSubContractStockQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeSubContractStockQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeSubContractStockQueryDataDTO('itemModelRemark');
  static const itemName = FTypeSubContractStockQueryDataDTO('itemName');
  static const itemNumber = FTypeSubContractStockQueryDataDTO('itemNumber');
  static const itemParentId = FTypeSubContractStockQueryDataDTO('itemParentId');
  static const itemParentName = FTypeSubContractStockQueryDataDTO('itemParentName');
  static const itemRemark = FTypeSubContractStockQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeSubContractStockQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeSubContractStockQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeSubContractStockQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeSubContractStockQueryDataDTO('itemUnitConverts');
  static const stockAmount = FTypeSubContractStockQueryDataDTO('stockAmount');
  static const stockBasicAmount = FTypeSubContractStockQueryDataDTO('stockBasicAmount');
  static const stockPrice = FTypeSubContractStockQueryDataDTO('stockPrice');
  static const stockRemainAge = FTypeSubContractStockQueryDataDTO('stockRemainAge');
  static const stockTotal = FTypeSubContractStockQueryDataDTO('stockTotal');
  const FTypeSubContractStockQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQueryDataDTO> _TypeSubContractStockQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "contactNumber": (
    getter: (data) => data._contactNumber,
    setter: (data, value) => data._contactNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactNumber = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemBasicUnitId": (
    getter: (data) => data._itemBasicUnitId,
    setter: (data, value) => data._itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitId = parser(value);
    }
  ),
  "itemBasicUnitName": (
    getter: (data) => data._itemBasicUnitName,
    setter: (data, value) => data._itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitName = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemParentId": (
    getter: (data) => data._itemParentId,
    setter: (data, value) => data._itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemParentId = parser(value);
    }
  ),
  "itemParentName": (
    getter: (data) => data._itemParentName,
    setter: (data, value) => data._itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemParentName = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemTreePath": (
    getter: (data) => data._itemTreePath,
    setter: (data, value) => data._itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemTreePath = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "itemUnitConverts": (
    getter: (data) => data._itemUnitConverts,
    setter: (data, value) => data._itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data._itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data._itemUnitConverts = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockBasicAmount": (
    getter: (data) => data._stockBasicAmount,
    setter: (data, value) => data._stockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockBasicAmount = parser(value);
    }
  ),
  "stockPrice": (
    getter: (data) => data._stockPrice,
    setter: (data, value) => data._stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPrice = parser(value);
    }
  ),
  "stockRemainAge": (
    getter: (data) => data._stockRemainAge,
    setter: (data, value) => data._stockRemainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAge = parser(value);
    }
  ),
  "stockTotal": (
    getter: (data) => data._stockTotal,
    setter: (data, value) => data._stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockTotal = parser(value);
    }
  ),
};

class TypeSubContractStockQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQueryDataDTO({
    int? contactId,
    String? contactName,
    String? contactNumber,
    String? id,
    String? itemBasicUnitId,
    String? itemBasicUnitName,
    String? itemCommonUnitConvert,
    String? itemCommonUnitId,
    String? itemCommonUnitName,
    int? itemId,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    int? itemParentId,
    String? itemParentName,
    String? itemRemark,
    String? itemSpecsRemark,
    String? itemTreePath,
    String? itemUnitConvertDesc,
    List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts,
    String? stockAmount,
    String? stockBasicAmount,
    String? stockPrice,
    String? stockRemainAge,
    String? stockTotal
  }):
    _contactId = contactId,
    _contactName = contactName,
    _contactNumber = contactNumber,
    _id = id,
    _itemBasicUnitId = itemBasicUnitId,
    _itemBasicUnitName = itemBasicUnitName,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemId = itemId,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemParentId = itemParentId,
    _itemParentName = itemParentName,
    _itemRemark = itemRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _itemTreePath = itemTreePath,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _itemUnitConverts = itemUnitConverts,
    _stockAmount = stockAmount,
    _stockBasicAmount = stockBasicAmount,
    _stockPrice = stockPrice,
    _stockRemainAge = stockRemainAge,
    _stockTotal = stockTotal;

  static TypeSubContractStockQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _contactNumber;

  String get contactNumber{
    return _contactNumber!;
  }

  String? getContactNumber(){
    return _contactNumber;
  }

  set contactNumber(String data){
    _contactNumber = data;
  }

  void setContactNumber(String? data){
    _contactNumber = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _itemBasicUnitId;

  String get itemBasicUnitId{
    return _itemBasicUnitId!;
  }

  String? getItemBasicUnitId(){
    return _itemBasicUnitId;
  }

  set itemBasicUnitId(String data){
    _itemBasicUnitId = data;
  }

  void setItemBasicUnitId(String? data){
    _itemBasicUnitId = data;
  }

  String? _itemBasicUnitName;

  String get itemBasicUnitName{
    return _itemBasicUnitName!;
  }

  String? getItemBasicUnitName(){
    return _itemBasicUnitName;
  }

  set itemBasicUnitName(String data){
    _itemBasicUnitName = data;
  }

  void setItemBasicUnitName(String? data){
    _itemBasicUnitName = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  String? _itemCommonUnitId;

  String get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  String? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(String data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(String? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  int? _itemParentId;

  int get itemParentId{
    return _itemParentId!;
  }

  int? getItemParentId(){
    return _itemParentId;
  }

  set itemParentId(int data){
    _itemParentId = data;
  }

  void setItemParentId(int? data){
    _itemParentId = data;
  }

  String? _itemParentName;

  String get itemParentName{
    return _itemParentName!;
  }

  String? getItemParentName(){
    return _itemParentName;
  }

  set itemParentName(String data){
    _itemParentName = data;
  }

  void setItemParentName(String? data){
    _itemParentName = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemTreePath;

  String get itemTreePath{
    return _itemTreePath!;
  }

  String? getItemTreePath(){
    return _itemTreePath;
  }

  set itemTreePath(String data){
    _itemTreePath = data;
  }

  void setItemTreePath(String? data){
    _itemTreePath = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? _itemUnitConverts;

  List<TypeAutoInjectLiteItemUnitConvert> get itemUnitConverts{
    return _itemUnitConverts!;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? getItemUnitConverts(){
    return _itemUnitConverts;
  }

  set itemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert> data){
    _itemUnitConverts = data;
  }

  void setItemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert>? data){
    _itemUnitConverts = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockBasicAmount;

  String get stockBasicAmount{
    return _stockBasicAmount!;
  }

  String? getStockBasicAmount(){
    return _stockBasicAmount;
  }

  set stockBasicAmount(String data){
    _stockBasicAmount = data;
  }

  void setStockBasicAmount(String? data){
    _stockBasicAmount = data;
  }

  String? _stockPrice;

  String get stockPrice{
    return _stockPrice!;
  }

  String? getStockPrice(){
    return _stockPrice;
  }

  set stockPrice(String data){
    _stockPrice = data;
  }

  void setStockPrice(String? data){
    _stockPrice = data;
  }

  String? _stockRemainAge;

  String get stockRemainAge{
    return _stockRemainAge!;
  }

  String? getStockRemainAge(){
    return _stockRemainAge;
  }

  set stockRemainAge(String data){
    _stockRemainAge = data;
  }

  void setStockRemainAge(String? data){
    _stockRemainAge = data;
  }

  String? _stockTotal;

  String get stockTotal{
    return _stockTotal!;
  }

  String? getStockTotal(){
    return _stockTotal;
  }

  set stockTotal(String data){
    _stockTotal = data;
  }

  void setStockTotal(String? data){
    _stockTotal = data;
  }

}

class FTypeSubContractStockQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockQuerySumDTO('count');
  static const stockAmount = FTypeSubContractStockQuerySumDTO('stockAmount');
  static const stockPrice = FTypeSubContractStockQuerySumDTO('stockPrice');
  static const stockTotal = FTypeSubContractStockQuerySumDTO('stockTotal');
  static const validAmount = FTypeSubContractStockQuerySumDTO('validAmount');
  static const validTotal = FTypeSubContractStockQuerySumDTO('validTotal');
  const FTypeSubContractStockQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQuerySumDTO> _TypeSubContractStockQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "stockAmount": (
    getter: (data) => data._stockAmount,
    setter: (data, value) => data._stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockAmount = parser(value);
    }
  ),
  "stockPrice": (
    getter: (data) => data._stockPrice,
    setter: (data, value) => data._stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockPrice = parser(value);
    }
  ),
  "stockTotal": (
    getter: (data) => data._stockTotal,
    setter: (data, value) => data._stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockTotal = parser(value);
    }
  ),
  "validAmount": (
    getter: (data) => data._validAmount,
    setter: (data, value) => data._validAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._validAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._validAmount = parser(value);
    }
  ),
  "validTotal": (
    getter: (data) => data._validTotal,
    setter: (data, value) => data._validTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._validTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._validTotal = parser(value);
    }
  ),
};

class TypeSubContractStockQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQuerySumDTO({
    int? count,
    String? stockAmount,
    String? stockPrice,
    String? stockTotal,
    String? validAmount,
    String? validTotal
  }):
    _count = count,
    _stockAmount = stockAmount,
    _stockPrice = stockPrice,
    _stockTotal = stockTotal,
    _validAmount = validAmount,
    _validTotal = validTotal;

  static TypeSubContractStockQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _stockAmount;

  String get stockAmount{
    return _stockAmount!;
  }

  String? getStockAmount(){
    return _stockAmount;
  }

  set stockAmount(String data){
    _stockAmount = data;
  }

  void setStockAmount(String? data){
    _stockAmount = data;
  }

  String? _stockPrice;

  String get stockPrice{
    return _stockPrice!;
  }

  String? getStockPrice(){
    return _stockPrice;
  }

  set stockPrice(String data){
    _stockPrice = data;
  }

  void setStockPrice(String? data){
    _stockPrice = data;
  }

  String? _stockTotal;

  String get stockTotal{
    return _stockTotal!;
  }

  String? getStockTotal(){
    return _stockTotal;
  }

  set stockTotal(String data){
    _stockTotal = data;
  }

  void setStockTotal(String? data){
    _stockTotal = data;
  }

  String? _validAmount;

  String get validAmount{
    return _validAmount!;
  }

  String? getValidAmount(){
    return _validAmount;
  }

  set validAmount(String data){
    _validAmount = data;
  }

  void setValidAmount(String? data){
    _validAmount = data;
  }

  String? _validTotal;

  String get validTotal{
    return _validTotal!;
  }

  String? getValidTotal(){
    return _validTotal;
  }

  set validTotal(String data){
    _validTotal = data;
  }

  void setValidTotal(String? data){
    _validTotal = data;
  }

}

class FTypeSubContractStockRemainQueryDTO extends IDataField {
  static const data = FTypeSubContractStockRemainQueryDTO('data');
  static const pageIndex = FTypeSubContractStockRemainQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockRemainQueryDTO('pageSize');
  static const sum = FTypeSubContractStockRemainQueryDTO('sum');
  const FTypeSubContractStockRemainQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQueryDTO> _TypeSubContractStockRemainQueryDTO_fields = {
  "data": (
    getter: (data) => data._data,
    setter: (data, value) => data._data = value as List<TypeSubContractStockRemainQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockRemainQueryDataDTO>((single){
        final handler = TypeSubContractStockRemainQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data._data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockRemainQueryDataDTO>((single){
        final handler = TypeSubContractStockRemainQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data._data = parser(value);
    }
  ),
  "pageIndex": (
    getter: (data) => data._pageIndex,
    setter: (data, value) => data._pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageIndex = parser(value);
    }
  ),
  "pageSize": (
    getter: (data) => data._pageSize,
    setter: (data, value) => data._pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._pageSize = parser(value);
    }
  ),
  "sum": (
    getter: (data) => data._sum,
    setter: (data, value) => data._sum = value as TypeSubContractStockRemainQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockRemainQuerySumDTO.toDynamic;
      return formatter(data._sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockRemainQuerySumDTO.fromDynamic;
      data._sum = parser(value);
    }
  ),
};

class TypeSubContractStockRemainQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQueryDTO({
    List<TypeSubContractStockRemainQueryDataDTO>? data,
    int? pageIndex,
    int? pageSize,
    TypeSubContractStockRemainQuerySumDTO? sum
  }):
    _data = data,
    _pageIndex = pageIndex,
    _pageSize = pageSize,
    _sum = sum;

  static TypeSubContractStockRemainQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockRemainQueryDataDTO>? _data;

  List<TypeSubContractStockRemainQueryDataDTO> get data{
    return _data!;
  }

  List<TypeSubContractStockRemainQueryDataDTO>? getData(){
    return _data;
  }

  set data(List<TypeSubContractStockRemainQueryDataDTO> data){
    _data = data;
  }

  void setData(List<TypeSubContractStockRemainQueryDataDTO>? data){
    _data = data;
  }

  int? _pageIndex;

  int get pageIndex{
    return _pageIndex!;
  }

  int? getPageIndex(){
    return _pageIndex;
  }

  set pageIndex(int data){
    _pageIndex = data;
  }

  void setPageIndex(int? data){
    _pageIndex = data;
  }

  int? _pageSize;

  int get pageSize{
    return _pageSize!;
  }

  int? getPageSize(){
    return _pageSize;
  }

  set pageSize(int data){
    _pageSize = data;
  }

  void setPageSize(int? data){
    _pageSize = data;
  }

  TypeSubContractStockRemainQuerySumDTO? _sum;

  TypeSubContractStockRemainQuerySumDTO get sum{
    return _sum!;
  }

  TypeSubContractStockRemainQuerySumDTO? getSum(){
    return _sum;
  }

  set sum(TypeSubContractStockRemainQuerySumDTO data){
    _sum = data;
  }

  void setSum(TypeSubContractStockRemainQuerySumDTO? data){
    _sum = data;
  }

}

class FTypeSubContractStockRemainQueryDataDTO extends IDataField {
  static const contactId = FTypeSubContractStockRemainQueryDataDTO('contactId');
  static const contactName = FTypeSubContractStockRemainQueryDataDTO('contactName');
  static const id = FTypeSubContractStockRemainQueryDataDTO('id');
  static const itemBasicUnitId = FTypeSubContractStockRemainQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeSubContractStockRemainQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeSubContractStockRemainQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeSubContractStockRemainQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeSubContractStockRemainQueryDataDTO('itemModelRemark');
  static const itemName = FTypeSubContractStockRemainQueryDataDTO('itemName');
  static const itemNumber = FTypeSubContractStockRemainQueryDataDTO('itemNumber');
  static const itemRemark = FTypeSubContractStockRemainQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeSubContractStockRemainQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypeSubContractStockRemainQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeSubContractStockRemainQueryDataDTO('itemUnitConverts');
  static const sourceOrderId = FTypeSubContractStockRemainQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypeSubContractStockRemainQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypeSubContractStockRemainQueryDataDTO('sourceOrderType');
  static const stockId = FTypeSubContractStockRemainQueryDataDTO('stockId');
  static const stockRemainAmount = FTypeSubContractStockRemainQueryDataDTO('stockRemainAmount');
  static const stockRemainBasicAmount = FTypeSubContractStockRemainQueryDataDTO('stockRemainBasicAmount');
  static const stockRemainPrice = FTypeSubContractStockRemainQueryDataDTO('stockRemainPrice');
  static const stockRemainPutOnShelfTime = FTypeSubContractStockRemainQueryDataDTO('stockRemainPutOnShelfTime');
  static const stockRemainRemark = FTypeSubContractStockRemainQueryDataDTO('stockRemainRemark');
  static const stockRemainTotal = FTypeSubContractStockRemainQueryDataDTO('stockRemainTotal');
  const FTypeSubContractStockRemainQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQueryDataDTO> _TypeSubContractStockRemainQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data._contactId,
    setter: (data, value) => data._contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._contactId = parser(value);
    }
  ),
  "contactName": (
    getter: (data) => data._contactName,
    setter: (data, value) => data._contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._contactName = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "itemBasicUnitId": (
    getter: (data) => data._itemBasicUnitId,
    setter: (data, value) => data._itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitId = parser(value);
    }
  ),
  "itemBasicUnitName": (
    getter: (data) => data._itemBasicUnitName,
    setter: (data, value) => data._itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemBasicUnitName = parser(value);
    }
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data._itemCommonUnitConvert,
    setter: (data, value) => data._itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitConvert = parser(value);
    }
  ),
  "itemCommonUnitId": (
    getter: (data) => data._itemCommonUnitId,
    setter: (data, value) => data._itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitId = parser(value);
    }
  ),
  "itemCommonUnitName": (
    getter: (data) => data._itemCommonUnitName,
    setter: (data, value) => data._itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemCommonUnitName = parser(value);
    }
  ),
  "itemId": (
    getter: (data) => data._itemId,
    setter: (data, value) => data._itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._itemId = parser(value);
    }
  ),
  "itemIsEnabled": (
    getter: (data) => data._itemIsEnabled,
    setter: (data, value) => data._itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemIsEnabled = parser(value);
    }
  ),
  "itemModelRemark": (
    getter: (data) => data._itemModelRemark,
    setter: (data, value) => data._itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemModelRemark = parser(value);
    }
  ),
  "itemName": (
    getter: (data) => data._itemName,
    setter: (data, value) => data._itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemName = parser(value);
    }
  ),
  "itemNumber": (
    getter: (data) => data._itemNumber,
    setter: (data, value) => data._itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemNumber = parser(value);
    }
  ),
  "itemRemark": (
    getter: (data) => data._itemRemark,
    setter: (data, value) => data._itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemRemark = parser(value);
    }
  ),
  "itemSpecsRemark": (
    getter: (data) => data._itemSpecsRemark,
    setter: (data, value) => data._itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemSpecsRemark = parser(value);
    }
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data._itemUnitConvertDesc,
    setter: (data, value) => data._itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._itemUnitConvertDesc = parser(value);
    }
  ),
  "itemUnitConverts": (
    getter: (data) => data._itemUnitConverts,
    setter: (data, value) => data._itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data._itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data._itemUnitConverts = parser(value);
    }
  ),
  "sourceOrderId": (
    getter: (data) => data._sourceOrderId,
    setter: (data, value) => data._sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._sourceOrderId = parser(value);
    }
  ),
  "sourceOrderNumber": (
    getter: (data) => data._sourceOrderNumber,
    setter: (data, value) => data._sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._sourceOrderNumber = parser(value);
    }
  ),
  "sourceOrderType": (
    getter: (data) => data._sourceOrderType,
    setter: (data, value) => data._sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data._sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data._sourceOrderType = parser(value);
    }
  ),
  "stockId": (
    getter: (data) => data._stockId,
    setter: (data, value) => data._stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockId = parser(value);
    }
  ),
  "stockRemainAmount": (
    getter: (data) => data._stockRemainAmount,
    setter: (data, value) => data._stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAmount = parser(value);
    }
  ),
  "stockRemainBasicAmount": (
    getter: (data) => data._stockRemainBasicAmount,
    setter: (data, value) => data._stockRemainBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainBasicAmount = parser(value);
    }
  ),
  "stockRemainPrice": (
    getter: (data) => data._stockRemainPrice,
    setter: (data, value) => data._stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPrice = parser(value);
    }
  ),
  "stockRemainPutOnShelfTime": (
    getter: (data) => data._stockRemainPutOnShelfTime,
    setter: (data, value) => data._stockRemainPutOnShelfTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPutOnShelfTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPutOnShelfTime = parser(value);
    }
  ),
  "stockRemainRemark": (
    getter: (data) => data._stockRemainRemark,
    setter: (data, value) => data._stockRemainRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainRemark = parser(value);
    }
  ),
  "stockRemainTotal": (
    getter: (data) => data._stockRemainTotal,
    setter: (data, value) => data._stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainTotal = parser(value);
    }
  ),
};

class TypeSubContractStockRemainQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQueryDataDTO({
    int? contactId,
    String? contactName,
    String? id,
    String? itemBasicUnitId,
    String? itemBasicUnitName,
    String? itemCommonUnitConvert,
    String? itemCommonUnitId,
    String? itemCommonUnitName,
    int? itemId,
    String? itemIsEnabled,
    String? itemModelRemark,
    String? itemName,
    String? itemNumber,
    String? itemRemark,
    String? itemSpecsRemark,
    String? itemUnitConvertDesc,
    List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts,
    int? sourceOrderId,
    String? sourceOrderNumber,
    TypeEnumOrderType? sourceOrderType,
    String? stockId,
    String? stockRemainAmount,
    String? stockRemainBasicAmount,
    String? stockRemainPrice,
    String? stockRemainPutOnShelfTime,
    String? stockRemainRemark,
    String? stockRemainTotal
  }):
    _contactId = contactId,
    _contactName = contactName,
    _id = id,
    _itemBasicUnitId = itemBasicUnitId,
    _itemBasicUnitName = itemBasicUnitName,
    _itemCommonUnitConvert = itemCommonUnitConvert,
    _itemCommonUnitId = itemCommonUnitId,
    _itemCommonUnitName = itemCommonUnitName,
    _itemId = itemId,
    _itemIsEnabled = itemIsEnabled,
    _itemModelRemark = itemModelRemark,
    _itemName = itemName,
    _itemNumber = itemNumber,
    _itemRemark = itemRemark,
    _itemSpecsRemark = itemSpecsRemark,
    _itemUnitConvertDesc = itemUnitConvertDesc,
    _itemUnitConverts = itemUnitConverts,
    _sourceOrderId = sourceOrderId,
    _sourceOrderNumber = sourceOrderNumber,
    _sourceOrderType = sourceOrderType,
    _stockId = stockId,
    _stockRemainAmount = stockRemainAmount,
    _stockRemainBasicAmount = stockRemainBasicAmount,
    _stockRemainPrice = stockRemainPrice,
    _stockRemainPutOnShelfTime = stockRemainPutOnShelfTime,
    _stockRemainRemark = stockRemainRemark,
    _stockRemainTotal = stockRemainTotal;

  static TypeSubContractStockRemainQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _contactId;

  int get contactId{
    return _contactId!;
  }

  int? getContactId(){
    return _contactId;
  }

  set contactId(int data){
    _contactId = data;
  }

  void setContactId(int? data){
    _contactId = data;
  }

  String? _contactName;

  String get contactName{
    return _contactName!;
  }

  String? getContactName(){
    return _contactName;
  }

  set contactName(String data){
    _contactName = data;
  }

  void setContactName(String? data){
    _contactName = data;
  }

  String? _id;

  String get id{
    return _id!;
  }

  String? getId(){
    return _id;
  }

  set id(String data){
    _id = data;
  }

  void setId(String? data){
    _id = data;
  }

  String? _itemBasicUnitId;

  String get itemBasicUnitId{
    return _itemBasicUnitId!;
  }

  String? getItemBasicUnitId(){
    return _itemBasicUnitId;
  }

  set itemBasicUnitId(String data){
    _itemBasicUnitId = data;
  }

  void setItemBasicUnitId(String? data){
    _itemBasicUnitId = data;
  }

  String? _itemBasicUnitName;

  String get itemBasicUnitName{
    return _itemBasicUnitName!;
  }

  String? getItemBasicUnitName(){
    return _itemBasicUnitName;
  }

  set itemBasicUnitName(String data){
    _itemBasicUnitName = data;
  }

  void setItemBasicUnitName(String? data){
    _itemBasicUnitName = data;
  }

  String? _itemCommonUnitConvert;

  String get itemCommonUnitConvert{
    return _itemCommonUnitConvert!;
  }

  String? getItemCommonUnitConvert(){
    return _itemCommonUnitConvert;
  }

  set itemCommonUnitConvert(String data){
    _itemCommonUnitConvert = data;
  }

  void setItemCommonUnitConvert(String? data){
    _itemCommonUnitConvert = data;
  }

  String? _itemCommonUnitId;

  String get itemCommonUnitId{
    return _itemCommonUnitId!;
  }

  String? getItemCommonUnitId(){
    return _itemCommonUnitId;
  }

  set itemCommonUnitId(String data){
    _itemCommonUnitId = data;
  }

  void setItemCommonUnitId(String? data){
    _itemCommonUnitId = data;
  }

  String? _itemCommonUnitName;

  String get itemCommonUnitName{
    return _itemCommonUnitName!;
  }

  String? getItemCommonUnitName(){
    return _itemCommonUnitName;
  }

  set itemCommonUnitName(String data){
    _itemCommonUnitName = data;
  }

  void setItemCommonUnitName(String? data){
    _itemCommonUnitName = data;
  }

  int? _itemId;

  int get itemId{
    return _itemId!;
  }

  int? getItemId(){
    return _itemId;
  }

  set itemId(int data){
    _itemId = data;
  }

  void setItemId(int? data){
    _itemId = data;
  }

  String? _itemIsEnabled;

  String get itemIsEnabled{
    return _itemIsEnabled!;
  }

  String? getItemIsEnabled(){
    return _itemIsEnabled;
  }

  set itemIsEnabled(String data){
    _itemIsEnabled = data;
  }

  void setItemIsEnabled(String? data){
    _itemIsEnabled = data;
  }

  String? _itemModelRemark;

  String get itemModelRemark{
    return _itemModelRemark!;
  }

  String? getItemModelRemark(){
    return _itemModelRemark;
  }

  set itemModelRemark(String data){
    _itemModelRemark = data;
  }

  void setItemModelRemark(String? data){
    _itemModelRemark = data;
  }

  String? _itemName;

  String get itemName{
    return _itemName!;
  }

  String? getItemName(){
    return _itemName;
  }

  set itemName(String data){
    _itemName = data;
  }

  void setItemName(String? data){
    _itemName = data;
  }

  String? _itemNumber;

  String get itemNumber{
    return _itemNumber!;
  }

  String? getItemNumber(){
    return _itemNumber;
  }

  set itemNumber(String data){
    _itemNumber = data;
  }

  void setItemNumber(String? data){
    _itemNumber = data;
  }

  String? _itemRemark;

  String get itemRemark{
    return _itemRemark!;
  }

  String? getItemRemark(){
    return _itemRemark;
  }

  set itemRemark(String data){
    _itemRemark = data;
  }

  void setItemRemark(String? data){
    _itemRemark = data;
  }

  String? _itemSpecsRemark;

  String get itemSpecsRemark{
    return _itemSpecsRemark!;
  }

  String? getItemSpecsRemark(){
    return _itemSpecsRemark;
  }

  set itemSpecsRemark(String data){
    _itemSpecsRemark = data;
  }

  void setItemSpecsRemark(String? data){
    _itemSpecsRemark = data;
  }

  String? _itemUnitConvertDesc;

  String get itemUnitConvertDesc{
    return _itemUnitConvertDesc!;
  }

  String? getItemUnitConvertDesc(){
    return _itemUnitConvertDesc;
  }

  set itemUnitConvertDesc(String data){
    _itemUnitConvertDesc = data;
  }

  void setItemUnitConvertDesc(String? data){
    _itemUnitConvertDesc = data;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? _itemUnitConverts;

  List<TypeAutoInjectLiteItemUnitConvert> get itemUnitConverts{
    return _itemUnitConverts!;
  }

  List<TypeAutoInjectLiteItemUnitConvert>? getItemUnitConverts(){
    return _itemUnitConverts;
  }

  set itemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert> data){
    _itemUnitConverts = data;
  }

  void setItemUnitConverts(List<TypeAutoInjectLiteItemUnitConvert>? data){
    _itemUnitConverts = data;
  }

  int? _sourceOrderId;

  int get sourceOrderId{
    return _sourceOrderId!;
  }

  int? getSourceOrderId(){
    return _sourceOrderId;
  }

  set sourceOrderId(int data){
    _sourceOrderId = data;
  }

  void setSourceOrderId(int? data){
    _sourceOrderId = data;
  }

  String? _sourceOrderNumber;

  String get sourceOrderNumber{
    return _sourceOrderNumber!;
  }

  String? getSourceOrderNumber(){
    return _sourceOrderNumber;
  }

  set sourceOrderNumber(String data){
    _sourceOrderNumber = data;
  }

  void setSourceOrderNumber(String? data){
    _sourceOrderNumber = data;
  }

  TypeEnumOrderType? _sourceOrderType;

  TypeEnumOrderType get sourceOrderType{
    return _sourceOrderType!;
  }

  TypeEnumOrderType? getSourceOrderType(){
    return _sourceOrderType;
  }

  set sourceOrderType(TypeEnumOrderType data){
    _sourceOrderType = data;
  }

  void setSourceOrderType(TypeEnumOrderType? data){
    _sourceOrderType = data;
  }

  String? _stockId;

  String get stockId{
    return _stockId!;
  }

  String? getStockId(){
    return _stockId;
  }

  set stockId(String data){
    _stockId = data;
  }

  void setStockId(String? data){
    _stockId = data;
  }

  String? _stockRemainAmount;

  String get stockRemainAmount{
    return _stockRemainAmount!;
  }

  String? getStockRemainAmount(){
    return _stockRemainAmount;
  }

  set stockRemainAmount(String data){
    _stockRemainAmount = data;
  }

  void setStockRemainAmount(String? data){
    _stockRemainAmount = data;
  }

  String? _stockRemainBasicAmount;

  String get stockRemainBasicAmount{
    return _stockRemainBasicAmount!;
  }

  String? getStockRemainBasicAmount(){
    return _stockRemainBasicAmount;
  }

  set stockRemainBasicAmount(String data){
    _stockRemainBasicAmount = data;
  }

  void setStockRemainBasicAmount(String? data){
    _stockRemainBasicAmount = data;
  }

  String? _stockRemainPrice;

  String get stockRemainPrice{
    return _stockRemainPrice!;
  }

  String? getStockRemainPrice(){
    return _stockRemainPrice;
  }

  set stockRemainPrice(String data){
    _stockRemainPrice = data;
  }

  void setStockRemainPrice(String? data){
    _stockRemainPrice = data;
  }

  String? _stockRemainPutOnShelfTime;

  String get stockRemainPutOnShelfTime{
    return _stockRemainPutOnShelfTime!;
  }

  String? getStockRemainPutOnShelfTime(){
    return _stockRemainPutOnShelfTime;
  }

  set stockRemainPutOnShelfTime(String data){
    _stockRemainPutOnShelfTime = data;
  }

  void setStockRemainPutOnShelfTime(String? data){
    _stockRemainPutOnShelfTime = data;
  }

  String? _stockRemainRemark;

  String get stockRemainRemark{
    return _stockRemainRemark!;
  }

  String? getStockRemainRemark(){
    return _stockRemainRemark;
  }

  set stockRemainRemark(String data){
    _stockRemainRemark = data;
  }

  void setStockRemainRemark(String? data){
    _stockRemainRemark = data;
  }

  String? _stockRemainTotal;

  String get stockRemainTotal{
    return _stockRemainTotal!;
  }

  String? getStockRemainTotal(){
    return _stockRemainTotal;
  }

  set stockRemainTotal(String data){
    _stockRemainTotal = data;
  }

  void setStockRemainTotal(String? data){
    _stockRemainTotal = data;
  }

}

class FTypeSubContractStockRemainQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockRemainQuerySumDTO('count');
  static const stockRemainAmount = FTypeSubContractStockRemainQuerySumDTO('stockRemainAmount');
  static const stockRemainPrice = FTypeSubContractStockRemainQuerySumDTO('stockRemainPrice');
  static const stockRemainTotal = FTypeSubContractStockRemainQuerySumDTO('stockRemainTotal');
  const FTypeSubContractStockRemainQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQuerySumDTO> _TypeSubContractStockRemainQuerySumDTO_fields = {
  "count": (
    getter: (data) => data._count,
    setter: (data, value) => data._count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._count = parser(value);
    }
  ),
  "stockRemainAmount": (
    getter: (data) => data._stockRemainAmount,
    setter: (data, value) => data._stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainAmount = parser(value);
    }
  ),
  "stockRemainPrice": (
    getter: (data) => data._stockRemainPrice,
    setter: (data, value) => data._stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainPrice = parser(value);
    }
  ),
  "stockRemainTotal": (
    getter: (data) => data._stockRemainTotal,
    setter: (data, value) => data._stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._stockRemainTotal = parser(value);
    }
  ),
};

class TypeSubContractStockRemainQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQuerySumDTO({
    int? count,
    String? stockRemainAmount,
    String? stockRemainPrice,
    String? stockRemainTotal
  }):
    _count = count,
    _stockRemainAmount = stockRemainAmount,
    _stockRemainPrice = stockRemainPrice,
    _stockRemainTotal = stockRemainTotal;

  static TypeSubContractStockRemainQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _count;

  int get count{
    return _count!;
  }

  int? getCount(){
    return _count;
  }

  set count(int data){
    _count = data;
  }

  void setCount(int? data){
    _count = data;
  }

  String? _stockRemainAmount;

  String get stockRemainAmount{
    return _stockRemainAmount!;
  }

  String? getStockRemainAmount(){
    return _stockRemainAmount;
  }

  set stockRemainAmount(String data){
    _stockRemainAmount = data;
  }

  void setStockRemainAmount(String? data){
    _stockRemainAmount = data;
  }

  String? _stockRemainPrice;

  String get stockRemainPrice{
    return _stockRemainPrice!;
  }

  String? getStockRemainPrice(){
    return _stockRemainPrice;
  }

  set stockRemainPrice(String data){
    _stockRemainPrice = data;
  }

  void setStockRemainPrice(String? data){
    _stockRemainPrice = data;
  }

  String? _stockRemainTotal;

  String get stockRemainTotal{
    return _stockRemainTotal!;
  }

  String? getStockRemainTotal(){
    return _stockRemainTotal;
  }

  set stockRemainTotal(String data){
    _stockRemainTotal = data;
  }

  void setStockRemainTotal(String? data){
    _stockRemainTotal = data;
  }

}

class FTypeSystemConfigAccountData extends IDataField {
  static const hasOpenAccount = FTypeSystemConfigAccountData('hasOpenAccount');
  static const openAccountDate = FTypeSystemConfigAccountData('openAccountDate');
  const FTypeSystemConfigAccountData(super.key);
}

final FieldReflectInfo<TypeSystemConfigAccountData> _TypeSystemConfigAccountData_fields = {
  "hasOpenAccount": (
    getter: (data) => data._hasOpenAccount,
    setter: (data, value) => data._hasOpenAccount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._hasOpenAccount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._hasOpenAccount = parser(value);
    }
  ),
  "openAccountDate": (
    getter: (data) => data._openAccountDate,
    setter: (data, value) => data._openAccountDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._openAccountDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._openAccountDate = parser(value);
    }
  ),
};

class TypeSystemConfigAccountData extends IDataBasic implements IDataDynamic {
  TypeSystemConfigAccountData({
    int? hasOpenAccount,
    String? openAccountDate
  }):
    _hasOpenAccount = hasOpenAccount,
    _openAccountDate = openAccountDate;

  static TypeSystemConfigAccountData? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigAccountData();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigAccountData_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigAccountData: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigAccountData? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigAccountData_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigAccountData_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigAccountData_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _hasOpenAccount;

  int get hasOpenAccount{
    return _hasOpenAccount!;
  }

  int? getHasOpenAccount(){
    return _hasOpenAccount;
  }

  set hasOpenAccount(int data){
    _hasOpenAccount = data;
  }

  void setHasOpenAccount(int? data){
    _hasOpenAccount = data;
  }

  String? _openAccountDate;

  String get openAccountDate{
    return _openAccountDate!;
  }

  String? getOpenAccountDate(){
    return _openAccountDate;
  }

  set openAccountDate(String data){
    _openAccountDate = data;
  }

  void setOpenAccountDate(String? data){
    _openAccountDate = data;
  }

}

class FTypeSystemConfigIndustrySetting extends IDataField {
  static const isItemDefaultRegularType = FTypeSystemConfigIndustrySetting('isItemDefaultRegularType');
  const FTypeSystemConfigIndustrySetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigIndustrySetting> _TypeSystemConfigIndustrySetting_fields = {
  "isItemDefaultRegularType": (
    getter: (data) => data._isItemDefaultRegularType,
    setter: (data, value) => data._isItemDefaultRegularType = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isItemDefaultRegularType);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isItemDefaultRegularType = parser(value);
    }
  ),
};

class TypeSystemConfigIndustrySetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigIndustrySetting({
    bool? isItemDefaultRegularType
  }):
    _isItemDefaultRegularType = isItemDefaultRegularType;

  static TypeSystemConfigIndustrySetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigIndustrySetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigIndustrySetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigIndustrySetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigIndustrySetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigIndustrySetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigIndustrySetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigIndustrySetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  bool? _isItemDefaultRegularType;

  bool get isItemDefaultRegularType{
    return _isItemDefaultRegularType!;
  }

  bool? getIsItemDefaultRegularType(){
    return _isItemDefaultRegularType;
  }

  set isItemDefaultRegularType(bool data){
    _isItemDefaultRegularType = data;
  }

  void setIsItemDefaultRegularType(bool? data){
    _isItemDefaultRegularType = data;
  }

}

class FTypeSystemConfigOrderSetting extends IDataField {
  static const importOrderBatchSize = FTypeSystemConfigOrderSetting('importOrderBatchSize');
  static const importOrderIsAutoNumber = FTypeSystemConfigOrderSetting('importOrderIsAutoNumber');
  static const isAllowEditNumber = FTypeSystemConfigOrderSetting('isAllowEditNumber');
  static const isAllowExcessiveInAmount = FTypeSystemConfigOrderSetting('isAllowExcessiveInAmount');
  static const isAllowExcessiveOutAmount = FTypeSystemConfigOrderSetting('isAllowExcessiveOutAmount');
  static const isDisableExportWhenSalesItemQueryHasDraft = FTypeSystemConfigOrderSetting('isDisableExportWhenSalesItemQueryHasDraft');
  static const isEnablePurchaseDefaultTaxRate = FTypeSystemConfigOrderSetting('isEnablePurchaseDefaultTaxRate');
  static const isEnablePurchaseDiscount = FTypeSystemConfigOrderSetting('isEnablePurchaseDiscount');
  static const isEnablePurchaseInPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('isEnablePurchaseInPriceGreaterThanStockPrice');
  static const isEnablePurchaseInPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('isEnablePurchaseInPriceLowerThanStockPrice');
  static const isEnableSalesDefaultTaxRate = FTypeSystemConfigOrderSetting('isEnableSalesDefaultTaxRate');
  static const isEnableSalesDiscount = FTypeSystemConfigOrderSetting('isEnableSalesDiscount');
  static const isEnableSalesOutPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('isEnableSalesOutPriceGreaterThanStockPrice');
  static const isEnableSalesOutPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('isEnableSalesOutPriceLowerThanStockPrice');
  static const numberDateType = FTypeSystemConfigOrderSetting('numberDateType');
  static const numberIdLength = FTypeSystemConfigOrderSetting('numberIdLength');
  static const orderItemDuplicateIdStrategy = FTypeSystemConfigOrderSetting('orderItemDuplicateIdStrategy');
  static const priceRoundScale = FTypeSystemConfigOrderSetting('priceRoundScale');
  static const purchaseDefaultTaxRate = FTypeSystemConfigOrderSetting('purchaseDefaultTaxRate');
  static const purchaseInPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('purchaseInPriceGreaterThanStockPrice');
  static const purchaseInPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('purchaseInPriceLowerThanStockPrice');
  static const salesDefaultTaxRate = FTypeSystemConfigOrderSetting('salesDefaultTaxRate');
  static const salesOutPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('salesOutPriceGreaterThanStockPrice');
  static const salesOutPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('salesOutPriceLowerThanStockPrice');
  static const totalRoundScale = FTypeSystemConfigOrderSetting('totalRoundScale');
  const FTypeSystemConfigOrderSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigOrderSetting> _TypeSystemConfigOrderSetting_fields = {
  "importOrderBatchSize": (
    getter: (data) => data._importOrderBatchSize,
    setter: (data, value) => data._importOrderBatchSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._importOrderBatchSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._importOrderBatchSize = parser(value);
    }
  ),
  "importOrderIsAutoNumber": (
    getter: (data) => data._importOrderIsAutoNumber,
    setter: (data, value) => data._importOrderIsAutoNumber = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._importOrderIsAutoNumber);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._importOrderIsAutoNumber = parser(value);
    }
  ),
  "isAllowEditNumber": (
    getter: (data) => data._isAllowEditNumber,
    setter: (data, value) => data._isAllowEditNumber = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isAllowEditNumber);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isAllowEditNumber = parser(value);
    }
  ),
  "isAllowExcessiveInAmount": (
    getter: (data) => data._isAllowExcessiveInAmount,
    setter: (data, value) => data._isAllowExcessiveInAmount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isAllowExcessiveInAmount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isAllowExcessiveInAmount = parser(value);
    }
  ),
  "isAllowExcessiveOutAmount": (
    getter: (data) => data._isAllowExcessiveOutAmount,
    setter: (data, value) => data._isAllowExcessiveOutAmount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isAllowExcessiveOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isAllowExcessiveOutAmount = parser(value);
    }
  ),
  "isDisableExportWhenSalesItemQueryHasDraft": (
    getter: (data) => data._isDisableExportWhenSalesItemQueryHasDraft,
    setter: (data, value) => data._isDisableExportWhenSalesItemQueryHasDraft = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isDisableExportWhenSalesItemQueryHasDraft);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isDisableExportWhenSalesItemQueryHasDraft = parser(value);
    }
  ),
  "isEnablePurchaseDefaultTaxRate": (
    getter: (data) => data._isEnablePurchaseDefaultTaxRate,
    setter: (data, value) => data._isEnablePurchaseDefaultTaxRate = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnablePurchaseDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnablePurchaseDefaultTaxRate = parser(value);
    }
  ),
  "isEnablePurchaseDiscount": (
    getter: (data) => data._isEnablePurchaseDiscount,
    setter: (data, value) => data._isEnablePurchaseDiscount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnablePurchaseDiscount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnablePurchaseDiscount = parser(value);
    }
  ),
  "isEnablePurchaseInPriceGreaterThanStockPrice": (
    getter: (data) => data._isEnablePurchaseInPriceGreaterThanStockPrice,
    setter: (data, value) => data._isEnablePurchaseInPriceGreaterThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnablePurchaseInPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnablePurchaseInPriceGreaterThanStockPrice = parser(value);
    }
  ),
  "isEnablePurchaseInPriceLowerThanStockPrice": (
    getter: (data) => data._isEnablePurchaseInPriceLowerThanStockPrice,
    setter: (data, value) => data._isEnablePurchaseInPriceLowerThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnablePurchaseInPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnablePurchaseInPriceLowerThanStockPrice = parser(value);
    }
  ),
  "isEnableSalesDefaultTaxRate": (
    getter: (data) => data._isEnableSalesDefaultTaxRate,
    setter: (data, value) => data._isEnableSalesDefaultTaxRate = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSalesDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSalesDefaultTaxRate = parser(value);
    }
  ),
  "isEnableSalesDiscount": (
    getter: (data) => data._isEnableSalesDiscount,
    setter: (data, value) => data._isEnableSalesDiscount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSalesDiscount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSalesDiscount = parser(value);
    }
  ),
  "isEnableSalesOutPriceGreaterThanStockPrice": (
    getter: (data) => data._isEnableSalesOutPriceGreaterThanStockPrice,
    setter: (data, value) => data._isEnableSalesOutPriceGreaterThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSalesOutPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSalesOutPriceGreaterThanStockPrice = parser(value);
    }
  ),
  "isEnableSalesOutPriceLowerThanStockPrice": (
    getter: (data) => data._isEnableSalesOutPriceLowerThanStockPrice,
    setter: (data, value) => data._isEnableSalesOutPriceLowerThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSalesOutPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSalesOutPriceLowerThanStockPrice = parser(value);
    }
  ),
  "numberDateType": (
    getter: (data) => data._numberDateType,
    setter: (data, value) => data._numberDateType = value as TypeEnumOrderNumberDateType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderNumberDateType.toDynamic;
      return formatter(data._numberDateType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderNumberDateType.fromDynamic;
      data._numberDateType = parser(value);
    }
  ),
  "numberIdLength": (
    getter: (data) => data._numberIdLength,
    setter: (data, value) => data._numberIdLength = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._numberIdLength);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._numberIdLength = parser(value);
    }
  ),
  "orderItemDuplicateIdStrategy": (
    getter: (data) => data._orderItemDuplicateIdStrategy,
    setter: (data, value) => data._orderItemDuplicateIdStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data._orderItemDuplicateIdStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data._orderItemDuplicateIdStrategy = parser(value);
    }
  ),
  "priceRoundScale": (
    getter: (data) => data._priceRoundScale,
    setter: (data, value) => data._priceRoundScale = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._priceRoundScale);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._priceRoundScale = parser(value);
    }
  ),
  "purchaseDefaultTaxRate": (
    getter: (data) => data._purchaseDefaultTaxRate,
    setter: (data, value) => data._purchaseDefaultTaxRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseDefaultTaxRate = parser(value);
    }
  ),
  "purchaseInPriceGreaterThanStockPrice": (
    getter: (data) => data._purchaseInPriceGreaterThanStockPrice,
    setter: (data, value) => data._purchaseInPriceGreaterThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseInPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseInPriceGreaterThanStockPrice = parser(value);
    }
  ),
  "purchaseInPriceLowerThanStockPrice": (
    getter: (data) => data._purchaseInPriceLowerThanStockPrice,
    setter: (data, value) => data._purchaseInPriceLowerThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._purchaseInPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._purchaseInPriceLowerThanStockPrice = parser(value);
    }
  ),
  "salesDefaultTaxRate": (
    getter: (data) => data._salesDefaultTaxRate,
    setter: (data, value) => data._salesDefaultTaxRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesDefaultTaxRate = parser(value);
    }
  ),
  "salesOutPriceGreaterThanStockPrice": (
    getter: (data) => data._salesOutPriceGreaterThanStockPrice,
    setter: (data, value) => data._salesOutPriceGreaterThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesOutPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesOutPriceGreaterThanStockPrice = parser(value);
    }
  ),
  "salesOutPriceLowerThanStockPrice": (
    getter: (data) => data._salesOutPriceLowerThanStockPrice,
    setter: (data, value) => data._salesOutPriceLowerThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._salesOutPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._salesOutPriceLowerThanStockPrice = parser(value);
    }
  ),
  "totalRoundScale": (
    getter: (data) => data._totalRoundScale,
    setter: (data, value) => data._totalRoundScale = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._totalRoundScale);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._totalRoundScale = parser(value);
    }
  ),
};

class TypeSystemConfigOrderSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigOrderSetting({
    int? importOrderBatchSize,
    bool? importOrderIsAutoNumber,
    bool? isAllowEditNumber,
    bool? isAllowExcessiveInAmount,
    bool? isAllowExcessiveOutAmount,
    bool? isDisableExportWhenSalesItemQueryHasDraft,
    bool? isEnablePurchaseDefaultTaxRate,
    bool? isEnablePurchaseDiscount,
    bool? isEnablePurchaseInPriceGreaterThanStockPrice,
    bool? isEnablePurchaseInPriceLowerThanStockPrice,
    bool? isEnableSalesDefaultTaxRate,
    bool? isEnableSalesDiscount,
    bool? isEnableSalesOutPriceGreaterThanStockPrice,
    bool? isEnableSalesOutPriceLowerThanStockPrice,
    TypeEnumOrderNumberDateType? numberDateType,
    int? numberIdLength,
    TypeEnumResourceDuplicateNameStrategy? orderItemDuplicateIdStrategy,
    int? priceRoundScale,
    String? purchaseDefaultTaxRate,
    String? purchaseInPriceGreaterThanStockPrice,
    String? purchaseInPriceLowerThanStockPrice,
    String? salesDefaultTaxRate,
    String? salesOutPriceGreaterThanStockPrice,
    String? salesOutPriceLowerThanStockPrice,
    int? totalRoundScale
  }):
    _importOrderBatchSize = importOrderBatchSize,
    _importOrderIsAutoNumber = importOrderIsAutoNumber,
    _isAllowEditNumber = isAllowEditNumber,
    _isAllowExcessiveInAmount = isAllowExcessiveInAmount,
    _isAllowExcessiveOutAmount = isAllowExcessiveOutAmount,
    _isDisableExportWhenSalesItemQueryHasDraft = isDisableExportWhenSalesItemQueryHasDraft,
    _isEnablePurchaseDefaultTaxRate = isEnablePurchaseDefaultTaxRate,
    _isEnablePurchaseDiscount = isEnablePurchaseDiscount,
    _isEnablePurchaseInPriceGreaterThanStockPrice = isEnablePurchaseInPriceGreaterThanStockPrice,
    _isEnablePurchaseInPriceLowerThanStockPrice = isEnablePurchaseInPriceLowerThanStockPrice,
    _isEnableSalesDefaultTaxRate = isEnableSalesDefaultTaxRate,
    _isEnableSalesDiscount = isEnableSalesDiscount,
    _isEnableSalesOutPriceGreaterThanStockPrice = isEnableSalesOutPriceGreaterThanStockPrice,
    _isEnableSalesOutPriceLowerThanStockPrice = isEnableSalesOutPriceLowerThanStockPrice,
    _numberDateType = numberDateType,
    _numberIdLength = numberIdLength,
    _orderItemDuplicateIdStrategy = orderItemDuplicateIdStrategy,
    _priceRoundScale = priceRoundScale,
    _purchaseDefaultTaxRate = purchaseDefaultTaxRate,
    _purchaseInPriceGreaterThanStockPrice = purchaseInPriceGreaterThanStockPrice,
    _purchaseInPriceLowerThanStockPrice = purchaseInPriceLowerThanStockPrice,
    _salesDefaultTaxRate = salesDefaultTaxRate,
    _salesOutPriceGreaterThanStockPrice = salesOutPriceGreaterThanStockPrice,
    _salesOutPriceLowerThanStockPrice = salesOutPriceLowerThanStockPrice,
    _totalRoundScale = totalRoundScale;

  static TypeSystemConfigOrderSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigOrderSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigOrderSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigOrderSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigOrderSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigOrderSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigOrderSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigOrderSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? _importOrderBatchSize;

  int get importOrderBatchSize{
    return _importOrderBatchSize!;
  }

  int? getImportOrderBatchSize(){
    return _importOrderBatchSize;
  }

  set importOrderBatchSize(int data){
    _importOrderBatchSize = data;
  }

  void setImportOrderBatchSize(int? data){
    _importOrderBatchSize = data;
  }

  bool? _importOrderIsAutoNumber;

  bool get importOrderIsAutoNumber{
    return _importOrderIsAutoNumber!;
  }

  bool? getImportOrderIsAutoNumber(){
    return _importOrderIsAutoNumber;
  }

  set importOrderIsAutoNumber(bool data){
    _importOrderIsAutoNumber = data;
  }

  void setImportOrderIsAutoNumber(bool? data){
    _importOrderIsAutoNumber = data;
  }

  bool? _isAllowEditNumber;

  bool get isAllowEditNumber{
    return _isAllowEditNumber!;
  }

  bool? getIsAllowEditNumber(){
    return _isAllowEditNumber;
  }

  set isAllowEditNumber(bool data){
    _isAllowEditNumber = data;
  }

  void setIsAllowEditNumber(bool? data){
    _isAllowEditNumber = data;
  }

  bool? _isAllowExcessiveInAmount;

  bool get isAllowExcessiveInAmount{
    return _isAllowExcessiveInAmount!;
  }

  bool? getIsAllowExcessiveInAmount(){
    return _isAllowExcessiveInAmount;
  }

  set isAllowExcessiveInAmount(bool data){
    _isAllowExcessiveInAmount = data;
  }

  void setIsAllowExcessiveInAmount(bool? data){
    _isAllowExcessiveInAmount = data;
  }

  bool? _isAllowExcessiveOutAmount;

  bool get isAllowExcessiveOutAmount{
    return _isAllowExcessiveOutAmount!;
  }

  bool? getIsAllowExcessiveOutAmount(){
    return _isAllowExcessiveOutAmount;
  }

  set isAllowExcessiveOutAmount(bool data){
    _isAllowExcessiveOutAmount = data;
  }

  void setIsAllowExcessiveOutAmount(bool? data){
    _isAllowExcessiveOutAmount = data;
  }

  bool? _isDisableExportWhenSalesItemQueryHasDraft;

  bool get isDisableExportWhenSalesItemQueryHasDraft{
    return _isDisableExportWhenSalesItemQueryHasDraft!;
  }

  bool? getIsDisableExportWhenSalesItemQueryHasDraft(){
    return _isDisableExportWhenSalesItemQueryHasDraft;
  }

  set isDisableExportWhenSalesItemQueryHasDraft(bool data){
    _isDisableExportWhenSalesItemQueryHasDraft = data;
  }

  void setIsDisableExportWhenSalesItemQueryHasDraft(bool? data){
    _isDisableExportWhenSalesItemQueryHasDraft = data;
  }

  bool? _isEnablePurchaseDefaultTaxRate;

  bool get isEnablePurchaseDefaultTaxRate{
    return _isEnablePurchaseDefaultTaxRate!;
  }

  bool? getIsEnablePurchaseDefaultTaxRate(){
    return _isEnablePurchaseDefaultTaxRate;
  }

  set isEnablePurchaseDefaultTaxRate(bool data){
    _isEnablePurchaseDefaultTaxRate = data;
  }

  void setIsEnablePurchaseDefaultTaxRate(bool? data){
    _isEnablePurchaseDefaultTaxRate = data;
  }

  bool? _isEnablePurchaseDiscount;

  bool get isEnablePurchaseDiscount{
    return _isEnablePurchaseDiscount!;
  }

  bool? getIsEnablePurchaseDiscount(){
    return _isEnablePurchaseDiscount;
  }

  set isEnablePurchaseDiscount(bool data){
    _isEnablePurchaseDiscount = data;
  }

  void setIsEnablePurchaseDiscount(bool? data){
    _isEnablePurchaseDiscount = data;
  }

  bool? _isEnablePurchaseInPriceGreaterThanStockPrice;

  bool get isEnablePurchaseInPriceGreaterThanStockPrice{
    return _isEnablePurchaseInPriceGreaterThanStockPrice!;
  }

  bool? getIsEnablePurchaseInPriceGreaterThanStockPrice(){
    return _isEnablePurchaseInPriceGreaterThanStockPrice;
  }

  set isEnablePurchaseInPriceGreaterThanStockPrice(bool data){
    _isEnablePurchaseInPriceGreaterThanStockPrice = data;
  }

  void setIsEnablePurchaseInPriceGreaterThanStockPrice(bool? data){
    _isEnablePurchaseInPriceGreaterThanStockPrice = data;
  }

  bool? _isEnablePurchaseInPriceLowerThanStockPrice;

  bool get isEnablePurchaseInPriceLowerThanStockPrice{
    return _isEnablePurchaseInPriceLowerThanStockPrice!;
  }

  bool? getIsEnablePurchaseInPriceLowerThanStockPrice(){
    return _isEnablePurchaseInPriceLowerThanStockPrice;
  }

  set isEnablePurchaseInPriceLowerThanStockPrice(bool data){
    _isEnablePurchaseInPriceLowerThanStockPrice = data;
  }

  void setIsEnablePurchaseInPriceLowerThanStockPrice(bool? data){
    _isEnablePurchaseInPriceLowerThanStockPrice = data;
  }

  bool? _isEnableSalesDefaultTaxRate;

  bool get isEnableSalesDefaultTaxRate{
    return _isEnableSalesDefaultTaxRate!;
  }

  bool? getIsEnableSalesDefaultTaxRate(){
    return _isEnableSalesDefaultTaxRate;
  }

  set isEnableSalesDefaultTaxRate(bool data){
    _isEnableSalesDefaultTaxRate = data;
  }

  void setIsEnableSalesDefaultTaxRate(bool? data){
    _isEnableSalesDefaultTaxRate = data;
  }

  bool? _isEnableSalesDiscount;

  bool get isEnableSalesDiscount{
    return _isEnableSalesDiscount!;
  }

  bool? getIsEnableSalesDiscount(){
    return _isEnableSalesDiscount;
  }

  set isEnableSalesDiscount(bool data){
    _isEnableSalesDiscount = data;
  }

  void setIsEnableSalesDiscount(bool? data){
    _isEnableSalesDiscount = data;
  }

  bool? _isEnableSalesOutPriceGreaterThanStockPrice;

  bool get isEnableSalesOutPriceGreaterThanStockPrice{
    return _isEnableSalesOutPriceGreaterThanStockPrice!;
  }

  bool? getIsEnableSalesOutPriceGreaterThanStockPrice(){
    return _isEnableSalesOutPriceGreaterThanStockPrice;
  }

  set isEnableSalesOutPriceGreaterThanStockPrice(bool data){
    _isEnableSalesOutPriceGreaterThanStockPrice = data;
  }

  void setIsEnableSalesOutPriceGreaterThanStockPrice(bool? data){
    _isEnableSalesOutPriceGreaterThanStockPrice = data;
  }

  bool? _isEnableSalesOutPriceLowerThanStockPrice;

  bool get isEnableSalesOutPriceLowerThanStockPrice{
    return _isEnableSalesOutPriceLowerThanStockPrice!;
  }

  bool? getIsEnableSalesOutPriceLowerThanStockPrice(){
    return _isEnableSalesOutPriceLowerThanStockPrice;
  }

  set isEnableSalesOutPriceLowerThanStockPrice(bool data){
    _isEnableSalesOutPriceLowerThanStockPrice = data;
  }

  void setIsEnableSalesOutPriceLowerThanStockPrice(bool? data){
    _isEnableSalesOutPriceLowerThanStockPrice = data;
  }

  TypeEnumOrderNumberDateType? _numberDateType;

  TypeEnumOrderNumberDateType get numberDateType{
    return _numberDateType!;
  }

  TypeEnumOrderNumberDateType? getNumberDateType(){
    return _numberDateType;
  }

  set numberDateType(TypeEnumOrderNumberDateType data){
    _numberDateType = data;
  }

  void setNumberDateType(TypeEnumOrderNumberDateType? data){
    _numberDateType = data;
  }

  int? _numberIdLength;

  int get numberIdLength{
    return _numberIdLength!;
  }

  int? getNumberIdLength(){
    return _numberIdLength;
  }

  set numberIdLength(int data){
    _numberIdLength = data;
  }

  void setNumberIdLength(int? data){
    _numberIdLength = data;
  }

  TypeEnumResourceDuplicateNameStrategy? _orderItemDuplicateIdStrategy;

  TypeEnumResourceDuplicateNameStrategy get orderItemDuplicateIdStrategy{
    return _orderItemDuplicateIdStrategy!;
  }

  TypeEnumResourceDuplicateNameStrategy? getOrderItemDuplicateIdStrategy(){
    return _orderItemDuplicateIdStrategy;
  }

  set orderItemDuplicateIdStrategy(TypeEnumResourceDuplicateNameStrategy data){
    _orderItemDuplicateIdStrategy = data;
  }

  void setOrderItemDuplicateIdStrategy(TypeEnumResourceDuplicateNameStrategy? data){
    _orderItemDuplicateIdStrategy = data;
  }

  int? _priceRoundScale;

  int get priceRoundScale{
    return _priceRoundScale!;
  }

  int? getPriceRoundScale(){
    return _priceRoundScale;
  }

  set priceRoundScale(int data){
    _priceRoundScale = data;
  }

  void setPriceRoundScale(int? data){
    _priceRoundScale = data;
  }

  String? _purchaseDefaultTaxRate;

  String get purchaseDefaultTaxRate{
    return _purchaseDefaultTaxRate!;
  }

  String? getPurchaseDefaultTaxRate(){
    return _purchaseDefaultTaxRate;
  }

  set purchaseDefaultTaxRate(String data){
    _purchaseDefaultTaxRate = data;
  }

  void setPurchaseDefaultTaxRate(String? data){
    _purchaseDefaultTaxRate = data;
  }

  String? _purchaseInPriceGreaterThanStockPrice;

  String get purchaseInPriceGreaterThanStockPrice{
    return _purchaseInPriceGreaterThanStockPrice!;
  }

  String? getPurchaseInPriceGreaterThanStockPrice(){
    return _purchaseInPriceGreaterThanStockPrice;
  }

  set purchaseInPriceGreaterThanStockPrice(String data){
    _purchaseInPriceGreaterThanStockPrice = data;
  }

  void setPurchaseInPriceGreaterThanStockPrice(String? data){
    _purchaseInPriceGreaterThanStockPrice = data;
  }

  String? _purchaseInPriceLowerThanStockPrice;

  String get purchaseInPriceLowerThanStockPrice{
    return _purchaseInPriceLowerThanStockPrice!;
  }

  String? getPurchaseInPriceLowerThanStockPrice(){
    return _purchaseInPriceLowerThanStockPrice;
  }

  set purchaseInPriceLowerThanStockPrice(String data){
    _purchaseInPriceLowerThanStockPrice = data;
  }

  void setPurchaseInPriceLowerThanStockPrice(String? data){
    _purchaseInPriceLowerThanStockPrice = data;
  }

  String? _salesDefaultTaxRate;

  String get salesDefaultTaxRate{
    return _salesDefaultTaxRate!;
  }

  String? getSalesDefaultTaxRate(){
    return _salesDefaultTaxRate;
  }

  set salesDefaultTaxRate(String data){
    _salesDefaultTaxRate = data;
  }

  void setSalesDefaultTaxRate(String? data){
    _salesDefaultTaxRate = data;
  }

  String? _salesOutPriceGreaterThanStockPrice;

  String get salesOutPriceGreaterThanStockPrice{
    return _salesOutPriceGreaterThanStockPrice!;
  }

  String? getSalesOutPriceGreaterThanStockPrice(){
    return _salesOutPriceGreaterThanStockPrice;
  }

  set salesOutPriceGreaterThanStockPrice(String data){
    _salesOutPriceGreaterThanStockPrice = data;
  }

  void setSalesOutPriceGreaterThanStockPrice(String? data){
    _salesOutPriceGreaterThanStockPrice = data;
  }

  String? _salesOutPriceLowerThanStockPrice;

  String get salesOutPriceLowerThanStockPrice{
    return _salesOutPriceLowerThanStockPrice!;
  }

  String? getSalesOutPriceLowerThanStockPrice(){
    return _salesOutPriceLowerThanStockPrice;
  }

  set salesOutPriceLowerThanStockPrice(String data){
    _salesOutPriceLowerThanStockPrice = data;
  }

  void setSalesOutPriceLowerThanStockPrice(String? data){
    _salesOutPriceLowerThanStockPrice = data;
  }

  int? _totalRoundScale;

  int get totalRoundScale{
    return _totalRoundScale!;
  }

  int? getTotalRoundScale(){
    return _totalRoundScale;
  }

  set totalRoundScale(int data){
    _totalRoundScale = data;
  }

  void setTotalRoundScale(int? data){
    _totalRoundScale = data;
  }

}

class FTypeSystemConfigResourceSetting extends IDataField {
  static const contactDuplicateNameStrategy = FTypeSystemConfigResourceSetting('contactDuplicateNameStrategy');
  static const contactSortStrategy = FTypeSystemConfigResourceSetting('contactSortStrategy');
  static const isEnableItemCustom = FTypeSystemConfigResourceSetting('isEnableItemCustom');
  static const isEnableSelectContactByModal = FTypeSystemConfigResourceSetting('isEnableSelectContactByModal');
  static const isEnableSelectItemByModal = FTypeSystemConfigResourceSetting('isEnableSelectItemByModal');
  static const isEnableShowCategoryWhenFilterContact = FTypeSystemConfigResourceSetting('isEnableShowCategoryWhenFilterContact');
  static const itemDuplicateNameStrategy = FTypeSystemConfigResourceSetting('itemDuplicateNameStrategy');
  static const itemSortStrategy = FTypeSystemConfigResourceSetting('itemSortStrategy');
  const FTypeSystemConfigResourceSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigResourceSetting> _TypeSystemConfigResourceSetting_fields = {
  "contactDuplicateNameStrategy": (
    getter: (data) => data._contactDuplicateNameStrategy,
    setter: (data, value) => data._contactDuplicateNameStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data._contactDuplicateNameStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data._contactDuplicateNameStrategy = parser(value);
    }
  ),
  "contactSortStrategy": (
    getter: (data) => data._contactSortStrategy,
    setter: (data, value) => data._contactSortStrategy = value as TypeEnumResourceSortStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceSortStrategy.toDynamic;
      return formatter(data._contactSortStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceSortStrategy.fromDynamic;
      data._contactSortStrategy = parser(value);
    }
  ),
  "isEnableItemCustom": (
    getter: (data) => data._isEnableItemCustom,
    setter: (data, value) => data._isEnableItemCustom = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableItemCustom);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableItemCustom = parser(value);
    }
  ),
  "isEnableSelectContactByModal": (
    getter: (data) => data._isEnableSelectContactByModal,
    setter: (data, value) => data._isEnableSelectContactByModal = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSelectContactByModal);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSelectContactByModal = parser(value);
    }
  ),
  "isEnableSelectItemByModal": (
    getter: (data) => data._isEnableSelectItemByModal,
    setter: (data, value) => data._isEnableSelectItemByModal = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableSelectItemByModal);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableSelectItemByModal = parser(value);
    }
  ),
  "isEnableShowCategoryWhenFilterContact": (
    getter: (data) => data._isEnableShowCategoryWhenFilterContact,
    setter: (data, value) => data._isEnableShowCategoryWhenFilterContact = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data._isEnableShowCategoryWhenFilterContact);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data._isEnableShowCategoryWhenFilterContact = parser(value);
    }
  ),
  "itemDuplicateNameStrategy": (
    getter: (data) => data._itemDuplicateNameStrategy,
    setter: (data, value) => data._itemDuplicateNameStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data._itemDuplicateNameStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data._itemDuplicateNameStrategy = parser(value);
    }
  ),
  "itemSortStrategy": (
    getter: (data) => data._itemSortStrategy,
    setter: (data, value) => data._itemSortStrategy = value as TypeEnumResourceSortStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceSortStrategy.toDynamic;
      return formatter(data._itemSortStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceSortStrategy.fromDynamic;
      data._itemSortStrategy = parser(value);
    }
  ),
};

class TypeSystemConfigResourceSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigResourceSetting({
    TypeEnumResourceDuplicateNameStrategy? contactDuplicateNameStrategy,
    TypeEnumResourceSortStrategy? contactSortStrategy,
    bool? isEnableItemCustom,
    bool? isEnableSelectContactByModal,
    bool? isEnableSelectItemByModal,
    bool? isEnableShowCategoryWhenFilterContact,
    TypeEnumResourceDuplicateNameStrategy? itemDuplicateNameStrategy,
    TypeEnumResourceSortStrategy? itemSortStrategy
  }):
    _contactDuplicateNameStrategy = contactDuplicateNameStrategy,
    _contactSortStrategy = contactSortStrategy,
    _isEnableItemCustom = isEnableItemCustom,
    _isEnableSelectContactByModal = isEnableSelectContactByModal,
    _isEnableSelectItemByModal = isEnableSelectItemByModal,
    _isEnableShowCategoryWhenFilterContact = isEnableShowCategoryWhenFilterContact,
    _itemDuplicateNameStrategy = itemDuplicateNameStrategy,
    _itemSortStrategy = itemSortStrategy;

  static TypeSystemConfigResourceSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigResourceSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigResourceSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigResourceSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigResourceSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigResourceSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigResourceSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigResourceSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumResourceDuplicateNameStrategy? _contactDuplicateNameStrategy;

  TypeEnumResourceDuplicateNameStrategy get contactDuplicateNameStrategy{
    return _contactDuplicateNameStrategy!;
  }

  TypeEnumResourceDuplicateNameStrategy? getContactDuplicateNameStrategy(){
    return _contactDuplicateNameStrategy;
  }

  set contactDuplicateNameStrategy(TypeEnumResourceDuplicateNameStrategy data){
    _contactDuplicateNameStrategy = data;
  }

  void setContactDuplicateNameStrategy(TypeEnumResourceDuplicateNameStrategy? data){
    _contactDuplicateNameStrategy = data;
  }

  TypeEnumResourceSortStrategy? _contactSortStrategy;

  TypeEnumResourceSortStrategy get contactSortStrategy{
    return _contactSortStrategy!;
  }

  TypeEnumResourceSortStrategy? getContactSortStrategy(){
    return _contactSortStrategy;
  }

  set contactSortStrategy(TypeEnumResourceSortStrategy data){
    _contactSortStrategy = data;
  }

  void setContactSortStrategy(TypeEnumResourceSortStrategy? data){
    _contactSortStrategy = data;
  }

  bool? _isEnableItemCustom;

  bool get isEnableItemCustom{
    return _isEnableItemCustom!;
  }

  bool? getIsEnableItemCustom(){
    return _isEnableItemCustom;
  }

  set isEnableItemCustom(bool data){
    _isEnableItemCustom = data;
  }

  void setIsEnableItemCustom(bool? data){
    _isEnableItemCustom = data;
  }

  bool? _isEnableSelectContactByModal;

  bool get isEnableSelectContactByModal{
    return _isEnableSelectContactByModal!;
  }

  bool? getIsEnableSelectContactByModal(){
    return _isEnableSelectContactByModal;
  }

  set isEnableSelectContactByModal(bool data){
    _isEnableSelectContactByModal = data;
  }

  void setIsEnableSelectContactByModal(bool? data){
    _isEnableSelectContactByModal = data;
  }

  bool? _isEnableSelectItemByModal;

  bool get isEnableSelectItemByModal{
    return _isEnableSelectItemByModal!;
  }

  bool? getIsEnableSelectItemByModal(){
    return _isEnableSelectItemByModal;
  }

  set isEnableSelectItemByModal(bool data){
    _isEnableSelectItemByModal = data;
  }

  void setIsEnableSelectItemByModal(bool? data){
    _isEnableSelectItemByModal = data;
  }

  bool? _isEnableShowCategoryWhenFilterContact;

  bool get isEnableShowCategoryWhenFilterContact{
    return _isEnableShowCategoryWhenFilterContact!;
  }

  bool? getIsEnableShowCategoryWhenFilterContact(){
    return _isEnableShowCategoryWhenFilterContact;
  }

  set isEnableShowCategoryWhenFilterContact(bool data){
    _isEnableShowCategoryWhenFilterContact = data;
  }

  void setIsEnableShowCategoryWhenFilterContact(bool? data){
    _isEnableShowCategoryWhenFilterContact = data;
  }

  TypeEnumResourceDuplicateNameStrategy? _itemDuplicateNameStrategy;

  TypeEnumResourceDuplicateNameStrategy get itemDuplicateNameStrategy{
    return _itemDuplicateNameStrategy!;
  }

  TypeEnumResourceDuplicateNameStrategy? getItemDuplicateNameStrategy(){
    return _itemDuplicateNameStrategy;
  }

  set itemDuplicateNameStrategy(TypeEnumResourceDuplicateNameStrategy data){
    _itemDuplicateNameStrategy = data;
  }

  void setItemDuplicateNameStrategy(TypeEnumResourceDuplicateNameStrategy? data){
    _itemDuplicateNameStrategy = data;
  }

  TypeEnumResourceSortStrategy? _itemSortStrategy;

  TypeEnumResourceSortStrategy get itemSortStrategy{
    return _itemSortStrategy!;
  }

  TypeEnumResourceSortStrategy? getItemSortStrategy(){
    return _itemSortStrategy;
  }

  set itemSortStrategy(TypeEnumResourceSortStrategy data){
    _itemSortStrategy = data;
  }

  void setItemSortStrategy(TypeEnumResourceSortStrategy? data){
    _itemSortStrategy = data;
  }

}

class FTypeSystemConfigSettingData extends IDataField {
  static const industrySetting = FTypeSystemConfigSettingData('industrySetting');
  static const orderSetting = FTypeSystemConfigSettingData('orderSetting');
  static const resourceSetting = FTypeSystemConfigSettingData('resourceSetting');
  static const stockSetting = FTypeSystemConfigSettingData('stockSetting');
  const FTypeSystemConfigSettingData(super.key);
}

final FieldReflectInfo<TypeSystemConfigSettingData> _TypeSystemConfigSettingData_fields = {
  "industrySetting": (
    getter: (data) => data._industrySetting,
    setter: (data, value) => data._industrySetting = value as TypeSystemConfigIndustrySetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigIndustrySetting.toDynamic;
      return formatter(data._industrySetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigIndustrySetting.fromDynamic;
      data._industrySetting = parser(value);
    }
  ),
  "orderSetting": (
    getter: (data) => data._orderSetting,
    setter: (data, value) => data._orderSetting = value as TypeSystemConfigOrderSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigOrderSetting.toDynamic;
      return formatter(data._orderSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigOrderSetting.fromDynamic;
      data._orderSetting = parser(value);
    }
  ),
  "resourceSetting": (
    getter: (data) => data._resourceSetting,
    setter: (data, value) => data._resourceSetting = value as TypeSystemConfigResourceSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigResourceSetting.toDynamic;
      return formatter(data._resourceSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigResourceSetting.fromDynamic;
      data._resourceSetting = parser(value);
    }
  ),
  "stockSetting": (
    getter: (data) => data._stockSetting,
    setter: (data, value) => data._stockSetting = value as TypeSystemConfigStockSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigStockSetting.toDynamic;
      return formatter(data._stockSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigStockSetting.fromDynamic;
      data._stockSetting = parser(value);
    }
  ),
};

class TypeSystemConfigSettingData extends IDataBasic implements IDataDynamic {
  TypeSystemConfigSettingData({
    TypeSystemConfigIndustrySetting? industrySetting,
    TypeSystemConfigOrderSetting? orderSetting,
    TypeSystemConfigResourceSetting? resourceSetting,
    TypeSystemConfigStockSetting? stockSetting
  }):
    _industrySetting = industrySetting,
    _orderSetting = orderSetting,
    _resourceSetting = resourceSetting,
    _stockSetting = stockSetting;

  static TypeSystemConfigSettingData? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigSettingData();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigSettingData_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigSettingData: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigSettingData? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigSettingData_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigSettingData_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigSettingData_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeSystemConfigIndustrySetting? _industrySetting;

  TypeSystemConfigIndustrySetting get industrySetting{
    return _industrySetting!;
  }

  TypeSystemConfigIndustrySetting? getIndustrySetting(){
    return _industrySetting;
  }

  set industrySetting(TypeSystemConfigIndustrySetting data){
    _industrySetting = data;
  }

  void setIndustrySetting(TypeSystemConfigIndustrySetting? data){
    _industrySetting = data;
  }

  TypeSystemConfigOrderSetting? _orderSetting;

  TypeSystemConfigOrderSetting get orderSetting{
    return _orderSetting!;
  }

  TypeSystemConfigOrderSetting? getOrderSetting(){
    return _orderSetting;
  }

  set orderSetting(TypeSystemConfigOrderSetting data){
    _orderSetting = data;
  }

  void setOrderSetting(TypeSystemConfigOrderSetting? data){
    _orderSetting = data;
  }

  TypeSystemConfigResourceSetting? _resourceSetting;

  TypeSystemConfigResourceSetting get resourceSetting{
    return _resourceSetting!;
  }

  TypeSystemConfigResourceSetting? getResourceSetting(){
    return _resourceSetting;
  }

  set resourceSetting(TypeSystemConfigResourceSetting data){
    _resourceSetting = data;
  }

  void setResourceSetting(TypeSystemConfigResourceSetting? data){
    _resourceSetting = data;
  }

  TypeSystemConfigStockSetting? _stockSetting;

  TypeSystemConfigStockSetting get stockSetting{
    return _stockSetting!;
  }

  TypeSystemConfigStockSetting? getStockSetting(){
    return _stockSetting;
  }

  set stockSetting(TypeSystemConfigStockSetting data){
    _stockSetting = data;
  }

  void setStockSetting(TypeSystemConfigStockSetting? data){
    _stockSetting = data;
  }

}

class FTypeSystemConfigStockSetting extends IDataField {
  static const availableStockType = FTypeSystemConfigStockSetting('availableStockType');
  const FTypeSystemConfigStockSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigStockSetting> _TypeSystemConfigStockSetting_fields = {
  "availableStockType": (
    getter: (data) => data._availableStockType,
    setter: (data, value) => data._availableStockType = value as TypeEnumAvailableStockType?,
    toDynamic: (data) {
      final formatter = TypeEnumAvailableStockType.toDynamic;
      return formatter(data._availableStockType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAvailableStockType.fromDynamic;
      data._availableStockType = parser(value);
    }
  ),
};

class TypeSystemConfigStockSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigStockSetting({
    TypeEnumAvailableStockType? availableStockType
  }):
    _availableStockType = availableStockType;

  static TypeSystemConfigStockSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigStockSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigStockSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigStockSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigStockSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigStockSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigStockSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigStockSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumAvailableStockType? _availableStockType;

  TypeEnumAvailableStockType get availableStockType{
    return _availableStockType!;
  }

  TypeEnumAvailableStockType? getAvailableStockType(){
    return _availableStockType;
  }

  set availableStockType(TypeEnumAvailableStockType data){
    _availableStockType = data;
  }

  void setAvailableStockType(TypeEnumAvailableStockType? data){
    _availableStockType = data;
  }

}

class FTypeTenantInfo extends IDataField {
  static const expireDate = FTypeTenantInfo('expireDate');
  static const id = FTypeTenantInfo('id');
  static const name = FTypeTenantInfo('name');
  static const operatorCountDesc = FTypeTenantInfo('operatorCountDesc');
  static const state = FTypeTenantInfo('state');
  const FTypeTenantInfo(super.key);
}

final FieldReflectInfo<TypeTenantInfo> _TypeTenantInfo_fields = {
  "expireDate": (
    getter: (data) => data._expireDate,
    setter: (data, value) => data._expireDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._expireDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._expireDate = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "operatorCountDesc": (
    getter: (data) => data._operatorCountDesc,
    setter: (data, value) => data._operatorCountDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._operatorCountDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._operatorCountDesc = parser(value);
    }
  ),
  "state": (
    getter: (data) => data._state,
    setter: (data, value) => data._state = value as TypeEnumTenantStatePO?,
    toDynamic: (data) {
      final formatter = TypeEnumTenantStatePO.toDynamic;
      return formatter(data._state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumTenantStatePO.fromDynamic;
      data._state = parser(value);
    }
  ),
};

class TypeTenantInfo extends IDataBasic implements IDataDynamic {
  TypeTenantInfo({
    String? expireDate,
    int? id,
    String? name,
    String? operatorCountDesc,
    TypeEnumTenantStatePO? state
  }):
    _expireDate = expireDate,
    _id = id,
    _name = name,
    _operatorCountDesc = operatorCountDesc,
    _state = state;

  static TypeTenantInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeTenantInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeTenantInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeTenantInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeTenantInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeTenantInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeTenantInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeTenantInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _expireDate;

  String get expireDate{
    return _expireDate!;
  }

  String? getExpireDate(){
    return _expireDate;
  }

  set expireDate(String data){
    _expireDate = data;
  }

  void setExpireDate(String? data){
    _expireDate = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _operatorCountDesc;

  String get operatorCountDesc{
    return _operatorCountDesc!;
  }

  String? getOperatorCountDesc(){
    return _operatorCountDesc;
  }

  set operatorCountDesc(String data){
    _operatorCountDesc = data;
  }

  void setOperatorCountDesc(String? data){
    _operatorCountDesc = data;
  }

  TypeEnumTenantStatePO? _state;

  TypeEnumTenantStatePO get state{
    return _state!;
  }

  TypeEnumTenantStatePO? getState(){
    return _state;
  }

  set state(TypeEnumTenantStatePO data){
    _state = data;
  }

  void setState(TypeEnumTenantStatePO? data){
    _state = data;
  }

}

class FTypeUnit extends IDataField {
  static const createTime = FTypeUnit('createTime');
  static const id = FTypeUnit('id');
  static const isEnabled = FTypeUnit('isEnabled');
  static const modifyTime = FTypeUnit('modifyTime');
  static const name = FTypeUnit('name');
  static const remark = FTypeUnit('remark');
  const FTypeUnit(super.key);
}

final FieldReflectInfo<TypeUnit> _TypeUnit_fields = {
  "createTime": (
    getter: (data) => data._createTime,
    setter: (data, value) => data._createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._createTime = parser(value);
    }
  ),
  "id": (
    getter: (data) => data._id,
    setter: (data, value) => data._id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data._id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data._id = parser(value);
    }
  ),
  "isEnabled": (
    getter: (data) => data._isEnabled,
    setter: (data, value) => data._isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data._isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data._isEnabled = parser(value);
    }
  ),
  "modifyTime": (
    getter: (data) => data._modifyTime,
    setter: (data, value) => data._modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._modifyTime = parser(value);
    }
  ),
  "name": (
    getter: (data) => data._name,
    setter: (data, value) => data._name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._name = parser(value);
    }
  ),
  "remark": (
    getter: (data) => data._remark,
    setter: (data, value) => data._remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._remark = parser(value);
    }
  ),
};

class TypeUnit extends IDataBasic implements IDataDynamic {
  TypeUnit({
    String? createTime,
    int? id,
    TypeEnumSoftEnableIsEnable? isEnabled,
    String? modifyTime,
    String? name,
    String? remark
  }):
    _createTime = createTime,
    _id = id,
    _isEnabled = isEnabled,
    _modifyTime = modifyTime,
    _name = name,
    _remark = remark;

  static TypeUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _createTime;

  String get createTime{
    return _createTime!;
  }

  String? getCreateTime(){
    return _createTime;
  }

  set createTime(String data){
    _createTime = data;
  }

  void setCreateTime(String? data){
    _createTime = data;
  }

  int? _id;

  int get id{
    return _id!;
  }

  int? getId(){
    return _id;
  }

  set id(int data){
    _id = data;
  }

  void setId(int? data){
    _id = data;
  }

  TypeEnumSoftEnableIsEnable? _isEnabled;

  TypeEnumSoftEnableIsEnable get isEnabled{
    return _isEnabled!;
  }

  TypeEnumSoftEnableIsEnable? getIsEnabled(){
    return _isEnabled;
  }

  set isEnabled(TypeEnumSoftEnableIsEnable data){
    _isEnabled = data;
  }

  void setIsEnabled(TypeEnumSoftEnableIsEnable? data){
    _isEnabled = data;
  }

  String? _modifyTime;

  String get modifyTime{
    return _modifyTime!;
  }

  String? getModifyTime(){
    return _modifyTime;
  }

  set modifyTime(String data){
    _modifyTime = data;
  }

  void setModifyTime(String? data){
    _modifyTime = data;
  }

  String? _name;

  String get name{
    return _name!;
  }

  String? getName(){
    return _name;
  }

  set name(String data){
    _name = data;
  }

  void setName(String? data){
    _name = data;
  }

  String? _remark;

  String get remark{
    return _remark!;
  }

  String? getRemark(){
    return _remark;
  }

  set remark(String data){
    _remark = data;
  }

  void setRemark(String? data){
    _remark = data;
  }

}

class FTypeUploadToken extends IDataField {
  static const fileKey = FTypeUploadToken('fileKey');
  static const uploadToken = FTypeUploadToken('uploadToken');
  const FTypeUploadToken(super.key);
}

final FieldReflectInfo<TypeUploadToken> _TypeUploadToken_fields = {
  "fileKey": (
    getter: (data) => data._fileKey,
    setter: (data, value) => data._fileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._fileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._fileKey = parser(value);
    }
  ),
  "uploadToken": (
    getter: (data) => data._uploadToken,
    setter: (data, value) => data._uploadToken = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data._uploadToken);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data._uploadToken = parser(value);
    }
  ),
};

class TypeUploadToken extends IDataBasic implements IDataDynamic {
  TypeUploadToken({
    String? fileKey,
    String? uploadToken
  }):
    _fileKey = fileKey,
    _uploadToken = uploadToken;

  static TypeUploadToken? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeUploadToken();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeUploadToken_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeUploadToken: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeUploadToken? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeUploadToken_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeUploadToken_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeUploadToken_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? _fileKey;

  String get fileKey{
    return _fileKey!;
  }

  String? getFileKey(){
    return _fileKey;
  }

  set fileKey(String data){
    _fileKey = data;
  }

  void setFileKey(String? data){
    _fileKey = data;
  }

  String? _uploadToken;

  String get uploadToken{
    return _uploadToken!;
  }

  String? getUploadToken(){
    return _uploadToken;
  }

  set uploadToken(String data){
    _uploadToken = data;
  }

  void setUploadToken(String? data){
    _uploadToken = data;
  }

}



Object? DynamicEncode(Object? info) {
  if (info == null) {
    return info;
  } else if (info is IDataDynamic) {
    return info.encodeDynamic();
  } else if (info is bool) {
    return BoolHelper.toDynamic(info);
  } else if (info is int) {
    return IntHelper.toDynamic(info);
  } else if (info is double) {
    return DoubleHelper.toDynamic(info);
  } else if (info is String) {
    return StringHelper.toDynamic(info);
  } else if (info is List) {
    return info.map((single) => DynamicEncode(single)).toList();
  } else if (info is Map) {
    final data = {};
    info.forEach((key, value) {
      data[DynamicEncode(key)] = DynamicEncode(value);
    });
    return data;
  } else if (info is Set) {
    final data = <dynamic>{};
    for (final value in info) {
      data.add(value);
    }
    return data;
  } else {
    throw FormatException('can not convertTo dynamic: ${info.runtimeType}');
  }
}

Future<int?> ApiResourceAccountAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/account/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountConvertToCategory([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/convertToCategory",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeAccount?> ApiResourceAccountGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/get",
    data: DynamicEncode(data),
  );
  final parser = TypeAccount.fromDynamic;
  return parser(result);
}

Future<List<TypeAccount>?> ApiResourceAccountGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
    final handler = TypeAccount.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceAccountGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListAccount?> ApiResourceAccountSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAccount.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/setInitial",
    data: DynamicEncode(data),
  );
}

Future<TypeAccountGroupQueryDTO?> ApiReportAccountQueryByAccountGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/account/queryByAccountGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeAccountGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeAccountFlowQueryDTO?> ApiReportAccountQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/account/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeAccountFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeArapFlowQueryDTO?> ApiReportArapQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/arap/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeArapFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceAssembleTemplateAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAssembleTemplateDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAssembleTemplateDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAssembleTemplateEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeAssembleTemplate?> ApiResourceAssembleTemplateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/get",
    data: DynamicEncode(data),
  );
  final parser = TypeAssembleTemplate.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceAssembleTemplateGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAssembleTemplateMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListAssembleTemplate?> ApiResourceAssembleTemplateSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAssembleTemplate.fromDynamic;
  return parser(result);
}

Future<String?> ApiAssistAttachmentAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/add",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistAttachmentClearAllEmptyItemImage([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/clearAllEmptyItemImage",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistAttachmentClearAllEmptyOrderAttachment([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/clearAllEmptyOrderAttachment",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistAttachmentDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/attachment/del",
    data: DynamicEncode(data),
  );
}

Future<TypeUploadToken?> ApiAssistAttachmentGetUploadToken([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/attachment/getUploadToken",
    data: DynamicEncode(data),
  );
  final parser = TypeUploadToken.fromDynamic;
  return parser(result);
}

Future<TypePageListAttachment?> ApiAssistAttachmentSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/attachment/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAttachment.fromDynamic;
  return parser(result);
}

Future<TypeAttachmentQueryDTO?> ApiReportAttachmentQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/attachment/query",
    data: DynamicEncode(data),
  );
  final parser = TypeAttachmentQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistBackendTaskAddImportExcelTask([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/backendTask/addImportExcelTask",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistBackendTaskDownloadResult([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/downloadResult",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistBackendTaskDownloadSample([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/downloadSample",
    data: DynamicEncode(data),
  );
}

Future<TypeBackendTask?> ApiAssistBackendTaskGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/get",
    data: DynamicEncode(data),
  );
  final parser = TypeBackendTask.fromDynamic;
  return parser(result);
}

Future<String?> ApiAssistBackendTaskGetData([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/getData",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistBackendTaskRestore([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/backendTask/restore",
    data: DynamicEncode(data),
  );
}

Future<TypePageListBackendTask?> ApiAssistBackendTaskSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListBackendTask.fromDynamic;
  return parser(result);
}

Future<TypeOutput?> ApiAssistColumnConstraintAndStateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraintAndState/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOutput.fromDynamic;
  return parser(result);
}

Future<List<TypeColumnConstraintItem>?> ApiAssistColumnConstraintGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraint/get",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeColumnConstraintItem>((single){
    final handler = TypeColumnConstraintItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeColumnConstraintItem>?> ApiAssistColumnConstraintGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraint/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeColumnConstraintItem>((single){
    final handler = TypeColumnConstraintItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiAssistColumnConstraintSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnConstraint/set",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistColumnConstraintSetBatch([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnConstraint/setBatch",
    data: DynamicEncode(data),
  );
}

Future<TypeColumnState?> ApiAssistColumnStateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnState/get",
    data: DynamicEncode(data),
  );
  final parser = TypeColumnState.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistColumnStateSetBasicInfo([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnState/setBasicInfo",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistColumnStateSetDefaultValueInfo([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnState/setDefaultValueInfo",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiResourceContactAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/contact/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeContact?> ApiResourceContactGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/get",
    data: DynamicEncode(data),
  );
  final parser = TypeContact.fromDynamic;
  return parser(result);
}

Future<List<TypeContact>?> ApiResourceContactGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
    final handler = TypeContact.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeContact>?> ApiResourceContactGetByName([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getByName",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
    final handler = TypeContact.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceContactGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceContactGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<TypePageListContact?> ApiResourceContactSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListContact.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/setInitial",
    data: DynamicEncode(data),
  );
}

Future<TypeContactQueryDTO?> ApiReportContactQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/contact/query",
    data: DynamicEncode(data),
  );
  final parser = TypeContactQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiUserEmployeeAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/user/employee/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserEmployeeDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserEmployeeDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserEmployeeEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeEmployee?> ApiUserEmployeeGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/get",
    data: DynamicEncode(data),
  );
  final parser = TypeEmployee.fromDynamic;
  return parser(result);
}

Future<String?> ApiUserEmployeeGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserEmployeeMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListEmployee?> ApiUserEmployeeSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListEmployee.fromDynamic;
  return parser(result);
}

Future<TypeImageQueryDTO?> ApiReportImageQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/image/query",
    data: DynamicEncode(data),
  );
  final parser = TypeImageQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceItemAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/item/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceItemClearAllCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/clearAllCustom",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/enable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemExecuteCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/executeCustom",
    data: DynamicEncode(data),
  );
}

Future<TypeItem?> ApiResourceItemGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/get",
    data: DynamicEncode(data),
  );
  final parser = TypeItem.fromDynamic;
  return parser(result);
}

Future<List<TypeItem>?> ApiResourceItemGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
    final handler = TypeItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeItem>?> ApiResourceItemGetByName([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getByName",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
    final handler = TypeItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceItemGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceItemGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceItemMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModBatchSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modBatchSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModIsRegularType([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modIsRegularType",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModPrice([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modPrice",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemReplaceUnit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/replaceUnit",
    data: DynamicEncode(data),
  );
}

Future<TypePageListItem?> ApiResourceItemSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListItem.fromDynamic;
  return parser(result);
}

Future<TypeItemUnitConvertQueryDTO?> ApiReportItemUnitConvertQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/itemUnitConvert/query",
    data: DynamicEncode(data),
  );
  final parser = TypeItemUnitConvertQueryDTO.fromDynamic;
  return parser(result);
}

Future<List<TypeOperatorPermission>?> ApiLoginOperatorGetAllPermission([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/loginOperator/getAllPermission",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
    final handler = TypeOperatorPermission.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeOperator?> ApiLoginOperatorIsLogin([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/loginOperator/isLogin",
    data: DynamicEncode(data),
  );
  final parser = TypeOperator.fromDynamic;
  return parser(result);
}

Future<void> ApiLoginOperatorModMyPassword([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/loginOperator/modMyPassword",
    data: DynamicEncode(data),
  );
}

Future<TypeMainIndexDataDTO?> ApiReportMainIndexQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/mainIndex/query",
    data: DynamicEncode(data),
  );
  final parser = TypeMainIndexDataDTO.fromDynamic;
  return parser(result);
}

Future<TypeMainIndexTodoDataDTO?> ApiReportMainIndexQueryTodo([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/mainIndex/queryTodo",
    data: DynamicEncode(data),
  );
  final parser = TypeMainIndexTodoDataDTO.fromDynamic;
  return parser(result);
}

Future<TypeMenuConfig?> ApiAssistMenuConfigGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/menuConfig/get",
    data: DynamicEncode(data),
  );
  final parser = TypeMenuConfig.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistMenuConfigSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/menuConfig/set",
    data: DynamicEncode(data),
  );
}

Future<List<TypeEnumInfo>?> EnumGetAll([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/enum/getAll",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeEnumInfo>((single){
    final handler = TypeEnumInfo.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<int?> ApiUserOperatorAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/user/operator/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserOperatorDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserOperatorDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserOperatorEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeOperator?> ApiUserOperatorGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operator/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOperator.fromDynamic;
  return parser(result);
}

Future<void> ApiUserOperatorMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListOperator?> ApiUserOperatorSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operator/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListOperator.fromDynamic;
  return parser(result);
}

Future<TypeOperatorPermissionInfo?> ApiUserOperatorPermissionGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOperatorPermissionInfo.fromDynamic;
  return parser(result);
}

Future<List<TypeEntityOperation>?> ApiUserOperatorPermissionGetAllOperation([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/getAllOperation",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeEntityOperation>((single){
    final handler = TypeEntityOperation.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeOperatorPermission>?> ApiUserOperatorPermissionGetByEntity([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/getByEntity",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
    final handler = TypeOperatorPermission.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiUserOperatorPermissionSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operatorPermission/set",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiOrderOrderAddAndConfirm([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/addAndConfirm",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderBatchChangeItem([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/batchChangeItem",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderCancel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/cancel",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderChange([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/change",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderConfirm([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/confirm",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderCopy([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/copy",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/del",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderExecute([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/execute",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderExecuteCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/executeCustom",
    data: DynamicEncode(data),
  );
}

Future<List<int>?> ApiOrderOrderGenerate([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/generate",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<int>((single){
    final handler = IntHelper.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeOrder?> ApiOrderOrderGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOrder.fromDynamic;
  return parser(result);
}

Future<List<TypeOrder>?> ApiOrderOrderGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOrder>((single){
    final handler = TypeOrder.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<int?> ApiOrderOrderGetNearOrderId([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getNearOrderId",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<TypeOrderNumberAndInsertId?> ApiOrderOrderGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderNumberAndInsertId.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderModAndConfirm([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/modAndConfirm",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderRedReverse([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/redReverse",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderRedReverseAndCopy([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/redReverseAndCopy",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<TypeOrderInvoiceQueryDTO?> ApiReportOrderInvoiceQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderInvoice/query",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderInvoiceQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderItemQueryDTO?> ApiReportOrderItemQueryByItem([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItem",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderItemQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderItemGroupQueryDTO?> ApiReportOrderItemQueryByItemGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItemGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderItemGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeQueryCrossTabResult?> ApiReportOrderItemQueryByItemPivot([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItemPivot",
    data: DynamicEncode(data),
  );
  final parser = TypeQueryCrossTabResult.fromDynamic;
  return parser(result);
}

Future<TypeOrderAttachmentQueryDTO?> ApiReportOrderQueryAttachmentByOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryAttachmentByOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderAttachmentQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderQueryDTO?> ApiReportOrderQueryByOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderGroupQueryDTO?> ApiReportOrderQueryByOrderGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrderGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeQueryCrossTabResult?> ApiReportOrderQueryByOrderPivot([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrderPivot",
    data: DynamicEncode(data),
  );
  final parser = TypeQueryCrossTabResult.fromDynamic;
  return parser(result);
}

Future<TypeOrderSubOrderQueryDTO?> ApiReportOrderSubOrderQueryBySubOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderSubOrder/queryBySubOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderSubOrderQueryDTO.fromDynamic;
  return parser(result);
}

Future<List<TypePriceTrack>?> ApiResourcePriceTrackGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/priceTrack/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypePriceTrack>((single){
    final handler = TypePriceTrack.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypePriceTrackQueryDTO?> ApiReportPriceTrackReportQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/priceTrackReport/query",
    data: DynamicEncode(data),
  );
  final parser = TypePriceTrackQueryDTO.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistPrintTemplateAdd([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/add",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistPrintTemplateDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/del",
    data: DynamicEncode(data),
  );
}

Future<TypePrintTemplate?> ApiAssistPrintTemplateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/printTemplate/get",
    data: DynamicEncode(data),
  );
  final parser = TypePrintTemplate.fromDynamic;
  return parser(result);
}

Future<List<TypePrintTemplate>?> ApiAssistPrintTemplateGetByPrintSceneId([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/printTemplate/getByPrintSceneId",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypePrintTemplate>((single){
    final handler = TypePrintTemplate.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiAssistPrintTemplateMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistPrintTemplateModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockClearPurchaseTransit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/clearPurchaseTransit",
    data: DynamicEncode(data),
  );
}

Future<TypeStock?> ApiResourceStockGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/stock/get",
    data: DynamicEncode(data),
  );
  final parser = TypeStock.fromDynamic;
  return parser(result);
}

Future<List<TypeStock>?> ApiResourceStockGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/stock/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStock>((single){
    final handler = TypeStock.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeStockPrice>?> ApiResourceStockGetBatchPrice([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/stock/getBatchPrice",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStockPrice>((single){
    final handler = TypeStockPrice.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiResourceStockSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setInitial",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockSetLocationRemark([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setLocationRemark",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockSetPurchaseTransit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setPurchaseTransit",
    data: DynamicEncode(data),
  );
}

Future<TypeStockReplenishQueryDTO?> ApiReportStockReplenishQueryBySales([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stockReplenish/queryBySales",
    data: DynamicEncode(data),
  );
  final parser = TypeStockReplenishQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockQueryDTO?> ApiReportStockQueryByStore([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryByStore",
    data: DynamicEncode(data),
  );
  final parser = TypeStockQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockDetailQueryDTO?> ApiReportStockQueryDetail([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryDetail",
    data: DynamicEncode(data),
  );
  final parser = TypeStockDetailQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockFlowQueryDTO?> ApiReportStockQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeStockFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockRemainQueryDTO?> ApiReportStockQueryRemain([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryRemain",
    data: DynamicEncode(data),
  );
  final parser = TypeStockRemainQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockRemainFlowQueryDTO?> ApiReportStockQueryRemainFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryRemainFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeStockRemainFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceStoreAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/store/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceStoreDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStoreDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStoreEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeStore?> ApiResourceStoreGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/get",
    data: DynamicEncode(data),
  );
  final parser = TypeStore.fromDynamic;
  return parser(result);
}

Future<List<TypeStore>?> ApiResourceStoreGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
    final handler = TypeStore.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceStoreGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceStoreGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceStoreMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListStore?> ApiResourceStoreSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListStore.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStock?> ApiResourceSubContractStockGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/subContractStock/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStock.fromDynamic;
  return parser(result);
}

Future<List<TypeSubContractStock>?> ApiResourceSubContractStockGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/subContractStock/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeSubContractStock>((single){
    final handler = TypeSubContractStock.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeSubContractStockQueryDTO?> ApiReportSubContractStockQueryByStore([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryByStore",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStockFlowQueryDTO?> ApiReportSubContractStockQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStockRemainQueryDTO?> ApiReportSubContractStockQueryRemain([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryRemain",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockRemainQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSystemConfigAccountData?> ApiAssistSystemConfigAccountGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/systemConfigAccount/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSystemConfigAccountData.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistSystemConfigAccountOpen([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigAccount/open",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistSystemConfigAccountReset([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigAccount/reset",
    data: DynamicEncode(data),
  );
}

Future<TypeSystemConfigSettingData?> ApiAssistSystemConfigSettingGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/systemConfigSetting/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSystemConfigSettingData.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistSystemConfigSettingReset([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigSetting/reset",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistSystemConfigSettingSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigSetting/set",
    data: DynamicEncode(data),
  );
}

Future<TypeTenantInfo?> ApiTenantTenantGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/tenant/tenant/get",
    data: DynamicEncode(data),
  );
  final parser = TypeTenantInfo.fromDynamic;
  return parser(result);
}

Future<void> ApiTenantTenantResetSampleData([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/tenant/tenant/resetSampleData",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiResourceUnitAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/unit/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceUnitDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceUnitDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceUnitEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeUnit?> ApiResourceUnitGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/get",
    data: DynamicEncode(data),
  );
  final parser = TypeUnit.fromDynamic;
  return parser(result);
}

Future<List<TypeUnit>?> ApiResourceUnitGetAll([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/getAll",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeUnit>((single){
    final handler = TypeUnit.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypePageListUnit?> ApiResourceUnitSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListUnit.fromDynamic;
  return parser(result);
}

