import 'package:trade_app/util/request.dart';

/*
* 设计目标
* 1. 支持后端Api升级以后，前端需要往后兼容新后端Api。包括，支持没有预定义的Enum，支持没有预定义的字段保存和透传
* 2. 最大化兼容不同格式的后端格式，例如以string来传递int，double或者bool字段
* 3. 数据不仅用来后端传递数据，也是前端表单的数据模型。所以，每个字段都需要允许为null，以保存用户暂时未填写的表单项
* 4. 前端表单的数据模型，需要为强类型的，避免在编写业务逻辑代码中使用不存在的字段，传入不匹配的类型。
* 5. 前端表单的数据模型，需要获取模型的field所有可能性，以保证在编译时进行校验field是否存在。
*/

abstract interface class IData {
  Object? operator [](String name);
  void operator []=(String name, Object? value);
}

abstract interface class IDataDynamic {
  Object encodeDynamic();
  Object copy();
}

class BoolHelper {
  static bool? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is bool) {
      return data;
    } else if (data is String) {
      if (data.trim().toLowerCase() == 'true') {
        return true;
      } else if (data.trim().toLowerCase() == 'false') {
        return false;
      }
    }
    throw FormatException('can not parse to bool: [$data]');
  }

  static Object? toDynamic(bool? data) {
    return data;
  }

  static bool? deepCopy(bool? data) {
    return data;
  }
}

class IntHelper {
  static int? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is int) {
      return data;
    } else if (data is double) {
      return data.toInt();
    } else if (data is String) {
      return int.parse(data);
    }
    throw FormatException("can not parse to int: [$data]");
  }

  static Object? toDynamic(int? data) {
    return data;
  }

  static int? deepCopy(int? data) {
    return data;
  }
}

class DoubleHelper {
  static double? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is int) {
      return data.toDouble();
    } else if (data is double) {
      return data;
    } else if (data is String) {
      return double.parse(data);
    }
    throw FormatException('can not parse to double: [$data]');
  }

  static Object? toDynamic(double? data) {
    return data;
  }

  static double? deepCopy(double? data) {
    return data;
  }
}

class StringHelper {
  static String? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String ||
        data is int ||
        data is double ||
        data is bool) {
      return data.toString();
    }
    throw FormatException('can not parse to String: [$data]');
  }

  static Object? toDynamic(String? data) {
    return data;
  }

  static String? deepCopy(String? data) {
    return data;
  }
}

class ObjectHelper {
  static Object? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String ||
        data is int ||
        data is double ||
        data is bool) {
      return data;
    }
    throw FormatException('can not parse to Object: [$data]');
  }

  static Object? toDynamic(Object? data) {
    return data;
  }

  static Object? deepCopy(Object? data) {
    return data;
  }
}

class ListHelper {
  static List<T>? Function(Object? data) wrapFromDynamic<T>(
      T Function(Object? item) fromDynamicItem) {
    return (Object? data) {
      if (data == null) {
        return null;
      } else if (data is List) {
        return data.map((single) => fromDynamicItem(single)).toList();
      }
      throw FormatException('can not parse to list: [$data]');
    };
  }

  static Object? Function(List<T>? data) wrapToDynamic<T>(
      Object Function(T data) toDynamicItem) {
    return (List<T>? data) {
      if (data == null) {
        return null;
      }
      return data.map((single) => toDynamicItem(single)).toList();
    };
  }

  static List<T>? Function(List<T>? data) wrapDeepCopy<T>(
      T Function(T data) deepCopyItem) {
    return (List<T>? data) {
      if (data == null) {
        return null;
      }
      return data.map((single) => deepCopyItem(single)).toList();
    };
  }

  static bool equals<T>(List<T>? a, List<T>? b) {
    if (a == null) return b == null;
    if (b == null || a.length != b.length) return false;

    /// Check whether two references are to the same object.
    if (identical(a, b)) return true;
    for (var i = 0; i != a.length; i++) {
      if (a[i] != b[i]) {
        return false;
      }
    }
    return true;
  }
}

class MapHelper {
  static Map<String, T>? Function(Object? data) wrapFromDynamic<T>(
      T Function(Object? item) fromDynamicItem) {
    return (Object? data) {
      if (data == null) {
        return null;
      } else if (data is Map<String, Object?>) {
        final result = <String, T>{};
        data.forEach((key, value) {
          result[key] = fromDynamicItem(value);
        });
        return result;
      }
      throw FormatException('can not parse to map: [$data]');
    };
  }

  static Object? Function(Map<String, T>? data) wrapToDynamic<T>(
      Object Function(T data) toDynamicItem) {
    return (Map<String, T>? data) {
      if (data == null) {
        return null;
      }
      final result = <String, dynamic>{};
      data.forEach((key, value) {
        result[key] = toDynamicItem(value);
      });
      return result;
    };
  }

  static Map<String, T>? Function(Map<String, T>? data) wrapDeepCopy<T>(
      T Function(T data) deepCopyItem) {
    return (Map<String, T>? data) {
      if (data == null) {
        return null;
      }
      final result = <String, T>{};
      data.forEach((key, value) {
        result[key] = deepCopyItem(value);
      });
      return result;
    };
  }

  static bool equals<T, U>(Map<T, U>? a, Map<T, U>? b) {
    if (a == null) return b == null;
    if (b == null || a.length != b.length) return false;

    /// Check whether two references are to the same object.
    if (identical(a, b)) return true;
    for (final T key in a.keys) {
      if (!b.containsKey(key) || b[key] != a[key]) {
        return false;
      }
    }
    return true;
  }
}

typedef GetterHandler<T> = Object? Function(T data);
typedef SetterHandler<T> = void Function(T data, Object? value);
typedef ToDynamicHandler<T> = Object? Function(T data);
typedef FromDynamicHandler<T> = void Function(T data, Object? value);
typedef DeepCopyHandler<T> = void Function(T newData, T oldData);
typedef FieldReflectInfo<T> = Map<
    String,
    ({
      GetterHandler<T> getter,
      SetterHandler<T> setter,
      ToDynamicHandler<T> toDynamic,
      FromDynamicHandler<T> fromDynamic,
      DeepCopyHandler<T> deepCopy,
    })>;

abstract class IDataBasic implements IData {
  final Map<String, Object?> _externalFields = {};

  IDataBasic();

  Map<String, Object?> getExternalFields() {
    return _externalFields;
  }

  Map<String, Object?> _copyExternalFields() {
    final result = <String, Object?>{};
    _externalFields.forEach((key, value) {
      if (value is IDataDynamic) {
        result[key] = value.copy();
      } else {
        result[key] = value;
      }
    });
    return result;
  }

  Object? getExternalField(String name) {
    return _externalFields[name];
  }

  @override
  Object? operator [](String name) {
    return _externalFields[name];
  }

  void setExternalField(String name, Object? value) {
    _externalFields[name] = value;
  }

  @override
  void operator []=(String name, Object? value) {
    _externalFields[name] = value;
  }
}

class IDataField {
  final String key;

  const IDataField(this.key);
}

class IDataEnum {
  final String value;

  final String label;

  const IDataEnum(this.value, this.label);

  @override
  int get hashCode {
    return value.hashCode;
  }

  @override
  bool operator ==(Object? other) {
    return other is IDataEnum &&
        runtimeType == other.runtimeType &&
        value == other.value;
  }

  @override
  String toString() {
    return '$runtimeType($value-$label)';
  }
}

class TypeEnumExcelHeaderType extends IDataEnum implements IDataDynamic{
  static const STRING = TypeEnumExcelHeaderType('STRING','字符串');

  static const NUMBER = TypeEnumExcelHeaderType('NUMBER','数字');

  static const values = {
     'STRING':STRING,
     'NUMBER':NUMBER,
  };

  const TypeEnumExcelHeaderType(super.value,super.label);

  static TypeEnumExcelHeaderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumExcelHeaderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumExcelHeaderType: [$data]');
  }

  static Object? toDynamic(TypeEnumExcelHeaderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumExcelHeaderType? deepCopy(TypeEnumExcelHeaderType? data) {
    return data;
  }

  @override
  TypeEnumExcelHeaderType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumTenantStatePO extends IDataEnum implements IDataDynamic{
  static const INITIAL = TypeEnumTenantStatePO('INITIAL','初始化');

  static const TRIAL = TypeEnumTenantStatePO('TRIAL','试用中');

  static const SUBSCRIBE = TypeEnumTenantStatePO('SUBSCRIBE','订阅中');

  static const values = {
     'INITIAL':INITIAL,
     'TRIAL':TRIAL,
     'SUBSCRIBE':SUBSCRIBE,
  };

  const TypeEnumTenantStatePO(super.value,super.label);

  static TypeEnumTenantStatePO? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumTenantStatePO(data, data);
    }
    throw FormatException('can not parse to TypeEnumTenantStatePO: [$data]');
  }

  static Object? toDynamic(TypeEnumTenantStatePO? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumTenantStatePO? deepCopy(TypeEnumTenantStatePO? data) {
    return data;
  }

  @override
  TypeEnumTenantStatePO copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumBackendTaskType extends IDataEnum implements IDataDynamic{
  static const IMPORT = TypeEnumBackendTaskType('IMPORT','导入');

  static const values = {
     'IMPORT':IMPORT,
  };

  const TypeEnumBackendTaskType(super.value,super.label);

  static TypeEnumBackendTaskType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskType(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskType: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumBackendTaskType? deepCopy(TypeEnumBackendTaskType? data) {
    return data;
  }

  @override
  TypeEnumBackendTaskType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterItemRegularType extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterItemRegularType('ALL','全部');

  static const REGULAR_TYPE = TypeEnumFilterItemRegularType('REGULAR_TYPE','备货款');

  static const NOT_REGULAR_TYPE = TypeEnumFilterItemRegularType('NOT_REGULAR_TYPE','订单款');

  static const values = {
     'ALL':ALL,
     'REGULAR_TYPE':REGULAR_TYPE,
     'NOT_REGULAR_TYPE':NOT_REGULAR_TYPE,
  };

  const TypeEnumFilterItemRegularType(super.value,super.label);

  static TypeEnumFilterItemRegularType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterItemRegularType(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterItemRegularType: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterItemRegularType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterItemRegularType? deepCopy(TypeEnumFilterItemRegularType? data) {
    return data;
  }

  @override
  TypeEnumFilterItemRegularType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumResourceDuplicateNameStrategy extends IDataEnum implements IDataDynamic{
  static const NOT_ALLOW = TypeEnumResourceDuplicateNameStrategy('NOT_ALLOW','不允许重复');

  static const ALLOW = TypeEnumResourceDuplicateNameStrategy('ALLOW','允许重复');

  static const ALLOW_BUT_REMIND = TypeEnumResourceDuplicateNameStrategy('ALLOW_BUT_REMIND','重复时提醒');

  static const values = {
     'NOT_ALLOW':NOT_ALLOW,
     'ALLOW':ALLOW,
     'ALLOW_BUT_REMIND':ALLOW_BUT_REMIND,
  };

  const TypeEnumResourceDuplicateNameStrategy(super.value,super.label);

  static TypeEnumResourceDuplicateNameStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumResourceDuplicateNameStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumResourceDuplicateNameStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumResourceDuplicateNameStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumResourceDuplicateNameStrategy? deepCopy(TypeEnumResourceDuplicateNameStrategy? data) {
    return data;
  }

  @override
  TypeEnumResourceDuplicateNameStrategy copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderNumberDateType extends IDataEnum implements IDataDynamic{
  static const YEAR = TypeEnumOrderNumberDateType('YEAR','按年');

  static const MONTH = TypeEnumOrderNumberDateType('MONTH','按年月');

  static const DAY = TypeEnumOrderNumberDateType('DAY','按年月日');

  static const values = {
     'YEAR':YEAR,
     'MONTH':MONTH,
     'DAY':DAY,
  };

  const TypeEnumOrderNumberDateType(super.value,super.label);

  static TypeEnumOrderNumberDateType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderNumberDateType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderNumberDateType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderNumberDateType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderNumberDateType? deepCopy(TypeEnumOrderNumberDateType? data) {
    return data;
  }

  @override
  TypeEnumOrderNumberDateType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumLiteItemImportWorkerFindingState extends IDataEnum implements IDataDynamic{
  static const LEFT_NUMBER = TypeEnumLiteItemImportWorkerFindingState('LEFT_NUMBER','左数字');

  static const LEFT_NAME = TypeEnumLiteItemImportWorkerFindingState('LEFT_NAME','左名称');

  static const RIGHT_NUMBER = TypeEnumLiteItemImportWorkerFindingState('RIGHT_NUMBER','右数字');

  static const RIGHT_NAME = TypeEnumLiteItemImportWorkerFindingState('RIGHT_NAME','右名称');

  static const values = {
     'LEFT_NUMBER':LEFT_NUMBER,
     'LEFT_NAME':LEFT_NAME,
     'RIGHT_NUMBER':RIGHT_NUMBER,
     'RIGHT_NAME':RIGHT_NAME,
  };

  const TypeEnumLiteItemImportWorkerFindingState(super.value,super.label);

  static TypeEnumLiteItemImportWorkerFindingState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumLiteItemImportWorkerFindingState(data, data);
    }
    throw FormatException('can not parse to TypeEnumLiteItemImportWorkerFindingState: [$data]');
  }

  static Object? toDynamic(TypeEnumLiteItemImportWorkerFindingState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumLiteItemImportWorkerFindingState? deepCopy(TypeEnumLiteItemImportWorkerFindingState? data) {
    return data;
  }

  @override
  TypeEnumLiteItemImportWorkerFindingState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderCustomInvoiceBackState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_BACK = TypeEnumOrderCustomInvoiceBackState('INVOICE_NOT_BACK','待回传');

  static const INVOICE_BACK = TypeEnumOrderCustomInvoiceBackState('INVOICE_BACK','已回传');

  static const values = {
     'INVOICE_NOT_BACK':INVOICE_NOT_BACK,
     'INVOICE_BACK':INVOICE_BACK,
  };

  const TypeEnumOrderCustomInvoiceBackState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceBackState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceBackState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceBackState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceBackState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderCustomInvoiceBackState? deepCopy(TypeEnumOrderCustomInvoiceBackState? data) {
    return data;
  }

  @override
  TypeEnumOrderCustomInvoiceBackState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumDateOrderType extends IDataEnum implements IDataDynamic{
  static const ORDER_DATE = TypeEnumDateOrderType('ORDER_DATE','单据日期');

  static const ENTRY_ACCOUNT_DATE = TypeEnumDateOrderType('ENTRY_ACCOUNT_DATE','入账日期');

  static const values = {
     'ORDER_DATE':ORDER_DATE,
     'ENTRY_ACCOUNT_DATE':ENTRY_ACCOUNT_DATE,
  };

  const TypeEnumDateOrderType(super.value,super.label);

  static TypeEnumDateOrderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumDateOrderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumDateOrderType: [$data]');
  }

  static Object? toDynamic(TypeEnumDateOrderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumDateOrderType? deepCopy(TypeEnumDateOrderType? data) {
    return data;
  }

  @override
  TypeEnumDateOrderType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumMainErrorCode extends IDataEnum implements IDataDynamic{
  static const E1_NORMAL = TypeEnumMainErrorCode('E1_NORMAL','普通业务错误');

  static const E50001_ORDER_DUPLICATE = TypeEnumMainErrorCode('E50001_ORDER_DUPLICATE','请勿重复提交订单');

  static const values = {
     'E1_NORMAL':E1_NORMAL,
     'E50001_ORDER_DUPLICATE':E50001_ORDER_DUPLICATE,
  };

  const TypeEnumMainErrorCode(super.value,super.label);

  static TypeEnumMainErrorCode? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumMainErrorCode(data, data);
    }
    throw FormatException('can not parse to TypeEnumMainErrorCode: [$data]');
  }

  static Object? toDynamic(TypeEnumMainErrorCode? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumMainErrorCode? deepCopy(TypeEnumMainErrorCode? data) {
    return data;
  }

  @override
  TypeEnumMainErrorCode copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterNumber extends IDataEnum implements IDataDynamic{
  static const GREATER_ZERO = TypeEnumFilterNumber('GREATER_ZERO','大于0');

  static const EQUAL_ZERO = TypeEnumFilterNumber('EQUAL_ZERO','等于0');

  static const LESS_ZERO = TypeEnumFilterNumber('LESS_ZERO','少于0');

  static const ALL = TypeEnumFilterNumber('ALL','全部');

  static const values = {
     'GREATER_ZERO':GREATER_ZERO,
     'EQUAL_ZERO':EQUAL_ZERO,
     'LESS_ZERO':LESS_ZERO,
     'ALL':ALL,
  };

  const TypeEnumFilterNumber(super.value,super.label);

  static TypeEnumFilterNumber? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterNumber(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterNumber: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterNumber? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterNumber? deepCopy(TypeEnumFilterNumber? data) {
    return data;
  }

  @override
  TypeEnumFilterNumber copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderArapType extends IDataEnum implements IDataDynamic{
  static const ACCOUNT_RECEIVABLE = TypeEnumOrderArapType('ACCOUNT_RECEIVABLE','应收');

  static const ACCOUNT_PAYABLE = TypeEnumOrderArapType('ACCOUNT_PAYABLE','应付');

  static const values = {
     'ACCOUNT_RECEIVABLE':ACCOUNT_RECEIVABLE,
     'ACCOUNT_PAYABLE':ACCOUNT_PAYABLE,
  };

  const TypeEnumOrderArapType(super.value,super.label);

  static TypeEnumOrderArapType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderArapType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderArapType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderArapType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderArapType? deepCopy(TypeEnumOrderArapType? data) {
    return data;
  }

  @override
  TypeEnumOrderArapType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumReportGroupTimeType extends IDataEnum implements IDataDynamic{
  static const DAY = TypeEnumReportGroupTimeType('DAY','按日');

  static const WEEK = TypeEnumReportGroupTimeType('WEEK','按周');

  static const MONTH = TypeEnumReportGroupTimeType('MONTH','按月');

  static const values = {
     'DAY':DAY,
     'WEEK':WEEK,
     'MONTH':MONTH,
  };

  const TypeEnumReportGroupTimeType(super.value,super.label);

  static TypeEnumReportGroupTimeType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumReportGroupTimeType(data, data);
    }
    throw FormatException('can not parse to TypeEnumReportGroupTimeType: [$data]');
  }

  static Object? toDynamic(TypeEnumReportGroupTimeType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumReportGroupTimeType? deepCopy(TypeEnumReportGroupTimeType? data) {
    return data;
  }

  @override
  TypeEnumReportGroupTimeType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderSubType extends IDataEnum implements IDataDynamic{
  static const INVOICE_TAX = TypeEnumOrderSubType('INVOICE_TAX','发票税额');

  static const values = {
     'INVOICE_TAX':INVOICE_TAX,
  };

  const TypeEnumOrderSubType(super.value,super.label);

  static TypeEnumOrderSubType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderSubType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderSubType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderSubType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderSubType? deepCopy(TypeEnumOrderSubType? data) {
    return data;
  }

  @override
  TypeEnumOrderSubType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy extends IDataEnum implements IDataDynamic{
  static const ITEM_ID_AND_AMOUNT = TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy('ITEM_ID_AND_AMOUNT','商品数量和规格');

  static const ORDER_ITEM_ID = TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy('ORDER_ITEM_ID','单据商品ID');

  static const values = {
     'ITEM_ID_AND_AMOUNT':ITEM_ID_AND_AMOUNT,
     'ORDER_ITEM_ID':ORDER_ITEM_ID,
  };

  const TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy(super.value,super.label);

  static TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? deepCopy(TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy? data) {
    return data;
  }

  @override
  TypeEnumOrderChangeItemUtilOrderChangeItemDiffStrategy copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderItemPivotQueryOrderItemPivotField extends IDataEnum implements IDataDynamic{
  static const FEE_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('FEE_TOTAL','单据金额');

  static const PRE_TAX_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('PRE_TAX_TOTAL','税前金额');

  static const COST_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('COST_TOTAL','成本金额');

  static const PROFIT_TOTAL = TypeEnumOrderItemPivotQueryOrderItemPivotField('PROFIT_TOTAL','毛利润');

  static const values = {
     'FEE_TOTAL':FEE_TOTAL,
     'PRE_TAX_TOTAL':PRE_TAX_TOTAL,
     'COST_TOTAL':COST_TOTAL,
     'PROFIT_TOTAL':PROFIT_TOTAL,
  };

  const TypeEnumOrderItemPivotQueryOrderItemPivotField(super.value,super.label);

  static TypeEnumOrderItemPivotQueryOrderItemPivotField? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderItemPivotQueryOrderItemPivotField(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderItemPivotQueryOrderItemPivotField: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderItemPivotQueryOrderItemPivotField? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderItemPivotQueryOrderItemPivotField? deepCopy(TypeEnumOrderItemPivotQueryOrderItemPivotField? data) {
    return data;
  }

  @override
  TypeEnumOrderItemPivotQueryOrderItemPivotField copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumBatchChangeSupportOrder extends IDataEnum implements IDataDynamic{
  static const SALES_OUT = TypeEnumBatchChangeSupportOrder('SALES_OUT','销售出库单');

  static const PURCHASE_RETURN = TypeEnumBatchChangeSupportOrder('PURCHASE_RETURN','采购退货单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumBatchChangeSupportOrder('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_LOSS = TypeEnumBatchChangeSupportOrder('STOCK_LOSS','库存报损单');

  static const SUB_CONTRACT_IN = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_IN','委外加工成品入库单');

  static const SUB_CONTRACT_RETURN = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_RETURN','委外加工原料退库单');

  static const SUB_CONTRACT_OUT = TypeEnumBatchChangeSupportOrder('SUB_CONTRACT_OUT','委外加工原料出库单');

  static const INITIAL_STOCK = TypeEnumBatchChangeSupportOrder('INITIAL_STOCK','期初库存');

  static const PURCHASE_IN = TypeEnumBatchChangeSupportOrder('PURCHASE_IN','采购入库单');

  static const SALES_RETURN = TypeEnumBatchChangeSupportOrder('SALES_RETURN','销售退货单');

  static const STOCK_OTHER_INBOUND = TypeEnumBatchChangeSupportOrder('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OVERFLOW = TypeEnumBatchChangeSupportOrder('STOCK_OVERFLOW','库存报溢单');

  static const values = {
     'SALES_OUT':SALES_OUT,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_LOSS':STOCK_LOSS,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'INITIAL_STOCK':INITIAL_STOCK,
     'PURCHASE_IN':PURCHASE_IN,
     'SALES_RETURN':SALES_RETURN,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
  };

  const TypeEnumBatchChangeSupportOrder(super.value,super.label);

  static TypeEnumBatchChangeSupportOrder? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBatchChangeSupportOrder(data, data);
    }
    throw FormatException('can not parse to TypeEnumBatchChangeSupportOrder: [$data]');
  }

  static Object? toDynamic(TypeEnumBatchChangeSupportOrder? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumBatchChangeSupportOrder? deepCopy(TypeEnumBatchChangeSupportOrder? data) {
    return data;
  }

  @override
  TypeEnumBatchChangeSupportOrder copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterInvoiceBackState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceBackState('ALL','全部');

  static const INVOICE_NOT_BACK = TypeEnumFilterInvoiceBackState('INVOICE_NOT_BACK','待回传');

  static const INVOICE_BACK = TypeEnumFilterInvoiceBackState('INVOICE_BACK','已回传');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_BACK':INVOICE_NOT_BACK,
     'INVOICE_BACK':INVOICE_BACK,
  };

  const TypeEnumFilterInvoiceBackState(super.value,super.label);

  static TypeEnumFilterInvoiceBackState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceBackState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceBackState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceBackState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterInvoiceBackState? deepCopy(TypeEnumFilterInvoiceBackState? data) {
    return data;
  }

  @override
  TypeEnumFilterInvoiceBackState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumItemCustomAbnormalState extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumItemCustomAbnormalState('NORMAL','正常');

  static const ABNORMAL_NOT_HANDLE = TypeEnumItemCustomAbnormalState('ABNORMAL_NOT_HANDLE','异常未处理');

  static const ABNORMAL_HANDLE = TypeEnumItemCustomAbnormalState('ABNORMAL_HANDLE','异常已处理');

  static const values = {
     'NORMAL':NORMAL,
     'ABNORMAL_NOT_HANDLE':ABNORMAL_NOT_HANDLE,
     'ABNORMAL_HANDLE':ABNORMAL_HANDLE,
  };

  const TypeEnumItemCustomAbnormalState(super.value,super.label);

  static TypeEnumItemCustomAbnormalState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumItemCustomAbnormalState(data, data);
    }
    throw FormatException('can not parse to TypeEnumItemCustomAbnormalState: [$data]');
  }

  static Object? toDynamic(TypeEnumItemCustomAbnormalState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumItemCustomAbnormalState? deepCopy(TypeEnumItemCustomAbnormalState? data) {
    return data;
  }

  @override
  TypeEnumItemCustomAbnormalState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumApiMethod extends IDataEnum implements IDataDynamic{
  static const GET = TypeEnumApiMethod('GET','GET');

  static const POST = TypeEnumApiMethod('POST','POST');

  static const values = {
     'GET':GET,
     'POST':POST,
  };

  const TypeEnumApiMethod(super.value,super.label);

  static TypeEnumApiMethod? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumApiMethod(data, data);
    }
    throw FormatException('can not parse to TypeEnumApiMethod: [$data]');
  }

  static Object? toDynamic(TypeEnumApiMethod? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumApiMethod? deepCopy(TypeEnumApiMethod? data) {
    return data;
  }

  @override
  TypeEnumApiMethod copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumColumnValueType extends IDataEnum implements IDataDynamic{
  static const NUMBER = TypeEnumColumnValueType('NUMBER','数字');

  static const STRING = TypeEnumColumnValueType('STRING','字符串');

  static const BOOLEAN = TypeEnumColumnValueType('BOOLEAN','布尔值');

  static const ARRAY_NUMBER = TypeEnumColumnValueType('ARRAY_NUMBER','数字数组');

  static const ARRAY_STRING = TypeEnumColumnValueType('ARRAY_STRING','字符数组');

  static const OPTION_NUMBER = TypeEnumColumnValueType('OPTION_NUMBER','数字值选项');

  static const OPTION_STRING = TypeEnumColumnValueType('OPTION_STRING','字符值选项');

  static const values = {
     'NUMBER':NUMBER,
     'STRING':STRING,
     'BOOLEAN':BOOLEAN,
     'ARRAY_NUMBER':ARRAY_NUMBER,
     'ARRAY_STRING':ARRAY_STRING,
     'OPTION_NUMBER':OPTION_NUMBER,
     'OPTION_STRING':OPTION_STRING,
  };

  const TypeEnumColumnValueType(super.value,super.label);

  static TypeEnumColumnValueType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumColumnValueType(data, data);
    }
    throw FormatException('can not parse to TypeEnumColumnValueType: [$data]');
  }

  static Object? toDynamic(TypeEnumColumnValueType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumColumnValueType? deepCopy(TypeEnumColumnValueType? data) {
    return data;
  }

  @override
  TypeEnumColumnValueType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumContactType extends IDataEnum implements IDataDynamic{
  static const CUSTOMER = TypeEnumContactType('CUSTOMER','客户');

  static const SUPPLIER = TypeEnumContactType('SUPPLIER','供应商');

  static const values = {
     'CUSTOMER':CUSTOMER,
     'SUPPLIER':SUPPLIER,
  };

  const TypeEnumContactType(super.value,super.label);

  static TypeEnumContactType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumContactType(data, data);
    }
    throw FormatException('can not parse to TypeEnumContactType: [$data]');
  }

  static Object? toDynamic(TypeEnumContactType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumContactType? deepCopy(TypeEnumContactType? data) {
    return data;
  }

  @override
  TypeEnumContactType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderPivotQueryOrderPivotField extends IDataEnum implements IDataDynamic{
  static const BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('BILL_TOTAL','单据金额');

  static const DONE_BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('DONE_BILL_TOTAL','已结算金额');

  static const UNDONE_BILL_TOTAL = TypeEnumOrderPivotQueryOrderPivotField('UNDONE_BILL_TOTAL','未结算金额');

  static const values = {
     'BILL_TOTAL':BILL_TOTAL,
     'DONE_BILL_TOTAL':DONE_BILL_TOTAL,
     'UNDONE_BILL_TOTAL':UNDONE_BILL_TOTAL,
  };

  const TypeEnumOrderPivotQueryOrderPivotField(super.value,super.label);

  static TypeEnumOrderPivotQueryOrderPivotField? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderPivotQueryOrderPivotField(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderPivotQueryOrderPivotField: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderPivotQueryOrderPivotField? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderPivotQueryOrderPivotField? deepCopy(TypeEnumOrderPivotQueryOrderPivotField? data) {
    return data;
  }

  @override
  TypeEnumOrderPivotQueryOrderPivotField copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumBatchChangeType extends IDataEnum implements IDataDynamic{
  static const CLEAR_AND_REPLAY = TypeEnumBatchChangeType('CLEAR_AND_REPLAY','先清空后出库');

  static const OTHER_OUT_STOCK_AND_IN_STOCK = TypeEnumBatchChangeType('OTHER_OUT_STOCK_AND_IN_STOCK','先出库后入库');

  static const LOCAL_CHANGE = TypeEnumBatchChangeType('LOCAL_CHANGE','直接改数量');

  static const values = {
     'CLEAR_AND_REPLAY':CLEAR_AND_REPLAY,
     'OTHER_OUT_STOCK_AND_IN_STOCK':OTHER_OUT_STOCK_AND_IN_STOCK,
     'LOCAL_CHANGE':LOCAL_CHANGE,
  };

  const TypeEnumBatchChangeType(super.value,super.label);

  static TypeEnumBatchChangeType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBatchChangeType(data, data);
    }
    throw FormatException('can not parse to TypeEnumBatchChangeType: [$data]');
  }

  static Object? toDynamic(TypeEnumBatchChangeType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumBatchChangeType? deepCopy(TypeEnumBatchChangeType? data) {
    return data;
  }

  @override
  TypeEnumBatchChangeType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterInvoiceSubmitState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceSubmitState('ALL','全部');

  static const INVOICE_NOT_SUBMIT = TypeEnumFilterInvoiceSubmitState('INVOICE_NOT_SUBMIT','待开票');

  static const INVOICE_SUBMIT = TypeEnumFilterInvoiceSubmitState('INVOICE_SUBMIT','已开票');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_SUBMIT':INVOICE_NOT_SUBMIT,
     'INVOICE_SUBMIT':INVOICE_SUBMIT,
  };

  const TypeEnumFilterInvoiceSubmitState(super.value,super.label);

  static TypeEnumFilterInvoiceSubmitState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceSubmitState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceSubmitState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceSubmitState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterInvoiceSubmitState? deepCopy(TypeEnumFilterInvoiceSubmitState? data) {
    return data;
  }

  @override
  TypeEnumFilterInvoiceSubmitState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterOrderExecuteState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterOrderExecuteState('ALL','全部');

  static const NOT_FINISH = TypeEnumFilterOrderExecuteState('NOT_FINISH','未完成');

  static const FINISH = TypeEnumFilterOrderExecuteState('FINISH','已完成');

  static const values = {
     'ALL':ALL,
     'NOT_FINISH':NOT_FINISH,
     'FINISH':FINISH,
  };

  const TypeEnumFilterOrderExecuteState(super.value,super.label);

  static TypeEnumFilterOrderExecuteState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterOrderExecuteState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterOrderExecuteState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterOrderExecuteState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterOrderExecuteState? deepCopy(TypeEnumFilterOrderExecuteState? data) {
    return data;
  }

  @override
  TypeEnumFilterOrderExecuteState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumBackendTaskRowState extends IDataEnum implements IDataDynamic{
  static const RUNNING = TypeEnumBackendTaskRowState('RUNNING','执行中');

  static const SUCCESS = TypeEnumBackendTaskRowState('SUCCESS','成功');

  static const FAIL = TypeEnumBackendTaskRowState('FAIL','失败');

  static const values = {
     'RUNNING':RUNNING,
     'SUCCESS':SUCCESS,
     'FAIL':FAIL,
  };

  const TypeEnumBackendTaskRowState(super.value,super.label);

  static TypeEnumBackendTaskRowState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskRowState(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskRowState: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskRowState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumBackendTaskRowState? deepCopy(TypeEnumBackendTaskRowState? data) {
    return data;
  }

  @override
  TypeEnumBackendTaskRowState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumSoftEnableIsEnable extends IDataEnum implements IDataDynamic{
  static const ENABLE = TypeEnumSoftEnableIsEnable('ENABLE','启用');

  static const DISABLE = TypeEnumSoftEnableIsEnable('DISABLE','停用');

  static const values = {
     'ENABLE':ENABLE,
     'DISABLE':DISABLE,
  };

  const TypeEnumSoftEnableIsEnable(super.value,super.label);

  static TypeEnumSoftEnableIsEnable? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumSoftEnableIsEnable(data, data);
    }
    throw FormatException('can not parse to TypeEnumSoftEnableIsEnable: [$data]');
  }

  static Object? toDynamic(TypeEnumSoftEnableIsEnable? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumSoftEnableIsEnable? deepCopy(TypeEnumSoftEnableIsEnable? data) {
    return data;
  }

  @override
  TypeEnumSoftEnableIsEnable copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumResourceSortStrategy extends IDataEnum implements IDataDynamic{
  static const NUMBER_ASC = TypeEnumResourceSortStrategy('NUMBER_ASC','按编号升序');

  static const NUMBER_DESC = TypeEnumResourceSortStrategy('NUMBER_DESC','按编号降序');

  static const NAME_ASC = TypeEnumResourceSortStrategy('NAME_ASC','按名称升序');

  static const NAME_DESC = TypeEnumResourceSortStrategy('NAME_DESC','按名称降序');

  static const values = {
     'NUMBER_ASC':NUMBER_ASC,
     'NUMBER_DESC':NUMBER_DESC,
     'NAME_ASC':NAME_ASC,
     'NAME_DESC':NAME_DESC,
  };

  const TypeEnumResourceSortStrategy(super.value,super.label);

  static TypeEnumResourceSortStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumResourceSortStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumResourceSortStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumResourceSortStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumResourceSortStrategy? deepCopy(TypeEnumResourceSortStrategy? data) {
    return data;
  }

  @override
  TypeEnumResourceSortStrategy copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderType extends IDataEnum implements IDataDynamic{
  static const INITIAL_STOCK = TypeEnumOrderType('INITIAL_STOCK','期初库存');

  static const INITIAL_ACCOUNT_RECEIVABLE = TypeEnumOrderType('INITIAL_ACCOUNT_RECEIVABLE','期初应收');

  static const INITIAL_ACCOUNT_PAYABLE = TypeEnumOrderType('INITIAL_ACCOUNT_PAYABLE','期初应付');

  static const INITIAL_ADVANCE_RECEIVABLE = TypeEnumOrderType('INITIAL_ADVANCE_RECEIVABLE','期初预收');

  static const INITIAL_ADVANCE_PAYABLE = TypeEnumOrderType('INITIAL_ADVANCE_PAYABLE','期初预付');

  static const SALES_REQUEST = TypeEnumOrderType('SALES_REQUEST','销售订单');

  static const SALES_REQUEST_CHANGE = TypeEnumOrderType('SALES_REQUEST_CHANGE','销售订单变更单');

  static const SALES_OUT = TypeEnumOrderType('SALES_OUT','销售出库单');

  static const SALES_OUT_CHANGE = TypeEnumOrderType('SALES_OUT_CHANGE','销售出库变更单');

  static const SALES_RETURN = TypeEnumOrderType('SALES_RETURN','销售退货单');

  static const SALES_RETURN_CHANGE = TypeEnumOrderType('SALES_RETURN_CHANGE','销售退货变更单');

  static const SALES_QUOTATION = TypeEnumOrderType('SALES_QUOTATION','销售报价单');

  static const SALES_RECEIPT = TypeEnumOrderType('SALES_RECEIPT','销售回执单');

  static const PURCHASE_REQUEST = TypeEnumOrderType('PURCHASE_REQUEST','采购订单');

  static const PURCHASE_REQUEST_CHANGE = TypeEnumOrderType('PURCHASE_REQUEST_CHANGE','采购订单变更单');

  static const PURCHASE_IN = TypeEnumOrderType('PURCHASE_IN','采购入库单');

  static const PURCHASE_IN_CHANGE = TypeEnumOrderType('PURCHASE_IN_CHANGE','采购入库变更单');

  static const PURCHASE_RETURN = TypeEnumOrderType('PURCHASE_RETURN','采购退货单');

  static const PURCHASE_RETURN_CHANGE = TypeEnumOrderType('PURCHASE_RETURN_CHANGE','采购退货变更单');

  static const PURCHASE_QUOTATION = TypeEnumOrderType('PURCHASE_QUOTATION','采购报价单');

  static const PURCHASE_DEMAND = TypeEnumOrderType('PURCHASE_DEMAND','采购报价单');

  static const PURCHASE_RECEIPT = TypeEnumOrderType('PURCHASE_RECEIPT','采购回执单');

  static const CASH_ADVANCE_RECEIVE = TypeEnumOrderType('CASH_ADVANCE_RECEIVE','预收款单');

  static const CASH_ADVANCE_PAY = TypeEnumOrderType('CASH_ADVANCE_PAY','预付款单');

  static const CASH_RECEIVE = TypeEnumOrderType('CASH_RECEIVE','收款单');

  static const CASH_PAY = TypeEnumOrderType('CASH_PAY','付款单');

  static const CASH_OTHER_INCOME = TypeEnumOrderType('CASH_OTHER_INCOME','其他收入单');

  static const CASH_OTHER_EXPENSE = TypeEnumOrderType('CASH_OTHER_EXPENSE','其他费用单');

  static const CASH_TRANSFER = TypeEnumOrderType('CASH_TRANSFER','科目转账单');

  static const CASH_CUSTOM_INVOICE = TypeEnumOrderType('CASH_CUSTOM_INVOICE','客户发票单');

  static const STOCK_OTHER_INBOUND = TypeEnumOrderType('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OTHER_INBOUND_CHANGE = TypeEnumOrderType('STOCK_OTHER_INBOUND_CHANGE','其他入库变更单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumOrderType('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_OTHER_OUTBOUND_CHANGE = TypeEnumOrderType('STOCK_OTHER_OUTBOUND_CHANGE','其他出库变更单');

  static const STOCK_TRANSFER = TypeEnumOrderType('STOCK_TRANSFER','调拨单');

  static const STOCK_TRANSFER_CHANGE = TypeEnumOrderType('STOCK_TRANSFER_CHANGE','调拨变更单');

  static const STOCK_LOSS = TypeEnumOrderType('STOCK_LOSS','库存报损单');

  static const STOCK_LOSS_CHANGE = TypeEnumOrderType('STOCK_LOSS_CHANGE','库存报损变更单');

  static const STOCK_OVERFLOW = TypeEnumOrderType('STOCK_OVERFLOW','库存报溢单');

  static const STOCK_OVERFLOW_CHANGE = TypeEnumOrderType('STOCK_OVERFLOW_CHANGE','库存报溢变更单');

  static const STOCK_ADJUST_PRICE = TypeEnumOrderType('STOCK_ADJUST_PRICE','库存成本调价单');

  static const STOCK_SINGLE_CHECK_POINT = TypeEnumOrderType('STOCK_SINGLE_CHECK_POINT','库存单次盘点单');

  static const STOCK_SPLIT_CHECK_POINT = TypeEnumOrderType('STOCK_SPLIT_CHECK_POINT','库存分量盘点单');

  static const STOCK_COMBINE_CHECK_POINT = TypeEnumOrderType('STOCK_COMBINE_CHECK_POINT','库存汇总盘点单');

  static const ACCOUNT_DOCUMENT = TypeEnumOrderType('ACCOUNT_DOCUMENT','会计凭证');

  static const SUB_CONTRACT_IN = TypeEnumOrderType('SUB_CONTRACT_IN','委外加工成品入库单');

  static const SUB_CONTRACT_IN_CHANGE = TypeEnumOrderType('SUB_CONTRACT_IN_CHANGE','委外加工成品入库变更单');

  static const SUB_CONTRACT_OUT = TypeEnumOrderType('SUB_CONTRACT_OUT','委外加工原料出库单');

  static const SUB_CONTRACT_OUT_CHANGE = TypeEnumOrderType('SUB_CONTRACT_OUT_CHANGE','委外加工原料出库变更单');

  static const SUB_CONTRACT_RETURN = TypeEnumOrderType('SUB_CONTRACT_RETURN','委外加工原料退库单');

  static const SUB_CONTRACT_RETURN_CHANGE = TypeEnumOrderType('SUB_CONTRACT_RETURN_CHANGE','委外加工原料退库变更单');

  static const values = {
     'INITIAL_STOCK':INITIAL_STOCK,
     'INITIAL_ACCOUNT_RECEIVABLE':INITIAL_ACCOUNT_RECEIVABLE,
     'INITIAL_ACCOUNT_PAYABLE':INITIAL_ACCOUNT_PAYABLE,
     'INITIAL_ADVANCE_RECEIVABLE':INITIAL_ADVANCE_RECEIVABLE,
     'INITIAL_ADVANCE_PAYABLE':INITIAL_ADVANCE_PAYABLE,
     'SALES_REQUEST':SALES_REQUEST,
     'SALES_REQUEST_CHANGE':SALES_REQUEST_CHANGE,
     'SALES_OUT':SALES_OUT,
     'SALES_OUT_CHANGE':SALES_OUT_CHANGE,
     'SALES_RETURN':SALES_RETURN,
     'SALES_RETURN_CHANGE':SALES_RETURN_CHANGE,
     'SALES_QUOTATION':SALES_QUOTATION,
     'SALES_RECEIPT':SALES_RECEIPT,
     'PURCHASE_REQUEST':PURCHASE_REQUEST,
     'PURCHASE_REQUEST_CHANGE':PURCHASE_REQUEST_CHANGE,
     'PURCHASE_IN':PURCHASE_IN,
     'PURCHASE_IN_CHANGE':PURCHASE_IN_CHANGE,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'PURCHASE_RETURN_CHANGE':PURCHASE_RETURN_CHANGE,
     'PURCHASE_QUOTATION':PURCHASE_QUOTATION,
     'PURCHASE_DEMAND':PURCHASE_DEMAND,
     'PURCHASE_RECEIPT':PURCHASE_RECEIPT,
     'CASH_ADVANCE_RECEIVE':CASH_ADVANCE_RECEIVE,
     'CASH_ADVANCE_PAY':CASH_ADVANCE_PAY,
     'CASH_RECEIVE':CASH_RECEIVE,
     'CASH_PAY':CASH_PAY,
     'CASH_OTHER_INCOME':CASH_OTHER_INCOME,
     'CASH_OTHER_EXPENSE':CASH_OTHER_EXPENSE,
     'CASH_TRANSFER':CASH_TRANSFER,
     'CASH_CUSTOM_INVOICE':CASH_CUSTOM_INVOICE,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_INBOUND_CHANGE':STOCK_OTHER_INBOUND_CHANGE,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_OTHER_OUTBOUND_CHANGE':STOCK_OTHER_OUTBOUND_CHANGE,
     'STOCK_TRANSFER':STOCK_TRANSFER,
     'STOCK_TRANSFER_CHANGE':STOCK_TRANSFER_CHANGE,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_LOSS_CHANGE':STOCK_LOSS_CHANGE,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_OVERFLOW_CHANGE':STOCK_OVERFLOW_CHANGE,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'STOCK_SINGLE_CHECK_POINT':STOCK_SINGLE_CHECK_POINT,
     'STOCK_SPLIT_CHECK_POINT':STOCK_SPLIT_CHECK_POINT,
     'STOCK_COMBINE_CHECK_POINT':STOCK_COMBINE_CHECK_POINT,
     'ACCOUNT_DOCUMENT':ACCOUNT_DOCUMENT,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_IN_CHANGE':SUB_CONTRACT_IN_CHANGE,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'SUB_CONTRACT_OUT_CHANGE':SUB_CONTRACT_OUT_CHANGE,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_RETURN_CHANGE':SUB_CONTRACT_RETURN_CHANGE,
  };

  const TypeEnumOrderType(super.value,super.label);

  static TypeEnumOrderType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderType? deepCopy(TypeEnumOrderType? data) {
    return data;
  }

  @override
  TypeEnumOrderType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountAuxiliary extends IDataEnum implements IDataDynamic{
  static const CONTACT = TypeEnumAccountAuxiliary('CONTACT','往来单位');

  static const EMPLOYEE = TypeEnumAccountAuxiliary('EMPLOYEE','职员');

  static const STORE = TypeEnumAccountAuxiliary('STORE','仓库');

  static const values = {
     'CONTACT':CONTACT,
     'EMPLOYEE':EMPLOYEE,
     'STORE':STORE,
  };

  const TypeEnumAccountAuxiliary(super.value,super.label);

  static TypeEnumAccountAuxiliary? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountAuxiliary(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountAuxiliary: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountAuxiliary? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountAuxiliary? deepCopy(TypeEnumAccountAuxiliary? data) {
    return data;
  }

  @override
  TypeEnumAccountAuxiliary copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderCustomInvoiceSubmitState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_SUBMIT = TypeEnumOrderCustomInvoiceSubmitState('INVOICE_NOT_SUBMIT','待开票');

  static const INVOICE_SUBMIT = TypeEnumOrderCustomInvoiceSubmitState('INVOICE_SUBMIT','已开票');

  static const values = {
     'INVOICE_NOT_SUBMIT':INVOICE_NOT_SUBMIT,
     'INVOICE_SUBMIT':INVOICE_SUBMIT,
  };

  const TypeEnumOrderCustomInvoiceSubmitState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceSubmitState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceSubmitState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceSubmitState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceSubmitState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderCustomInvoiceSubmitState? deepCopy(TypeEnumOrderCustomInvoiceSubmitState? data) {
    return data;
  }

  @override
  TypeEnumOrderCustomInvoiceSubmitState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountSubType extends IDataEnum implements IDataDynamic{
  static const CASH = TypeEnumAccountSubType('CASH','现金类');

  static const OTHER_INCOME = TypeEnumAccountSubType('OTHER_INCOME','其他收入类');

  static const OTHER_EXPENSE = TypeEnumAccountSubType('OTHER_EXPENSE','其他费用类');

  static const OTHER = TypeEnumAccountSubType('OTHER','其他类');

  static const values = {
     'CASH':CASH,
     'OTHER_INCOME':OTHER_INCOME,
     'OTHER_EXPENSE':OTHER_EXPENSE,
     'OTHER':OTHER,
  };

  const TypeEnumAccountSubType(super.value,super.label);

  static TypeEnumAccountSubType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountSubType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountSubType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountSubType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountSubType? deepCopy(TypeEnumAccountSubType? data) {
    return data;
  }

  @override
  TypeEnumAccountSubType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterOrderState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterOrderState('ALL','全部');

  static const ENTRY_ACCOUNT = TypeEnumFilterOrderState('ENTRY_ACCOUNT','仅入账');

  static const DRAFT = TypeEnumFilterOrderState('DRAFT','仅草稿');

  static const SUBMIT = TypeEnumFilterOrderState('SUBMIT','仅提交');

  static const CANCEL = TypeEnumFilterOrderState('CANCEL','仅取消');

  static const values = {
     'ALL':ALL,
     'ENTRY_ACCOUNT':ENTRY_ACCOUNT,
     'DRAFT':DRAFT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
  };

  const TypeEnumFilterOrderState(super.value,super.label);

  static TypeEnumFilterOrderState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterOrderState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterOrderState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterOrderState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterOrderState? deepCopy(TypeEnumFilterOrderState? data) {
    return data;
  }

  @override
  TypeEnumFilterOrderState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumBackendTaskState extends IDataEnum implements IDataDynamic{
  static const RUNNING = TypeEnumBackendTaskState('RUNNING','执行中');

  static const FINISH = TypeEnumBackendTaskState('FINISH','完成');

  static const FAIL = TypeEnumBackendTaskState('FAIL','失败');

  static const values = {
     'RUNNING':RUNNING,
     'FINISH':FINISH,
     'FAIL':FAIL,
  };

  const TypeEnumBackendTaskState(super.value,super.label);

  static TypeEnumBackendTaskState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumBackendTaskState(data, data);
    }
    throw FormatException('can not parse to TypeEnumBackendTaskState: [$data]');
  }

  static Object? toDynamic(TypeEnumBackendTaskState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumBackendTaskState? deepCopy(TypeEnumBackendTaskState? data) {
    return data;
  }

  @override
  TypeEnumBackendTaskState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOperation extends IDataEnum implements IDataDynamic{
  static const READ = TypeEnumOperation('READ','查看');

  static const PRINT = TypeEnumOperation('PRINT','打印');

  static const SUBMIT = TypeEnumOperation('SUBMIT','提交');

  static const CANCEL = TypeEnumOperation('CANCEL','取消');

  static const CREATE = TypeEnumOperation('CREATE','新增');

  static const DELETE = TypeEnumOperation('DELETE','删除');

  static const UPDATE = TypeEnumOperation('UPDATE','修改');

  static const ALLOW = TypeEnumOperation('ALLOW','允许');

  static const values = {
     'READ':READ,
     'PRINT':PRINT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
     'CREATE':CREATE,
     'DELETE':DELETE,
     'UPDATE':UPDATE,
     'ALLOW':ALLOW,
  };

  const TypeEnumOperation(super.value,super.label);

  static TypeEnumOperation? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOperation(data, data);
    }
    throw FormatException('can not parse to TypeEnumOperation: [$data]');
  }

  static Object? toDynamic(TypeEnumOperation? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOperation? deepCopy(TypeEnumOperation? data) {
    return data;
  }

  @override
  TypeEnumOperation copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterIsEnabled extends IDataEnum implements IDataDynamic{
  static const ENABLE = TypeEnumFilterIsEnabled('ENABLE','启用');

  static const DISABLE = TypeEnumFilterIsEnabled('DISABLE','停用');

  static const ALL = TypeEnumFilterIsEnabled('ALL','全部');

  static const values = {
     'ENABLE':ENABLE,
     'DISABLE':DISABLE,
     'ALL':ALL,
  };

  const TypeEnumFilterIsEnabled(super.value,super.label);

  static TypeEnumFilterIsEnabled? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterIsEnabled(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterIsEnabled: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterIsEnabled? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterIsEnabled? deepCopy(TypeEnumFilterIsEnabled? data) {
    return data;
  }

  @override
  TypeEnumFilterIsEnabled copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderRedState extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumOrderRedState('NORMAL','正常');

  static const BE_REVERSED = TypeEnumOrderRedState('BE_REVERSED','被红冲');

  static const REVERSE = TypeEnumOrderRedState('REVERSE','红冲');

  static const values = {
     'NORMAL':NORMAL,
     'BE_REVERSED':BE_REVERSED,
     'REVERSE':REVERSE,
  };

  const TypeEnumOrderRedState(super.value,super.label);

  static TypeEnumOrderRedState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderRedState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderRedState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderRedState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderRedState? deepCopy(TypeEnumOrderRedState? data) {
    return data;
  }

  @override
  TypeEnumOrderRedState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountPredefine extends IDataEnum implements IDataDynamic{
  static const SALES_OUT = TypeEnumAccountPredefine('SALES_OUT','销售收入');

  static const SALES_COST = TypeEnumAccountPredefine('SALES_COST','销售成本');

  static const STOCK_ITEM = TypeEnumAccountPredefine('STOCK_ITEM','库存商品');

  static const SUB_CONTRACT_STOCK_ITEM = TypeEnumAccountPredefine('SUB_CONTRACT_STOCK_ITEM','委外加工物资');

  static const PURCHASE_RETURN_EXPENSE = TypeEnumAccountPredefine('PURCHASE_RETURN_EXPENSE','采购退货费用');

  static const SALES_DISCOUNT = TypeEnumAccountPredefine('SALES_DISCOUNT','销售优惠金额');

  static const PURCHASE_DISCOUNT = TypeEnumAccountPredefine('PURCHASE_DISCOUNT','采购优惠金额');

  static const STOCK_OTHER_INBOUND = TypeEnumAccountPredefine('STOCK_OTHER_INBOUND','其他入库收入');

  static const STOCK_OTHER_OUTBOUND = TypeEnumAccountPredefine('STOCK_OTHER_OUTBOUND','其他出库费用');

  static const STOCK_LOSS = TypeEnumAccountPredefine('STOCK_LOSS','商品报损费用');

  static const STOCK_OVERFLOW = TypeEnumAccountPredefine('STOCK_OVERFLOW','商品报溢收入');

  static const STOCK_ADJUST_PRICE = TypeEnumAccountPredefine('STOCK_ADJUST_PRICE','商品调价收入');

  static const VALUE_ADDED_TAX_SALES = TypeEnumAccountPredefine('VALUE_ADDED_TAX_SALES','应交增值税_销项税额');

  static const VALUE_ADDED_TAX_PURCHASE = TypeEnumAccountPredefine('VALUE_ADDED_TAX_PURCHASE','应交增值税_进项税额');

  static const ACCOUNT_RECEIVABLE = TypeEnumAccountPredefine('ACCOUNT_RECEIVABLE','应收账款');

  static const ACCOUNT_PAYABLE = TypeEnumAccountPredefine('ACCOUNT_PAYABLE','应付账款');

  static const ADVANCE_RECEIVABLE = TypeEnumAccountPredefine('ADVANCE_RECEIVABLE','预收账款');

  static const ADVANCE_PAYABLE = TypeEnumAccountPredefine('ADVANCE_PAYABLE','预付账款');

  static const CURRENT_YEAR_PROFIT = TypeEnumAccountPredefine('CURRENT_YEAR_PROFIT','本年利润');

  static const INITIAL_OWNER = TypeEnumAccountPredefine('INITIAL_OWNER','期初资本');

  static const CASH = TypeEnumAccountPredefine('CASH','库存现金');

  static const WEIXIN = TypeEnumAccountPredefine('WEIXIN','微信');

  static const ALIPAY = TypeEnumAccountPredefine('ALIPAY','支付宝');

  static const OTHER_EXPENSE_BUILD_TEAM = TypeEnumAccountPredefine('OTHER_EXPENSE_BUILD_TEAM','团建费用');

  static const OTHER_EXPENSE_SALARY = TypeEnumAccountPredefine('OTHER_EXPENSE_SALARY','工资');

  static const OTHER_INCOME_RENT = TypeEnumAccountPredefine('OTHER_INCOME_RENT','租金收入');

  static const OTHER_INCOME_LAW = TypeEnumAccountPredefine('OTHER_INCOME_LAW','罚没收入');

  static const OTHER_INCOME_TRADE_OTHER = TypeEnumAccountPredefine('OTHER_INCOME_TRADE_OTHER','营业外收入');

  static const values = {
     'SALES_OUT':SALES_OUT,
     'SALES_COST':SALES_COST,
     'STOCK_ITEM':STOCK_ITEM,
     'SUB_CONTRACT_STOCK_ITEM':SUB_CONTRACT_STOCK_ITEM,
     'PURCHASE_RETURN_EXPENSE':PURCHASE_RETURN_EXPENSE,
     'SALES_DISCOUNT':SALES_DISCOUNT,
     'PURCHASE_DISCOUNT':PURCHASE_DISCOUNT,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'VALUE_ADDED_TAX_SALES':VALUE_ADDED_TAX_SALES,
     'VALUE_ADDED_TAX_PURCHASE':VALUE_ADDED_TAX_PURCHASE,
     'ACCOUNT_RECEIVABLE':ACCOUNT_RECEIVABLE,
     'ACCOUNT_PAYABLE':ACCOUNT_PAYABLE,
     'ADVANCE_RECEIVABLE':ADVANCE_RECEIVABLE,
     'ADVANCE_PAYABLE':ADVANCE_PAYABLE,
     'CURRENT_YEAR_PROFIT':CURRENT_YEAR_PROFIT,
     'INITIAL_OWNER':INITIAL_OWNER,
     'CASH':CASH,
     'WEIXIN':WEIXIN,
     'ALIPAY':ALIPAY,
     'OTHER_EXPENSE_BUILD_TEAM':OTHER_EXPENSE_BUILD_TEAM,
     'OTHER_EXPENSE_SALARY':OTHER_EXPENSE_SALARY,
     'OTHER_INCOME_RENT':OTHER_INCOME_RENT,
     'OTHER_INCOME_LAW':OTHER_INCOME_LAW,
     'OTHER_INCOME_TRADE_OTHER':OTHER_INCOME_TRADE_OTHER,
  };

  const TypeEnumAccountPredefine(super.value,super.label);

  static TypeEnumAccountPredefine? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountPredefine(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountPredefine: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountPredefine? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountPredefine? deepCopy(TypeEnumAccountPredefine? data) {
    return data;
  }

  @override
  TypeEnumAccountPredefine copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumStockAutoDecreaseAmountStrategy extends IDataEnum implements IDataDynamic{
  static const FIFO = TypeEnumStockAutoDecreaseAmountStrategy('FIFO','先进先出');

  static const LIFO = TypeEnumStockAutoDecreaseAmountStrategy('LIFO','后进先出');

  static const values = {
     'FIFO':FIFO,
     'LIFO':LIFO,
  };

  const TypeEnumStockAutoDecreaseAmountStrategy(super.value,super.label);

  static TypeEnumStockAutoDecreaseAmountStrategy? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumStockAutoDecreaseAmountStrategy(data, data);
    }
    throw FormatException('can not parse to TypeEnumStockAutoDecreaseAmountStrategy: [$data]');
  }

  static Object? toDynamic(TypeEnumStockAutoDecreaseAmountStrategy? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumStockAutoDecreaseAmountStrategy? deepCopy(TypeEnumStockAutoDecreaseAmountStrategy? data) {
    return data;
  }

  @override
  TypeEnumStockAutoDecreaseAmountStrategy copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOperatorRole extends IDataEnum implements IDataDynamic{
  static const ADMIN = TypeEnumOperatorRole('ADMIN','管理员');

  static const USER = TypeEnumOperatorRole('USER','登录用户');

  static const values = {
     'ADMIN':ADMIN,
     'USER':USER,
  };

  const TypeEnumOperatorRole(super.value,super.label);

  static TypeEnumOperatorRole? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOperatorRole(data, data);
    }
    throw FormatException('can not parse to TypeEnumOperatorRole: [$data]');
  }

  static Object? toDynamic(TypeEnumOperatorRole? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOperatorRole? deepCopy(TypeEnumOperatorRole? data) {
    return data;
  }

  @override
  TypeEnumOperatorRole copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountBalanceCheckType extends IDataEnum implements IDataDynamic{
  static const DEBIT_NOT_NEGATIVE = TypeEnumAccountBalanceCheckType('DEBIT_NOT_NEGATIVE','借方向余额不能为负数');

  static const CREDIT_NOT_NEGATIVE = TypeEnumAccountBalanceCheckType('CREDIT_NOT_NEGATIVE','贷方向余额不能为负数');

  static const OTHER = TypeEnumAccountBalanceCheckType('OTHER','无限制');

  static const values = {
     'DEBIT_NOT_NEGATIVE':DEBIT_NOT_NEGATIVE,
     'CREDIT_NOT_NEGATIVE':CREDIT_NOT_NEGATIVE,
     'OTHER':OTHER,
  };

  const TypeEnumAccountBalanceCheckType(super.value,super.label);

  static TypeEnumAccountBalanceCheckType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountBalanceCheckType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountBalanceCheckType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountBalanceCheckType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountBalanceCheckType? deepCopy(TypeEnumAccountBalanceCheckType? data) {
    return data;
  }

  @override
  TypeEnumAccountBalanceCheckType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderOrderItemStockRemainType extends IDataEnum implements IDataDynamic{
  static const NORMAL = TypeEnumOrderOrderItemStockRemainType('NORMAL','普通');

  static const FIXED_AIR = TypeEnumOrderOrderItemStockRemainType('FIXED_AIR','固定空气垫片');

  static const FLOAT_AIR = TypeEnumOrderOrderItemStockRemainType('FLOAT_AIR','浮动空气垫片');

  static const values = {
     'NORMAL':NORMAL,
     'FIXED_AIR':FIXED_AIR,
     'FLOAT_AIR':FLOAT_AIR,
  };

  const TypeEnumOrderOrderItemStockRemainType(super.value,super.label);

  static TypeEnumOrderOrderItemStockRemainType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderOrderItemStockRemainType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderOrderItemStockRemainType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderOrderItemStockRemainType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderOrderItemStockRemainType? deepCopy(TypeEnumOrderOrderItemStockRemainType? data) {
    return data;
  }

  @override
  TypeEnumOrderOrderItemStockRemainType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderCustomInvoiceBillState extends IDataEnum implements IDataDynamic{
  static const INVOICE_NOT_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_NOT_BILL','待结算');

  static const INVOICE_PART_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_PART_BILL','部分结算');

  static const INVOICE_ALL_BILL = TypeEnumOrderCustomInvoiceBillState('INVOICE_ALL_BILL','完成结算');

  static const values = {
     'INVOICE_NOT_BILL':INVOICE_NOT_BILL,
     'INVOICE_PART_BILL':INVOICE_PART_BILL,
     'INVOICE_ALL_BILL':INVOICE_ALL_BILL,
  };

  const TypeEnumOrderCustomInvoiceBillState(super.value,super.label);

  static TypeEnumOrderCustomInvoiceBillState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderCustomInvoiceBillState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderCustomInvoiceBillState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderCustomInvoiceBillState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderCustomInvoiceBillState? deepCopy(TypeEnumOrderCustomInvoiceBillState? data) {
    return data;
  }

  @override
  TypeEnumOrderCustomInvoiceBillState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAvailableStockType extends IDataEnum implements IDataDynamic{
  static const ONLY_BOOK_STOCK = TypeEnumAvailableStockType('ONLY_BOOK_STOCK','账面库存');

  static const BOOK_STOCK_AND_WAITING_OUT = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_OUT','账面库存 - 待发货');

  static const BOOK_STOCK_AND_WAITING_IN = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_IN','账面库存 + 待收货');

  static const BOOK_STOCK_AND_WAITING_OUT_AND_IN = TypeEnumAvailableStockType('BOOK_STOCK_AND_WAITING_OUT_AND_IN','账面库存 + 待收货 - 待发货');

  static const values = {
     'ONLY_BOOK_STOCK':ONLY_BOOK_STOCK,
     'BOOK_STOCK_AND_WAITING_OUT':BOOK_STOCK_AND_WAITING_OUT,
     'BOOK_STOCK_AND_WAITING_IN':BOOK_STOCK_AND_WAITING_IN,
     'BOOK_STOCK_AND_WAITING_OUT_AND_IN':BOOK_STOCK_AND_WAITING_OUT_AND_IN,
  };

  const TypeEnumAvailableStockType(super.value,super.label);

  static TypeEnumAvailableStockType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAvailableStockType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAvailableStockType: [$data]');
  }

  static Object? toDynamic(TypeEnumAvailableStockType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAvailableStockType? deepCopy(TypeEnumAvailableStockType? data) {
    return data;
  }

  @override
  TypeEnumAvailableStockType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderState extends IDataEnum implements IDataDynamic{
  static const DRAFT = TypeEnumOrderState('DRAFT','草稿');

  static const SUBMIT = TypeEnumOrderState('SUBMIT','提交');

  static const CANCEL = TypeEnumOrderState('CANCEL','取消');

  static const ENTRY_ACCOUNT = TypeEnumOrderState('ENTRY_ACCOUNT','已入账');

  static const values = {
     'DRAFT':DRAFT,
     'SUBMIT':SUBMIT,
     'CANCEL':CANCEL,
     'ENTRY_ACCOUNT':ENTRY_ACCOUNT,
  };

  const TypeEnumOrderState(super.value,super.label);

  static TypeEnumOrderState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderState(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderState: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderState? deepCopy(TypeEnumOrderState? data) {
    return data;
  }

  @override
  TypeEnumOrderState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumColumnShowType extends IDataEnum implements IDataDynamic{
  static const MUST_SHOW = TypeEnumColumnShowType('MUST_SHOW','必须显示');

  static const MUST_NOT_SHOW = TypeEnumColumnShowType('MUST_NOT_SHOW','必须不显示');

  static const FREE_SHOW = TypeEnumColumnShowType('FREE_SHOW','自由显示');

  static const values = {
     'MUST_SHOW':MUST_SHOW,
     'MUST_NOT_SHOW':MUST_NOT_SHOW,
     'FREE_SHOW':FREE_SHOW,
  };

  const TypeEnumColumnShowType(super.value,super.label);

  static TypeEnumColumnShowType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumColumnShowType(data, data);
    }
    throw FormatException('can not parse to TypeEnumColumnShowType: [$data]');
  }

  static Object? toDynamic(TypeEnumColumnShowType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumColumnShowType? deepCopy(TypeEnumColumnShowType? data) {
    return data;
  }

  @override
  TypeEnumColumnShowType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderDocumentType extends IDataEnum implements IDataDynamic{
  static const SYSTEM = TypeEnumOrderDocumentType('SYSTEM','系统');

  static const MANUAL = TypeEnumOrderDocumentType('MANUAL','手动');

  static const values = {
     'SYSTEM':SYSTEM,
     'MANUAL':MANUAL,
  };

  const TypeEnumOrderDocumentType(super.value,super.label);

  static TypeEnumOrderDocumentType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderDocumentType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderDocumentType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderDocumentType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderDocumentType? deepCopy(TypeEnumOrderDocumentType? data) {
    return data;
  }

  @override
  TypeEnumOrderDocumentType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumEntity extends IDataEnum implements IDataDynamic{
  static const SALES_REQUEST = TypeEnumEntity('SALES_REQUEST','销售订单');

  static const SALES_REQUEST_CHANGE = TypeEnumEntity('SALES_REQUEST_CHANGE','销售订单变更');

  static const SALES_OUT = TypeEnumEntity('SALES_OUT','销售出库单');

  static const SALES_OUT_CHANGE = TypeEnumEntity('SALES_OUT_CHANGE','销售出库变更单');

  static const SALES_RETURN = TypeEnumEntity('SALES_RETURN','销售退货单');

  static const SALES_RETURN_CHANGE = TypeEnumEntity('SALES_RETURN_CHANGE','销售退货变更单');

  static const SALES_QUOTATION = TypeEnumEntity('SALES_QUOTATION','销售报价单');

  static const SALES_RECEIPT = TypeEnumEntity('SALES_RECEIPT','销售回执单');

  static const SALES_REQUEST_DETAIL = TypeEnumEntity('SALES_REQUEST_DETAIL','销售订单跟踪');

  static const SALES_DETAIL = TypeEnumEntity('SALES_DETAIL','销售明细');

  static const SALES_CHANGE_HISTORY = TypeEnumEntity('SALES_CHANGE_HISTORY','销售变更历史');

  static const SALES_PRICE_TRACK = TypeEnumEntity('SALES_PRICE_TRACK','销售报价跟踪');

  static const PURCHASE_ITEM_REGULAR_TYPE = TypeEnumEntity('PURCHASE_ITEM_REGULAR_TYPE','商品备货款配置');

  static const PURCHASE_STOCK_REPLENISH = TypeEnumEntity('PURCHASE_STOCK_REPLENISH','智能备货');

  static const PURCHASE_REQUEST = TypeEnumEntity('PURCHASE_REQUEST','采购订单');

  static const PURCHASE_REQUEST_CHANGE = TypeEnumEntity('PURCHASE_REQUEST_CHANGE','采购订单变更');

  static const PURCHASE_IN = TypeEnumEntity('PURCHASE_IN','采购入库单');

  static const PURCHASE_IN_CHANGE = TypeEnumEntity('PURCHASE_IN_CHANGE','采购入库变更单');

  static const PURCHASE_RETURN = TypeEnumEntity('PURCHASE_RETURN','采购退货单');

  static const PURCHASE_RETURN_CHANGE = TypeEnumEntity('PURCHASE_RETURN_CHANGE','采购退货变更单');

  static const PURCHASE_QUOTATION = TypeEnumEntity('PURCHASE_QUOTATION','采购报价单');

  static const PURCHASE_DEMAND = TypeEnumEntity('PURCHASE_DEMAND','采购申请单');

  static const PURCHASE_RECEIPT = TypeEnumEntity('PURCHASE_RECEIPT','采购回执单');

  static const PURCHASE_REQUEST_DETAIL = TypeEnumEntity('PURCHASE_REQUEST_DETAIL','采购订单跟踪');

  static const PURCHASE_DETAIL = TypeEnumEntity('PURCHASE_DETAIL','采购明细');

  static const PURCHASE_CHANGE_HISTORY = TypeEnumEntity('PURCHASE_CHANGE_HISTORY','采购变更明细');

  static const PURCHASE_PRICE_TRACK = TypeEnumEntity('PURCHASE_PRICE_TRACK','采购报价跟踪');

  static const SUB_CONTRACT_ASSEMBLE_TEMPLATE = TypeEnumEntity('SUB_CONTRACT_ASSEMBLE_TEMPLATE','生产模板');

  static const SUB_CONTRACT_STOCK = TypeEnumEntity('SUB_CONTRACT_STOCK','委外库存');

  static const SUB_CONTRACT_STOCK_REMAIN = TypeEnumEntity('SUB_CONTRACT_STOCK_REMAIN','委外库存批次');

  static const SUB_CONTRACT_OUT = TypeEnumEntity('SUB_CONTRACT_OUT','原料出库单');

  static const SUB_CONTRACT_OUT_CHANGE = TypeEnumEntity('SUB_CONTRACT_OUT_CHANGE','原料出库变更单');

  static const SUB_CONTRACT_RETURN = TypeEnumEntity('SUB_CONTRACT_RETURN','原料退库单');

  static const SUB_CONTRACT_RETURN_CHANGE = TypeEnumEntity('SUB_CONTRACT_RETURN_CHANGE','原料退货变更单');

  static const SUB_CONTRACT_IN = TypeEnumEntity('SUB_CONTRACT_IN','成品入库单');

  static const SUB_CONTRACT_IN_CHANGE = TypeEnumEntity('SUB_CONTRACT_IN_CHANGE','成品入库变更单');

  static const STOCK_OTHER_INBOUND = TypeEnumEntity('STOCK_OTHER_INBOUND','其他入库单');

  static const STOCK_OTHER_INBOUND_CHANGE = TypeEnumEntity('STOCK_OTHER_INBOUND_CHANGE','其他入库变更单');

  static const STOCK_OTHER_OUTBOUND = TypeEnumEntity('STOCK_OTHER_OUTBOUND','其他出库单');

  static const STOCK_OTHER_OUTBOUND_CHANGE = TypeEnumEntity('STOCK_OTHER_OUTBOUND_CHANGE','其他出库变更单');

  static const STOCK_TRANSFER = TypeEnumEntity('STOCK_TRANSFER','调拨单');

  static const STOCK_TRANSFER_CHANGE = TypeEnumEntity('STOCK_TRANSFER_CHANGE','调拨变更单');

  static const STOCK_ADJUST_PRICE = TypeEnumEntity('STOCK_ADJUST_PRICE','成本调价单');

  static const STOCK_OVERFLOW = TypeEnumEntity('STOCK_OVERFLOW','库存报溢单');

  static const STOCK_OVERFLOW_CHANGE = TypeEnumEntity('STOCK_OVERFLOW_CHANGE','库存报溢变更单');

  static const STOCK_LOSS = TypeEnumEntity('STOCK_LOSS','库存报损单');

  static const STOCK_LOSS_CHANGE = TypeEnumEntity('STOCK_LOSS_CHANGE','库存报损变更单');

  static const STOCK_SINGLE_CHECK_POINT = TypeEnumEntity('STOCK_SINGLE_CHECK_POINT','单次盘点单');

  static const STOCK_SPLIT_CHECK_POINT = TypeEnumEntity('STOCK_SPLIT_CHECK_POINT','分量盘点单');

  static const STOCK_COMBINE_CHECK_POINT = TypeEnumEntity('STOCK_COMBINE_CHECK_POINT','汇总盘点单');

  static const STOCK_DETAIL = TypeEnumEntity('STOCK_DETAIL','仓库明细');

  static const BILL_ADVANCE_RECEIVABLE = TypeEnumEntity('BILL_ADVANCE_RECEIVABLE','预收款单');

  static const BILL_UN_RECEIVABLE_LIST = TypeEnumEntity('BILL_UN_RECEIVABLE_LIST','未收款单据列表');

  static const BILL_RECEIVABLE = TypeEnumEntity('BILL_RECEIVABLE','收款单');

  static const BILL_RECEIVABLE_DETAIL = TypeEnumEntity('BILL_RECEIVABLE_DETAIL','收款明细');

  static const BILL_ADVANCE_PAYABLE = TypeEnumEntity('BILL_ADVANCE_PAYABLE','预付款单');

  static const BILL_UN_PAYABLE_LIST = TypeEnumEntity('BILL_UN_PAYABLE_LIST','未付款单据列表');

  static const BILL_PAYABLE = TypeEnumEntity('BILL_PAYABLE','付款单');

  static const BILL_PAYABLE_DETAIL = TypeEnumEntity('BILL_PAYABLE_DETAIL','付款明细');

  static const BILL_OTHER_INCOME = TypeEnumEntity('BILL_OTHER_INCOME','其他收入单');

  static const BILL_OTHER_EXPENSE = TypeEnumEntity('BILL_OTHER_EXPENSE','其他费用单');

  static const BILL_TRANSFER = TypeEnumEntity('BILL_TRANSFER','科目转款单');

  static const BILL_CUSTOM_INVOICE = TypeEnumEntity('BILL_CUSTOM_INVOICE','客户发票单');

  static const BILL_CASH = TypeEnumEntity('BILL_CASH','查资金');

  static const BILL_ARAP_RECEIVABLE = TypeEnumEntity('BILL_ARAP_RECEIVABLE','查应收');

  static const BILL_ARAP_PAYABLE = TypeEnumEntity('BILL_ARAP_PAYABLE','查应付');

  static const BILL_ACCOUNT_EXPENSE = TypeEnumEntity('BILL_ACCOUNT_EXPENSE','查其他费用');

  static const BILL_ACCOUNT_INCOME = TypeEnumEntity('BILL_ACCOUNT_INCOME','查其他收入');

  static const BILL_ACCOUNT_DOCUMENT = TypeEnumEntity('BILL_ACCOUNT_DOCUMENT','会计凭证');

  static const REPORT_STOCK_ITEM = TypeEnumEntity('REPORT_STOCK_ITEM','库存-按商品');

  static const REPORT_STOCK_REMAIN = TypeEnumEntity('REPORT_STOCK_REMAIN','库存-按批次');

  static const REPORT_BILL_RECEIVABLE_DATE = TypeEnumEntity('REPORT_BILL_RECEIVABLE_DATE','未收款单据-按日周月');

  static const REPORT_BILL_RECEIVABLE_CUSTOM = TypeEnumEntity('REPORT_BILL_RECEIVABLE_CUSTOM','未收款单据-按客户');

  static const REPORT_BILL_RECEIVABLE_MANAGE = TypeEnumEntity('REPORT_BILL_RECEIVABLE_MANAGE','未收款单据-按经手人');

  static const REPORT_BILL_PAYABLE_DATE = TypeEnumEntity('REPORT_BILL_PAYABLE_DATE','未付款单据-按日周月');

  static const REPORT_BILL_PAYABLE_SUPPLIER = TypeEnumEntity('REPORT_BILL_PAYABLE_SUPPLIER','未付款单据-按供应商');

  static const REPORT_BILL_PAYABLE_MANAGE = TypeEnumEntity('REPORT_BILL_PAYABLE_MANAGE','未付款单据-按经手人');

  static const REPORT_SALES_DATE = TypeEnumEntity('REPORT_SALES_DATE','销售-按日周月');

  static const REPORT_SALES_ITEM = TypeEnumEntity('REPORT_SALES_ITEM','销售-按商品');

  static const REPORT_SALES_CUSTOM = TypeEnumEntity('REPORT_SALES_CUSTOM','销售-按客户');

  static const REPORT_SALES_MANAGE = TypeEnumEntity('REPORT_SALES_MANAGE','销售-按经手人');

  static const REPORT_PURCHASE_DATE = TypeEnumEntity('REPORT_PURCHASE_DATE','采购-按日周月');

  static const REPORT_PURCHASE_ITEM = TypeEnumEntity('REPORT_PURCHASE_ITEM','采购-按商品');

  static const REPORT_PURCHASE_SUPPLIER = TypeEnumEntity('REPORT_PURCHASE_SUPPLIER','采购-按供应商');

  static const REPORT_PURCHASE_MANAGE = TypeEnumEntity('REPORT_PURCHASE_MANAGE','采购-按经手人');

  static const REPORT_GALLERY_ALL = TypeEnumEntity('REPORT_GALLERY_ALL','经营报表');

  static const RESOURCE_ITEM = TypeEnumEntity('RESOURCE_ITEM','商品');

  static const RESOURCE_CUSTOM = TypeEnumEntity('RESOURCE_CUSTOM','客户');

  static const RESOURCE_SUPPLIER = TypeEnumEntity('RESOURCE_SUPPLIER','供应商');

  static const RESOURCE_ACCOUNT = TypeEnumEntity('RESOURCE_ACCOUNT','会计科目');

  static const RESOURCE_STORE = TypeEnumEntity('RESOURCE_STORE','仓库');

  static const RESOURCE_UNIT = TypeEnumEntity('RESOURCE_UNIT','单位');

  static const RESOURCE_STOCK_INIT = TypeEnumEntity('RESOURCE_STOCK_INIT','期初库存');

  static const RESOURCE_ACCOUNT_RECEIVABLE_INIT = TypeEnumEntity('RESOURCE_ACCOUNT_RECEIVABLE_INIT','期初应收');

  static const RESOURCE_ACCOUNT_PAYABLE_INIT = TypeEnumEntity('RESOURCE_ACCOUNT_PAYABLE_INIT','期初应付');

  static const SYSTEM_EMPLOYEE = TypeEnumEntity('SYSTEM_EMPLOYEE','雇员');

  static const SYSTEM_OPERATOR = TypeEnumEntity('SYSTEM_OPERATOR','操作员');

  static const SYSTEM_OPERATOR_ROLE = TypeEnumEntity('SYSTEM_OPERATOR_ROLE','操作员角色');

  static const SYSTEM_TENANT = TypeEnumEntity('SYSTEM_TENANT','公司资料');

  static const SYSTEM_CONFIG_OPEN = TypeEnumEntity('SYSTEM_CONFIG_OPEN','系统开账');

  static const SYSTEM_CONFIG_RESET = TypeEnumEntity('SYSTEM_CONFIG_RESET','系统重置');

  static const SYSTEM_CONFIG_SETTING = TypeEnumEntity('SYSTEM_CONFIG_SETTING','系统配置');

  static const SYSTEM_MENU_CONFIG = TypeEnumEntity('SYSTEM_MENU_CONFIG','菜单配置');

  static const SYSTEM_BACKEND_TASK = TypeEnumEntity('SYSTEM_BACKEND_TASK','后台任务');

  static const SYSTEM_ATTACHMENT = TypeEnumEntity('SYSTEM_ATTACHMENT','单据附件');

  static const SYSTEM_IMAGE = TypeEnumEntity('SYSTEM_IMAGE','图片空间');

  static const COLUMN_VIEW_SALES_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_SALES_ORDER_PRICE','销售单据查看价格');

  static const COLUMN_VIEW_PURCHASE_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_PURCHASE_ORDER_PRICE','采购单据查看价格');

  static const COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE','委外单据查看价格');

  static const COLUMN_VIEW_STOCK_ORDER_PRICE = TypeEnumEntity('COLUMN_VIEW_STOCK_ORDER_PRICE','仓管单据查看价格');

  static const COLUMN_VIEW_ORDER_COST_AND_PROFIT = TypeEnumEntity('COLUMN_VIEW_ORDER_COST_AND_PROFIT','查看单据成本价和毛利');

  static const COLUMN_VIEW_REPORT_COST_AND_PROFIT = TypeEnumEntity('COLUMN_VIEW_REPORT_COST_AND_PROFIT','查看报表成本价和毛利');

  static const COLUMN_VIEW_PURCHASE_PRICE = TypeEnumEntity('COLUMN_VIEW_PURCHASE_PRICE','查看预设进价');

  static const COLUMN_VIEW_SALES_PRICE = TypeEnumEntity('COLUMN_VIEW_SALES_PRICE','查看零售价');

  static const values = {
     'SALES_REQUEST':SALES_REQUEST,
     'SALES_REQUEST_CHANGE':SALES_REQUEST_CHANGE,
     'SALES_OUT':SALES_OUT,
     'SALES_OUT_CHANGE':SALES_OUT_CHANGE,
     'SALES_RETURN':SALES_RETURN,
     'SALES_RETURN_CHANGE':SALES_RETURN_CHANGE,
     'SALES_QUOTATION':SALES_QUOTATION,
     'SALES_RECEIPT':SALES_RECEIPT,
     'SALES_REQUEST_DETAIL':SALES_REQUEST_DETAIL,
     'SALES_DETAIL':SALES_DETAIL,
     'SALES_CHANGE_HISTORY':SALES_CHANGE_HISTORY,
     'SALES_PRICE_TRACK':SALES_PRICE_TRACK,
     'PURCHASE_ITEM_REGULAR_TYPE':PURCHASE_ITEM_REGULAR_TYPE,
     'PURCHASE_STOCK_REPLENISH':PURCHASE_STOCK_REPLENISH,
     'PURCHASE_REQUEST':PURCHASE_REQUEST,
     'PURCHASE_REQUEST_CHANGE':PURCHASE_REQUEST_CHANGE,
     'PURCHASE_IN':PURCHASE_IN,
     'PURCHASE_IN_CHANGE':PURCHASE_IN_CHANGE,
     'PURCHASE_RETURN':PURCHASE_RETURN,
     'PURCHASE_RETURN_CHANGE':PURCHASE_RETURN_CHANGE,
     'PURCHASE_QUOTATION':PURCHASE_QUOTATION,
     'PURCHASE_DEMAND':PURCHASE_DEMAND,
     'PURCHASE_RECEIPT':PURCHASE_RECEIPT,
     'PURCHASE_REQUEST_DETAIL':PURCHASE_REQUEST_DETAIL,
     'PURCHASE_DETAIL':PURCHASE_DETAIL,
     'PURCHASE_CHANGE_HISTORY':PURCHASE_CHANGE_HISTORY,
     'PURCHASE_PRICE_TRACK':PURCHASE_PRICE_TRACK,
     'SUB_CONTRACT_ASSEMBLE_TEMPLATE':SUB_CONTRACT_ASSEMBLE_TEMPLATE,
     'SUB_CONTRACT_STOCK':SUB_CONTRACT_STOCK,
     'SUB_CONTRACT_STOCK_REMAIN':SUB_CONTRACT_STOCK_REMAIN,
     'SUB_CONTRACT_OUT':SUB_CONTRACT_OUT,
     'SUB_CONTRACT_OUT_CHANGE':SUB_CONTRACT_OUT_CHANGE,
     'SUB_CONTRACT_RETURN':SUB_CONTRACT_RETURN,
     'SUB_CONTRACT_RETURN_CHANGE':SUB_CONTRACT_RETURN_CHANGE,
     'SUB_CONTRACT_IN':SUB_CONTRACT_IN,
     'SUB_CONTRACT_IN_CHANGE':SUB_CONTRACT_IN_CHANGE,
     'STOCK_OTHER_INBOUND':STOCK_OTHER_INBOUND,
     'STOCK_OTHER_INBOUND_CHANGE':STOCK_OTHER_INBOUND_CHANGE,
     'STOCK_OTHER_OUTBOUND':STOCK_OTHER_OUTBOUND,
     'STOCK_OTHER_OUTBOUND_CHANGE':STOCK_OTHER_OUTBOUND_CHANGE,
     'STOCK_TRANSFER':STOCK_TRANSFER,
     'STOCK_TRANSFER_CHANGE':STOCK_TRANSFER_CHANGE,
     'STOCK_ADJUST_PRICE':STOCK_ADJUST_PRICE,
     'STOCK_OVERFLOW':STOCK_OVERFLOW,
     'STOCK_OVERFLOW_CHANGE':STOCK_OVERFLOW_CHANGE,
     'STOCK_LOSS':STOCK_LOSS,
     'STOCK_LOSS_CHANGE':STOCK_LOSS_CHANGE,
     'STOCK_SINGLE_CHECK_POINT':STOCK_SINGLE_CHECK_POINT,
     'STOCK_SPLIT_CHECK_POINT':STOCK_SPLIT_CHECK_POINT,
     'STOCK_COMBINE_CHECK_POINT':STOCK_COMBINE_CHECK_POINT,
     'STOCK_DETAIL':STOCK_DETAIL,
     'BILL_ADVANCE_RECEIVABLE':BILL_ADVANCE_RECEIVABLE,
     'BILL_UN_RECEIVABLE_LIST':BILL_UN_RECEIVABLE_LIST,
     'BILL_RECEIVABLE':BILL_RECEIVABLE,
     'BILL_RECEIVABLE_DETAIL':BILL_RECEIVABLE_DETAIL,
     'BILL_ADVANCE_PAYABLE':BILL_ADVANCE_PAYABLE,
     'BILL_UN_PAYABLE_LIST':BILL_UN_PAYABLE_LIST,
     'BILL_PAYABLE':BILL_PAYABLE,
     'BILL_PAYABLE_DETAIL':BILL_PAYABLE_DETAIL,
     'BILL_OTHER_INCOME':BILL_OTHER_INCOME,
     'BILL_OTHER_EXPENSE':BILL_OTHER_EXPENSE,
     'BILL_TRANSFER':BILL_TRANSFER,
     'BILL_CUSTOM_INVOICE':BILL_CUSTOM_INVOICE,
     'BILL_CASH':BILL_CASH,
     'BILL_ARAP_RECEIVABLE':BILL_ARAP_RECEIVABLE,
     'BILL_ARAP_PAYABLE':BILL_ARAP_PAYABLE,
     'BILL_ACCOUNT_EXPENSE':BILL_ACCOUNT_EXPENSE,
     'BILL_ACCOUNT_INCOME':BILL_ACCOUNT_INCOME,
     'BILL_ACCOUNT_DOCUMENT':BILL_ACCOUNT_DOCUMENT,
     'REPORT_STOCK_ITEM':REPORT_STOCK_ITEM,
     'REPORT_STOCK_REMAIN':REPORT_STOCK_REMAIN,
     'REPORT_BILL_RECEIVABLE_DATE':REPORT_BILL_RECEIVABLE_DATE,
     'REPORT_BILL_RECEIVABLE_CUSTOM':REPORT_BILL_RECEIVABLE_CUSTOM,
     'REPORT_BILL_RECEIVABLE_MANAGE':REPORT_BILL_RECEIVABLE_MANAGE,
     'REPORT_BILL_PAYABLE_DATE':REPORT_BILL_PAYABLE_DATE,
     'REPORT_BILL_PAYABLE_SUPPLIER':REPORT_BILL_PAYABLE_SUPPLIER,
     'REPORT_BILL_PAYABLE_MANAGE':REPORT_BILL_PAYABLE_MANAGE,
     'REPORT_SALES_DATE':REPORT_SALES_DATE,
     'REPORT_SALES_ITEM':REPORT_SALES_ITEM,
     'REPORT_SALES_CUSTOM':REPORT_SALES_CUSTOM,
     'REPORT_SALES_MANAGE':REPORT_SALES_MANAGE,
     'REPORT_PURCHASE_DATE':REPORT_PURCHASE_DATE,
     'REPORT_PURCHASE_ITEM':REPORT_PURCHASE_ITEM,
     'REPORT_PURCHASE_SUPPLIER':REPORT_PURCHASE_SUPPLIER,
     'REPORT_PURCHASE_MANAGE':REPORT_PURCHASE_MANAGE,
     'REPORT_GALLERY_ALL':REPORT_GALLERY_ALL,
     'RESOURCE_ITEM':RESOURCE_ITEM,
     'RESOURCE_CUSTOM':RESOURCE_CUSTOM,
     'RESOURCE_SUPPLIER':RESOURCE_SUPPLIER,
     'RESOURCE_ACCOUNT':RESOURCE_ACCOUNT,
     'RESOURCE_STORE':RESOURCE_STORE,
     'RESOURCE_UNIT':RESOURCE_UNIT,
     'RESOURCE_STOCK_INIT':RESOURCE_STOCK_INIT,
     'RESOURCE_ACCOUNT_RECEIVABLE_INIT':RESOURCE_ACCOUNT_RECEIVABLE_INIT,
     'RESOURCE_ACCOUNT_PAYABLE_INIT':RESOURCE_ACCOUNT_PAYABLE_INIT,
     'SYSTEM_EMPLOYEE':SYSTEM_EMPLOYEE,
     'SYSTEM_OPERATOR':SYSTEM_OPERATOR,
     'SYSTEM_OPERATOR_ROLE':SYSTEM_OPERATOR_ROLE,
     'SYSTEM_TENANT':SYSTEM_TENANT,
     'SYSTEM_CONFIG_OPEN':SYSTEM_CONFIG_OPEN,
     'SYSTEM_CONFIG_RESET':SYSTEM_CONFIG_RESET,
     'SYSTEM_CONFIG_SETTING':SYSTEM_CONFIG_SETTING,
     'SYSTEM_MENU_CONFIG':SYSTEM_MENU_CONFIG,
     'SYSTEM_BACKEND_TASK':SYSTEM_BACKEND_TASK,
     'SYSTEM_ATTACHMENT':SYSTEM_ATTACHMENT,
     'SYSTEM_IMAGE':SYSTEM_IMAGE,
     'COLUMN_VIEW_SALES_ORDER_PRICE':COLUMN_VIEW_SALES_ORDER_PRICE,
     'COLUMN_VIEW_PURCHASE_ORDER_PRICE':COLUMN_VIEW_PURCHASE_ORDER_PRICE,
     'COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE':COLUMN_VIEW_SUB_CONTRACT_ORDER_PRICE,
     'COLUMN_VIEW_STOCK_ORDER_PRICE':COLUMN_VIEW_STOCK_ORDER_PRICE,
     'COLUMN_VIEW_ORDER_COST_AND_PROFIT':COLUMN_VIEW_ORDER_COST_AND_PROFIT,
     'COLUMN_VIEW_REPORT_COST_AND_PROFIT':COLUMN_VIEW_REPORT_COST_AND_PROFIT,
     'COLUMN_VIEW_PURCHASE_PRICE':COLUMN_VIEW_PURCHASE_PRICE,
     'COLUMN_VIEW_SALES_PRICE':COLUMN_VIEW_SALES_PRICE,
  };

  const TypeEnumEntity(super.value,super.label);

  static TypeEnumEntity? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumEntity(data, data);
    }
    throw FormatException('can not parse to TypeEnumEntity: [$data]');
  }

  static Object? toDynamic(TypeEnumEntity? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumEntity? deepCopy(TypeEnumEntity? data) {
    return data;
  }

  @override
  TypeEnumEntity copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumFilterInvoiceBillState extends IDataEnum implements IDataDynamic{
  static const ALL = TypeEnumFilterInvoiceBillState('ALL','全部');

  static const INVOICE_NOT_BILL = TypeEnumFilterInvoiceBillState('INVOICE_NOT_BILL','等待结算');

  static const INVOICE_ALL_BILL = TypeEnumFilterInvoiceBillState('INVOICE_ALL_BILL','完成结算');

  static const values = {
     'ALL':ALL,
     'INVOICE_NOT_BILL':INVOICE_NOT_BILL,
     'INVOICE_ALL_BILL':INVOICE_ALL_BILL,
  };

  const TypeEnumFilterInvoiceBillState(super.value,super.label);

  static TypeEnumFilterInvoiceBillState? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumFilterInvoiceBillState(data, data);
    }
    throw FormatException('can not parse to TypeEnumFilterInvoiceBillState: [$data]');
  }

  static Object? toDynamic(TypeEnumFilterInvoiceBillState? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumFilterInvoiceBillState? deepCopy(TypeEnumFilterInvoiceBillState? data) {
    return data;
  }

  @override
  TypeEnumFilterInvoiceBillState copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumOrderBillType extends IDataEnum implements IDataDynamic{
  static const NONE = TypeEnumOrderBillType('NONE','无');

  static const RECEIVABLE = TypeEnumOrderBillType('RECEIVABLE','收款');

  static const PAYABLE = TypeEnumOrderBillType('PAYABLE','付款');

  static const values = {
     'NONE':NONE,
     'RECEIVABLE':RECEIVABLE,
     'PAYABLE':PAYABLE,
  };

  const TypeEnumOrderBillType(super.value,super.label);

  static TypeEnumOrderBillType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumOrderBillType(data, data);
    }
    throw FormatException('can not parse to TypeEnumOrderBillType: [$data]');
  }

  static Object? toDynamic(TypeEnumOrderBillType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumOrderBillType? deepCopy(TypeEnumOrderBillType? data) {
    return data;
  }

  @override
  TypeEnumOrderBillType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountDirection extends IDataEnum implements IDataDynamic{
  static const DEBIT = TypeEnumAccountDirection('DEBIT','借');

  static const CREDIT = TypeEnumAccountDirection('CREDIT','贷');

  static const values = {
     'DEBIT':DEBIT,
     'CREDIT':CREDIT,
  };

  const TypeEnumAccountDirection(super.value,super.label);

  static TypeEnumAccountDirection? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountDirection(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountDirection: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountDirection? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountDirection? deepCopy(TypeEnumAccountDirection? data) {
    return data;
  }

  @override
  TypeEnumAccountDirection copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumMainIndexQueryMainIndexDateType extends IDataEnum implements IDataDynamic{
  static const SEVEN_DAYS = TypeEnumMainIndexQueryMainIndexDateType('SEVEN_DAYS','近7天');

  static const THIRTY_DAYS = TypeEnumMainIndexQueryMainIndexDateType('THIRTY_DAYS','近30天');

  static const DAY = TypeEnumMainIndexQueryMainIndexDateType('DAY','日');

  static const WEEK = TypeEnumMainIndexQueryMainIndexDateType('WEEK','周');

  static const MONTH = TypeEnumMainIndexQueryMainIndexDateType('MONTH','月');

  static const YEAR = TypeEnumMainIndexQueryMainIndexDateType('YEAR','年');

  static const values = {
     'SEVEN_DAYS':SEVEN_DAYS,
     'THIRTY_DAYS':THIRTY_DAYS,
     'DAY':DAY,
     'WEEK':WEEK,
     'MONTH':MONTH,
     'YEAR':YEAR,
  };

  const TypeEnumMainIndexQueryMainIndexDateType(super.value,super.label);

  static TypeEnumMainIndexQueryMainIndexDateType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumMainIndexQueryMainIndexDateType(data, data);
    }
    throw FormatException('can not parse to TypeEnumMainIndexQueryMainIndexDateType: [$data]');
  }

  static Object? toDynamic(TypeEnumMainIndexQueryMainIndexDateType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumMainIndexQueryMainIndexDateType? deepCopy(TypeEnumMainIndexQueryMainIndexDateType? data) {
    return data;
  }

  @override
  TypeEnumMainIndexQueryMainIndexDateType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumAccountType extends IDataEnum implements IDataDynamic{
  static const ASSETS = TypeEnumAccountType('ASSETS','资产类');

  static const LIABILITIES = TypeEnumAccountType('LIABILITIES','负债类');

  static const OWNER_EQUITY = TypeEnumAccountType('OWNER_EQUITY','所有者权益类');

  static const PROFIT = TypeEnumAccountType('PROFIT','损益类');

  static const values = {
     'ASSETS':ASSETS,
     'LIABILITIES':LIABILITIES,
     'OWNER_EQUITY':OWNER_EQUITY,
     'PROFIT':PROFIT,
  };

  const TypeEnumAccountType(super.value,super.label);

  static TypeEnumAccountType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumAccountType(data, data);
    }
    throw FormatException('can not parse to TypeEnumAccountType: [$data]');
  }

  static Object? toDynamic(TypeEnumAccountType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumAccountType? deepCopy(TypeEnumAccountType? data) {
    return data;
  }

  @override
  TypeEnumAccountType copy() {
    return deepCopy(this)!;
  }
}

class TypeEnumReportGroupType extends IDataEnum implements IDataDynamic{
  static const TIME = TypeEnumReportGroupType('TIME','时间');

  static const ITEM = TypeEnumReportGroupType('ITEM','商品');

  static const MANAGE_EMPLOYEE = TypeEnumReportGroupType('MANAGE_EMPLOYEE','经手人');

  static const CONTACT = TypeEnumReportGroupType('CONTACT','往来单位');

  static const ACCOUNT = TypeEnumReportGroupType('ACCOUNT','会计账号');

  static const values = {
     'TIME':TIME,
     'ITEM':ITEM,
     'MANAGE_EMPLOYEE':MANAGE_EMPLOYEE,
     'CONTACT':CONTACT,
     'ACCOUNT':ACCOUNT,
  };

  const TypeEnumReportGroupType(super.value,super.label);

  static TypeEnumReportGroupType? fromDynamic(Object? data) {
    if (data == null) {
      return null;
    } else if (data is String) {
      final result = values[data.toUpperCase()];
      if (result != null) {
        return result;
      }
      return TypeEnumReportGroupType(data, data);
    }
    throw FormatException('can not parse to TypeEnumReportGroupType: [$data]');
  }

  static Object? toDynamic(TypeEnumReportGroupType? result) {
    if (result == null) {
      return null;
    } else {
      return result.value;
    }
  }

  @override
  Object encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumReportGroupType? deepCopy(TypeEnumReportGroupType? data) {
    return data;
  }

  @override
  TypeEnumReportGroupType copy() {
    return deepCopy(this)!;
  }
}


class FTypeAccount extends IDataField {
  static const auxiliary = FTypeAccount('auxiliary');
  static const balance = FTypeAccount('balance');
  static const balanceCheckType = FTypeAccount('balanceCheckType');
  static const balanceDirection = FTypeAccount('balanceDirection');
  static const balanceShowDirection = FTypeAccount('balanceShowDirection');
  static const children = FTypeAccount('children');
  static const createTime = FTypeAccount('createTime');
  static const firstChildNumber = FTypeAccount('firstChildNumber');
  static const fullName = FTypeAccount('fullName');
  static const hasBusinessLink = FTypeAccount('hasBusinessLink');
  static const id = FTypeAccount('id');
  static const initialBalance = FTypeAccount('initialBalance');
  static const initialBalanceDirection = FTypeAccount('initialBalanceDirection');
  static const isCategory = FTypeAccount('isCategory');
  static const isEnabled = FTypeAccount('isEnabled');
  static const isMonthlyCloseAccountIncome = FTypeAccount('isMonthlyCloseAccountIncome');
  static const isSystem = FTypeAccount('isSystem');
  static const modifyTime = FTypeAccount('modifyTime');
  static const monthlyCloseAccountId = FTypeAccount('monthlyCloseAccountId');
  static const name = FTypeAccount('name');
  static const number = FTypeAccount('number');
  static const parentId = FTypeAccount('parentId');
  static const parentInfo = FTypeAccount('parentInfo');
  static const remark = FTypeAccount('remark');
  static const subType = FTypeAccount('subType');
  static const treeLevel = FTypeAccount('treeLevel');
  static const treePath = FTypeAccount('treePath');
  static const type = FTypeAccount('type');
  const FTypeAccount(super.key);
}

final FieldReflectInfo<TypeAccount> _TypeAccount_fields = {
  "auxiliary": (
    getter: (data) => data.auxiliary,
    setter: (data, value) => data.auxiliary = value as TypeEnumAccountAuxiliary?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountAuxiliary.toDynamic;
      return formatter(data.auxiliary);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountAuxiliary.fromDynamic;
      data.auxiliary = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountAuxiliary.deepCopy;
      newData.auxiliary = copyer(oldData.auxiliary);
    },
  ),
  "balance": (
    getter: (data) => data.balance,
    setter: (data, value) => data.balance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.balance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.balance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.balance = copyer(oldData.balance);
    },
  ),
  "balanceCheckType": (
    getter: (data) => data.balanceCheckType,
    setter: (data, value) => data.balanceCheckType = value as TypeEnumAccountBalanceCheckType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountBalanceCheckType.toDynamic;
      return formatter(data.balanceCheckType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountBalanceCheckType.fromDynamic;
      data.balanceCheckType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountBalanceCheckType.deepCopy;
      newData.balanceCheckType = copyer(oldData.balanceCheckType);
    },
  ),
  "balanceDirection": (
    getter: (data) => data.balanceDirection,
    setter: (data, value) => data.balanceDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data.balanceDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data.balanceDirection = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountDirection.deepCopy;
      newData.balanceDirection = copyer(oldData.balanceDirection);
    },
  ),
  "balanceShowDirection": (
    getter: (data) => data.balanceShowDirection,
    setter: (data, value) => data.balanceShowDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data.balanceShowDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data.balanceShowDirection = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountDirection.deepCopy;
      newData.balanceShowDirection = copyer(oldData.balanceShowDirection);
    },
  ),
  "children": (
    getter: (data) => data.children,
    setter: (data, value) => data.children = value as List<TypeAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccount>((single){
        final handler = TypeAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data.children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
        final handler = TypeAccount.fromDynamic;
        return handler(single)!;
      });
      data.children = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAccount>((single){
        final handler = TypeAccount.deepCopy;
        return handler(single)!;
      });
      newData.children = copyer(oldData.children);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "firstChildNumber": (
    getter: (data) => data.firstChildNumber,
    setter: (data, value) => data.firstChildNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.firstChildNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.firstChildNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.firstChildNumber = copyer(oldData.firstChildNumber);
    },
  ),
  "fullName": (
    getter: (data) => data.fullName,
    setter: (data, value) => data.fullName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.fullName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.fullName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.fullName = copyer(oldData.fullName);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "initialBalance": (
    getter: (data) => data.initialBalance,
    setter: (data, value) => data.initialBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialBalance = copyer(oldData.initialBalance);
    },
  ),
  "initialBalanceDirection": (
    getter: (data) => data.initialBalanceDirection,
    setter: (data, value) => data.initialBalanceDirection = value as TypeEnumAccountDirection?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountDirection.toDynamic;
      return formatter(data.initialBalanceDirection);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountDirection.fromDynamic;
      data.initialBalanceDirection = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountDirection.deepCopy;
      newData.initialBalanceDirection = copyer(oldData.initialBalanceDirection);
    },
  ),
  "isCategory": (
    getter: (data) => data.isCategory,
    setter: (data, value) => data.isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCategory = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCategory = copyer(oldData.isCategory);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isMonthlyCloseAccountIncome": (
    getter: (data) => data.isMonthlyCloseAccountIncome,
    setter: (data, value) => data.isMonthlyCloseAccountIncome = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isMonthlyCloseAccountIncome);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isMonthlyCloseAccountIncome = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isMonthlyCloseAccountIncome = copyer(oldData.isMonthlyCloseAccountIncome);
    },
  ),
  "isSystem": (
    getter: (data) => data.isSystem,
    setter: (data, value) => data.isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSystem = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSystem = copyer(oldData.isSystem);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "monthlyCloseAccountId": (
    getter: (data) => data.monthlyCloseAccountId,
    setter: (data, value) => data.monthlyCloseAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.monthlyCloseAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.monthlyCloseAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.monthlyCloseAccountId = copyer(oldData.monthlyCloseAccountId);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "parentId": (
    getter: (data) => data.parentId,
    setter: (data, value) => data.parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.parentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.parentId = copyer(oldData.parentId);
    },
  ),
  "parentInfo": (
    getter: (data) => data.parentInfo,
    setter: (data, value) => data.parentInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data.parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data.parentInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccount.deepCopy;
      newData.parentInfo = copyer(oldData.parentInfo);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "subType": (
    getter: (data) => data.subType,
    setter: (data, value) => data.subType = value as TypeEnumAccountSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountSubType.toDynamic;
      return formatter(data.subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountSubType.fromDynamic;
      data.subType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountSubType.deepCopy;
      newData.subType = copyer(oldData.subType);
    },
  ),
  "treeLevel": (
    getter: (data) => data.treeLevel,
    setter: (data, value) => data.treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.treeLevel = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.treeLevel = copyer(oldData.treeLevel);
    },
  ),
  "treePath": (
    getter: (data) => data.treePath,
    setter: (data, value) => data.treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.treePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.treePath = copyer(oldData.treePath);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumAccountType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
};

class TypeAccount extends IDataBasic implements IDataDynamic {
  TypeAccount({
    this.auxiliary,
    this.balance,
    this.balanceCheckType,
    this.balanceDirection,
    this.balanceShowDirection,
    this.children,
    this.createTime,
    this.firstChildNumber,
    this.fullName,
    this.hasBusinessLink,
    this.id,
    this.initialBalance,
    this.initialBalanceDirection,
    this.isCategory,
    this.isEnabled,
    this.isMonthlyCloseAccountIncome,
    this.isSystem,
    this.modifyTime,
    this.monthlyCloseAccountId,
    this.name,
    this.number,
    this.parentId,
    this.parentInfo,
    this.remark,
    this.subType,
    this.treeLevel,
    this.treePath,
    this.type
  });

  static TypeAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccount? deepCopy(TypeAccount? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccount();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccount_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccount copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumAccountAuxiliary? auxiliary;

  String? balance;

  TypeEnumAccountBalanceCheckType? balanceCheckType;

  TypeEnumAccountDirection? balanceDirection;

  TypeEnumAccountDirection? balanceShowDirection;

  List<TypeAccount>? children;

  String? createTime;

  String? firstChildNumber;

  String? fullName;

  int? hasBusinessLink;

  int? id;

  String? initialBalance;

  TypeEnumAccountDirection? initialBalanceDirection;

  int? isCategory;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isMonthlyCloseAccountIncome;

  int? isSystem;

  String? modifyTime;

  int? monthlyCloseAccountId;

  String? name;

  String? number;

  int? parentId;

  TypeAccount? parentInfo;

  String? remark;

  TypeEnumAccountSubType? subType;

  int? treeLevel;

  String? treePath;

  TypeEnumAccountType? type;

}

class FTypeAccountFlowQueryDTO extends IDataField {
  static const data = FTypeAccountFlowQueryDTO('data');
  static const pageIndex = FTypeAccountFlowQueryDTO('pageIndex');
  static const pageSize = FTypeAccountFlowQueryDTO('pageSize');
  static const sum = FTypeAccountFlowQueryDTO('sum');
  const FTypeAccountFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQueryDTO> _TypeAccountFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAccountFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccountFlowQueryDataDTO>((single){
        final handler = TypeAccountFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccountFlowQueryDataDTO>((single){
        final handler = TypeAccountFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAccountFlowQueryDataDTO>((single){
        final handler = TypeAccountFlowQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeAccountFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeAccountFlowQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccountFlowQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccountFlowQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeAccountFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeAccountFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccountFlowQueryDTO? deepCopy(TypeAccountFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccountFlowQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccountFlowQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccountFlowQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeAccountFlowQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeAccountFlowQuerySumDTO? sum;

}

class FTypeAccountFlowQueryDataDTO extends IDataField {
  static const accountId = FTypeAccountFlowQueryDataDTO('accountId');
  static const accountName = FTypeAccountFlowQueryDataDTO('accountName');
  static const changeTotal = FTypeAccountFlowQueryDataDTO('changeTotal');
  static const creditChange = FTypeAccountFlowQueryDataDTO('creditChange');
  static const debitChange = FTypeAccountFlowQueryDataDTO('debitChange');
  static const id = FTypeAccountFlowQueryDataDTO('id');
  static const orderContactId = FTypeAccountFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeAccountFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeAccountFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeAccountFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeAccountFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeAccountFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeAccountFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeAccountFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeAccountFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeAccountFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeAccountFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeAccountFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeAccountFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeAccountFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeAccountFlowQueryDataDTO('orderState');
  static const orderType = FTypeAccountFlowQueryDataDTO('orderType');
  static const previousTotal = FTypeAccountFlowQueryDataDTO('previousTotal');
  static const remark = FTypeAccountFlowQueryDataDTO('remark');
  const FTypeAccountFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQueryDataDTO> _TypeAccountFlowQueryDataDTO_fields = {
  "accountId": (
    getter: (data) => data.accountId,
    setter: (data, value) => data.accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.accountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.accountId = copyer(oldData.accountId);
    },
  ),
  "accountName": (
    getter: (data) => data.accountName,
    setter: (data, value) => data.accountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountName = copyer(oldData.accountName);
    },
  ),
  "changeTotal": (
    getter: (data) => data.changeTotal,
    setter: (data, value) => data.changeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.changeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.changeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.changeTotal = copyer(oldData.changeTotal);
    },
  ),
  "creditChange": (
    getter: (data) => data.creditChange,
    setter: (data, value) => data.creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.creditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.creditChange = copyer(oldData.creditChange);
    },
  ),
  "debitChange": (
    getter: (data) => data.debitChange,
    setter: (data, value) => data.debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.debitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.debitChange = copyer(oldData.debitChange);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "previousTotal": (
    getter: (data) => data.previousTotal,
    setter: (data, value) => data.previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousTotal = copyer(oldData.previousTotal);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
};

class TypeAccountFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQueryDataDTO({
    this.accountId,
    this.accountName,
    this.changeTotal,
    this.creditChange,
    this.debitChange,
    this.id,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderType,
    this.previousTotal,
    this.remark
  });

  static TypeAccountFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccountFlowQueryDataDTO? deepCopy(TypeAccountFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccountFlowQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccountFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccountFlowQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? accountId;

  String? accountName;

  String? changeTotal;

  String? creditChange;

  String? debitChange;

  int? id;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  TypeEnumOrderType? orderType;

  String? previousTotal;

  String? remark;

}

class FTypeAccountFlowQuerySumDTO extends IDataField {
  static const count = FTypeAccountFlowQuerySumDTO('count');
  static const creditChange = FTypeAccountFlowQuerySumDTO('creditChange');
  static const debitChange = FTypeAccountFlowQuerySumDTO('debitChange');
  const FTypeAccountFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeAccountFlowQuerySumDTO> _TypeAccountFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "creditChange": (
    getter: (data) => data.creditChange,
    setter: (data, value) => data.creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.creditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.creditChange = copyer(oldData.creditChange);
    },
  ),
  "debitChange": (
    getter: (data) => data.debitChange,
    setter: (data, value) => data.debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.debitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.debitChange = copyer(oldData.debitChange);
    },
  ),
};

class TypeAccountFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeAccountFlowQuerySumDTO({
    this.count,
    this.creditChange,
    this.debitChange
  });

  static TypeAccountFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccountFlowQuerySumDTO? deepCopy(TypeAccountFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccountFlowQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccountFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccountFlowQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? creditChange;

  String? debitChange;

}

class FTypeAccountGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeAccountGroupQueryDTO('beginOrderDate');
  static const data = FTypeAccountGroupQueryDTO('data');
  static const endOrderDate = FTypeAccountGroupQueryDTO('endOrderDate');
  static const sum = FTypeAccountGroupQueryDTO('sum');
  const FTypeAccountGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeAccountGroupQueryDTO> _TypeAccountGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data.beginOrderDate,
    setter: (data, value) => data.beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginOrderDate = copyer(oldData.beginOrderDate);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAccountGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccountGroupQueryDataDTO>((single){
        final handler = TypeAccountGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccountGroupQueryDataDTO>((single){
        final handler = TypeAccountGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAccountGroupQueryDataDTO>((single){
        final handler = TypeAccountGroupQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "endOrderDate": (
    getter: (data) => data.endOrderDate,
    setter: (data, value) => data.endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endOrderDate = copyer(oldData.endOrderDate);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeAccountGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeAccountGroupQueryDataDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccountGroupQueryDataDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccountGroupQueryDataDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeAccountGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAccountGroupQueryDTO({
    this.beginOrderDate,
    this.data,
    this.endOrderDate,
    this.sum
  });

  static TypeAccountGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccountGroupQueryDTO? deepCopy(TypeAccountGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccountGroupQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccountGroupQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccountGroupQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginOrderDate;

  List<TypeAccountGroupQueryDataDTO>? data;

  String? endOrderDate;

  TypeAccountGroupQueryDataDTO? sum;

}

class FTypeAccountGroupQueryDataDTO extends IDataField {
  static const beginBalance = FTypeAccountGroupQueryDataDTO('beginBalance');
  static const creditChange = FTypeAccountGroupQueryDataDTO('creditChange');
  static const debitChange = FTypeAccountGroupQueryDataDTO('debitChange');
  static const endBalance = FTypeAccountGroupQueryDataDTO('endBalance');
  static const id = FTypeAccountGroupQueryDataDTO('id');
  static const isCategory = FTypeAccountGroupQueryDataDTO('isCategory');
  static const isEnabled = FTypeAccountGroupQueryDataDTO('isEnabled');
  static const name = FTypeAccountGroupQueryDataDTO('name');
  static const number = FTypeAccountGroupQueryDataDTO('number');
  static const treeLevel = FTypeAccountGroupQueryDataDTO('treeLevel');
  const FTypeAccountGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAccountGroupQueryDataDTO> _TypeAccountGroupQueryDataDTO_fields = {
  "beginBalance": (
    getter: (data) => data.beginBalance,
    setter: (data, value) => data.beginBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginBalance = copyer(oldData.beginBalance);
    },
  ),
  "creditChange": (
    getter: (data) => data.creditChange,
    setter: (data, value) => data.creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.creditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.creditChange = copyer(oldData.creditChange);
    },
  ),
  "debitChange": (
    getter: (data) => data.debitChange,
    setter: (data, value) => data.debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.debitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.debitChange = copyer(oldData.debitChange);
    },
  ),
  "endBalance": (
    getter: (data) => data.endBalance,
    setter: (data, value) => data.endBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endBalance = copyer(oldData.endBalance);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isCategory": (
    getter: (data) => data.isCategory,
    setter: (data, value) => data.isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCategory = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCategory = copyer(oldData.isCategory);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "treeLevel": (
    getter: (data) => data.treeLevel,
    setter: (data, value) => data.treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.treeLevel = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.treeLevel = copyer(oldData.treeLevel);
    },
  ),
};

class TypeAccountGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAccountGroupQueryDataDTO({
    this.beginBalance,
    this.creditChange,
    this.debitChange,
    this.endBalance,
    this.id,
    this.isCategory,
    this.isEnabled,
    this.name,
    this.number,
    this.treeLevel
  });

  static TypeAccountGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAccountGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAccountGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAccountGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAccountGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAccountGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAccountGroupQueryDataDTO? deepCopy(TypeAccountGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAccountGroupQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAccountGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAccountGroupQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAccountGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAccountGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginBalance;

  String? creditChange;

  String? debitChange;

  String? endBalance;

  int? id;

  int? isCategory;

  TypeEnumSoftEnableIsEnable? isEnabled;

  String? name;

  String? number;

  int? treeLevel;

}

class FTypeArapFlowQueryDTO extends IDataField {
  static const data = FTypeArapFlowQueryDTO('data');
  static const pageIndex = FTypeArapFlowQueryDTO('pageIndex');
  static const pageSize = FTypeArapFlowQueryDTO('pageSize');
  static const sum = FTypeArapFlowQueryDTO('sum');
  const FTypeArapFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQueryDTO> _TypeArapFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeArapFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeArapFlowQueryDataDTO>((single){
        final handler = TypeArapFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeArapFlowQueryDataDTO>((single){
        final handler = TypeArapFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeArapFlowQueryDataDTO>((single){
        final handler = TypeArapFlowQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeArapFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeArapFlowQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeArapFlowQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeArapFlowQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeArapFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeArapFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeArapFlowQueryDTO? deepCopy(TypeArapFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeArapFlowQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeArapFlowQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeArapFlowQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeArapFlowQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeArapFlowQuerySumDTO? sum;

}

class FTypeArapFlowQueryDataDTO extends IDataField {
  static const adpChange = FTypeArapFlowQueryDataDTO('adpChange');
  static const adrChange = FTypeArapFlowQueryDataDTO('adrChange');
  static const apChange = FTypeArapFlowQueryDataDTO('apChange');
  static const arChange = FTypeArapFlowQueryDataDTO('arChange');
  static const id = FTypeArapFlowQueryDataDTO('id');
  static const orderContactId = FTypeArapFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeArapFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeArapFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeArapFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeArapFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeArapFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeArapFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeArapFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeArapFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeArapFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeArapFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeArapFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeArapFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeArapFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeArapFlowQueryDataDTO('orderState');
  static const orderType = FTypeArapFlowQueryDataDTO('orderType');
  static const previousAdpChange = FTypeArapFlowQueryDataDTO('previousAdpChange');
  static const previousAdrChange = FTypeArapFlowQueryDataDTO('previousAdrChange');
  static const previousApChange = FTypeArapFlowQueryDataDTO('previousApChange');
  static const previousArChange = FTypeArapFlowQueryDataDTO('previousArChange');
  static const remark = FTypeArapFlowQueryDataDTO('remark');
  const FTypeArapFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQueryDataDTO> _TypeArapFlowQueryDataDTO_fields = {
  "adpChange": (
    getter: (data) => data.adpChange,
    setter: (data, value) => data.adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpChange = copyer(oldData.adpChange);
    },
  ),
  "adrChange": (
    getter: (data) => data.adrChange,
    setter: (data, value) => data.adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrChange = copyer(oldData.adrChange);
    },
  ),
  "apChange": (
    getter: (data) => data.apChange,
    setter: (data, value) => data.apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apChange = copyer(oldData.apChange);
    },
  ),
  "arChange": (
    getter: (data) => data.arChange,
    setter: (data, value) => data.arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arChange = copyer(oldData.arChange);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "previousAdpChange": (
    getter: (data) => data.previousAdpChange,
    setter: (data, value) => data.previousAdpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousAdpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousAdpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousAdpChange = copyer(oldData.previousAdpChange);
    },
  ),
  "previousAdrChange": (
    getter: (data) => data.previousAdrChange,
    setter: (data, value) => data.previousAdrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousAdrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousAdrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousAdrChange = copyer(oldData.previousAdrChange);
    },
  ),
  "previousApChange": (
    getter: (data) => data.previousApChange,
    setter: (data, value) => data.previousApChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousApChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousApChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousApChange = copyer(oldData.previousApChange);
    },
  ),
  "previousArChange": (
    getter: (data) => data.previousArChange,
    setter: (data, value) => data.previousArChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousArChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousArChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousArChange = copyer(oldData.previousArChange);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
};

class TypeArapFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQueryDataDTO({
    this.adpChange,
    this.adrChange,
    this.apChange,
    this.arChange,
    this.id,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderType,
    this.previousAdpChange,
    this.previousAdrChange,
    this.previousApChange,
    this.previousArChange,
    this.remark
  });

  static TypeArapFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeArapFlowQueryDataDTO? deepCopy(TypeArapFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeArapFlowQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeArapFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeArapFlowQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? adpChange;

  String? adrChange;

  String? apChange;

  String? arChange;

  int? id;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  TypeEnumOrderType? orderType;

  String? previousAdpChange;

  String? previousAdrChange;

  String? previousApChange;

  String? previousArChange;

  String? remark;

}

class FTypeArapFlowQuerySumDTO extends IDataField {
  static const adpChange = FTypeArapFlowQuerySumDTO('adpChange');
  static const adrChange = FTypeArapFlowQuerySumDTO('adrChange');
  static const apChange = FTypeArapFlowQuerySumDTO('apChange');
  static const arChange = FTypeArapFlowQuerySumDTO('arChange');
  static const count = FTypeArapFlowQuerySumDTO('count');
  const FTypeArapFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeArapFlowQuerySumDTO> _TypeArapFlowQuerySumDTO_fields = {
  "adpChange": (
    getter: (data) => data.adpChange,
    setter: (data, value) => data.adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpChange = copyer(oldData.adpChange);
    },
  ),
  "adrChange": (
    getter: (data) => data.adrChange,
    setter: (data, value) => data.adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrChange = copyer(oldData.adrChange);
    },
  ),
  "apChange": (
    getter: (data) => data.apChange,
    setter: (data, value) => data.apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apChange = copyer(oldData.apChange);
    },
  ),
  "arChange": (
    getter: (data) => data.arChange,
    setter: (data, value) => data.arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arChange = copyer(oldData.arChange);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
};

class TypeArapFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeArapFlowQuerySumDTO({
    this.adpChange,
    this.adrChange,
    this.apChange,
    this.arChange,
    this.count
  });

  static TypeArapFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeArapFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeArapFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeArapFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeArapFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeArapFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeArapFlowQuerySumDTO? deepCopy(TypeArapFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeArapFlowQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeArapFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeArapFlowQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeArapFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeArapFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? adpChange;

  String? adrChange;

  String? apChange;

  String? arChange;

  int? count;

}

class FTypeAssembleTemplate extends IDataField {
  static const createTime = FTypeAssembleTemplate('createTime');
  static const id = FTypeAssembleTemplate('id');
  static const isEnabled = FTypeAssembleTemplate('isEnabled');
  static const itemId = FTypeAssembleTemplate('itemId');
  static const itemInfo = FTypeAssembleTemplate('itemInfo');
  static const items = FTypeAssembleTemplate('items');
  static const modifyTime = FTypeAssembleTemplate('modifyTime');
  static const name = FTypeAssembleTemplate('name');
  static const number = FTypeAssembleTemplate('number');
  static const remark = FTypeAssembleTemplate('remark');
  static const unitId = FTypeAssembleTemplate('unitId');
  static const unitInfo = FTypeAssembleTemplate('unitInfo');
  const FTypeAssembleTemplate(super.key);
}

final FieldReflectInfo<TypeAssembleTemplate> _TypeAssembleTemplate_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemInfo": (
    getter: (data) => data.itemInfo,
    setter: (data, value) => data.itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data.itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data.itemInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItem.deepCopy;
      newData.itemInfo = copyer(oldData.itemInfo);
    },
  ),
  "items": (
    getter: (data) => data.items,
    setter: (data, value) => data.items = value as List<TypeAssembleTemplateItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAssembleTemplateItem>((single){
        final handler = TypeAssembleTemplateItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAssembleTemplateItem>((single){
        final handler = TypeAssembleTemplateItem.fromDynamic;
        return handler(single)!;
      });
      data.items = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAssembleTemplateItem>((single){
        final handler = TypeAssembleTemplateItem.deepCopy;
        return handler(single)!;
      });
      newData.items = copyer(oldData.items);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitInfo": (
    getter: (data) => data.unitInfo,
    setter: (data, value) => data.unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.unitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.unitInfo = copyer(oldData.unitInfo);
    },
  ),
};

class TypeAssembleTemplate extends IDataBasic implements IDataDynamic {
  TypeAssembleTemplate({
    this.createTime,
    this.id,
    this.isEnabled,
    this.itemId,
    this.itemInfo,
    this.items,
    this.modifyTime,
    this.name,
    this.number,
    this.remark,
    this.unitId,
    this.unitInfo
  });

  static TypeAssembleTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAssembleTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAssembleTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAssembleTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAssembleTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAssembleTemplate? deepCopy(TypeAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAssembleTemplate();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAssembleTemplate_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAssembleTemplate copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? id;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? itemId;

  TypeItem? itemInfo;

  List<TypeAssembleTemplateItem>? items;

  String? modifyTime;

  String? name;

  String? number;

  String? remark;

  int? unitId;

  TypeUnit? unitInfo;

}

class FTypeAssembleTemplateItem extends IDataField {
  static const amount = FTypeAssembleTemplateItem('amount');
  static const itemId = FTypeAssembleTemplateItem('itemId');
  static const itemInfo = FTypeAssembleTemplateItem('itemInfo');
  static const unitId = FTypeAssembleTemplateItem('unitId');
  static const unitInfo = FTypeAssembleTemplateItem('unitInfo');
  const FTypeAssembleTemplateItem(super.key);
}

final FieldReflectInfo<TypeAssembleTemplateItem> _TypeAssembleTemplateItem_fields = {
  "amount": (
    getter: (data) => data.amount,
    setter: (data, value) => data.amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.amount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.amount = copyer(oldData.amount);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemInfo": (
    getter: (data) => data.itemInfo,
    setter: (data, value) => data.itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data.itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data.itemInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItem.deepCopy;
      newData.itemInfo = copyer(oldData.itemInfo);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitInfo": (
    getter: (data) => data.unitInfo,
    setter: (data, value) => data.unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.unitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.unitInfo = copyer(oldData.unitInfo);
    },
  ),
};

class TypeAssembleTemplateItem extends IDataBasic implements IDataDynamic {
  TypeAssembleTemplateItem({
    this.amount,
    this.itemId,
    this.itemInfo,
    this.unitId,
    this.unitInfo
  });

  static TypeAssembleTemplateItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAssembleTemplateItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAssembleTemplateItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAssembleTemplateItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAssembleTemplateItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAssembleTemplateItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAssembleTemplateItem? deepCopy(TypeAssembleTemplateItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAssembleTemplateItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAssembleTemplateItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAssembleTemplateItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAssembleTemplateItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAssembleTemplateItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? amount;

  int? itemId;

  TypeItem? itemInfo;

  int? unitId;

  TypeUnit? unitInfo;

}

class FTypeAttachment extends IDataField {
  static const createEmployeeId = FTypeAttachment('createEmployeeId');
  static const createEmployeeName = FTypeAttachment('createEmployeeName');
  static const createTime = FTypeAttachment('createTime');
  static const id = FTypeAttachment('id');
  static const insertUniqueId = FTypeAttachment('insertUniqueId');
  static const isFromOrder = FTypeAttachment('isFromOrder');
  static const modifyTime = FTypeAttachment('modifyTime');
  static const name = FTypeAttachment('name');
  static const orderId = FTypeAttachment('orderId');
  static const remark = FTypeAttachment('remark');
  static const showFileKey = FTypeAttachment('showFileKey');
  static const size = FTypeAttachment('size');
  const FTypeAttachment(super.key);
}

final FieldReflectInfo<TypeAttachment> _TypeAttachment_fields = {
  "createEmployeeId": (
    getter: (data) => data.createEmployeeId,
    setter: (data, value) => data.createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.createEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.createEmployeeId = copyer(oldData.createEmployeeId);
    },
  ),
  "createEmployeeName": (
    getter: (data) => data.createEmployeeName,
    setter: (data, value) => data.createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createEmployeeName = copyer(oldData.createEmployeeName);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "insertUniqueId": (
    getter: (data) => data.insertUniqueId,
    setter: (data, value) => data.insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.insertUniqueId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.insertUniqueId = copyer(oldData.insertUniqueId);
    },
  ),
  "isFromOrder": (
    getter: (data) => data.isFromOrder,
    setter: (data, value) => data.isFromOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isFromOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isFromOrder = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isFromOrder = copyer(oldData.isFromOrder);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "showFileKey": (
    getter: (data) => data.showFileKey,
    setter: (data, value) => data.showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showFileKey = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showFileKey = copyer(oldData.showFileKey);
    },
  ),
  "size": (
    getter: (data) => data.size,
    setter: (data, value) => data.size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.size = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.size = copyer(oldData.size);
    },
  ),
};

class TypeAttachment extends IDataBasic implements IDataDynamic {
  TypeAttachment({
    this.createEmployeeId,
    this.createEmployeeName,
    this.createTime,
    this.id,
    this.insertUniqueId,
    this.isFromOrder,
    this.modifyTime,
    this.name,
    this.orderId,
    this.remark,
    this.showFileKey,
    this.size
  });

  static TypeAttachment? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachment();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachment_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachment: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachment? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachment_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAttachment? deepCopy(TypeAttachment? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAttachment();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAttachment_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAttachment copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachment_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachment_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? createEmployeeId;

  String? createEmployeeName;

  String? createTime;

  int? id;

  int? insertUniqueId;

  int? isFromOrder;

  String? modifyTime;

  String? name;

  int? orderId;

  String? remark;

  String? showFileKey;

  int? size;

}

class FTypeAttachmentQueryDTO extends IDataField {
  static const data = FTypeAttachmentQueryDTO('data');
  static const pageIndex = FTypeAttachmentQueryDTO('pageIndex');
  static const pageSize = FTypeAttachmentQueryDTO('pageSize');
  static const sum = FTypeAttachmentQueryDTO('sum');
  const FTypeAttachmentQueryDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQueryDTO> _TypeAttachmentQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAttachmentQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAttachmentQueryDataDTO>((single){
        final handler = TypeAttachmentQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAttachmentQueryDataDTO>((single){
        final handler = TypeAttachmentQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAttachmentQueryDataDTO>((single){
        final handler = TypeAttachmentQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeAttachmentQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeAttachmentQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeAttachmentQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAttachmentQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeAttachmentQueryDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeAttachmentQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAttachmentQueryDTO? deepCopy(TypeAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAttachmentQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAttachmentQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeAttachmentQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeAttachmentQuerySumDTO? sum;

}

class FTypeAttachmentQueryDataDTO extends IDataField {
  static const createEmployeeId = FTypeAttachmentQueryDataDTO('createEmployeeId');
  static const createEmployeeName = FTypeAttachmentQueryDataDTO('createEmployeeName');
  static const createTime = FTypeAttachmentQueryDataDTO('createTime');
  static const id = FTypeAttachmentQueryDataDTO('id');
  static const insertUniqueId = FTypeAttachmentQueryDataDTO('insertUniqueId');
  static const name = FTypeAttachmentQueryDataDTO('name');
  static const orderId = FTypeAttachmentQueryDataDTO('orderId');
  static const orderNumber = FTypeAttachmentQueryDataDTO('orderNumber');
  static const orderType = FTypeAttachmentQueryDataDTO('orderType');
  static const remark = FTypeAttachmentQueryDataDTO('remark');
  static const showFileKey = FTypeAttachmentQueryDataDTO('showFileKey');
  static const size = FTypeAttachmentQueryDataDTO('size');
  const FTypeAttachmentQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQueryDataDTO> _TypeAttachmentQueryDataDTO_fields = {
  "createEmployeeId": (
    getter: (data) => data.createEmployeeId,
    setter: (data, value) => data.createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.createEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.createEmployeeId = copyer(oldData.createEmployeeId);
    },
  ),
  "createEmployeeName": (
    getter: (data) => data.createEmployeeName,
    setter: (data, value) => data.createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createEmployeeName = copyer(oldData.createEmployeeName);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "insertUniqueId": (
    getter: (data) => data.insertUniqueId,
    setter: (data, value) => data.insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.insertUniqueId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.insertUniqueId = copyer(oldData.insertUniqueId);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "showFileKey": (
    getter: (data) => data.showFileKey,
    setter: (data, value) => data.showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showFileKey = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showFileKey = copyer(oldData.showFileKey);
    },
  ),
  "size": (
    getter: (data) => data.size,
    setter: (data, value) => data.size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.size = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.size = copyer(oldData.size);
    },
  ),
};

class TypeAttachmentQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQueryDataDTO({
    this.createEmployeeId,
    this.createEmployeeName,
    this.createTime,
    this.id,
    this.insertUniqueId,
    this.name,
    this.orderId,
    this.orderNumber,
    this.orderType,
    this.remark,
    this.showFileKey,
    this.size
  });

  static TypeAttachmentQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAttachmentQueryDataDTO? deepCopy(TypeAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAttachmentQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAttachmentQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? createEmployeeId;

  String? createEmployeeName;

  String? createTime;

  int? id;

  int? insertUniqueId;

  String? name;

  int? orderId;

  String? orderNumber;

  TypeEnumOrderType? orderType;

  String? remark;

  String? showFileKey;

  int? size;

}

class FTypeAttachmentQuerySumDTO extends IDataField {
  static const count = FTypeAttachmentQuerySumDTO('count');
  static const size = FTypeAttachmentQuerySumDTO('size');
  const FTypeAttachmentQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeAttachmentQuerySumDTO> _TypeAttachmentQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "size": (
    getter: (data) => data.size,
    setter: (data, value) => data.size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.size = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.size = copyer(oldData.size);
    },
  ),
};

class TypeAttachmentQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeAttachmentQuerySumDTO({
    this.count,
    this.size
  });

  static TypeAttachmentQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAttachmentQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAttachmentQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAttachmentQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAttachmentQuerySumDTO? deepCopy(TypeAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAttachmentQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAttachmentQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  int? size;

}

class FTypeAutoInjectLiteItemUnitConvert extends IDataField {
  static const id = FTypeAutoInjectLiteItemUnitConvert('id');
  static const isBasic = FTypeAutoInjectLiteItemUnitConvert('isBasic');
  static const isCommon = FTypeAutoInjectLiteItemUnitConvert('isCommon');
  static const isEnabled = FTypeAutoInjectLiteItemUnitConvert('isEnabled');
  static const unitConvert = FTypeAutoInjectLiteItemUnitConvert('unitConvert');
  static const unitConvertDesc = FTypeAutoInjectLiteItemUnitConvert('unitConvertDesc');
  static const unitId = FTypeAutoInjectLiteItemUnitConvert('unitId');
  static const unitName = FTypeAutoInjectLiteItemUnitConvert('unitName');
  static const wholeSalesPrice = FTypeAutoInjectLiteItemUnitConvert('wholeSalesPrice');
  const FTypeAutoInjectLiteItemUnitConvert(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteItemUnitConvert> _TypeAutoInjectLiteItemUnitConvert_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isBasic": (
    getter: (data) => data.isBasic,
    setter: (data, value) => data.isBasic = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isBasic);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isBasic = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isBasic = copyer(oldData.isBasic);
    },
  ),
  "isCommon": (
    getter: (data) => data.isCommon,
    setter: (data, value) => data.isCommon = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCommon);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCommon = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCommon = copyer(oldData.isCommon);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "unitConvert": (
    getter: (data) => data.unitConvert,
    setter: (data, value) => data.unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvert = copyer(oldData.unitConvert);
    },
  ),
  "unitConvertDesc": (
    getter: (data) => data.unitConvertDesc,
    setter: (data, value) => data.unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertDesc = copyer(oldData.unitConvertDesc);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitName": (
    getter: (data) => data.unitName,
    setter: (data, value) => data.unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitName = copyer(oldData.unitName);
    },
  ),
  "wholeSalesPrice": (
    getter: (data) => data.wholeSalesPrice,
    setter: (data, value) => data.wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.wholeSalesPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.wholeSalesPrice = copyer(oldData.wholeSalesPrice);
    },
  ),
};

class TypeAutoInjectLiteItemUnitConvert extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteItemUnitConvert({
    this.id,
    this.isBasic,
    this.isCommon,
    this.isEnabled,
    this.unitConvert,
    this.unitConvertDesc,
    this.unitId,
    this.unitName,
    this.wholeSalesPrice
  });

  static TypeAutoInjectLiteItemUnitConvert? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteItemUnitConvert();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteItemUnitConvert: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteItemUnitConvert_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAutoInjectLiteItemUnitConvert? deepCopy(TypeAutoInjectLiteItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAutoInjectLiteItemUnitConvert();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAutoInjectLiteItemUnitConvert_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAutoInjectLiteItemUnitConvert copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  int? isBasic;

  int? isCommon;

  TypeEnumSoftEnableIsEnable? isEnabled;

  String? unitConvert;

  String? unitConvertDesc;

  int? unitId;

  String? unitName;

  String? wholeSalesPrice;

}

class FTypeAutoInjectLiteOrder extends IDataField {
  static const billTotal = FTypeAutoInjectLiteOrder('billTotal');
  static const billType = FTypeAutoInjectLiteOrder('billType');
  static const contactId = FTypeAutoInjectLiteOrder('contactId');
  static const contactName = FTypeAutoInjectLiteOrder('contactName');
  static const costTotal = FTypeAutoInjectLiteOrder('costTotal');
  static const discountTotal = FTypeAutoInjectLiteOrder('discountTotal');
  static const doneBillTotal = FTypeAutoInjectLiteOrder('doneBillTotal');
  static const feeTotal = FTypeAutoInjectLiteOrder('feeTotal');
  static const hasFinishBill = FTypeAutoInjectLiteOrder('hasFinishBill');
  static const id = FTypeAutoInjectLiteOrder('id');
  static const number = FTypeAutoInjectLiteOrder('number');
  static const orderDate = FTypeAutoInjectLiteOrder('orderDate');
  static const preTaxTotal = FTypeAutoInjectLiteOrder('preTaxTotal');
  static const profitRate = FTypeAutoInjectLiteOrder('profitRate');
  static const profitTotal = FTypeAutoInjectLiteOrder('profitTotal');
  static const redState = FTypeAutoInjectLiteOrder('redState');
  static const state = FTypeAutoInjectLiteOrder('state');
  static const storeId = FTypeAutoInjectLiteOrder('storeId');
  static const storeName = FTypeAutoInjectLiteOrder('storeName');
  static const subType = FTypeAutoInjectLiteOrder('subType');
  static const tax = FTypeAutoInjectLiteOrder('tax');
  static const taxOnlyTotal = FTypeAutoInjectLiteOrder('taxOnlyTotal');
  static const total = FTypeAutoInjectLiteOrder('total');
  static const totalAmount = FTypeAutoInjectLiteOrder('totalAmount');
  static const type = FTypeAutoInjectLiteOrder('type');
  static const undoneBillTotal = FTypeAutoInjectLiteOrder('undoneBillTotal');
  const FTypeAutoInjectLiteOrder(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteOrder> _TypeAutoInjectLiteOrder_fields = {
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "billType": (
    getter: (data) => data.billType,
    setter: (data, value) => data.billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data.billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data.billType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderBillType.deepCopy;
      newData.billType = copyer(oldData.billType);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "feeTotal": (
    getter: (data) => data.feeTotal,
    setter: (data, value) => data.feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeTotal = copyer(oldData.feeTotal);
    },
  ),
  "hasFinishBill": (
    getter: (data) => data.hasFinishBill,
    setter: (data, value) => data.hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasFinishBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasFinishBill = copyer(oldData.hasFinishBill);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "redState": (
    getter: (data) => data.redState,
    setter: (data, value) => data.redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.redState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.redState = copyer(oldData.redState);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "subType": (
    getter: (data) => data.subType,
    setter: (data, value) => data.subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data.subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data.subType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderSubType.deepCopy;
      newData.subType = copyer(oldData.subType);
    },
  ),
  "tax": (
    getter: (data) => data.tax,
    setter: (data, value) => data.tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.tax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.tax = copyer(oldData.tax);
    },
  ),
  "taxOnlyTotal": (
    getter: (data) => data.taxOnlyTotal,
    setter: (data, value) => data.taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxOnlyTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxOnlyTotal = copyer(oldData.taxOnlyTotal);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "totalAmount": (
    getter: (data) => data.totalAmount,
    setter: (data, value) => data.totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalAmount = copyer(oldData.totalAmount);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
};

class TypeAutoInjectLiteOrder extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteOrder({
    this.billTotal,
    this.billType,
    this.contactId,
    this.contactName,
    this.costTotal,
    this.discountTotal,
    this.doneBillTotal,
    this.feeTotal,
    this.hasFinishBill,
    this.id,
    this.number,
    this.orderDate,
    this.preTaxTotal,
    this.profitRate,
    this.profitTotal,
    this.redState,
    this.state,
    this.storeId,
    this.storeName,
    this.subType,
    this.tax,
    this.taxOnlyTotal,
    this.total,
    this.totalAmount,
    this.type,
    this.undoneBillTotal
  });

  static TypeAutoInjectLiteOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAutoInjectLiteOrder? deepCopy(TypeAutoInjectLiteOrder? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAutoInjectLiteOrder();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAutoInjectLiteOrder_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAutoInjectLiteOrder copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billTotal;

  TypeEnumOrderBillType? billType;

  int? contactId;

  String? contactName;

  String? costTotal;

  String? discountTotal;

  String? doneBillTotal;

  String? feeTotal;

  int? hasFinishBill;

  int? id;

  String? number;

  String? orderDate;

  String? preTaxTotal;

  String? profitRate;

  String? profitTotal;

  TypeEnumOrderRedState? redState;

  TypeEnumOrderState? state;

  int? storeId;

  String? storeName;

  TypeEnumOrderSubType? subType;

  String? tax;

  String? taxOnlyTotal;

  String? total;

  String? totalAmount;

  TypeEnumOrderType? type;

  String? undoneBillTotal;

}

class FTypeAutoInjectLiteUnit extends IDataField {
  static const id = FTypeAutoInjectLiteUnit('id');
  static const name = FTypeAutoInjectLiteUnit('name');
  const FTypeAutoInjectLiteUnit(super.key);
}

final FieldReflectInfo<TypeAutoInjectLiteUnit> _TypeAutoInjectLiteUnit_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
};

class TypeAutoInjectLiteUnit extends IDataBasic implements IDataDynamic {
  TypeAutoInjectLiteUnit({
    this.id,
    this.name
  });

  static TypeAutoInjectLiteUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeAutoInjectLiteUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeAutoInjectLiteUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeAutoInjectLiteUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeAutoInjectLiteUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeAutoInjectLiteUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeAutoInjectLiteUnit? deepCopy(TypeAutoInjectLiteUnit? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeAutoInjectLiteUnit();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeAutoInjectLiteUnit_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeAutoInjectLiteUnit copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeAutoInjectLiteUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeAutoInjectLiteUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? id;

  String? name;

}

class FTypeBackendTask extends IDataField {
  static const allCount = FTypeBackendTask('allCount');
  static const createTime = FTypeBackendTask('createTime');
  static const description = FTypeBackendTask('description');
  static const failCount = FTypeBackendTask('failCount');
  static const finishCount = FTypeBackendTask('finishCount');
  static const id = FTypeBackendTask('id');
  static const modifyTime = FTypeBackendTask('modifyTime');
  static const msg = FTypeBackendTask('msg');
  static const state = FTypeBackendTask('state');
  static const subType = FTypeBackendTask('subType');
  static const type = FTypeBackendTask('type');
  const FTypeBackendTask(super.key);
}

final FieldReflectInfo<TypeBackendTask> _TypeBackendTask_fields = {
  "allCount": (
    getter: (data) => data.allCount,
    setter: (data, value) => data.allCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.allCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.allCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.allCount = copyer(oldData.allCount);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "description": (
    getter: (data) => data.description,
    setter: (data, value) => data.description = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.description);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.description = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.description = copyer(oldData.description);
    },
  ),
  "failCount": (
    getter: (data) => data.failCount,
    setter: (data, value) => data.failCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.failCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.failCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.failCount = copyer(oldData.failCount);
    },
  ),
  "finishCount": (
    getter: (data) => data.finishCount,
    setter: (data, value) => data.finishCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.finishCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.finishCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.finishCount = copyer(oldData.finishCount);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "msg": (
    getter: (data) => data.msg,
    setter: (data, value) => data.msg = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.msg);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.msg = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.msg = copyer(oldData.msg);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumBackendTaskState?,
    toDynamic: (data) {
      final formatter = TypeEnumBackendTaskState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumBackendTaskState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumBackendTaskState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "subType": (
    getter: (data) => data.subType,
    setter: (data, value) => data.subType = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subType);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subType = copyer(oldData.subType);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumBackendTaskType?,
    toDynamic: (data) {
      final formatter = TypeEnumBackendTaskType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumBackendTaskType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumBackendTaskType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
};

class TypeBackendTask extends IDataBasic implements IDataDynamic {
  TypeBackendTask({
    this.allCount,
    this.createTime,
    this.description,
    this.failCount,
    this.finishCount,
    this.id,
    this.modifyTime,
    this.msg,
    this.state,
    this.subType,
    this.type
  });

  static TypeBackendTask? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeBackendTask();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeBackendTask_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeBackendTask: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeBackendTask? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeBackendTask_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeBackendTask? deepCopy(TypeBackendTask? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeBackendTask();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeBackendTask_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeBackendTask copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeBackendTask_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeBackendTask_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? allCount;

  String? createTime;

  String? description;

  int? failCount;

  int? finishCount;

  int? id;

  String? modifyTime;

  String? msg;

  TypeEnumBackendTaskState? state;

  String? subType;

  TypeEnumBackendTaskType? type;

}

class FTypeColumnConstraintItem extends IDataField {
  static const columnAliasName = FTypeColumnConstraintItem('columnAliasName');
  static const columnConstraintId = FTypeColumnConstraintItem('columnConstraintId');
  static const columnId = FTypeColumnConstraintItem('columnId');
  static const columnIsEditable = FTypeColumnConstraintItem('columnIsEditable');
  static const columnIsRequired = FTypeColumnConstraintItem('columnIsRequired');
  static const columnShowType = FTypeColumnConstraintItem('columnShowType');
  static const createTime = FTypeColumnConstraintItem('createTime');
  static const id = FTypeColumnConstraintItem('id');
  static const modifyTime = FTypeColumnConstraintItem('modifyTime');
  static const positionId = FTypeColumnConstraintItem('positionId');
  static const sceneId = FTypeColumnConstraintItem('sceneId');
  const FTypeColumnConstraintItem(super.key);
}

final FieldReflectInfo<TypeColumnConstraintItem> _TypeColumnConstraintItem_fields = {
  "columnAliasName": (
    getter: (data) => data.columnAliasName,
    setter: (data, value) => data.columnAliasName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnAliasName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnAliasName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnAliasName = copyer(oldData.columnAliasName);
    },
  ),
  "columnConstraintId": (
    getter: (data) => data.columnConstraintId,
    setter: (data, value) => data.columnConstraintId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnConstraintId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnConstraintId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnConstraintId = copyer(oldData.columnConstraintId);
    },
  ),
  "columnId": (
    getter: (data) => data.columnId,
    setter: (data, value) => data.columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnId = copyer(oldData.columnId);
    },
  ),
  "columnIsEditable": (
    getter: (data) => data.columnIsEditable,
    setter: (data, value) => data.columnIsEditable = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.columnIsEditable);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.columnIsEditable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.columnIsEditable = copyer(oldData.columnIsEditable);
    },
  ),
  "columnIsRequired": (
    getter: (data) => data.columnIsRequired,
    setter: (data, value) => data.columnIsRequired = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.columnIsRequired);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.columnIsRequired = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.columnIsRequired = copyer(oldData.columnIsRequired);
    },
  ),
  "columnShowType": (
    getter: (data) => data.columnShowType,
    setter: (data, value) => data.columnShowType = value as TypeEnumColumnShowType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnShowType.toDynamic;
      return formatter(data.columnShowType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnShowType.fromDynamic;
      data.columnShowType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumColumnShowType.deepCopy;
      newData.columnShowType = copyer(oldData.columnShowType);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "positionId": (
    getter: (data) => data.positionId,
    setter: (data, value) => data.positionId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.positionId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.positionId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.positionId = copyer(oldData.positionId);
    },
  ),
  "sceneId": (
    getter: (data) => data.sceneId,
    setter: (data, value) => data.sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sceneId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sceneId = copyer(oldData.sceneId);
    },
  ),
};

class TypeColumnConstraintItem extends IDataBasic implements IDataDynamic {
  TypeColumnConstraintItem({
    this.columnAliasName,
    this.columnConstraintId,
    this.columnId,
    this.columnIsEditable,
    this.columnIsRequired,
    this.columnShowType,
    this.createTime,
    this.id,
    this.modifyTime,
    this.positionId,
    this.sceneId
  });

  static TypeColumnConstraintItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnConstraintItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnConstraintItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnConstraintItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnConstraintItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnConstraintItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeColumnConstraintItem? deepCopy(TypeColumnConstraintItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeColumnConstraintItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeColumnConstraintItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeColumnConstraintItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnConstraintItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnConstraintItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? columnAliasName;

  String? columnConstraintId;

  String? columnId;

  int? columnIsEditable;

  int? columnIsRequired;

  TypeEnumColumnShowType? columnShowType;

  String? createTime;

  String? id;

  String? modifyTime;

  int? positionId;

  String? sceneId;

}

class FTypeColumnState extends IDataField {
  static const createTime = FTypeColumnState('createTime');
  static const id = FTypeColumnState('id');
  static const items = FTypeColumnState('items');
  static const modifyTime = FTypeColumnState('modifyTime');
  static const operatorId = FTypeColumnState('operatorId');
  static const sceneId = FTypeColumnState('sceneId');
  const FTypeColumnState(super.key);
}

final FieldReflectInfo<TypeColumnState> _TypeColumnState_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "items": (
    getter: (data) => data.items,
    setter: (data, value) => data.items = value as List<TypeColumnStateItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeColumnStateItem>((single){
        final handler = TypeColumnStateItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeColumnStateItem>((single){
        final handler = TypeColumnStateItem.fromDynamic;
        return handler(single)!;
      });
      data.items = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeColumnStateItem>((single){
        final handler = TypeColumnStateItem.deepCopy;
        return handler(single)!;
      });
      newData.items = copyer(oldData.items);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "operatorId": (
    getter: (data) => data.operatorId,
    setter: (data, value) => data.operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.operatorId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.operatorId = copyer(oldData.operatorId);
    },
  ),
  "sceneId": (
    getter: (data) => data.sceneId,
    setter: (data, value) => data.sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sceneId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sceneId = copyer(oldData.sceneId);
    },
  ),
};

class TypeColumnState extends IDataBasic implements IDataDynamic {
  TypeColumnState({
    this.createTime,
    this.id,
    this.items,
    this.modifyTime,
    this.operatorId,
    this.sceneId
  });

  static TypeColumnState? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnState();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnState_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnState: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnState? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnState_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeColumnState? deepCopy(TypeColumnState? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeColumnState();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeColumnState_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeColumnState copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnState_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnState_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  String? id;

  List<TypeColumnStateItem>? items;

  String? modifyTime;

  int? operatorId;

  String? sceneId;

}

class FTypeColumnStateItem extends IDataField {
  static const columnId = FTypeColumnStateItem('columnId');
  static const createTime = FTypeColumnStateItem('createTime');
  static const defaultValue = FTypeColumnStateItem('defaultValue');
  static const defaultValueType = FTypeColumnStateItem('defaultValueType');
  static const id = FTypeColumnStateItem('id');
  static const isEnterJumpIn = FTypeColumnStateItem('isEnterJumpIn');
  static const isShow = FTypeColumnStateItem('isShow');
  static const modifyTime = FTypeColumnStateItem('modifyTime');
  static const width = FTypeColumnStateItem('width');
  const FTypeColumnStateItem(super.key);
}

final FieldReflectInfo<TypeColumnStateItem> _TypeColumnStateItem_fields = {
  "columnId": (
    getter: (data) => data.columnId,
    setter: (data, value) => data.columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnId = copyer(oldData.columnId);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "defaultValue": (
    getter: (data) => data.defaultValue,
    setter: (data, value) => data.defaultValue = value as Object?,
    toDynamic: (data) {
      final formatter = ObjectHelper.toDynamic;
      return formatter(data.defaultValue);
    },
    fromDynamic: (data, value) {
      final parser = ObjectHelper.fromDynamic;
      data.defaultValue = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ObjectHelper.deepCopy;
      newData.defaultValue = copyer(oldData.defaultValue);
    },
  ),
  "defaultValueType": (
    getter: (data) => data.defaultValueType,
    setter: (data, value) => data.defaultValueType = value as TypeEnumColumnValueType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnValueType.toDynamic;
      return formatter(data.defaultValueType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnValueType.fromDynamic;
      data.defaultValueType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumColumnValueType.deepCopy;
      newData.defaultValueType = copyer(oldData.defaultValueType);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isEnterJumpIn": (
    getter: (data) => data.isEnterJumpIn,
    setter: (data, value) => data.isEnterJumpIn = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isEnterJumpIn);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isEnterJumpIn = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isEnterJumpIn = copyer(oldData.isEnterJumpIn);
    },
  ),
  "isShow": (
    getter: (data) => data.isShow,
    setter: (data, value) => data.isShow = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isShow);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isShow = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isShow = copyer(oldData.isShow);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "width": (
    getter: (data) => data.width,
    setter: (data, value) => data.width = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.width);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.width = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.width = copyer(oldData.width);
    },
  ),
};

class TypeColumnStateItem extends IDataBasic implements IDataDynamic {
  TypeColumnStateItem({
    this.columnId,
    this.createTime,
    this.defaultValue,
    this.defaultValueType,
    this.id,
    this.isEnterJumpIn,
    this.isShow,
    this.modifyTime,
    this.width
  });

  static TypeColumnStateItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeColumnStateItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeColumnStateItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeColumnStateItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeColumnStateItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeColumnStateItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeColumnStateItem? deepCopy(TypeColumnStateItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeColumnStateItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeColumnStateItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeColumnStateItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeColumnStateItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeColumnStateItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? columnId;

  String? createTime;

  Object? defaultValue;

  TypeEnumColumnValueType? defaultValueType;

  String? id;

  int? isEnterJumpIn;

  int? isShow;

  String? modifyTime;

  int? width;

}

class FTypeCombineConstraint extends IDataField {
  static const columnAliasName = FTypeCombineConstraint('columnAliasName');
  static const columnId = FTypeCombineConstraint('columnId');
  static const columnIsEditable = FTypeCombineConstraint('columnIsEditable');
  static const columnIsRequired = FTypeCombineConstraint('columnIsRequired');
  static const columnShowType = FTypeCombineConstraint('columnShowType');
  const FTypeCombineConstraint(super.key);
}

final FieldReflectInfo<TypeCombineConstraint> _TypeCombineConstraint_fields = {
  "columnAliasName": (
    getter: (data) => data.columnAliasName,
    setter: (data, value) => data.columnAliasName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnAliasName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnAliasName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnAliasName = copyer(oldData.columnAliasName);
    },
  ),
  "columnId": (
    getter: (data) => data.columnId,
    setter: (data, value) => data.columnId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.columnId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.columnId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.columnId = copyer(oldData.columnId);
    },
  ),
  "columnIsEditable": (
    getter: (data) => data.columnIsEditable,
    setter: (data, value) => data.columnIsEditable = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.columnIsEditable);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.columnIsEditable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.columnIsEditable = copyer(oldData.columnIsEditable);
    },
  ),
  "columnIsRequired": (
    getter: (data) => data.columnIsRequired,
    setter: (data, value) => data.columnIsRequired = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.columnIsRequired);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.columnIsRequired = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.columnIsRequired = copyer(oldData.columnIsRequired);
    },
  ),
  "columnShowType": (
    getter: (data) => data.columnShowType,
    setter: (data, value) => data.columnShowType = value as TypeEnumColumnShowType?,
    toDynamic: (data) {
      final formatter = TypeEnumColumnShowType.toDynamic;
      return formatter(data.columnShowType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumColumnShowType.fromDynamic;
      data.columnShowType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumColumnShowType.deepCopy;
      newData.columnShowType = copyer(oldData.columnShowType);
    },
  ),
};

class TypeCombineConstraint extends IDataBasic implements IDataDynamic {
  TypeCombineConstraint({
    this.columnAliasName,
    this.columnId,
    this.columnIsEditable,
    this.columnIsRequired,
    this.columnShowType
  });

  static TypeCombineConstraint? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeCombineConstraint();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeCombineConstraint_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeCombineConstraint: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeCombineConstraint? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeCombineConstraint_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeCombineConstraint? deepCopy(TypeCombineConstraint? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeCombineConstraint();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeCombineConstraint_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeCombineConstraint copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeCombineConstraint_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeCombineConstraint_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? columnAliasName;

  String? columnId;

  int? columnIsEditable;

  int? columnIsRequired;

  TypeEnumColumnShowType? columnShowType;

}

class FTypeConstant extends IDataField {
  static const label = FTypeConstant('label');
  static const value = FTypeConstant('value');
  const FTypeConstant(super.key);
}

final FieldReflectInfo<TypeConstant> _TypeConstant_fields = {
  "label": (
    getter: (data) => data.label,
    setter: (data, value) => data.label = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.label);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.label = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.label = copyer(oldData.label);
    },
  ),
  "value": (
    getter: (data) => data.value,
    setter: (data, value) => data.value = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.value);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.value = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.value = copyer(oldData.value);
    },
  ),
};

class TypeConstant extends IDataBasic implements IDataDynamic {
  TypeConstant({
    this.label,
    this.value
  });

  static TypeConstant? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeConstant();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeConstant_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeConstant: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeConstant? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeConstant_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeConstant? deepCopy(TypeConstant? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeConstant();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeConstant_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeConstant copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeConstant_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeConstant_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? label;

  String? value;

}

class FTypeContact extends IDataField {
  static const accountPayable = FTypeContact('accountPayable');
  static const accountReceivable = FTypeContact('accountReceivable');
  static const address = FTypeContact('address');
  static const advancePayable = FTypeContact('advancePayable');
  static const advanceReceivable = FTypeContact('advanceReceivable');
  static const bank = FTypeContact('bank');
  static const bankAccount = FTypeContact('bankAccount');
  static const children = FTypeContact('children');
  static const createTime = FTypeContact('createTime');
  static const defaultTax = FTypeContact('defaultTax');
  static const deferInvoiceTotal = FTypeContact('deferInvoiceTotal');
  static const hasBusinessLink = FTypeContact('hasBusinessLink');
  static const id = FTypeContact('id');
  static const initialAccountPayable = FTypeContact('initialAccountPayable');
  static const initialAccountReceivable = FTypeContact('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContact('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContact('initialAdvanceReceivable');
  static const isCategory = FTypeContact('isCategory');
  static const isCustomer = FTypeContact('isCustomer');
  static const isCustomerAndSupplier = FTypeContact('isCustomerAndSupplier');
  static const isEnabled = FTypeContact('isEnabled');
  static const isSupplier = FTypeContact('isSupplier');
  static const isSystem = FTypeContact('isSystem');
  static const modifyTime = FTypeContact('modifyTime');
  static const name = FTypeContact('name');
  static const number = FTypeContact('number');
  static const parentId = FTypeContact('parentId');
  static const parentInfo = FTypeContact('parentInfo');
  static const phones = FTypeContact('phones');
  static const remark = FTypeContact('remark');
  static const sortWeight = FTypeContact('sortWeight');
  static const taxNumber = FTypeContact('taxNumber');
  static const treeLevel = FTypeContact('treeLevel');
  static const treePath = FTypeContact('treePath');
  static const type = FTypeContact('type');
  const FTypeContact(super.key);
}

final FieldReflectInfo<TypeContact> _TypeContact_fields = {
  "accountPayable": (
    getter: (data) => data.accountPayable,
    setter: (data, value) => data.accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountPayable = copyer(oldData.accountPayable);
    },
  ),
  "accountReceivable": (
    getter: (data) => data.accountReceivable,
    setter: (data, value) => data.accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountReceivable = copyer(oldData.accountReceivable);
    },
  ),
  "address": (
    getter: (data) => data.address,
    setter: (data, value) => data.address = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.address);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.address = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.address = copyer(oldData.address);
    },
  ),
  "advancePayable": (
    getter: (data) => data.advancePayable,
    setter: (data, value) => data.advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advancePayable = copyer(oldData.advancePayable);
    },
  ),
  "advanceReceivable": (
    getter: (data) => data.advanceReceivable,
    setter: (data, value) => data.advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advanceReceivable = copyer(oldData.advanceReceivable);
    },
  ),
  "bank": (
    getter: (data) => data.bank,
    setter: (data, value) => data.bank = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bank);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bank = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bank = copyer(oldData.bank);
    },
  ),
  "bankAccount": (
    getter: (data) => data.bankAccount,
    setter: (data, value) => data.bankAccount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bankAccount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bankAccount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bankAccount = copyer(oldData.bankAccount);
    },
  ),
  "children": (
    getter: (data) => data.children,
    setter: (data, value) => data.children = value as List<TypeContact>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContact>((single){
        final handler = TypeContact.toDynamic;
        return handler(single)!;
      });
      return formatter(data.children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
        final handler = TypeContact.fromDynamic;
        return handler(single)!;
      });
      data.children = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeContact>((single){
        final handler = TypeContact.deepCopy;
        return handler(single)!;
      });
      newData.children = copyer(oldData.children);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "defaultTax": (
    getter: (data) => data.defaultTax,
    setter: (data, value) => data.defaultTax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.defaultTax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.defaultTax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.defaultTax = copyer(oldData.defaultTax);
    },
  ),
  "deferInvoiceTotal": (
    getter: (data) => data.deferInvoiceTotal,
    setter: (data, value) => data.deferInvoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.deferInvoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.deferInvoiceTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.deferInvoiceTotal = copyer(oldData.deferInvoiceTotal);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "initialAccountPayable": (
    getter: (data) => data.initialAccountPayable,
    setter: (data, value) => data.initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountPayable = copyer(oldData.initialAccountPayable);
    },
  ),
  "initialAccountReceivable": (
    getter: (data) => data.initialAccountReceivable,
    setter: (data, value) => data.initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountReceivable = copyer(oldData.initialAccountReceivable);
    },
  ),
  "initialAdvancePayable": (
    getter: (data) => data.initialAdvancePayable,
    setter: (data, value) => data.initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvancePayable = copyer(oldData.initialAdvancePayable);
    },
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data.initialAdvanceReceivable,
    setter: (data, value) => data.initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvanceReceivable = copyer(oldData.initialAdvanceReceivable);
    },
  ),
  "isCategory": (
    getter: (data) => data.isCategory,
    setter: (data, value) => data.isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCategory = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCategory = copyer(oldData.isCategory);
    },
  ),
  "isCustomer": (
    getter: (data) => data.isCustomer,
    setter: (data, value) => data.isCustomer = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCustomer);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCustomer = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCustomer = copyer(oldData.isCustomer);
    },
  ),
  "isCustomerAndSupplier": (
    getter: (data) => data.isCustomerAndSupplier,
    setter: (data, value) => data.isCustomerAndSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCustomerAndSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCustomerAndSupplier = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCustomerAndSupplier = copyer(oldData.isCustomerAndSupplier);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isSupplier": (
    getter: (data) => data.isSupplier,
    setter: (data, value) => data.isSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSupplier = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSupplier = copyer(oldData.isSupplier);
    },
  ),
  "isSystem": (
    getter: (data) => data.isSystem,
    setter: (data, value) => data.isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSystem = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSystem = copyer(oldData.isSystem);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "parentId": (
    getter: (data) => data.parentId,
    setter: (data, value) => data.parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.parentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.parentId = copyer(oldData.parentId);
    },
  ),
  "parentInfo": (
    getter: (data) => data.parentInfo,
    setter: (data, value) => data.parentInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.parentInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.parentInfo = copyer(oldData.parentInfo);
    },
  ),
  "phones": (
    getter: (data) => data.phones,
    setter: (data, value) => data.phones = value as List<TypeContactPhone>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContactPhone>((single){
        final handler = TypeContactPhone.toDynamic;
        return handler(single)!;
      });
      return formatter(data.phones);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContactPhone>((single){
        final handler = TypeContactPhone.fromDynamic;
        return handler(single)!;
      });
      data.phones = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeContactPhone>((single){
        final handler = TypeContactPhone.deepCopy;
        return handler(single)!;
      });
      newData.phones = copyer(oldData.phones);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "sortWeight": (
    getter: (data) => data.sortWeight,
    setter: (data, value) => data.sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sortWeight = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sortWeight = copyer(oldData.sortWeight);
    },
  ),
  "taxNumber": (
    getter: (data) => data.taxNumber,
    setter: (data, value) => data.taxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxNumber = copyer(oldData.taxNumber);
    },
  ),
  "treeLevel": (
    getter: (data) => data.treeLevel,
    setter: (data, value) => data.treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.treeLevel = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.treeLevel = copyer(oldData.treeLevel);
    },
  ),
  "treePath": (
    getter: (data) => data.treePath,
    setter: (data, value) => data.treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.treePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.treePath = copyer(oldData.treePath);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumContactType?,
    toDynamic: (data) {
      final formatter = TypeEnumContactType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumContactType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumContactType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
};

class TypeContact extends IDataBasic implements IDataDynamic {
  TypeContact({
    this.accountPayable,
    this.accountReceivable,
    this.address,
    this.advancePayable,
    this.advanceReceivable,
    this.bank,
    this.bankAccount,
    this.children,
    this.createTime,
    this.defaultTax,
    this.deferInvoiceTotal,
    this.hasBusinessLink,
    this.id,
    this.initialAccountPayable,
    this.initialAccountReceivable,
    this.initialAdvancePayable,
    this.initialAdvanceReceivable,
    this.isCategory,
    this.isCustomer,
    this.isCustomerAndSupplier,
    this.isEnabled,
    this.isSupplier,
    this.isSystem,
    this.modifyTime,
    this.name,
    this.number,
    this.parentId,
    this.parentInfo,
    this.phones,
    this.remark,
    this.sortWeight,
    this.taxNumber,
    this.treeLevel,
    this.treePath,
    this.type
  });

  static TypeContact? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContact();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContact_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContact: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContact? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContact_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeContact? deepCopy(TypeContact? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeContact();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeContact_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeContact copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContact_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContact_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? accountPayable;

  String? accountReceivable;

  String? address;

  String? advancePayable;

  String? advanceReceivable;

  String? bank;

  String? bankAccount;

  List<TypeContact>? children;

  String? createTime;

  String? defaultTax;

  String? deferInvoiceTotal;

  int? hasBusinessLink;

  int? id;

  String? initialAccountPayable;

  String? initialAccountReceivable;

  String? initialAdvancePayable;

  String? initialAdvanceReceivable;

  int? isCategory;

  int? isCustomer;

  int? isCustomerAndSupplier;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isSupplier;

  int? isSystem;

  String? modifyTime;

  String? name;

  String? number;

  int? parentId;

  TypeContact? parentInfo;

  List<TypeContactPhone>? phones;

  String? remark;

  int? sortWeight;

  String? taxNumber;

  int? treeLevel;

  String? treePath;

  TypeEnumContactType? type;

}

class FTypeContactPhone extends IDataField {
  static const birthday = FTypeContactPhone('birthday');
  static const name = FTypeContactPhone('name');
  static const phone = FTypeContactPhone('phone');
  static const remark = FTypeContactPhone('remark');
  static const shippingAddress = FTypeContactPhone('shippingAddress');
  const FTypeContactPhone(super.key);
}

final FieldReflectInfo<TypeContactPhone> _TypeContactPhone_fields = {
  "birthday": (
    getter: (data) => data.birthday,
    setter: (data, value) => data.birthday = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.birthday);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.birthday = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.birthday = copyer(oldData.birthday);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "phone": (
    getter: (data) => data.phone,
    setter: (data, value) => data.phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.phone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.phone = copyer(oldData.phone);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "shippingAddress": (
    getter: (data) => data.shippingAddress,
    setter: (data, value) => data.shippingAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.shippingAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.shippingAddress = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.shippingAddress = copyer(oldData.shippingAddress);
    },
  ),
};

class TypeContactPhone extends IDataBasic implements IDataDynamic {
  TypeContactPhone({
    this.birthday,
    this.name,
    this.phone,
    this.remark,
    this.shippingAddress
  });

  static TypeContactPhone? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactPhone();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactPhone_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactPhone: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactPhone? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactPhone_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeContactPhone? deepCopy(TypeContactPhone? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeContactPhone();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeContactPhone_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeContactPhone copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactPhone_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactPhone_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? birthday;

  String? name;

  String? phone;

  String? remark;

  String? shippingAddress;

}

class FTypeContactQueryDTO extends IDataField {
  static const data = FTypeContactQueryDTO('data');
  static const pageIndex = FTypeContactQueryDTO('pageIndex');
  static const pageSize = FTypeContactQueryDTO('pageSize');
  static const sum = FTypeContactQueryDTO('sum');
  const FTypeContactQueryDTO(super.key);
}

final FieldReflectInfo<TypeContactQueryDTO> _TypeContactQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeContactQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContactQueryDataDTO>((single){
        final handler = TypeContactQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContactQueryDataDTO>((single){
        final handler = TypeContactQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeContactQueryDataDTO>((single){
        final handler = TypeContactQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeContactQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeContactQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeContactQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContactQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeContactQueryDTO extends IDataBasic implements IDataDynamic {
  TypeContactQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeContactQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeContactQueryDTO? deepCopy(TypeContactQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeContactQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeContactQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeContactQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeContactQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeContactQuerySumDTO? sum;

}

class FTypeContactQueryDataDTO extends IDataField {
  static const accountPayable = FTypeContactQueryDataDTO('accountPayable');
  static const accountReceivable = FTypeContactQueryDataDTO('accountReceivable');
  static const advancePayable = FTypeContactQueryDataDTO('advancePayable');
  static const advanceReceivable = FTypeContactQueryDataDTO('advanceReceivable');
  static const createTime = FTypeContactQueryDataDTO('createTime');
  static const id = FTypeContactQueryDataDTO('id');
  static const initialAccountPayable = FTypeContactQueryDataDTO('initialAccountPayable');
  static const initialAccountReceivable = FTypeContactQueryDataDTO('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContactQueryDataDTO('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContactQueryDataDTO('initialAdvanceReceivable');
  static const isCustomer = FTypeContactQueryDataDTO('isCustomer');
  static const isEnabled = FTypeContactQueryDataDTO('isEnabled');
  static const isSupplier = FTypeContactQueryDataDTO('isSupplier');
  static const name = FTypeContactQueryDataDTO('name');
  static const number = FTypeContactQueryDataDTO('number');
  static const parentId = FTypeContactQueryDataDTO('parentId');
  static const parentName = FTypeContactQueryDataDTO('parentName');
  static const remark = FTypeContactQueryDataDTO('remark');
  const FTypeContactQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeContactQueryDataDTO> _TypeContactQueryDataDTO_fields = {
  "accountPayable": (
    getter: (data) => data.accountPayable,
    setter: (data, value) => data.accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountPayable = copyer(oldData.accountPayable);
    },
  ),
  "accountReceivable": (
    getter: (data) => data.accountReceivable,
    setter: (data, value) => data.accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountReceivable = copyer(oldData.accountReceivable);
    },
  ),
  "advancePayable": (
    getter: (data) => data.advancePayable,
    setter: (data, value) => data.advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advancePayable = copyer(oldData.advancePayable);
    },
  ),
  "advanceReceivable": (
    getter: (data) => data.advanceReceivable,
    setter: (data, value) => data.advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advanceReceivable = copyer(oldData.advanceReceivable);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "initialAccountPayable": (
    getter: (data) => data.initialAccountPayable,
    setter: (data, value) => data.initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountPayable = copyer(oldData.initialAccountPayable);
    },
  ),
  "initialAccountReceivable": (
    getter: (data) => data.initialAccountReceivable,
    setter: (data, value) => data.initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountReceivable = copyer(oldData.initialAccountReceivable);
    },
  ),
  "initialAdvancePayable": (
    getter: (data) => data.initialAdvancePayable,
    setter: (data, value) => data.initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvancePayable = copyer(oldData.initialAdvancePayable);
    },
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data.initialAdvanceReceivable,
    setter: (data, value) => data.initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvanceReceivable = copyer(oldData.initialAdvanceReceivable);
    },
  ),
  "isCustomer": (
    getter: (data) => data.isCustomer,
    setter: (data, value) => data.isCustomer = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCustomer);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCustomer = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCustomer = copyer(oldData.isCustomer);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isSupplier": (
    getter: (data) => data.isSupplier,
    setter: (data, value) => data.isSupplier = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSupplier);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSupplier = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSupplier = copyer(oldData.isSupplier);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "parentId": (
    getter: (data) => data.parentId,
    setter: (data, value) => data.parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.parentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.parentId = copyer(oldData.parentId);
    },
  ),
  "parentName": (
    getter: (data) => data.parentName,
    setter: (data, value) => data.parentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.parentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.parentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.parentName = copyer(oldData.parentName);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
};

class TypeContactQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeContactQueryDataDTO({
    this.accountPayable,
    this.accountReceivable,
    this.advancePayable,
    this.advanceReceivable,
    this.createTime,
    this.id,
    this.initialAccountPayable,
    this.initialAccountReceivable,
    this.initialAdvancePayable,
    this.initialAdvanceReceivable,
    this.isCustomer,
    this.isEnabled,
    this.isSupplier,
    this.name,
    this.number,
    this.parentId,
    this.parentName,
    this.remark
  });

  static TypeContactQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeContactQueryDataDTO? deepCopy(TypeContactQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeContactQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeContactQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeContactQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? accountPayable;

  String? accountReceivable;

  String? advancePayable;

  String? advanceReceivable;

  String? createTime;

  int? id;

  String? initialAccountPayable;

  String? initialAccountReceivable;

  String? initialAdvancePayable;

  String? initialAdvanceReceivable;

  int? isCustomer;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isSupplier;

  String? name;

  String? number;

  int? parentId;

  String? parentName;

  String? remark;

}

class FTypeContactQuerySumDTO extends IDataField {
  static const accountPayable = FTypeContactQuerySumDTO('accountPayable');
  static const accountReceivable = FTypeContactQuerySumDTO('accountReceivable');
  static const advancePayable = FTypeContactQuerySumDTO('advancePayable');
  static const advanceReceivable = FTypeContactQuerySumDTO('advanceReceivable');
  static const count = FTypeContactQuerySumDTO('count');
  static const initialAccountPayable = FTypeContactQuerySumDTO('initialAccountPayable');
  static const initialAccountReceivable = FTypeContactQuerySumDTO('initialAccountReceivable');
  static const initialAdvancePayable = FTypeContactQuerySumDTO('initialAdvancePayable');
  static const initialAdvanceReceivable = FTypeContactQuerySumDTO('initialAdvanceReceivable');
  const FTypeContactQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeContactQuerySumDTO> _TypeContactQuerySumDTO_fields = {
  "accountPayable": (
    getter: (data) => data.accountPayable,
    setter: (data, value) => data.accountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountPayable = copyer(oldData.accountPayable);
    },
  ),
  "accountReceivable": (
    getter: (data) => data.accountReceivable,
    setter: (data, value) => data.accountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountReceivable = copyer(oldData.accountReceivable);
    },
  ),
  "advancePayable": (
    getter: (data) => data.advancePayable,
    setter: (data, value) => data.advancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advancePayable = copyer(oldData.advancePayable);
    },
  ),
  "advanceReceivable": (
    getter: (data) => data.advanceReceivable,
    setter: (data, value) => data.advanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.advanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.advanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.advanceReceivable = copyer(oldData.advanceReceivable);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "initialAccountPayable": (
    getter: (data) => data.initialAccountPayable,
    setter: (data, value) => data.initialAccountPayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountPayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountPayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountPayable = copyer(oldData.initialAccountPayable);
    },
  ),
  "initialAccountReceivable": (
    getter: (data) => data.initialAccountReceivable,
    setter: (data, value) => data.initialAccountReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAccountReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAccountReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAccountReceivable = copyer(oldData.initialAccountReceivable);
    },
  ),
  "initialAdvancePayable": (
    getter: (data) => data.initialAdvancePayable,
    setter: (data, value) => data.initialAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvancePayable = copyer(oldData.initialAdvancePayable);
    },
  ),
  "initialAdvanceReceivable": (
    getter: (data) => data.initialAdvanceReceivable,
    setter: (data, value) => data.initialAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAdvanceReceivable = copyer(oldData.initialAdvanceReceivable);
    },
  ),
};

class TypeContactQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeContactQuerySumDTO({
    this.accountPayable,
    this.accountReceivable,
    this.advancePayable,
    this.advanceReceivable,
    this.count,
    this.initialAccountPayable,
    this.initialAccountReceivable,
    this.initialAdvancePayable,
    this.initialAdvanceReceivable
  });

  static TypeContactQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeContactQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeContactQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeContactQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeContactQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeContactQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeContactQuerySumDTO? deepCopy(TypeContactQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeContactQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeContactQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeContactQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeContactQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeContactQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? accountPayable;

  String? accountReceivable;

  String? advancePayable;

  String? advanceReceivable;

  int? count;

  String? initialAccountPayable;

  String? initialAccountReceivable;

  String? initialAdvancePayable;

  String? initialAdvanceReceivable;

}

class FTypeEmployee extends IDataField {
  static const createTime = FTypeEmployee('createTime');
  static const hasBusinessLink = FTypeEmployee('hasBusinessLink');
  static const id = FTypeEmployee('id');
  static const identityNumber = FTypeEmployee('identityNumber');
  static const isEnabled = FTypeEmployee('isEnabled');
  static const job = FTypeEmployee('job');
  static const modifyTime = FTypeEmployee('modifyTime');
  static const name = FTypeEmployee('name');
  static const number = FTypeEmployee('number');
  static const phone = FTypeEmployee('phone');
  static const remark = FTypeEmployee('remark');
  const FTypeEmployee(super.key);
}

final FieldReflectInfo<TypeEmployee> _TypeEmployee_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "identityNumber": (
    getter: (data) => data.identityNumber,
    setter: (data, value) => data.identityNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.identityNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.identityNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.identityNumber = copyer(oldData.identityNumber);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "job": (
    getter: (data) => data.job,
    setter: (data, value) => data.job = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.job);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.job = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.job = copyer(oldData.job);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "phone": (
    getter: (data) => data.phone,
    setter: (data, value) => data.phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.phone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.phone = copyer(oldData.phone);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
};

class TypeEmployee extends IDataBasic implements IDataDynamic {
  TypeEmployee({
    this.createTime,
    this.hasBusinessLink,
    this.id,
    this.identityNumber,
    this.isEnabled,
    this.job,
    this.modifyTime,
    this.name,
    this.number,
    this.phone,
    this.remark
  });

  static TypeEmployee? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEmployee();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEmployee_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEmployee: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEmployee? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEmployee_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEmployee? deepCopy(TypeEmployee? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeEmployee();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeEmployee_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeEmployee copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEmployee_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEmployee_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? hasBusinessLink;

  int? id;

  String? identityNumber;

  TypeEnumSoftEnableIsEnable? isEnabled;

  String? job;

  String? modifyTime;

  String? name;

  String? number;

  String? phone;

  String? remark;

}

class FTypeEntityOperation extends IDataField {
  static const entity = FTypeEntityOperation('entity');
  static const group = FTypeEntityOperation('group');
  static const operationList = FTypeEntityOperation('operationList');
  static const operationMask = FTypeEntityOperation('operationMask');
  const FTypeEntityOperation(super.key);
}

final FieldReflectInfo<TypeEntityOperation> _TypeEntityOperation_fields = {
  "entity": (
    getter: (data) => data.entity,
    setter: (data, value) => data.entity = value as TypeEnumEntity?,
    toDynamic: (data) {
      final formatter = TypeEnumEntity.toDynamic;
      return formatter(data.entity);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumEntity.fromDynamic;
      data.entity = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumEntity.deepCopy;
      newData.entity = copyer(oldData.entity);
    },
  ),
  "group": (
    getter: (data) => data.group,
    setter: (data, value) => data.group = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.group);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.group = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.group = copyer(oldData.group);
    },
  ),
  "operationList": (
    getter: (data) => data.operationList,
    setter: (data, value) => data.operationList = value as List<TypeEnumOperation>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeEnumOperation>((single){
        final handler = TypeEnumOperation.toDynamic;
        return handler(single)!;
      });
      return formatter(data.operationList);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeEnumOperation>((single){
        final handler = TypeEnumOperation.fromDynamic;
        return handler(single)!;
      });
      data.operationList = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeEnumOperation>((single){
        final handler = TypeEnumOperation.deepCopy;
        return handler(single)!;
      });
      newData.operationList = copyer(oldData.operationList);
    },
  ),
  "operationMask": (
    getter: (data) => data.operationMask,
    setter: (data, value) => data.operationMask = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.operationMask);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.operationMask = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.operationMask = copyer(oldData.operationMask);
    },
  ),
};

class TypeEntityOperation extends IDataBasic implements IDataDynamic {
  TypeEntityOperation({
    this.entity,
    this.group,
    this.operationList,
    this.operationMask
  });

  static TypeEntityOperation? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEntityOperation();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEntityOperation_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEntityOperation: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEntityOperation? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEntityOperation_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEntityOperation? deepCopy(TypeEntityOperation? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeEntityOperation();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeEntityOperation_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeEntityOperation copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEntityOperation_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEntityOperation_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumEntity? entity;

  String? group;

  List<TypeEnumOperation>? operationList;

  int? operationMask;

}

class FTypeEnumInfo extends IDataField {
  static const constantList = FTypeEnumInfo('constantList');
  static const encloseName = FTypeEnumInfo('encloseName');
  static const name = FTypeEnumInfo('name');
  static const packageName = FTypeEnumInfo('packageName');
  const FTypeEnumInfo(super.key);
}

final FieldReflectInfo<TypeEnumInfo> _TypeEnumInfo_fields = {
  "constantList": (
    getter: (data) => data.constantList,
    setter: (data, value) => data.constantList = value as List<TypeConstant>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeConstant>((single){
        final handler = TypeConstant.toDynamic;
        return handler(single)!;
      });
      return formatter(data.constantList);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeConstant>((single){
        final handler = TypeConstant.fromDynamic;
        return handler(single)!;
      });
      data.constantList = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeConstant>((single){
        final handler = TypeConstant.deepCopy;
        return handler(single)!;
      });
      newData.constantList = copyer(oldData.constantList);
    },
  ),
  "encloseName": (
    getter: (data) => data.encloseName,
    setter: (data, value) => data.encloseName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.encloseName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.encloseName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.encloseName = copyer(oldData.encloseName);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "packageName": (
    getter: (data) => data.packageName,
    setter: (data, value) => data.packageName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.packageName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.packageName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.packageName = copyer(oldData.packageName);
    },
  ),
};

class TypeEnumInfo extends IDataBasic implements IDataDynamic {
  TypeEnumInfo({
    this.constantList,
    this.encloseName,
    this.name,
    this.packageName
  });

  static TypeEnumInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeEnumInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeEnumInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeEnumInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeEnumInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeEnumInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeEnumInfo? deepCopy(TypeEnumInfo? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeEnumInfo();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeEnumInfo_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeEnumInfo copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeEnumInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeEnumInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeConstant>? constantList;

  String? encloseName;

  String? name;

  String? packageName;

}

class FTypeImageInfo extends IDataField {
  static const name = FTypeImageInfo('name');
  static const showOriginUrl = FTypeImageInfo('showOriginUrl');
  static const showPreviewUrl = FTypeImageInfo('showPreviewUrl');
  static const showThumbUrl = FTypeImageInfo('showThumbUrl');
  static const showUrl = FTypeImageInfo('showUrl');
  const FTypeImageInfo(super.key);
}

final FieldReflectInfo<TypeImageInfo> _TypeImageInfo_fields = {
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "showOriginUrl": (
    getter: (data) => data.showOriginUrl,
    setter: (data, value) => data.showOriginUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showOriginUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showOriginUrl = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showOriginUrl = copyer(oldData.showOriginUrl);
    },
  ),
  "showPreviewUrl": (
    getter: (data) => data.showPreviewUrl,
    setter: (data, value) => data.showPreviewUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showPreviewUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showPreviewUrl = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showPreviewUrl = copyer(oldData.showPreviewUrl);
    },
  ),
  "showThumbUrl": (
    getter: (data) => data.showThumbUrl,
    setter: (data, value) => data.showThumbUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showThumbUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showThumbUrl = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showThumbUrl = copyer(oldData.showThumbUrl);
    },
  ),
  "showUrl": (
    getter: (data) => data.showUrl,
    setter: (data, value) => data.showUrl = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showUrl);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showUrl = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showUrl = copyer(oldData.showUrl);
    },
  ),
};

class TypeImageInfo extends IDataBasic implements IDataDynamic {
  TypeImageInfo({
    this.name,
    this.showOriginUrl,
    this.showPreviewUrl,
    this.showThumbUrl,
    this.showUrl
  });

  static TypeImageInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeImageInfo? deepCopy(TypeImageInfo? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeImageInfo();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeImageInfo_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeImageInfo copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? name;

  String? showOriginUrl;

  String? showPreviewUrl;

  String? showThumbUrl;

  String? showUrl;

}

class FTypeImageQueryDTO extends IDataField {
  static const data = FTypeImageQueryDTO('data');
  static const pageIndex = FTypeImageQueryDTO('pageIndex');
  static const pageSize = FTypeImageQueryDTO('pageSize');
  static const sum = FTypeImageQueryDTO('sum');
  const FTypeImageQueryDTO(super.key);
}

final FieldReflectInfo<TypeImageQueryDTO> _TypeImageQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeImageQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeImageQueryDataDTO>((single){
        final handler = TypeImageQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeImageQueryDataDTO>((single){
        final handler = TypeImageQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeImageQueryDataDTO>((single){
        final handler = TypeImageQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeImageQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeImageQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeImageQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeImageQueryDTO extends IDataBasic implements IDataDynamic {
  TypeImageQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeImageQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeImageQueryDTO? deepCopy(TypeImageQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeImageQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeImageQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeImageQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeImageQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeImageQuerySumDTO? sum;

}

class FTypeImageQueryDataDTO extends IDataField {
  static const attachmentId = FTypeImageQueryDataDTO('attachmentId');
  static const createEmployeeId = FTypeImageQueryDataDTO('createEmployeeId');
  static const createEmployeeName = FTypeImageQueryDataDTO('createEmployeeName');
  static const createTime = FTypeImageQueryDataDTO('createTime');
  static const id = FTypeImageQueryDataDTO('id');
  static const itemId = FTypeImageQueryDataDTO('itemId');
  static const itemName = FTypeImageQueryDataDTO('itemName');
  static const itemNumber = FTypeImageQueryDataDTO('itemNumber');
  static const name = FTypeImageQueryDataDTO('name');
  static const remark = FTypeImageQueryDataDTO('remark');
  static const showFileKey = FTypeImageQueryDataDTO('showFileKey');
  static const size = FTypeImageQueryDataDTO('size');
  const FTypeImageQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeImageQueryDataDTO> _TypeImageQueryDataDTO_fields = {
  "attachmentId": (
    getter: (data) => data.attachmentId,
    setter: (data, value) => data.attachmentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentId = copyer(oldData.attachmentId);
    },
  ),
  "createEmployeeId": (
    getter: (data) => data.createEmployeeId,
    setter: (data, value) => data.createEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.createEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.createEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.createEmployeeId = copyer(oldData.createEmployeeId);
    },
  ),
  "createEmployeeName": (
    getter: (data) => data.createEmployeeName,
    setter: (data, value) => data.createEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createEmployeeName = copyer(oldData.createEmployeeName);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "showFileKey": (
    getter: (data) => data.showFileKey,
    setter: (data, value) => data.showFileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.showFileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.showFileKey = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.showFileKey = copyer(oldData.showFileKey);
    },
  ),
  "size": (
    getter: (data) => data.size,
    setter: (data, value) => data.size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.size = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.size = copyer(oldData.size);
    },
  ),
};

class TypeImageQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeImageQueryDataDTO({
    this.attachmentId,
    this.createEmployeeId,
    this.createEmployeeName,
    this.createTime,
    this.id,
    this.itemId,
    this.itemName,
    this.itemNumber,
    this.name,
    this.remark,
    this.showFileKey,
    this.size
  });

  static TypeImageQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeImageQueryDataDTO? deepCopy(TypeImageQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeImageQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeImageQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeImageQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? attachmentId;

  int? createEmployeeId;

  String? createEmployeeName;

  String? createTime;

  String? id;

  int? itemId;

  String? itemName;

  String? itemNumber;

  String? name;

  String? remark;

  String? showFileKey;

  int? size;

}

class FTypeImageQuerySumDTO extends IDataField {
  static const count = FTypeImageQuerySumDTO('count');
  static const size = FTypeImageQuerySumDTO('size');
  const FTypeImageQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeImageQuerySumDTO> _TypeImageQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "size": (
    getter: (data) => data.size,
    setter: (data, value) => data.size = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.size);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.size = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.size = copyer(oldData.size);
    },
  ),
};

class TypeImageQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeImageQuerySumDTO({
    this.count,
    this.size
  });

  static TypeImageQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeImageQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeImageQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeImageQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeImageQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeImageQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeImageQuerySumDTO? deepCopy(TypeImageQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeImageQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeImageQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeImageQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeImageQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeImageQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  int? size;

}

class FTypeItem extends IDataField {
  static const aliases = FTypeItem('aliases');
  static const basicUnitId = FTypeItem('basicUnitId');
  static const basicUnitInfo = FTypeItem('basicUnitInfo');
  static const basicUnitName = FTypeItem('basicUnitName');
  static const children = FTypeItem('children');
  static const commonUnitConvert = FTypeItem('commonUnitConvert');
  static const commonUnitId = FTypeItem('commonUnitId');
  static const commonUnitInfo = FTypeItem('commonUnitInfo');
  static const commonUnitName = FTypeItem('commonUnitName');
  static const createTime = FTypeItem('createTime');
  static const custom = FTypeItem('custom');
  static const defaultContact = FTypeItem('defaultContact');
  static const defaultContactId = FTypeItem('defaultContactId');
  static const hasBusinessLink = FTypeItem('hasBusinessLink');
  static const id = FTypeItem('id');
  static const image1 = FTypeItem('image1');
  static const image2 = FTypeItem('image2');
  static const imageInfo1 = FTypeItem('imageInfo1');
  static const imageInfo2 = FTypeItem('imageInfo2');
  static const isCategory = FTypeItem('isCategory');
  static const isEnabled = FTypeItem('isEnabled');
  static const isRegularType = FTypeItem('isRegularType');
  static const isSystem = FTypeItem('isSystem');
  static const modelRemark = FTypeItem('modelRemark');
  static const modifyTime = FTypeItem('modifyTime');
  static const name = FTypeItem('name');
  static const number = FTypeItem('number');
  static const parentId = FTypeItem('parentId');
  static const parentInfo = FTypeItem('parentInfo');
  static const remark = FTypeItem('remark');
  static const sortWeight = FTypeItem('sortWeight');
  static const specsRemark = FTypeItem('specsRemark');
  static const treeLevel = FTypeItem('treeLevel');
  static const treePath = FTypeItem('treePath');
  static const unitConvertDesc = FTypeItem('unitConvertDesc');
  static const unitConverts = FTypeItem('unitConverts');
  const FTypeItem(super.key);
}

final FieldReflectInfo<TypeItem> _TypeItem_fields = {
  "aliases": (
    getter: (data) => data.aliases,
    setter: (data, value) => data.aliases = value as List<TypeItemContactAlias>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemContactAlias>((single){
        final handler = TypeItemContactAlias.toDynamic;
        return handler(single)!;
      });
      return formatter(data.aliases);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemContactAlias>((single){
        final handler = TypeItemContactAlias.fromDynamic;
        return handler(single)!;
      });
      data.aliases = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeItemContactAlias>((single){
        final handler = TypeItemContactAlias.deepCopy;
        return handler(single)!;
      });
      newData.aliases = copyer(oldData.aliases);
    },
  ),
  "basicUnitId": (
    getter: (data) => data.basicUnitId,
    setter: (data, value) => data.basicUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.basicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.basicUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.basicUnitId = copyer(oldData.basicUnitId);
    },
  ),
  "basicUnitInfo": (
    getter: (data) => data.basicUnitInfo,
    setter: (data, value) => data.basicUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.basicUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.basicUnitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.basicUnitInfo = copyer(oldData.basicUnitInfo);
    },
  ),
  "basicUnitName": (
    getter: (data) => data.basicUnitName,
    setter: (data, value) => data.basicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.basicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.basicUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.basicUnitName = copyer(oldData.basicUnitName);
    },
  ),
  "children": (
    getter: (data) => data.children,
    setter: (data, value) => data.children = value as List<TypeItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItem>((single){
        final handler = TypeItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
        final handler = TypeItem.fromDynamic;
        return handler(single)!;
      });
      data.children = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeItem>((single){
        final handler = TypeItem.deepCopy;
        return handler(single)!;
      });
      newData.children = copyer(oldData.children);
    },
  ),
  "commonUnitConvert": (
    getter: (data) => data.commonUnitConvert,
    setter: (data, value) => data.commonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitConvert = copyer(oldData.commonUnitConvert);
    },
  ),
  "commonUnitId": (
    getter: (data) => data.commonUnitId,
    setter: (data, value) => data.commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.commonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.commonUnitId = copyer(oldData.commonUnitId);
    },
  ),
  "commonUnitInfo": (
    getter: (data) => data.commonUnitInfo,
    setter: (data, value) => data.commonUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.commonUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.commonUnitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.commonUnitInfo = copyer(oldData.commonUnitInfo);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "custom": (
    getter: (data) => data.custom,
    setter: (data, value) => data.custom = value as TypeItemCustom?,
    toDynamic: (data) {
      final formatter = TypeItemCustom.toDynamic;
      return formatter(data.custom);
    },
    fromDynamic: (data, value) {
      final parser = TypeItemCustom.fromDynamic;
      data.custom = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItemCustom.deepCopy;
      newData.custom = copyer(oldData.custom);
    },
  ),
  "defaultContact": (
    getter: (data) => data.defaultContact,
    setter: (data, value) => data.defaultContact = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.defaultContact);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.defaultContact = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.defaultContact = copyer(oldData.defaultContact);
    },
  ),
  "defaultContactId": (
    getter: (data) => data.defaultContactId,
    setter: (data, value) => data.defaultContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.defaultContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.defaultContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.defaultContactId = copyer(oldData.defaultContactId);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "image1": (
    getter: (data) => data.image1,
    setter: (data, value) => data.image1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.image1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.image1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.image1 = copyer(oldData.image1);
    },
  ),
  "image2": (
    getter: (data) => data.image2,
    setter: (data, value) => data.image2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.image2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.image2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.image2 = copyer(oldData.image2);
    },
  ),
  "imageInfo1": (
    getter: (data) => data.imageInfo1,
    setter: (data, value) => data.imageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data.imageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data.imageInfo1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeImageInfo.deepCopy;
      newData.imageInfo1 = copyer(oldData.imageInfo1);
    },
  ),
  "imageInfo2": (
    getter: (data) => data.imageInfo2,
    setter: (data, value) => data.imageInfo2 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data.imageInfo2);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data.imageInfo2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeImageInfo.deepCopy;
      newData.imageInfo2 = copyer(oldData.imageInfo2);
    },
  ),
  "isCategory": (
    getter: (data) => data.isCategory,
    setter: (data, value) => data.isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCategory = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCategory = copyer(oldData.isCategory);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isRegularType": (
    getter: (data) => data.isRegularType,
    setter: (data, value) => data.isRegularType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isRegularType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isRegularType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isRegularType = copyer(oldData.isRegularType);
    },
  ),
  "isSystem": (
    getter: (data) => data.isSystem,
    setter: (data, value) => data.isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSystem = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSystem = copyer(oldData.isSystem);
    },
  ),
  "modelRemark": (
    getter: (data) => data.modelRemark,
    setter: (data, value) => data.modelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modelRemark = copyer(oldData.modelRemark);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "parentId": (
    getter: (data) => data.parentId,
    setter: (data, value) => data.parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.parentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.parentId = copyer(oldData.parentId);
    },
  ),
  "parentInfo": (
    getter: (data) => data.parentInfo,
    setter: (data, value) => data.parentInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data.parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data.parentInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItem.deepCopy;
      newData.parentInfo = copyer(oldData.parentInfo);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "sortWeight": (
    getter: (data) => data.sortWeight,
    setter: (data, value) => data.sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sortWeight = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sortWeight = copyer(oldData.sortWeight);
    },
  ),
  "specsRemark": (
    getter: (data) => data.specsRemark,
    setter: (data, value) => data.specsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.specsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.specsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.specsRemark = copyer(oldData.specsRemark);
    },
  ),
  "treeLevel": (
    getter: (data) => data.treeLevel,
    setter: (data, value) => data.treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.treeLevel = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.treeLevel = copyer(oldData.treeLevel);
    },
  ),
  "treePath": (
    getter: (data) => data.treePath,
    setter: (data, value) => data.treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.treePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.treePath = copyer(oldData.treePath);
    },
  ),
  "unitConvertDesc": (
    getter: (data) => data.unitConvertDesc,
    setter: (data, value) => data.unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertDesc = copyer(oldData.unitConvertDesc);
    },
  ),
  "unitConverts": (
    getter: (data) => data.unitConverts,
    setter: (data, value) => data.unitConverts = value as List<TypeItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemUnitConvert>((single){
        final handler = TypeItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data.unitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemUnitConvert>((single){
        final handler = TypeItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data.unitConverts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeItemUnitConvert>((single){
        final handler = TypeItemUnitConvert.deepCopy;
        return handler(single)!;
      });
      newData.unitConverts = copyer(oldData.unitConverts);
    },
  ),
};

class TypeItem extends IDataBasic implements IDataDynamic {
  TypeItem({
    this.aliases,
    this.basicUnitId,
    this.basicUnitInfo,
    this.basicUnitName,
    this.children,
    this.commonUnitConvert,
    this.commonUnitId,
    this.commonUnitInfo,
    this.commonUnitName,
    this.createTime,
    this.custom,
    this.defaultContact,
    this.defaultContactId,
    this.hasBusinessLink,
    this.id,
    this.image1,
    this.image2,
    this.imageInfo1,
    this.imageInfo2,
    this.isCategory,
    this.isEnabled,
    this.isRegularType,
    this.isSystem,
    this.modelRemark,
    this.modifyTime,
    this.name,
    this.number,
    this.parentId,
    this.parentInfo,
    this.remark,
    this.sortWeight,
    this.specsRemark,
    this.treeLevel,
    this.treePath,
    this.unitConvertDesc,
    this.unitConverts
  });

  static TypeItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItem? deepCopy(TypeItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeItemContactAlias>? aliases;

  int? basicUnitId;

  TypeUnit? basicUnitInfo;

  String? basicUnitName;

  List<TypeItem>? children;

  String? commonUnitConvert;

  int? commonUnitId;

  TypeUnit? commonUnitInfo;

  String? commonUnitName;

  String? createTime;

  TypeItemCustom? custom;

  TypeContact? defaultContact;

  int? defaultContactId;

  int? hasBusinessLink;

  int? id;

  String? image1;

  String? image2;

  TypeImageInfo? imageInfo1;

  TypeImageInfo? imageInfo2;

  int? isCategory;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isRegularType;

  int? isSystem;

  String? modelRemark;

  String? modifyTime;

  String? name;

  String? number;

  int? parentId;

  TypeItem? parentInfo;

  String? remark;

  int? sortWeight;

  String? specsRemark;

  int? treeLevel;

  String? treePath;

  String? unitConvertDesc;

  List<TypeItemUnitConvert>? unitConverts;

}

class FTypeItemContactAlias extends IDataField {
  static const aliasItemName = FTypeItemContactAlias('aliasItemName');
  static const aliasItemNumber = FTypeItemContactAlias('aliasItemNumber');
  static const contactId = FTypeItemContactAlias('contactId');
  static const contactInfo = FTypeItemContactAlias('contactInfo');
  static const createTime = FTypeItemContactAlias('createTime');
  static const id = FTypeItemContactAlias('id');
  static const modifyTime = FTypeItemContactAlias('modifyTime');
  const FTypeItemContactAlias(super.key);
}

final FieldReflectInfo<TypeItemContactAlias> _TypeItemContactAlias_fields = {
  "aliasItemName": (
    getter: (data) => data.aliasItemName,
    setter: (data, value) => data.aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemName = copyer(oldData.aliasItemName);
    },
  ),
  "aliasItemNumber": (
    getter: (data) => data.aliasItemNumber,
    setter: (data, value) => data.aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemNumber = copyer(oldData.aliasItemNumber);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactInfo": (
    getter: (data) => data.contactInfo,
    setter: (data, value) => data.contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.contactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.contactInfo = copyer(oldData.contactInfo);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
};

class TypeItemContactAlias extends IDataBasic implements IDataDynamic {
  TypeItemContactAlias({
    this.aliasItemName,
    this.aliasItemNumber,
    this.contactId,
    this.contactInfo,
    this.createTime,
    this.id,
    this.modifyTime
  });

  static TypeItemContactAlias? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemContactAlias();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemContactAlias_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemContactAlias: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemContactAlias? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemContactAlias_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemContactAlias? deepCopy(TypeItemContactAlias? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemContactAlias();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemContactAlias_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemContactAlias copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemContactAlias_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemContactAlias_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? aliasItemName;

  String? aliasItemNumber;

  int? contactId;

  TypeContact? contactInfo;

  String? createTime;

  String? id;

  String? modifyTime;

}

class FTypeItemCustom extends IDataField {
  static const abnormalRemark = FTypeItemCustom('abnormalRemark');
  static const abnormalState = FTypeItemCustom('abnormalState');
  const FTypeItemCustom(super.key);
}

final FieldReflectInfo<TypeItemCustom> _TypeItemCustom_fields = {
  "abnormalRemark": (
    getter: (data) => data.abnormalRemark,
    setter: (data, value) => data.abnormalRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.abnormalRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.abnormalRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.abnormalRemark = copyer(oldData.abnormalRemark);
    },
  ),
  "abnormalState": (
    getter: (data) => data.abnormalState,
    setter: (data, value) => data.abnormalState = value as TypeEnumItemCustomAbnormalState?,
    toDynamic: (data) {
      final formatter = TypeEnumItemCustomAbnormalState.toDynamic;
      return formatter(data.abnormalState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumItemCustomAbnormalState.fromDynamic;
      data.abnormalState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumItemCustomAbnormalState.deepCopy;
      newData.abnormalState = copyer(oldData.abnormalState);
    },
  ),
};

class TypeItemCustom extends IDataBasic implements IDataDynamic {
  TypeItemCustom({
    this.abnormalRemark,
    this.abnormalState
  });

  static TypeItemCustom? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemCustom();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemCustom_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemCustom: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemCustom? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemCustom_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemCustom? deepCopy(TypeItemCustom? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemCustom();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemCustom_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemCustom copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemCustom_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemCustom_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? abnormalRemark;

  TypeEnumItemCustomAbnormalState? abnormalState;

}

class FTypeItemUnitConvert extends IDataField {
  static const canBusinessLink = FTypeItemUnitConvert('canBusinessLink');
  static const createTime = FTypeItemUnitConvert('createTime');
  static const hasBusinessLink = FTypeItemUnitConvert('hasBusinessLink');
  static const id = FTypeItemUnitConvert('id');
  static const isBasic = FTypeItemUnitConvert('isBasic');
  static const isCommon = FTypeItemUnitConvert('isCommon');
  static const isEnabled = FTypeItemUnitConvert('isEnabled');
  static const modifyTime = FTypeItemUnitConvert('modifyTime');
  static const purchasePrice = FTypeItemUnitConvert('purchasePrice');
  static const unitConvert = FTypeItemUnitConvert('unitConvert');
  static const unitConvertDesc = FTypeItemUnitConvert('unitConvertDesc');
  static const unitId = FTypeItemUnitConvert('unitId');
  static const unitInfo = FTypeItemUnitConvert('unitInfo');
  static const unitName = FTypeItemUnitConvert('unitName');
  static const wholeSalesPrice = FTypeItemUnitConvert('wholeSalesPrice');
  const FTypeItemUnitConvert(super.key);
}

final FieldReflectInfo<TypeItemUnitConvert> _TypeItemUnitConvert_fields = {
  "canBusinessLink": (
    getter: (data) => data.canBusinessLink,
    setter: (data, value) => data.canBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.canBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.canBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.canBusinessLink = copyer(oldData.canBusinessLink);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isBasic": (
    getter: (data) => data.isBasic,
    setter: (data, value) => data.isBasic = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isBasic);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isBasic = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isBasic = copyer(oldData.isBasic);
    },
  ),
  "isCommon": (
    getter: (data) => data.isCommon,
    setter: (data, value) => data.isCommon = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCommon);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCommon = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCommon = copyer(oldData.isCommon);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "purchasePrice": (
    getter: (data) => data.purchasePrice,
    setter: (data, value) => data.purchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchasePrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchasePrice = copyer(oldData.purchasePrice);
    },
  ),
  "unitConvert": (
    getter: (data) => data.unitConvert,
    setter: (data, value) => data.unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvert = copyer(oldData.unitConvert);
    },
  ),
  "unitConvertDesc": (
    getter: (data) => data.unitConvertDesc,
    setter: (data, value) => data.unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertDesc = copyer(oldData.unitConvertDesc);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitInfo": (
    getter: (data) => data.unitInfo,
    setter: (data, value) => data.unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.unitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.unitInfo = copyer(oldData.unitInfo);
    },
  ),
  "unitName": (
    getter: (data) => data.unitName,
    setter: (data, value) => data.unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitName = copyer(oldData.unitName);
    },
  ),
  "wholeSalesPrice": (
    getter: (data) => data.wholeSalesPrice,
    setter: (data, value) => data.wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.wholeSalesPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.wholeSalesPrice = copyer(oldData.wholeSalesPrice);
    },
  ),
};

class TypeItemUnitConvert extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvert({
    this.canBusinessLink,
    this.createTime,
    this.hasBusinessLink,
    this.id,
    this.isBasic,
    this.isCommon,
    this.isEnabled,
    this.modifyTime,
    this.purchasePrice,
    this.unitConvert,
    this.unitConvertDesc,
    this.unitId,
    this.unitInfo,
    this.unitName,
    this.wholeSalesPrice
  });

  static TypeItemUnitConvert? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvert();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvert_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvert: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvert_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemUnitConvert? deepCopy(TypeItemUnitConvert? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemUnitConvert();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemUnitConvert_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemUnitConvert copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvert_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? canBusinessLink;

  String? createTime;

  int? hasBusinessLink;

  String? id;

  int? isBasic;

  int? isCommon;

  TypeEnumSoftEnableIsEnable? isEnabled;

  String? modifyTime;

  String? purchasePrice;

  String? unitConvert;

  String? unitConvertDesc;

  int? unitId;

  TypeUnit? unitInfo;

  String? unitName;

  String? wholeSalesPrice;

}

class FTypeItemUnitConvertQueryDTO extends IDataField {
  static const data = FTypeItemUnitConvertQueryDTO('data');
  static const pageIndex = FTypeItemUnitConvertQueryDTO('pageIndex');
  static const pageSize = FTypeItemUnitConvertQueryDTO('pageSize');
  static const sum = FTypeItemUnitConvertQueryDTO('sum');
  const FTypeItemUnitConvertQueryDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQueryDTO> _TypeItemUnitConvertQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeItemUnitConvertQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItemUnitConvertQueryDataDTO>((single){
        final handler = TypeItemUnitConvertQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItemUnitConvertQueryDataDTO>((single){
        final handler = TypeItemUnitConvertQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeItemUnitConvertQueryDataDTO>((single){
        final handler = TypeItemUnitConvertQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeItemUnitConvertQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeItemUnitConvertQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeItemUnitConvertQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItemUnitConvertQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeItemUnitConvertQueryDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeItemUnitConvertQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemUnitConvertQueryDTO? deepCopy(TypeItemUnitConvertQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemUnitConvertQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemUnitConvertQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemUnitConvertQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeItemUnitConvertQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeItemUnitConvertQuerySumDTO? sum;

}

class FTypeItemUnitConvertQueryDataDTO extends IDataField {
  static const id = FTypeItemUnitConvertQueryDataDTO('id');
  static const itemId = FTypeItemUnitConvertQueryDataDTO('itemId');
  static const itemImage1 = FTypeItemUnitConvertQueryDataDTO('itemImage1');
  static const itemImageInfo1 = FTypeItemUnitConvertQueryDataDTO('itemImageInfo1');
  static const itemIsEnabled = FTypeItemUnitConvertQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeItemUnitConvertQueryDataDTO('itemModelRemark');
  static const itemName = FTypeItemUnitConvertQueryDataDTO('itemName');
  static const itemNumber = FTypeItemUnitConvertQueryDataDTO('itemNumber');
  static const itemParentId = FTypeItemUnitConvertQueryDataDTO('itemParentId');
  static const itemParentName = FTypeItemUnitConvertQueryDataDTO('itemParentName');
  static const itemRemark = FTypeItemUnitConvertQueryDataDTO('itemRemark');
  static const itemSortWeight = FTypeItemUnitConvertQueryDataDTO('itemSortWeight');
  static const itemSpecsRemark = FTypeItemUnitConvertQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeItemUnitConvertQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeItemUnitConvertQueryDataDTO('itemUnitConvertDesc');
  static const purchasePrice = FTypeItemUnitConvertQueryDataDTO('purchasePrice');
  static const unitId = FTypeItemUnitConvertQueryDataDTO('unitId');
  static const unitName = FTypeItemUnitConvertQueryDataDTO('unitName');
  static const wholeSalesPrice = FTypeItemUnitConvertQueryDataDTO('wholeSalesPrice');
  const FTypeItemUnitConvertQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQueryDataDTO> _TypeItemUnitConvertQueryDataDTO_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemImage1": (
    getter: (data) => data.itemImage1,
    setter: (data, value) => data.itemImage1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemImage1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemImage1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemImage1 = copyer(oldData.itemImage1);
    },
  ),
  "itemImageInfo1": (
    getter: (data) => data.itemImageInfo1,
    setter: (data, value) => data.itemImageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data.itemImageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data.itemImageInfo1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeImageInfo.deepCopy;
      newData.itemImageInfo1 = copyer(oldData.itemImageInfo1);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemParentId": (
    getter: (data) => data.itemParentId,
    setter: (data, value) => data.itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemParentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemParentId = copyer(oldData.itemParentId);
    },
  ),
  "itemParentName": (
    getter: (data) => data.itemParentName,
    setter: (data, value) => data.itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemParentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemParentName = copyer(oldData.itemParentName);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSortWeight": (
    getter: (data) => data.itemSortWeight,
    setter: (data, value) => data.itemSortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemSortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemSortWeight = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemSortWeight = copyer(oldData.itemSortWeight);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemTreePath": (
    getter: (data) => data.itemTreePath,
    setter: (data, value) => data.itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemTreePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemTreePath = copyer(oldData.itemTreePath);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "purchasePrice": (
    getter: (data) => data.purchasePrice,
    setter: (data, value) => data.purchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchasePrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchasePrice = copyer(oldData.purchasePrice);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitName": (
    getter: (data) => data.unitName,
    setter: (data, value) => data.unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitName = copyer(oldData.unitName);
    },
  ),
  "wholeSalesPrice": (
    getter: (data) => data.wholeSalesPrice,
    setter: (data, value) => data.wholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.wholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.wholeSalesPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.wholeSalesPrice = copyer(oldData.wholeSalesPrice);
    },
  ),
};

class TypeItemUnitConvertQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQueryDataDTO({
    this.id,
    this.itemId,
    this.itemImage1,
    this.itemImageInfo1,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemParentId,
    this.itemParentName,
    this.itemRemark,
    this.itemSortWeight,
    this.itemSpecsRemark,
    this.itemTreePath,
    this.itemUnitConvertDesc,
    this.purchasePrice,
    this.unitId,
    this.unitName,
    this.wholeSalesPrice
  });

  static TypeItemUnitConvertQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemUnitConvertQueryDataDTO? deepCopy(TypeItemUnitConvertQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemUnitConvertQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemUnitConvertQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemUnitConvertQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  int? itemId;

  String? itemImage1;

  TypeImageInfo? itemImageInfo1;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  int? itemParentId;

  String? itemParentName;

  String? itemRemark;

  int? itemSortWeight;

  String? itemSpecsRemark;

  String? itemTreePath;

  String? itemUnitConvertDesc;

  String? purchasePrice;

  int? unitId;

  String? unitName;

  String? wholeSalesPrice;

}

class FTypeItemUnitConvertQuerySumDTO extends IDataField {
  static const count = FTypeItemUnitConvertQuerySumDTO('count');
  const FTypeItemUnitConvertQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeItemUnitConvertQuerySumDTO> _TypeItemUnitConvertQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
};

class TypeItemUnitConvertQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeItemUnitConvertQuerySumDTO({
    this.count
  });

  static TypeItemUnitConvertQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeItemUnitConvertQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeItemUnitConvertQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeItemUnitConvertQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeItemUnitConvertQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeItemUnitConvertQuerySumDTO? deepCopy(TypeItemUnitConvertQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeItemUnitConvertQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeItemUnitConvertQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeItemUnitConvertQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeItemUnitConvertQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

}

class FTypeMainIndexAccountDataDTO extends IDataField {
  static const accountPayableBalance = FTypeMainIndexAccountDataDTO('accountPayableBalance');
  static const accountReceivableBalance = FTypeMainIndexAccountDataDTO('accountReceivableBalance');
  static const cashBalance = FTypeMainIndexAccountDataDTO('cashBalance');
  static const receiveCashTotal = FTypeMainIndexAccountDataDTO('receiveCashTotal');
  static const salesCost = FTypeMainIndexAccountDataDTO('salesCost');
  static const salesIncome = FTypeMainIndexAccountDataDTO('salesIncome');
  static const salesProfit = FTypeMainIndexAccountDataDTO('salesProfit');
  static const salesProfitRate = FTypeMainIndexAccountDataDTO('salesProfitRate');
  static const stockBalance = FTypeMainIndexAccountDataDTO('stockBalance');
  const FTypeMainIndexAccountDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexAccountDataDTO> _TypeMainIndexAccountDataDTO_fields = {
  "accountPayableBalance": (
    getter: (data) => data.accountPayableBalance,
    setter: (data, value) => data.accountPayableBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountPayableBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountPayableBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountPayableBalance = copyer(oldData.accountPayableBalance);
    },
  ),
  "accountReceivableBalance": (
    getter: (data) => data.accountReceivableBalance,
    setter: (data, value) => data.accountReceivableBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.accountReceivableBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.accountReceivableBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.accountReceivableBalance = copyer(oldData.accountReceivableBalance);
    },
  ),
  "cashBalance": (
    getter: (data) => data.cashBalance,
    setter: (data, value) => data.cashBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashBalance = copyer(oldData.cashBalance);
    },
  ),
  "receiveCashTotal": (
    getter: (data) => data.receiveCashTotal,
    setter: (data, value) => data.receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashTotal = copyer(oldData.receiveCashTotal);
    },
  ),
  "salesCost": (
    getter: (data) => data.salesCost,
    setter: (data, value) => data.salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesCost = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesCost = copyer(oldData.salesCost);
    },
  ),
  "salesIncome": (
    getter: (data) => data.salesIncome,
    setter: (data, value) => data.salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesIncome = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesIncome = copyer(oldData.salesIncome);
    },
  ),
  "salesProfit": (
    getter: (data) => data.salesProfit,
    setter: (data, value) => data.salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesProfit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesProfit = copyer(oldData.salesProfit);
    },
  ),
  "salesProfitRate": (
    getter: (data) => data.salesProfitRate,
    setter: (data, value) => data.salesProfitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesProfitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesProfitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesProfitRate = copyer(oldData.salesProfitRate);
    },
  ),
  "stockBalance": (
    getter: (data) => data.stockBalance,
    setter: (data, value) => data.stockBalance = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockBalance);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockBalance = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockBalance = copyer(oldData.stockBalance);
    },
  ),
};

class TypeMainIndexAccountDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexAccountDataDTO({
    this.accountPayableBalance,
    this.accountReceivableBalance,
    this.cashBalance,
    this.receiveCashTotal,
    this.salesCost,
    this.salesIncome,
    this.salesProfit,
    this.salesProfitRate,
    this.stockBalance
  });

  static TypeMainIndexAccountDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexAccountDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexAccountDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexAccountDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexAccountDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexAccountDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexAccountDataDTO? deepCopy(TypeMainIndexAccountDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexAccountDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexAccountDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexAccountDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexAccountDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexAccountDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? accountPayableBalance;

  String? accountReceivableBalance;

  String? cashBalance;

  String? receiveCashTotal;

  String? salesCost;

  String? salesIncome;

  String? salesProfit;

  String? salesProfitRate;

  String? stockBalance;

}

class FTypeMainIndexContactDataDTO extends IDataField {
  static const id = FTypeMainIndexContactDataDTO('id');
  static const name = FTypeMainIndexContactDataDTO('name');
  static const total = FTypeMainIndexContactDataDTO('total');
  const FTypeMainIndexContactDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexContactDataDTO> _TypeMainIndexContactDataDTO_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeMainIndexContactDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexContactDataDTO({
    this.id,
    this.name,
    this.total
  });

  static TypeMainIndexContactDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexContactDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexContactDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexContactDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexContactDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexContactDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexContactDataDTO? deepCopy(TypeMainIndexContactDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexContactDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexContactDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexContactDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexContactDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexContactDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  String? name;

  String? total;

}

class FTypeMainIndexDataDTO extends IDataField {
  static const account = FTypeMainIndexDataDTO('account');
  static const contacts = FTypeMainIndexDataDTO('contacts');
  static const items = FTypeMainIndexDataDTO('items');
  static const profits = FTypeMainIndexDataDTO('profits');
  static const todo = FTypeMainIndexDataDTO('todo');
  const FTypeMainIndexDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexDataDTO> _TypeMainIndexDataDTO_fields = {
  "account": (
    getter: (data) => data.account,
    setter: (data, value) => data.account = value as TypeMainIndexAccountDataDTO?,
    toDynamic: (data) {
      final formatter = TypeMainIndexAccountDataDTO.toDynamic;
      return formatter(data.account);
    },
    fromDynamic: (data, value) {
      final parser = TypeMainIndexAccountDataDTO.fromDynamic;
      data.account = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeMainIndexAccountDataDTO.deepCopy;
      newData.account = copyer(oldData.account);
    },
  ),
  "contacts": (
    getter: (data) => data.contacts,
    setter: (data, value) => data.contacts = value as List<TypeMainIndexContactDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexContactDataDTO>((single){
        final handler = TypeMainIndexContactDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.contacts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexContactDataDTO>((single){
        final handler = TypeMainIndexContactDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.contacts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeMainIndexContactDataDTO>((single){
        final handler = TypeMainIndexContactDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.contacts = copyer(oldData.contacts);
    },
  ),
  "items": (
    getter: (data) => data.items,
    setter: (data, value) => data.items = value as List<TypeMainIndexItemDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexItemDataDTO>((single){
        final handler = TypeMainIndexItemDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexItemDataDTO>((single){
        final handler = TypeMainIndexItemDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.items = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeMainIndexItemDataDTO>((single){
        final handler = TypeMainIndexItemDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.items = copyer(oldData.items);
    },
  ),
  "profits": (
    getter: (data) => data.profits,
    setter: (data, value) => data.profits = value as List<TypeMainIndexProfitDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMainIndexProfitDataDTO>((single){
        final handler = TypeMainIndexProfitDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.profits);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMainIndexProfitDataDTO>((single){
        final handler = TypeMainIndexProfitDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.profits = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeMainIndexProfitDataDTO>((single){
        final handler = TypeMainIndexProfitDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.profits = copyer(oldData.profits);
    },
  ),
  "todo": (
    getter: (data) => data.todo,
    setter: (data, value) => data.todo = value as TypeMainIndexTodoDataDTO?,
    toDynamic: (data) {
      final formatter = TypeMainIndexTodoDataDTO.toDynamic;
      return formatter(data.todo);
    },
    fromDynamic: (data, value) {
      final parser = TypeMainIndexTodoDataDTO.fromDynamic;
      data.todo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeMainIndexTodoDataDTO.deepCopy;
      newData.todo = copyer(oldData.todo);
    },
  ),
};

class TypeMainIndexDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexDataDTO({
    this.account,
    this.contacts,
    this.items,
    this.profits,
    this.todo
  });

  static TypeMainIndexDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexDataDTO? deepCopy(TypeMainIndexDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeMainIndexAccountDataDTO? account;

  List<TypeMainIndexContactDataDTO>? contacts;

  List<TypeMainIndexItemDataDTO>? items;

  List<TypeMainIndexProfitDataDTO>? profits;

  TypeMainIndexTodoDataDTO? todo;

}

class FTypeMainIndexItemDataDTO extends IDataField {
  static const id = FTypeMainIndexItemDataDTO('id');
  static const name = FTypeMainIndexItemDataDTO('name');
  static const total = FTypeMainIndexItemDataDTO('total');
  const FTypeMainIndexItemDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexItemDataDTO> _TypeMainIndexItemDataDTO_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeMainIndexItemDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexItemDataDTO({
    this.id,
    this.name,
    this.total
  });

  static TypeMainIndexItemDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexItemDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexItemDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexItemDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexItemDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexItemDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexItemDataDTO? deepCopy(TypeMainIndexItemDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexItemDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexItemDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexItemDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexItemDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexItemDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  String? name;

  String? total;

}

class FTypeMainIndexProfitDataDTO extends IDataField {
  static const id = FTypeMainIndexProfitDataDTO('id');
  static const receiveCashTotal = FTypeMainIndexProfitDataDTO('receiveCashTotal');
  static const salesCost = FTypeMainIndexProfitDataDTO('salesCost');
  static const salesIncome = FTypeMainIndexProfitDataDTO('salesIncome');
  static const salesProfit = FTypeMainIndexProfitDataDTO('salesProfit');
  const FTypeMainIndexProfitDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexProfitDataDTO> _TypeMainIndexProfitDataDTO_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "receiveCashTotal": (
    getter: (data) => data.receiveCashTotal,
    setter: (data, value) => data.receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashTotal = copyer(oldData.receiveCashTotal);
    },
  ),
  "salesCost": (
    getter: (data) => data.salesCost,
    setter: (data, value) => data.salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesCost = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesCost = copyer(oldData.salesCost);
    },
  ),
  "salesIncome": (
    getter: (data) => data.salesIncome,
    setter: (data, value) => data.salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesIncome = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesIncome = copyer(oldData.salesIncome);
    },
  ),
  "salesProfit": (
    getter: (data) => data.salesProfit,
    setter: (data, value) => data.salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesProfit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesProfit = copyer(oldData.salesProfit);
    },
  ),
};

class TypeMainIndexProfitDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexProfitDataDTO({
    this.id,
    this.receiveCashTotal,
    this.salesCost,
    this.salesIncome,
    this.salesProfit
  });

  static TypeMainIndexProfitDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexProfitDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexProfitDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexProfitDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexProfitDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexProfitDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexProfitDataDTO? deepCopy(TypeMainIndexProfitDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexProfitDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexProfitDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexProfitDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexProfitDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexProfitDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  String? receiveCashTotal;

  String? salesCost;

  String? salesIncome;

  String? salesProfit;

}

class FTypeMainIndexTodoDataDTO extends IDataField {
  static const waitingInOrderCount = FTypeMainIndexTodoDataDTO('waitingInOrderCount');
  static const waitingOutOrderCount = FTypeMainIndexTodoDataDTO('waitingOutOrderCount');
  const FTypeMainIndexTodoDataDTO(super.key);
}

final FieldReflectInfo<TypeMainIndexTodoDataDTO> _TypeMainIndexTodoDataDTO_fields = {
  "waitingInOrderCount": (
    getter: (data) => data.waitingInOrderCount,
    setter: (data, value) => data.waitingInOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.waitingInOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.waitingInOrderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.waitingInOrderCount = copyer(oldData.waitingInOrderCount);
    },
  ),
  "waitingOutOrderCount": (
    getter: (data) => data.waitingOutOrderCount,
    setter: (data, value) => data.waitingOutOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.waitingOutOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.waitingOutOrderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.waitingOutOrderCount = copyer(oldData.waitingOutOrderCount);
    },
  ),
};

class TypeMainIndexTodoDataDTO extends IDataBasic implements IDataDynamic {
  TypeMainIndexTodoDataDTO({
    this.waitingInOrderCount,
    this.waitingOutOrderCount
  });

  static TypeMainIndexTodoDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMainIndexTodoDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMainIndexTodoDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMainIndexTodoDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMainIndexTodoDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMainIndexTodoDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMainIndexTodoDataDTO? deepCopy(TypeMainIndexTodoDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMainIndexTodoDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMainIndexTodoDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMainIndexTodoDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMainIndexTodoDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMainIndexTodoDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? waitingInOrderCount;

  int? waitingOutOrderCount;

}

class FTypeMenuConfig extends IDataField {
  static const createTime = FTypeMenuConfig('createTime');
  static const id = FTypeMenuConfig('id');
  static const items = FTypeMenuConfig('items');
  static const modifyTime = FTypeMenuConfig('modifyTime');
  const FTypeMenuConfig(super.key);
}

final FieldReflectInfo<TypeMenuConfig> _TypeMenuConfig_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "items": (
    getter: (data) => data.items,
    setter: (data, value) => data.items = value as List<TypeMenuConfigItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeMenuConfigItem>((single){
        final handler = TypeMenuConfigItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeMenuConfigItem>((single){
        final handler = TypeMenuConfigItem.fromDynamic;
        return handler(single)!;
      });
      data.items = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeMenuConfigItem>((single){
        final handler = TypeMenuConfigItem.deepCopy;
        return handler(single)!;
      });
      newData.items = copyer(oldData.items);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
};

class TypeMenuConfig extends IDataBasic implements IDataDynamic {
  TypeMenuConfig({
    this.createTime,
    this.id,
    this.items,
    this.modifyTime
  });

  static TypeMenuConfig? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMenuConfig();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMenuConfig_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMenuConfig: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMenuConfig? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMenuConfig_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMenuConfig? deepCopy(TypeMenuConfig? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMenuConfig();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMenuConfig_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMenuConfig copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMenuConfig_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMenuConfig_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? id;

  List<TypeMenuConfigItem>? items;

  String? modifyTime;

}

class FTypeMenuConfigItem extends IDataField {
  static const color = FTypeMenuConfigItem('color');
  static const isOpen = FTypeMenuConfigItem('isOpen');
  static const menuId = FTypeMenuConfigItem('menuId');
  const FTypeMenuConfigItem(super.key);
}

final FieldReflectInfo<TypeMenuConfigItem> _TypeMenuConfigItem_fields = {
  "color": (
    getter: (data) => data.color,
    setter: (data, value) => data.color = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.color);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.color = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.color = copyer(oldData.color);
    },
  ),
  "isOpen": (
    getter: (data) => data.isOpen,
    setter: (data, value) => data.isOpen = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isOpen);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isOpen = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isOpen = copyer(oldData.isOpen);
    },
  ),
  "menuId": (
    getter: (data) => data.menuId,
    setter: (data, value) => data.menuId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.menuId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.menuId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.menuId = copyer(oldData.menuId);
    },
  ),
};

class TypeMenuConfigItem extends IDataBasic implements IDataDynamic {
  TypeMenuConfigItem({
    this.color,
    this.isOpen,
    this.menuId
  });

  static TypeMenuConfigItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeMenuConfigItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeMenuConfigItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeMenuConfigItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeMenuConfigItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeMenuConfigItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeMenuConfigItem? deepCopy(TypeMenuConfigItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeMenuConfigItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeMenuConfigItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeMenuConfigItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeMenuConfigItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeMenuConfigItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? color;

  int? isOpen;

  String? menuId;

}

class FTypeOperator extends IDataField {
  static const createTime = FTypeOperator('createTime');
  static const employeeId = FTypeOperator('employeeId');
  static const employeeInfo = FTypeOperator('employeeInfo');
  static const id = FTypeOperator('id');
  static const isEnabled = FTypeOperator('isEnabled');
  static const isPost = FTypeOperator('isPost');
  static const isSystem = FTypeOperator('isSystem');
  static const modifyTime = FTypeOperator('modifyTime');
  static const name = FTypeOperator('name');
  static const posts = FTypeOperator('posts');
  static const remark = FTypeOperator('remark');
  static const roles = FTypeOperator('roles');
  const FTypeOperator(super.key);
}

final FieldReflectInfo<TypeOperator> _TypeOperator_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "employeeId": (
    getter: (data) => data.employeeId,
    setter: (data, value) => data.employeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.employeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.employeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.employeeId = copyer(oldData.employeeId);
    },
  ),
  "employeeInfo": (
    getter: (data) => data.employeeInfo,
    setter: (data, value) => data.employeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.employeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.employeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.employeeInfo = copyer(oldData.employeeInfo);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isPost": (
    getter: (data) => data.isPost,
    setter: (data, value) => data.isPost = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isPost);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isPost = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isPost = copyer(oldData.isPost);
    },
  ),
  "isSystem": (
    getter: (data) => data.isSystem,
    setter: (data, value) => data.isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSystem = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSystem = copyer(oldData.isSystem);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "posts": (
    getter: (data) => data.posts,
    setter: (data, value) => data.posts = value as List<TypeOperatorPost>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperatorPost>((single){
        final handler = TypeOperatorPost.toDynamic;
        return handler(single)!;
      });
      return formatter(data.posts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperatorPost>((single){
        final handler = TypeOperatorPost.fromDynamic;
        return handler(single)!;
      });
      data.posts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOperatorPost>((single){
        final handler = TypeOperatorPost.deepCopy;
        return handler(single)!;
      });
      newData.posts = copyer(oldData.posts);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "roles": (
    getter: (data) => data.roles,
    setter: (data, value) => data.roles = value as TypeEnumOperatorRole?,
    toDynamic: (data) {
      final formatter = TypeEnumOperatorRole.toDynamic;
      return formatter(data.roles);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOperatorRole.fromDynamic;
      data.roles = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOperatorRole.deepCopy;
      newData.roles = copyer(oldData.roles);
    },
  ),
};

class TypeOperator extends IDataBasic implements IDataDynamic {
  TypeOperator({
    this.createTime,
    this.employeeId,
    this.employeeInfo,
    this.id,
    this.isEnabled,
    this.isPost,
    this.isSystem,
    this.modifyTime,
    this.name,
    this.posts,
    this.remark,
    this.roles
  });

  static TypeOperator? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperator();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperator_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperator: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperator? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperator_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOperator? deepCopy(TypeOperator? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOperator();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOperator_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOperator copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperator_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperator_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? employeeId;

  TypeEmployee? employeeInfo;

  int? id;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isPost;

  int? isSystem;

  String? modifyTime;

  String? name;

  List<TypeOperatorPost>? posts;

  String? remark;

  TypeEnumOperatorRole? roles;

}

class FTypeOperatorPermission extends IDataField {
  static const entity = FTypeOperatorPermission('entity');
  static const id = FTypeOperatorPermission('id');
  static const mask = FTypeOperatorPermission('mask');
  static const operator = FTypeOperatorPermission('operator');
  static const operatorId = FTypeOperatorPermission('operatorId');
  const FTypeOperatorPermission(super.key);
}

final FieldReflectInfo<TypeOperatorPermission> _TypeOperatorPermission_fields = {
  "entity": (
    getter: (data) => data.entity,
    setter: (data, value) => data.entity = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entity);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entity = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entity = copyer(oldData.entity);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "mask": (
    getter: (data) => data.mask,
    setter: (data, value) => data.mask = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.mask);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.mask = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.mask = copyer(oldData.mask);
    },
  ),
  "operator": (
    getter: (data) => data.operator,
    setter: (data, value) => data.operator = value as TypeOperator?,
    toDynamic: (data) {
      final formatter = TypeOperator.toDynamic;
      return formatter(data.operator);
    },
    fromDynamic: (data, value) {
      final parser = TypeOperator.fromDynamic;
      data.operator = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOperator.deepCopy;
      newData.operator = copyer(oldData.operator);
    },
  ),
  "operatorId": (
    getter: (data) => data.operatorId,
    setter: (data, value) => data.operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.operatorId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.operatorId = copyer(oldData.operatorId);
    },
  ),
};

class TypeOperatorPermission extends IDataBasic implements IDataDynamic {
  TypeOperatorPermission({
    this.entity,
    this.id,
    this.mask,
    this.operator,
    this.operatorId
  });

  static TypeOperatorPermission? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPermission();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPermission_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPermission: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPermission? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPermission_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOperatorPermission? deepCopy(TypeOperatorPermission? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOperatorPermission();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOperatorPermission_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOperatorPermission copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPermission_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPermission_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? entity;

  int? id;

  int? mask;

  TypeOperator? operator;

  int? operatorId;

}

class FTypeOperatorPermissionInfo extends IDataField {
  static const operatorId = FTypeOperatorPermissionInfo('operatorId');
  static const permissions = FTypeOperatorPermissionInfo('permissions');
  const FTypeOperatorPermissionInfo(super.key);
}

final FieldReflectInfo<TypeOperatorPermissionInfo> _TypeOperatorPermissionInfo_fields = {
  "operatorId": (
    getter: (data) => data.operatorId,
    setter: (data, value) => data.operatorId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.operatorId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.operatorId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.operatorId = copyer(oldData.operatorId);
    },
  ),
  "permissions": (
    getter: (data) => data.permissions,
    setter: (data, value) => data.permissions = value as List<TypeOperatorPermission>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperatorPermission>((single){
        final handler = TypeOperatorPermission.toDynamic;
        return handler(single)!;
      });
      return formatter(data.permissions);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
        final handler = TypeOperatorPermission.fromDynamic;
        return handler(single)!;
      });
      data.permissions = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOperatorPermission>((single){
        final handler = TypeOperatorPermission.deepCopy;
        return handler(single)!;
      });
      newData.permissions = copyer(oldData.permissions);
    },
  ),
};

class TypeOperatorPermissionInfo extends IDataBasic implements IDataDynamic {
  TypeOperatorPermissionInfo({
    this.operatorId,
    this.permissions
  });

  static TypeOperatorPermissionInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPermissionInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPermissionInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPermissionInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPermissionInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPermissionInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOperatorPermissionInfo? deepCopy(TypeOperatorPermissionInfo? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOperatorPermissionInfo();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOperatorPermissionInfo_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOperatorPermissionInfo copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPermissionInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPermissionInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? operatorId;

  List<TypeOperatorPermission>? permissions;

}

class FTypeOperatorPost extends IDataField {
  static const postId = FTypeOperatorPost('postId');
  static const postName = FTypeOperatorPost('postName');
  const FTypeOperatorPost(super.key);
}

final FieldReflectInfo<TypeOperatorPost> _TypeOperatorPost_fields = {
  "postId": (
    getter: (data) => data.postId,
    setter: (data, value) => data.postId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.postId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.postId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.postId = copyer(oldData.postId);
    },
  ),
  "postName": (
    getter: (data) => data.postName,
    setter: (data, value) => data.postName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.postName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.postName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.postName = copyer(oldData.postName);
    },
  ),
};

class TypeOperatorPost extends IDataBasic implements IDataDynamic {
  TypeOperatorPost({
    this.postId,
    this.postName
  });

  static TypeOperatorPost? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOperatorPost();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOperatorPost_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOperatorPost: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOperatorPost? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOperatorPost_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOperatorPost? deepCopy(TypeOperatorPost? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOperatorPost();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOperatorPost_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOperatorPost copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOperatorPost_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOperatorPost_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? postId;

  String? postName;

}

class FTypeOrder extends IDataField {
  static const accountDocumentOrderId = FTypeOrder('accountDocumentOrderId');
  static const accounts = FTypeOrder('accounts');
  static const arapFlows = FTypeOrder('arapFlows');
  static const attachmentCount = FTypeOrder('attachmentCount');
  static const attachmentSize = FTypeOrder('attachmentSize');
  static const billTotal = FTypeOrder('billTotal');
  static const billType = FTypeOrder('billType');
  static const bomCostTotal = FTypeOrder('bomCostTotal');
  static const bomTotal = FTypeOrder('bomTotal');
  static const contactId = FTypeOrder('contactId');
  static const contactInfo = FTypeOrder('contactInfo');
  static const contactPersonAddress = FTypeOrder('contactPersonAddress');
  static const contactPersonName = FTypeOrder('contactPersonName');
  static const contactPersonPhone = FTypeOrder('contactPersonPhone');
  static const costTotal = FTypeOrder('costTotal');
  static const createTime = FTypeOrder('createTime');
  static const custom = FTypeOrder('custom');
  static const customField1 = FTypeOrder('customField1');
  static const customField2 = FTypeOrder('customField2');
  static const customField3 = FTypeOrder('customField3');
  static const customField4 = FTypeOrder('customField4');
  static const customField5 = FTypeOrder('customField5');
  static const customField6 = FTypeOrder('customField6');
  static const customField7 = FTypeOrder('customField7');
  static const customField8 = FTypeOrder('customField8');
  static const discountTotal = FTypeOrder('discountTotal');
  static const documentType = FTypeOrder('documentType');
  static const doneBillTotal = FTypeOrder('doneBillTotal');
  static const doneExecuteAmount = FTypeOrder('doneExecuteAmount');
  static const drawEmployeeId = FTypeOrder('drawEmployeeId');
  static const drawEmployeeInfo = FTypeOrder('drawEmployeeInfo');
  static const drawTime = FTypeOrder('drawTime');
  static const entryAccountEmployeeId = FTypeOrder('entryAccountEmployeeId');
  static const entryAccountEmployeeInfo = FTypeOrder('entryAccountEmployeeInfo');
  static const entryAccountTime = FTypeOrder('entryAccountTime');
  static const feeOnlyTotal = FTypeOrder('feeOnlyTotal');
  static const feeTotal = FTypeOrder('feeTotal');
  static const hasBeenIssued = FTypeOrder('hasBeenIssued');
  static const hasBeenPurchased = FTypeOrder('hasBeenPurchased');
  static const hasBeenUsed = FTypeOrder('hasBeenUsed');
  static const hasFinishBill = FTypeOrder('hasFinishBill');
  static const hasStockExecute = FTypeOrder('hasStockExecute');
  static const id = FTypeOrder('id');
  static const inStoreId = FTypeOrder('inStoreId');
  static const inStoreInfo = FTypeOrder('inStoreInfo');
  static const insertUniqueId = FTypeOrder('insertUniqueId');
  static const isSetStockLocation = FTypeOrder('isSetStockLocation');
  static const itemDirection = FTypeOrder('itemDirection');
  static const itemStockType = FTypeOrder('itemStockType');
  static const items = FTypeOrder('items');
  static const lastChangeOrderId = FTypeOrder('lastChangeOrderId');
  static const manageEmployeeId = FTypeOrder('manageEmployeeId');
  static const manageEmployeeInfo = FTypeOrder('manageEmployeeInfo');
  static const modifyTime = FTypeOrder('modifyTime');
  static const number = FTypeOrder('number');
  static const orderDate = FTypeOrder('orderDate');
  static const outStoreId = FTypeOrder('outStoreId');
  static const outStoreInfo = FTypeOrder('outStoreInfo');
  static const parentSourceOrderInfo = FTypeOrder('parentSourceOrderInfo');
  static const payCashAccountId = FTypeOrder('payCashAccountId');
  static const payCashAccountInfo = FTypeOrder('payCashAccountInfo');
  static const payCashTotal = FTypeOrder('payCashTotal');
  static const payDiscount = FTypeOrder('payDiscount');
  static const preTaxTotal = FTypeOrder('preTaxTotal');
  static const printTimes = FTypeOrder('printTimes');
  static const profitFlows = FTypeOrder('profitFlows');
  static const profitRate = FTypeOrder('profitRate');
  static const profitTotal = FTypeOrder('profitTotal');
  static const receiveCashAccountId = FTypeOrder('receiveCashAccountId');
  static const receiveCashAccountInfo = FTypeOrder('receiveCashAccountInfo');
  static const receiveCashTotal = FTypeOrder('receiveCashTotal');
  static const receiveDiscount = FTypeOrder('receiveDiscount');
  static const redReverseOrderId = FTypeOrder('redReverseOrderId');
  static const redState = FTypeOrder('redState');
  static const remark = FTypeOrder('remark');
  static const sourceOrderInfo = FTypeOrder('sourceOrderInfo');
  static const spendAdvancePayable = FTypeOrder('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrder('spendAdvanceReceivable');
  static const state = FTypeOrder('state');
  static const subOrders = FTypeOrder('subOrders');
  static const subType = FTypeOrder('subType');
  static const subjects = FTypeOrder('subjects');
  static const summaryRemark = FTypeOrder('summaryRemark');
  static const targetOrderInfo = FTypeOrder('targetOrderInfo');
  static const tax = FTypeOrder('tax');
  static const taxOnlyTotal = FTypeOrder('taxOnlyTotal');
  static const total = FTypeOrder('total');
  static const totalAmount = FTypeOrder('totalAmount');
  static const type = FTypeOrder('type');
  static const undoneBillTotal = FTypeOrder('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrder('undoneExecuteAmount');
  const FTypeOrder(super.key);
}

final FieldReflectInfo<TypeOrder> _TypeOrder_fields = {
  "accountDocumentOrderId": (
    getter: (data) => data.accountDocumentOrderId,
    setter: (data, value) => data.accountDocumentOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.accountDocumentOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.accountDocumentOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.accountDocumentOrderId = copyer(oldData.accountDocumentOrderId);
    },
  ),
  "accounts": (
    getter: (data) => data.accounts,
    setter: (data, value) => data.accounts = value as List<TypeOrderAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderAccount>((single){
        final handler = TypeOrderAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data.accounts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderAccount>((single){
        final handler = TypeOrderAccount.fromDynamic;
        return handler(single)!;
      });
      data.accounts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderAccount>((single){
        final handler = TypeOrderAccount.deepCopy;
        return handler(single)!;
      });
      newData.accounts = copyer(oldData.accounts);
    },
  ),
  "arapFlows": (
    getter: (data) => data.arapFlows,
    setter: (data, value) => data.arapFlows = value as List<TypeOrderArapFlow>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderArapFlow>((single){
        final handler = TypeOrderArapFlow.toDynamic;
        return handler(single)!;
      });
      return formatter(data.arapFlows);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderArapFlow>((single){
        final handler = TypeOrderArapFlow.fromDynamic;
        return handler(single)!;
      });
      data.arapFlows = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderArapFlow>((single){
        final handler = TypeOrderArapFlow.deepCopy;
        return handler(single)!;
      });
      newData.arapFlows = copyer(oldData.arapFlows);
    },
  ),
  "attachmentCount": (
    getter: (data) => data.attachmentCount,
    setter: (data, value) => data.attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentCount = copyer(oldData.attachmentCount);
    },
  ),
  "attachmentSize": (
    getter: (data) => data.attachmentSize,
    setter: (data, value) => data.attachmentSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentSize = copyer(oldData.attachmentSize);
    },
  ),
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "billType": (
    getter: (data) => data.billType,
    setter: (data, value) => data.billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data.billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data.billType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderBillType.deepCopy;
      newData.billType = copyer(oldData.billType);
    },
  ),
  "bomCostTotal": (
    getter: (data) => data.bomCostTotal,
    setter: (data, value) => data.bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomCostTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomCostTotal = copyer(oldData.bomCostTotal);
    },
  ),
  "bomTotal": (
    getter: (data) => data.bomTotal,
    setter: (data, value) => data.bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomTotal = copyer(oldData.bomTotal);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactInfo": (
    getter: (data) => data.contactInfo,
    setter: (data, value) => data.contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.contactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.contactInfo = copyer(oldData.contactInfo);
    },
  ),
  "contactPersonAddress": (
    getter: (data) => data.contactPersonAddress,
    setter: (data, value) => data.contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonAddress = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonAddress = copyer(oldData.contactPersonAddress);
    },
  ),
  "contactPersonName": (
    getter: (data) => data.contactPersonName,
    setter: (data, value) => data.contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonName = copyer(oldData.contactPersonName);
    },
  ),
  "contactPersonPhone": (
    getter: (data) => data.contactPersonPhone,
    setter: (data, value) => data.contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonPhone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonPhone = copyer(oldData.contactPersonPhone);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "custom": (
    getter: (data) => data.custom,
    setter: (data, value) => data.custom = value as TypeOrderCustom?,
    toDynamic: (data) {
      final formatter = TypeOrderCustom.toDynamic;
      return formatter(data.custom);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustom.fromDynamic;
      data.custom = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustom.deepCopy;
      newData.custom = copyer(oldData.custom);
    },
  ),
  "customField1": (
    getter: (data) => data.customField1,
    setter: (data, value) => data.customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField1 = copyer(oldData.customField1);
    },
  ),
  "customField2": (
    getter: (data) => data.customField2,
    setter: (data, value) => data.customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField2 = copyer(oldData.customField2);
    },
  ),
  "customField3": (
    getter: (data) => data.customField3,
    setter: (data, value) => data.customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField3 = copyer(oldData.customField3);
    },
  ),
  "customField4": (
    getter: (data) => data.customField4,
    setter: (data, value) => data.customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField4 = copyer(oldData.customField4);
    },
  ),
  "customField5": (
    getter: (data) => data.customField5,
    setter: (data, value) => data.customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField5 = copyer(oldData.customField5);
    },
  ),
  "customField6": (
    getter: (data) => data.customField6,
    setter: (data, value) => data.customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField6 = copyer(oldData.customField6);
    },
  ),
  "customField7": (
    getter: (data) => data.customField7,
    setter: (data, value) => data.customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField7 = copyer(oldData.customField7);
    },
  ),
  "customField8": (
    getter: (data) => data.customField8,
    setter: (data, value) => data.customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField8 = copyer(oldData.customField8);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "documentType": (
    getter: (data) => data.documentType,
    setter: (data, value) => data.documentType = value as TypeEnumOrderDocumentType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderDocumentType.toDynamic;
      return formatter(data.documentType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderDocumentType.fromDynamic;
      data.documentType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderDocumentType.deepCopy;
      newData.documentType = copyer(oldData.documentType);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "drawEmployeeInfo": (
    getter: (data) => data.drawEmployeeInfo,
    setter: (data, value) => data.drawEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.drawEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.drawEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.drawEmployeeInfo = copyer(oldData.drawEmployeeInfo);
    },
  ),
  "drawTime": (
    getter: (data) => data.drawTime,
    setter: (data, value) => data.drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawTime = copyer(oldData.drawTime);
    },
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data.entryAccountEmployeeId,
    setter: (data, value) => data.entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.entryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.entryAccountEmployeeId = copyer(oldData.entryAccountEmployeeId);
    },
  ),
  "entryAccountEmployeeInfo": (
    getter: (data) => data.entryAccountEmployeeInfo,
    setter: (data, value) => data.entryAccountEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.entryAccountEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.entryAccountEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.entryAccountEmployeeInfo = copyer(oldData.entryAccountEmployeeInfo);
    },
  ),
  "entryAccountTime": (
    getter: (data) => data.entryAccountTime,
    setter: (data, value) => data.entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountTime = copyer(oldData.entryAccountTime);
    },
  ),
  "feeOnlyTotal": (
    getter: (data) => data.feeOnlyTotal,
    setter: (data, value) => data.feeOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeOnlyTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeOnlyTotal = copyer(oldData.feeOnlyTotal);
    },
  ),
  "feeTotal": (
    getter: (data) => data.feeTotal,
    setter: (data, value) => data.feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeTotal = copyer(oldData.feeTotal);
    },
  ),
  "hasBeenIssued": (
    getter: (data) => data.hasBeenIssued,
    setter: (data, value) => data.hasBeenIssued = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenIssued);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenIssued = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenIssued = copyer(oldData.hasBeenIssued);
    },
  ),
  "hasBeenPurchased": (
    getter: (data) => data.hasBeenPurchased,
    setter: (data, value) => data.hasBeenPurchased = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenPurchased);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenPurchased = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenPurchased = copyer(oldData.hasBeenPurchased);
    },
  ),
  "hasBeenUsed": (
    getter: (data) => data.hasBeenUsed,
    setter: (data, value) => data.hasBeenUsed = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenUsed);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenUsed = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenUsed = copyer(oldData.hasBeenUsed);
    },
  ),
  "hasFinishBill": (
    getter: (data) => data.hasFinishBill,
    setter: (data, value) => data.hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasFinishBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasFinishBill = copyer(oldData.hasFinishBill);
    },
  ),
  "hasStockExecute": (
    getter: (data) => data.hasStockExecute,
    setter: (data, value) => data.hasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasStockExecute = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasStockExecute = copyer(oldData.hasStockExecute);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "inStoreId": (
    getter: (data) => data.inStoreId,
    setter: (data, value) => data.inStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.inStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.inStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.inStoreId = copyer(oldData.inStoreId);
    },
  ),
  "inStoreInfo": (
    getter: (data) => data.inStoreInfo,
    setter: (data, value) => data.inStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.inStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.inStoreInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.inStoreInfo = copyer(oldData.inStoreInfo);
    },
  ),
  "insertUniqueId": (
    getter: (data) => data.insertUniqueId,
    setter: (data, value) => data.insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.insertUniqueId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.insertUniqueId = copyer(oldData.insertUniqueId);
    },
  ),
  "isSetStockLocation": (
    getter: (data) => data.isSetStockLocation,
    setter: (data, value) => data.isSetStockLocation = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSetStockLocation);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSetStockLocation = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSetStockLocation = copyer(oldData.isSetStockLocation);
    },
  ),
  "itemDirection": (
    getter: (data) => data.itemDirection,
    setter: (data, value) => data.itemDirection = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemDirection);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemDirection = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemDirection = copyer(oldData.itemDirection);
    },
  ),
  "itemStockType": (
    getter: (data) => data.itemStockType,
    setter: (data, value) => data.itemStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemStockType = copyer(oldData.itemStockType);
    },
  ),
  "items": (
    getter: (data) => data.items,
    setter: (data, value) => data.items = value as List<TypeOrderItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItem>((single){
        final handler = TypeOrderItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.items);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItem>((single){
        final handler = TypeOrderItem.fromDynamic;
        return handler(single)!;
      });
      data.items = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItem>((single){
        final handler = TypeOrderItem.deepCopy;
        return handler(single)!;
      });
      newData.items = copyer(oldData.items);
    },
  ),
  "lastChangeOrderId": (
    getter: (data) => data.lastChangeOrderId,
    setter: (data, value) => data.lastChangeOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.lastChangeOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.lastChangeOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.lastChangeOrderId = copyer(oldData.lastChangeOrderId);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "manageEmployeeInfo": (
    getter: (data) => data.manageEmployeeInfo,
    setter: (data, value) => data.manageEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.manageEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.manageEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.manageEmployeeInfo = copyer(oldData.manageEmployeeInfo);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "outStoreId": (
    getter: (data) => data.outStoreId,
    setter: (data, value) => data.outStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.outStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.outStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.outStoreId = copyer(oldData.outStoreId);
    },
  ),
  "outStoreInfo": (
    getter: (data) => data.outStoreInfo,
    setter: (data, value) => data.outStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.outStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.outStoreInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.outStoreInfo = copyer(oldData.outStoreInfo);
    },
  ),
  "parentSourceOrderInfo": (
    getter: (data) => data.parentSourceOrderInfo,
    setter: (data, value) => data.parentSourceOrderInfo = value as TypeOrderSourceOrderItem?,
    toDynamic: (data) {
      final formatter = TypeOrderSourceOrderItem.toDynamic;
      return formatter(data.parentSourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSourceOrderItem.fromDynamic;
      data.parentSourceOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderSourceOrderItem.deepCopy;
      newData.parentSourceOrderInfo = copyer(oldData.parentSourceOrderInfo);
    },
  ),
  "payCashAccountId": (
    getter: (data) => data.payCashAccountId,
    setter: (data, value) => data.payCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.payCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.payCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.payCashAccountId = copyer(oldData.payCashAccountId);
    },
  ),
  "payCashAccountInfo": (
    getter: (data) => data.payCashAccountInfo,
    setter: (data, value) => data.payCashAccountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data.payCashAccountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data.payCashAccountInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccount.deepCopy;
      newData.payCashAccountInfo = copyer(oldData.payCashAccountInfo);
    },
  ),
  "payCashTotal": (
    getter: (data) => data.payCashTotal,
    setter: (data, value) => data.payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payCashTotal = copyer(oldData.payCashTotal);
    },
  ),
  "payDiscount": (
    getter: (data) => data.payDiscount,
    setter: (data, value) => data.payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payDiscount = copyer(oldData.payDiscount);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "printTimes": (
    getter: (data) => data.printTimes,
    setter: (data, value) => data.printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.printTimes = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.printTimes = copyer(oldData.printTimes);
    },
  ),
  "profitFlows": (
    getter: (data) => data.profitFlows,
    setter: (data, value) => data.profitFlows = value as List<TypeOrderProfitFlow>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderProfitFlow>((single){
        final handler = TypeOrderProfitFlow.toDynamic;
        return handler(single)!;
      });
      return formatter(data.profitFlows);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderProfitFlow>((single){
        final handler = TypeOrderProfitFlow.fromDynamic;
        return handler(single)!;
      });
      data.profitFlows = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderProfitFlow>((single){
        final handler = TypeOrderProfitFlow.deepCopy;
        return handler(single)!;
      });
      newData.profitFlows = copyer(oldData.profitFlows);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "receiveCashAccountId": (
    getter: (data) => data.receiveCashAccountId,
    setter: (data, value) => data.receiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.receiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.receiveCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.receiveCashAccountId = copyer(oldData.receiveCashAccountId);
    },
  ),
  "receiveCashAccountInfo": (
    getter: (data) => data.receiveCashAccountInfo,
    setter: (data, value) => data.receiveCashAccountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data.receiveCashAccountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data.receiveCashAccountInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccount.deepCopy;
      newData.receiveCashAccountInfo = copyer(oldData.receiveCashAccountInfo);
    },
  ),
  "receiveCashTotal": (
    getter: (data) => data.receiveCashTotal,
    setter: (data, value) => data.receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashTotal = copyer(oldData.receiveCashTotal);
    },
  ),
  "receiveDiscount": (
    getter: (data) => data.receiveDiscount,
    setter: (data, value) => data.receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveDiscount = copyer(oldData.receiveDiscount);
    },
  ),
  "redReverseOrderId": (
    getter: (data) => data.redReverseOrderId,
    setter: (data, value) => data.redReverseOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.redReverseOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.redReverseOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.redReverseOrderId = copyer(oldData.redReverseOrderId);
    },
  ),
  "redState": (
    getter: (data) => data.redState,
    setter: (data, value) => data.redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.redState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.redState = copyer(oldData.redState);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "sourceOrderInfo": (
    getter: (data) => data.sourceOrderInfo,
    setter: (data, value) => data.sourceOrderInfo = value as List<TypeOrderSourceOrderItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSourceOrderItem>((single){
        final handler = TypeOrderSourceOrderItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.sourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSourceOrderItem>((single){
        final handler = TypeOrderSourceOrderItem.fromDynamic;
        return handler(single)!;
      });
      data.sourceOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderSourceOrderItem>((single){
        final handler = TypeOrderSourceOrderItem.deepCopy;
        return handler(single)!;
      });
      newData.sourceOrderInfo = copyer(oldData.sourceOrderInfo);
    },
  ),
  "spendAdvancePayable": (
    getter: (data) => data.spendAdvancePayable,
    setter: (data, value) => data.spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvancePayable = copyer(oldData.spendAdvancePayable);
    },
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data.spendAdvanceReceivable,
    setter: (data, value) => data.spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvanceReceivable = copyer(oldData.spendAdvanceReceivable);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "subOrders": (
    getter: (data) => data.subOrders,
    setter: (data, value) => data.subOrders = value as List<TypeOrderSubOrder>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubOrder>((single){
        final handler = TypeOrderSubOrder.toDynamic;
        return handler(single)!;
      });
      return formatter(data.subOrders);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubOrder>((single){
        final handler = TypeOrderSubOrder.fromDynamic;
        return handler(single)!;
      });
      data.subOrders = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderSubOrder>((single){
        final handler = TypeOrderSubOrder.deepCopy;
        return handler(single)!;
      });
      newData.subOrders = copyer(oldData.subOrders);
    },
  ),
  "subType": (
    getter: (data) => data.subType,
    setter: (data, value) => data.subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data.subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data.subType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderSubType.deepCopy;
      newData.subType = copyer(oldData.subType);
    },
  ),
  "subjects": (
    getter: (data) => data.subjects,
    setter: (data, value) => data.subjects = value as List<TypeOrderSubject>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubject>((single){
        final handler = TypeOrderSubject.toDynamic;
        return handler(single)!;
      });
      return formatter(data.subjects);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubject>((single){
        final handler = TypeOrderSubject.fromDynamic;
        return handler(single)!;
      });
      data.subjects = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderSubject>((single){
        final handler = TypeOrderSubject.deepCopy;
        return handler(single)!;
      });
      newData.subjects = copyer(oldData.subjects);
    },
  ),
  "summaryRemark": (
    getter: (data) => data.summaryRemark,
    setter: (data, value) => data.summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.summaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.summaryRemark = copyer(oldData.summaryRemark);
    },
  ),
  "targetOrderInfo": (
    getter: (data) => data.targetOrderInfo,
    setter: (data, value) => data.targetOrderInfo = value as TypeOrderSourceOrderItem?,
    toDynamic: (data) {
      final formatter = TypeOrderSourceOrderItem.toDynamic;
      return formatter(data.targetOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSourceOrderItem.fromDynamic;
      data.targetOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderSourceOrderItem.deepCopy;
      newData.targetOrderInfo = copyer(oldData.targetOrderInfo);
    },
  ),
  "tax": (
    getter: (data) => data.tax,
    setter: (data, value) => data.tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.tax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.tax = copyer(oldData.tax);
    },
  ),
  "taxOnlyTotal": (
    getter: (data) => data.taxOnlyTotal,
    setter: (data, value) => data.taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxOnlyTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxOnlyTotal = copyer(oldData.taxOnlyTotal);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "totalAmount": (
    getter: (data) => data.totalAmount,
    setter: (data, value) => data.totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalAmount = copyer(oldData.totalAmount);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
};

class TypeOrder extends IDataBasic implements IDataDynamic {
  TypeOrder({
    this.accountDocumentOrderId,
    this.accounts,
    this.arapFlows,
    this.attachmentCount,
    this.attachmentSize,
    this.billTotal,
    this.billType,
    this.bomCostTotal,
    this.bomTotal,
    this.contactId,
    this.contactInfo,
    this.contactPersonAddress,
    this.contactPersonName,
    this.contactPersonPhone,
    this.costTotal,
    this.createTime,
    this.custom,
    this.customField1,
    this.customField2,
    this.customField3,
    this.customField4,
    this.customField5,
    this.customField6,
    this.customField7,
    this.customField8,
    this.discountTotal,
    this.documentType,
    this.doneBillTotal,
    this.doneExecuteAmount,
    this.drawEmployeeId,
    this.drawEmployeeInfo,
    this.drawTime,
    this.entryAccountEmployeeId,
    this.entryAccountEmployeeInfo,
    this.entryAccountTime,
    this.feeOnlyTotal,
    this.feeTotal,
    this.hasBeenIssued,
    this.hasBeenPurchased,
    this.hasBeenUsed,
    this.hasFinishBill,
    this.hasStockExecute,
    this.id,
    this.inStoreId,
    this.inStoreInfo,
    this.insertUniqueId,
    this.isSetStockLocation,
    this.itemDirection,
    this.itemStockType,
    this.items,
    this.lastChangeOrderId,
    this.manageEmployeeId,
    this.manageEmployeeInfo,
    this.modifyTime,
    this.number,
    this.orderDate,
    this.outStoreId,
    this.outStoreInfo,
    this.parentSourceOrderInfo,
    this.payCashAccountId,
    this.payCashAccountInfo,
    this.payCashTotal,
    this.payDiscount,
    this.preTaxTotal,
    this.printTimes,
    this.profitFlows,
    this.profitRate,
    this.profitTotal,
    this.receiveCashAccountId,
    this.receiveCashAccountInfo,
    this.receiveCashTotal,
    this.receiveDiscount,
    this.redReverseOrderId,
    this.redState,
    this.remark,
    this.sourceOrderInfo,
    this.spendAdvancePayable,
    this.spendAdvanceReceivable,
    this.state,
    this.subOrders,
    this.subType,
    this.subjects,
    this.summaryRemark,
    this.targetOrderInfo,
    this.tax,
    this.taxOnlyTotal,
    this.total,
    this.totalAmount,
    this.type,
    this.undoneBillTotal,
    this.undoneExecuteAmount
  });

  static TypeOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrder? deepCopy(TypeOrder? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrder();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrder_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrder copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? accountDocumentOrderId;

  List<TypeOrderAccount>? accounts;

  List<TypeOrderArapFlow>? arapFlows;

  int? attachmentCount;

  int? attachmentSize;

  String? billTotal;

  TypeEnumOrderBillType? billType;

  String? bomCostTotal;

  String? bomTotal;

  int? contactId;

  TypeContact? contactInfo;

  String? contactPersonAddress;

  String? contactPersonName;

  String? contactPersonPhone;

  String? costTotal;

  String? createTime;

  TypeOrderCustom? custom;

  String? customField1;

  String? customField2;

  String? customField3;

  String? customField4;

  String? customField5;

  String? customField6;

  String? customField7;

  String? customField8;

  String? discountTotal;

  TypeEnumOrderDocumentType? documentType;

  String? doneBillTotal;

  String? doneExecuteAmount;

  int? drawEmployeeId;

  TypeEmployee? drawEmployeeInfo;

  String? drawTime;

  int? entryAccountEmployeeId;

  TypeEmployee? entryAccountEmployeeInfo;

  String? entryAccountTime;

  String? feeOnlyTotal;

  String? feeTotal;

  int? hasBeenIssued;

  int? hasBeenPurchased;

  int? hasBeenUsed;

  int? hasFinishBill;

  int? hasStockExecute;

  int? id;

  int? inStoreId;

  TypeStore? inStoreInfo;

  int? insertUniqueId;

  int? isSetStockLocation;

  int? itemDirection;

  int? itemStockType;

  List<TypeOrderItem>? items;

  int? lastChangeOrderId;

  int? manageEmployeeId;

  TypeEmployee? manageEmployeeInfo;

  String? modifyTime;

  String? number;

  String? orderDate;

  int? outStoreId;

  TypeStore? outStoreInfo;

  TypeOrderSourceOrderItem? parentSourceOrderInfo;

  int? payCashAccountId;

  TypeAccount? payCashAccountInfo;

  String? payCashTotal;

  String? payDiscount;

  String? preTaxTotal;

  int? printTimes;

  List<TypeOrderProfitFlow>? profitFlows;

  String? profitRate;

  String? profitTotal;

  int? receiveCashAccountId;

  TypeAccount? receiveCashAccountInfo;

  String? receiveCashTotal;

  String? receiveDiscount;

  int? redReverseOrderId;

  TypeEnumOrderRedState? redState;

  String? remark;

  List<TypeOrderSourceOrderItem>? sourceOrderInfo;

  String? spendAdvancePayable;

  String? spendAdvanceReceivable;

  TypeEnumOrderState? state;

  List<TypeOrderSubOrder>? subOrders;

  TypeEnumOrderSubType? subType;

  List<TypeOrderSubject>? subjects;

  String? summaryRemark;

  TypeOrderSourceOrderItem? targetOrderInfo;

  String? tax;

  String? taxOnlyTotal;

  String? total;

  String? totalAmount;

  TypeEnumOrderType? type;

  String? undoneBillTotal;

  String? undoneExecuteAmount;

}

class FTypeOrderAccount extends IDataField {
  static const accountId = FTypeOrderAccount('accountId');
  static const accountInfo = FTypeOrderAccount('accountInfo');
  static const accountSubType = FTypeOrderAccount('accountSubType');
  static const accountType = FTypeOrderAccount('accountType');
  static const auxiliaryContactId = FTypeOrderAccount('auxiliaryContactId');
  static const auxiliaryContactInfo = FTypeOrderAccount('auxiliaryContactInfo');
  static const auxiliaryEmployeeId = FTypeOrderAccount('auxiliaryEmployeeId');
  static const auxiliaryEmployeeInfo = FTypeOrderAccount('auxiliaryEmployeeInfo');
  static const auxiliaryStoreId = FTypeOrderAccount('auxiliaryStoreId');
  static const auxiliaryStoreInfo = FTypeOrderAccount('auxiliaryStoreInfo');
  static const businessOrderId = FTypeOrderAccount('businessOrderId');
  static const contactId = FTypeOrderAccount('contactId');
  static const contactInfo = FTypeOrderAccount('contactInfo');
  static const creditChange = FTypeOrderAccount('creditChange');
  static const debitChange = FTypeOrderAccount('debitChange');
  static const drawEmployeeId = FTypeOrderAccount('drawEmployeeId');
  static const drawEmployeeInfo = FTypeOrderAccount('drawEmployeeInfo');
  static const id = FTypeOrderAccount('id');
  static const isMonthlyClose = FTypeOrderAccount('isMonthlyClose');
  static const manageEmployeeId = FTypeOrderAccount('manageEmployeeId');
  static const manageEmployeeInfo = FTypeOrderAccount('manageEmployeeInfo');
  static const remark = FTypeOrderAccount('remark');
  static const storeId = FTypeOrderAccount('storeId');
  static const storeInfo = FTypeOrderAccount('storeInfo');
  static const summaryRemark = FTypeOrderAccount('summaryRemark');
  const FTypeOrderAccount(super.key);
}

final FieldReflectInfo<TypeOrderAccount> _TypeOrderAccount_fields = {
  "accountId": (
    getter: (data) => data.accountId,
    setter: (data, value) => data.accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.accountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.accountId = copyer(oldData.accountId);
    },
  ),
  "accountInfo": (
    getter: (data) => data.accountInfo,
    setter: (data, value) => data.accountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data.accountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data.accountInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccount.deepCopy;
      newData.accountInfo = copyer(oldData.accountInfo);
    },
  ),
  "accountSubType": (
    getter: (data) => data.accountSubType,
    setter: (data, value) => data.accountSubType = value as TypeEnumAccountSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountSubType.toDynamic;
      return formatter(data.accountSubType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountSubType.fromDynamic;
      data.accountSubType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountSubType.deepCopy;
      newData.accountSubType = copyer(oldData.accountSubType);
    },
  ),
  "accountType": (
    getter: (data) => data.accountType,
    setter: (data, value) => data.accountType = value as TypeEnumAccountType?,
    toDynamic: (data) {
      final formatter = TypeEnumAccountType.toDynamic;
      return formatter(data.accountType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAccountType.fromDynamic;
      data.accountType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAccountType.deepCopy;
      newData.accountType = copyer(oldData.accountType);
    },
  ),
  "auxiliaryContactId": (
    getter: (data) => data.auxiliaryContactId,
    setter: (data, value) => data.auxiliaryContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryContactId = copyer(oldData.auxiliaryContactId);
    },
  ),
  "auxiliaryContactInfo": (
    getter: (data) => data.auxiliaryContactInfo,
    setter: (data, value) => data.auxiliaryContactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.auxiliaryContactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.auxiliaryContactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.auxiliaryContactInfo = copyer(oldData.auxiliaryContactInfo);
    },
  ),
  "auxiliaryEmployeeId": (
    getter: (data) => data.auxiliaryEmployeeId,
    setter: (data, value) => data.auxiliaryEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryEmployeeId = copyer(oldData.auxiliaryEmployeeId);
    },
  ),
  "auxiliaryEmployeeInfo": (
    getter: (data) => data.auxiliaryEmployeeInfo,
    setter: (data, value) => data.auxiliaryEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.auxiliaryEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.auxiliaryEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.auxiliaryEmployeeInfo = copyer(oldData.auxiliaryEmployeeInfo);
    },
  ),
  "auxiliaryStoreId": (
    getter: (data) => data.auxiliaryStoreId,
    setter: (data, value) => data.auxiliaryStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryStoreId = copyer(oldData.auxiliaryStoreId);
    },
  ),
  "auxiliaryStoreInfo": (
    getter: (data) => data.auxiliaryStoreInfo,
    setter: (data, value) => data.auxiliaryStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.auxiliaryStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.auxiliaryStoreInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.auxiliaryStoreInfo = copyer(oldData.auxiliaryStoreInfo);
    },
  ),
  "businessOrderId": (
    getter: (data) => data.businessOrderId,
    setter: (data, value) => data.businessOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.businessOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.businessOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.businessOrderId = copyer(oldData.businessOrderId);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactInfo": (
    getter: (data) => data.contactInfo,
    setter: (data, value) => data.contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.contactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.contactInfo = copyer(oldData.contactInfo);
    },
  ),
  "creditChange": (
    getter: (data) => data.creditChange,
    setter: (data, value) => data.creditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.creditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.creditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.creditChange = copyer(oldData.creditChange);
    },
  ),
  "debitChange": (
    getter: (data) => data.debitChange,
    setter: (data, value) => data.debitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.debitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.debitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.debitChange = copyer(oldData.debitChange);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "drawEmployeeInfo": (
    getter: (data) => data.drawEmployeeInfo,
    setter: (data, value) => data.drawEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.drawEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.drawEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.drawEmployeeInfo = copyer(oldData.drawEmployeeInfo);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isMonthlyClose": (
    getter: (data) => data.isMonthlyClose,
    setter: (data, value) => data.isMonthlyClose = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isMonthlyClose);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isMonthlyClose = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isMonthlyClose = copyer(oldData.isMonthlyClose);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "manageEmployeeInfo": (
    getter: (data) => data.manageEmployeeInfo,
    setter: (data, value) => data.manageEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.manageEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.manageEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.manageEmployeeInfo = copyer(oldData.manageEmployeeInfo);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeInfo": (
    getter: (data) => data.storeInfo,
    setter: (data, value) => data.storeInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.storeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.storeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.storeInfo = copyer(oldData.storeInfo);
    },
  ),
  "summaryRemark": (
    getter: (data) => data.summaryRemark,
    setter: (data, value) => data.summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.summaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.summaryRemark = copyer(oldData.summaryRemark);
    },
  ),
};

class TypeOrderAccount extends IDataBasic implements IDataDynamic {
  TypeOrderAccount({
    this.accountId,
    this.accountInfo,
    this.accountSubType,
    this.accountType,
    this.auxiliaryContactId,
    this.auxiliaryContactInfo,
    this.auxiliaryEmployeeId,
    this.auxiliaryEmployeeInfo,
    this.auxiliaryStoreId,
    this.auxiliaryStoreInfo,
    this.businessOrderId,
    this.contactId,
    this.contactInfo,
    this.creditChange,
    this.debitChange,
    this.drawEmployeeId,
    this.drawEmployeeInfo,
    this.id,
    this.isMonthlyClose,
    this.manageEmployeeId,
    this.manageEmployeeInfo,
    this.remark,
    this.storeId,
    this.storeInfo,
    this.summaryRemark
  });

  static TypeOrderAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderAccount? deepCopy(TypeOrderAccount? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderAccount();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderAccount_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderAccount copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? accountId;

  TypeAccount? accountInfo;

  TypeEnumAccountSubType? accountSubType;

  TypeEnumAccountType? accountType;

  int? auxiliaryContactId;

  TypeContact? auxiliaryContactInfo;

  int? auxiliaryEmployeeId;

  TypeEmployee? auxiliaryEmployeeInfo;

  int? auxiliaryStoreId;

  TypeStore? auxiliaryStoreInfo;

  int? businessOrderId;

  int? contactId;

  TypeContact? contactInfo;

  String? creditChange;

  String? debitChange;

  int? drawEmployeeId;

  TypeEmployee? drawEmployeeInfo;

  int? id;

  int? isMonthlyClose;

  int? manageEmployeeId;

  TypeEmployee? manageEmployeeInfo;

  String? remark;

  int? storeId;

  TypeStore? storeInfo;

  String? summaryRemark;

}

class FTypeOrderArapFlow extends IDataField {
  static const adpChange = FTypeOrderArapFlow('adpChange');
  static const adpCreditChange = FTypeOrderArapFlow('adpCreditChange');
  static const adpDebitChange = FTypeOrderArapFlow('adpDebitChange');
  static const adrChange = FTypeOrderArapFlow('adrChange');
  static const adrCreditChange = FTypeOrderArapFlow('adrCreditChange');
  static const adrDebitChange = FTypeOrderArapFlow('adrDebitChange');
  static const apAdjustTotal = FTypeOrderArapFlow('apAdjustTotal');
  static const apChange = FTypeOrderArapFlow('apChange');
  static const apCreditChange = FTypeOrderArapFlow('apCreditChange');
  static const apDebitChange = FTypeOrderArapFlow('apDebitChange');
  static const arAdjustTotal = FTypeOrderArapFlow('arAdjustTotal');
  static const arChange = FTypeOrderArapFlow('arChange');
  static const arCreditChange = FTypeOrderArapFlow('arCreditChange');
  static const arDebitChange = FTypeOrderArapFlow('arDebitChange');
  static const arapType = FTypeOrderArapFlow('arapType');
  static const businessTotal = FTypeOrderArapFlow('businessTotal');
  static const cashApChange = FTypeOrderArapFlow('cashApChange');
  static const cashArChange = FTypeOrderArapFlow('cashArChange');
  static const contactId = FTypeOrderArapFlow('contactId');
  static const discountTotal = FTypeOrderArapFlow('discountTotal');
  static const id = FTypeOrderArapFlow('id');
  static const manageEmployeeId = FTypeOrderArapFlow('manageEmployeeId');
  static const spendAdpChange = FTypeOrderArapFlow('spendAdpChange');
  static const spendAdrChange = FTypeOrderArapFlow('spendAdrChange');
  static const subOrderId = FTypeOrderArapFlow('subOrderId');
  static const subOrderNumber = FTypeOrderArapFlow('subOrderNumber');
  const FTypeOrderArapFlow(super.key);
}

final FieldReflectInfo<TypeOrderArapFlow> _TypeOrderArapFlow_fields = {
  "adpChange": (
    getter: (data) => data.adpChange,
    setter: (data, value) => data.adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpChange = copyer(oldData.adpChange);
    },
  ),
  "adpCreditChange": (
    getter: (data) => data.adpCreditChange,
    setter: (data, value) => data.adpCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpCreditChange = copyer(oldData.adpCreditChange);
    },
  ),
  "adpDebitChange": (
    getter: (data) => data.adpDebitChange,
    setter: (data, value) => data.adpDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpDebitChange = copyer(oldData.adpDebitChange);
    },
  ),
  "adrChange": (
    getter: (data) => data.adrChange,
    setter: (data, value) => data.adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrChange = copyer(oldData.adrChange);
    },
  ),
  "adrCreditChange": (
    getter: (data) => data.adrCreditChange,
    setter: (data, value) => data.adrCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrCreditChange = copyer(oldData.adrCreditChange);
    },
  ),
  "adrDebitChange": (
    getter: (data) => data.adrDebitChange,
    setter: (data, value) => data.adrDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrDebitChange = copyer(oldData.adrDebitChange);
    },
  ),
  "apAdjustTotal": (
    getter: (data) => data.apAdjustTotal,
    setter: (data, value) => data.apAdjustTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apAdjustTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apAdjustTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apAdjustTotal = copyer(oldData.apAdjustTotal);
    },
  ),
  "apChange": (
    getter: (data) => data.apChange,
    setter: (data, value) => data.apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apChange = copyer(oldData.apChange);
    },
  ),
  "apCreditChange": (
    getter: (data) => data.apCreditChange,
    setter: (data, value) => data.apCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apCreditChange = copyer(oldData.apCreditChange);
    },
  ),
  "apDebitChange": (
    getter: (data) => data.apDebitChange,
    setter: (data, value) => data.apDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apDebitChange = copyer(oldData.apDebitChange);
    },
  ),
  "arAdjustTotal": (
    getter: (data) => data.arAdjustTotal,
    setter: (data, value) => data.arAdjustTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arAdjustTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arAdjustTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arAdjustTotal = copyer(oldData.arAdjustTotal);
    },
  ),
  "arChange": (
    getter: (data) => data.arChange,
    setter: (data, value) => data.arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arChange = copyer(oldData.arChange);
    },
  ),
  "arCreditChange": (
    getter: (data) => data.arCreditChange,
    setter: (data, value) => data.arCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arCreditChange = copyer(oldData.arCreditChange);
    },
  ),
  "arDebitChange": (
    getter: (data) => data.arDebitChange,
    setter: (data, value) => data.arDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arDebitChange = copyer(oldData.arDebitChange);
    },
  ),
  "arapType": (
    getter: (data) => data.arapType,
    setter: (data, value) => data.arapType = value as TypeEnumOrderArapType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderArapType.toDynamic;
      return formatter(data.arapType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderArapType.fromDynamic;
      data.arapType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderArapType.deepCopy;
      newData.arapType = copyer(oldData.arapType);
    },
  ),
  "businessTotal": (
    getter: (data) => data.businessTotal,
    setter: (data, value) => data.businessTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.businessTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.businessTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.businessTotal = copyer(oldData.businessTotal);
    },
  ),
  "cashApChange": (
    getter: (data) => data.cashApChange,
    setter: (data, value) => data.cashApChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashApChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashApChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashApChange = copyer(oldData.cashApChange);
    },
  ),
  "cashArChange": (
    getter: (data) => data.cashArChange,
    setter: (data, value) => data.cashArChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashArChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashArChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashArChange = copyer(oldData.cashArChange);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "spendAdpChange": (
    getter: (data) => data.spendAdpChange,
    setter: (data, value) => data.spendAdpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdpChange = copyer(oldData.spendAdpChange);
    },
  ),
  "spendAdrChange": (
    getter: (data) => data.spendAdrChange,
    setter: (data, value) => data.spendAdrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdrChange = copyer(oldData.spendAdrChange);
    },
  ),
  "subOrderId": (
    getter: (data) => data.subOrderId,
    setter: (data, value) => data.subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.subOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.subOrderId = copyer(oldData.subOrderId);
    },
  ),
  "subOrderNumber": (
    getter: (data) => data.subOrderNumber,
    setter: (data, value) => data.subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderNumber = copyer(oldData.subOrderNumber);
    },
  ),
};

class TypeOrderArapFlow extends IDataBasic implements IDataDynamic {
  TypeOrderArapFlow({
    this.adpChange,
    this.adpCreditChange,
    this.adpDebitChange,
    this.adrChange,
    this.adrCreditChange,
    this.adrDebitChange,
    this.apAdjustTotal,
    this.apChange,
    this.apCreditChange,
    this.apDebitChange,
    this.arAdjustTotal,
    this.arChange,
    this.arCreditChange,
    this.arDebitChange,
    this.arapType,
    this.businessTotal,
    this.cashApChange,
    this.cashArChange,
    this.contactId,
    this.discountTotal,
    this.id,
    this.manageEmployeeId,
    this.spendAdpChange,
    this.spendAdrChange,
    this.subOrderId,
    this.subOrderNumber
  });

  static TypeOrderArapFlow? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderArapFlow();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderArapFlow_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderArapFlow: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderArapFlow? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderArapFlow_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderArapFlow? deepCopy(TypeOrderArapFlow? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderArapFlow();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderArapFlow_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderArapFlow copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderArapFlow_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderArapFlow_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? adpChange;

  String? adpCreditChange;

  String? adpDebitChange;

  String? adrChange;

  String? adrCreditChange;

  String? adrDebitChange;

  String? apAdjustTotal;

  String? apChange;

  String? apCreditChange;

  String? apDebitChange;

  String? arAdjustTotal;

  String? arChange;

  String? arCreditChange;

  String? arDebitChange;

  TypeEnumOrderArapType? arapType;

  String? businessTotal;

  String? cashApChange;

  String? cashArChange;

  int? contactId;

  String? discountTotal;

  int? id;

  int? manageEmployeeId;

  String? spendAdpChange;

  String? spendAdrChange;

  int? subOrderId;

  String? subOrderNumber;

}

class FTypeOrderAttachmentQueryDTO extends IDataField {
  static const data = FTypeOrderAttachmentQueryDTO('data');
  static const pageIndex = FTypeOrderAttachmentQueryDTO('pageIndex');
  static const pageSize = FTypeOrderAttachmentQueryDTO('pageSize');
  static const sum = FTypeOrderAttachmentQueryDTO('sum');
  const FTypeOrderAttachmentQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQueryDTO> _TypeOrderAttachmentQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderAttachmentQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderAttachmentQueryDataDTO>((single){
        final handler = TypeOrderAttachmentQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderAttachmentQueryDataDTO>((single){
        final handler = TypeOrderAttachmentQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderAttachmentQueryDataDTO>((single){
        final handler = TypeOrderAttachmentQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderAttachmentQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderAttachmentQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderAttachmentQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderAttachmentQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderAttachmentQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderAttachmentQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderAttachmentQueryDTO? deepCopy(TypeOrderAttachmentQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderAttachmentQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderAttachmentQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderAttachmentQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderAttachmentQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeOrderAttachmentQuerySumDTO? sum;

}

class FTypeOrderAttachmentQueryDataDTO extends IDataField {
  static const attachmentCount = FTypeOrderAttachmentQueryDataDTO('attachmentCount');
  static const contactId = FTypeOrderAttachmentQueryDataDTO('contactId');
  static const contactName = FTypeOrderAttachmentQueryDataDTO('contactName');
  static const contactPersonAddress = FTypeOrderAttachmentQueryDataDTO('contactPersonAddress');
  static const contactPersonName = FTypeOrderAttachmentQueryDataDTO('contactPersonName');
  static const contactPersonPhone = FTypeOrderAttachmentQueryDataDTO('contactPersonPhone');
  static const customField1 = FTypeOrderAttachmentQueryDataDTO('customField1');
  static const customField2 = FTypeOrderAttachmentQueryDataDTO('customField2');
  static const customField3 = FTypeOrderAttachmentQueryDataDTO('customField3');
  static const customField4 = FTypeOrderAttachmentQueryDataDTO('customField4');
  static const customField5 = FTypeOrderAttachmentQueryDataDTO('customField5');
  static const customField6 = FTypeOrderAttachmentQueryDataDTO('customField6');
  static const customField7 = FTypeOrderAttachmentQueryDataDTO('customField7');
  static const customField8 = FTypeOrderAttachmentQueryDataDTO('customField8');
  static const drawEmployeeId = FTypeOrderAttachmentQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderAttachmentQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderAttachmentQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderAttachmentQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderAttachmentQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderAttachmentQueryDataDTO('entryAccountTime');
  static const id = FTypeOrderAttachmentQueryDataDTO('id');
  static const imageInfos = FTypeOrderAttachmentQueryDataDTO('imageInfos');
  static const manageEmployeeId = FTypeOrderAttachmentQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderAttachmentQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderAttachmentQueryDataDTO('number');
  static const orderDate = FTypeOrderAttachmentQueryDataDTO('orderDate');
  static const printTimes = FTypeOrderAttachmentQueryDataDTO('printTimes');
  static const remark = FTypeOrderAttachmentQueryDataDTO('remark');
  static const state = FTypeOrderAttachmentQueryDataDTO('state');
  static const summaryRemark = FTypeOrderAttachmentQueryDataDTO('summaryRemark');
  static const type = FTypeOrderAttachmentQueryDataDTO('type');
  const FTypeOrderAttachmentQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQueryDataDTO> _TypeOrderAttachmentQueryDataDTO_fields = {
  "attachmentCount": (
    getter: (data) => data.attachmentCount,
    setter: (data, value) => data.attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentCount = copyer(oldData.attachmentCount);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "contactPersonAddress": (
    getter: (data) => data.contactPersonAddress,
    setter: (data, value) => data.contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonAddress = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonAddress = copyer(oldData.contactPersonAddress);
    },
  ),
  "contactPersonName": (
    getter: (data) => data.contactPersonName,
    setter: (data, value) => data.contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonName = copyer(oldData.contactPersonName);
    },
  ),
  "contactPersonPhone": (
    getter: (data) => data.contactPersonPhone,
    setter: (data, value) => data.contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonPhone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonPhone = copyer(oldData.contactPersonPhone);
    },
  ),
  "customField1": (
    getter: (data) => data.customField1,
    setter: (data, value) => data.customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField1 = copyer(oldData.customField1);
    },
  ),
  "customField2": (
    getter: (data) => data.customField2,
    setter: (data, value) => data.customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField2 = copyer(oldData.customField2);
    },
  ),
  "customField3": (
    getter: (data) => data.customField3,
    setter: (data, value) => data.customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField3 = copyer(oldData.customField3);
    },
  ),
  "customField4": (
    getter: (data) => data.customField4,
    setter: (data, value) => data.customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField4 = copyer(oldData.customField4);
    },
  ),
  "customField5": (
    getter: (data) => data.customField5,
    setter: (data, value) => data.customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField5 = copyer(oldData.customField5);
    },
  ),
  "customField6": (
    getter: (data) => data.customField6,
    setter: (data, value) => data.customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField6 = copyer(oldData.customField6);
    },
  ),
  "customField7": (
    getter: (data) => data.customField7,
    setter: (data, value) => data.customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField7 = copyer(oldData.customField7);
    },
  ),
  "customField8": (
    getter: (data) => data.customField8,
    setter: (data, value) => data.customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField8 = copyer(oldData.customField8);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "drawEmployeeName": (
    getter: (data) => data.drawEmployeeName,
    setter: (data, value) => data.drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawEmployeeName = copyer(oldData.drawEmployeeName);
    },
  ),
  "drawTime": (
    getter: (data) => data.drawTime,
    setter: (data, value) => data.drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawTime = copyer(oldData.drawTime);
    },
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data.entryAccountEmployeeId,
    setter: (data, value) => data.entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.entryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.entryAccountEmployeeId = copyer(oldData.entryAccountEmployeeId);
    },
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data.entryAccountEmployeeName,
    setter: (data, value) => data.entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountEmployeeName = copyer(oldData.entryAccountEmployeeName);
    },
  ),
  "entryAccountTime": (
    getter: (data) => data.entryAccountTime,
    setter: (data, value) => data.entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountTime = copyer(oldData.entryAccountTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "imageInfos": (
    getter: (data) => data.imageInfos,
    setter: (data, value) => data.imageInfos = value as List<TypeImageInfo>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeImageInfo>((single){
        final handler = TypeImageInfo.toDynamic;
        return handler(single)!;
      });
      return formatter(data.imageInfos);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeImageInfo>((single){
        final handler = TypeImageInfo.fromDynamic;
        return handler(single)!;
      });
      data.imageInfos = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeImageInfo>((single){
        final handler = TypeImageInfo.deepCopy;
        return handler(single)!;
      });
      newData.imageInfos = copyer(oldData.imageInfos);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "manageEmployeeName": (
    getter: (data) => data.manageEmployeeName,
    setter: (data, value) => data.manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.manageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.manageEmployeeName = copyer(oldData.manageEmployeeName);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "printTimes": (
    getter: (data) => data.printTimes,
    setter: (data, value) => data.printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.printTimes = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.printTimes = copyer(oldData.printTimes);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "summaryRemark": (
    getter: (data) => data.summaryRemark,
    setter: (data, value) => data.summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.summaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.summaryRemark = copyer(oldData.summaryRemark);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
};

class TypeOrderAttachmentQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQueryDataDTO({
    this.attachmentCount,
    this.contactId,
    this.contactName,
    this.contactPersonAddress,
    this.contactPersonName,
    this.contactPersonPhone,
    this.customField1,
    this.customField2,
    this.customField3,
    this.customField4,
    this.customField5,
    this.customField6,
    this.customField7,
    this.customField8,
    this.drawEmployeeId,
    this.drawEmployeeName,
    this.drawTime,
    this.entryAccountEmployeeId,
    this.entryAccountEmployeeName,
    this.entryAccountTime,
    this.id,
    this.imageInfos,
    this.manageEmployeeId,
    this.manageEmployeeName,
    this.number,
    this.orderDate,
    this.printTimes,
    this.remark,
    this.state,
    this.summaryRemark,
    this.type
  });

  static TypeOrderAttachmentQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderAttachmentQueryDataDTO? deepCopy(TypeOrderAttachmentQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderAttachmentQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderAttachmentQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderAttachmentQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? attachmentCount;

  int? contactId;

  String? contactName;

  String? contactPersonAddress;

  String? contactPersonName;

  String? contactPersonPhone;

  String? customField1;

  String? customField2;

  String? customField3;

  String? customField4;

  String? customField5;

  String? customField6;

  String? customField7;

  String? customField8;

  int? drawEmployeeId;

  String? drawEmployeeName;

  String? drawTime;

  int? entryAccountEmployeeId;

  String? entryAccountEmployeeName;

  String? entryAccountTime;

  int? id;

  List<TypeImageInfo>? imageInfos;

  int? manageEmployeeId;

  String? manageEmployeeName;

  String? number;

  String? orderDate;

  int? printTimes;

  String? remark;

  TypeEnumOrderState? state;

  String? summaryRemark;

  TypeEnumOrderType? type;

}

class FTypeOrderAttachmentQuerySumDTO extends IDataField {
  static const count = FTypeOrderAttachmentQuerySumDTO('count');
  const FTypeOrderAttachmentQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderAttachmentQuerySumDTO> _TypeOrderAttachmentQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
};

class TypeOrderAttachmentQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderAttachmentQuerySumDTO({
    this.count
  });

  static TypeOrderAttachmentQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderAttachmentQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderAttachmentQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderAttachmentQuerySumDTO? deepCopy(TypeOrderAttachmentQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderAttachmentQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderAttachmentQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderAttachmentQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderAttachmentQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

}

class FTypeOrderCustom extends IDataField {
  static const invoice = FTypeOrderCustom('invoice');
  static const invoiceBack = FTypeOrderCustom('invoiceBack');
  static const invoiceBill = FTypeOrderCustom('invoiceBill');
  static const invoiceSubmit = FTypeOrderCustom('invoiceSubmit');
  static const log = FTypeOrderCustom('log');
  const FTypeOrderCustom(super.key);
}

final FieldReflectInfo<TypeOrderCustom> _TypeOrderCustom_fields = {
  "invoice": (
    getter: (data) => data.invoice,
    setter: (data, value) => data.invoice = value as TypeOrderCustomInvoice?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoice.toDynamic;
      return formatter(data.invoice);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoice.fromDynamic;
      data.invoice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustomInvoice.deepCopy;
      newData.invoice = copyer(oldData.invoice);
    },
  ),
  "invoiceBack": (
    getter: (data) => data.invoiceBack,
    setter: (data, value) => data.invoiceBack = value as TypeOrderCustomInvoiceBack?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceBack.toDynamic;
      return formatter(data.invoiceBack);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceBack.fromDynamic;
      data.invoiceBack = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustomInvoiceBack.deepCopy;
      newData.invoiceBack = copyer(oldData.invoiceBack);
    },
  ),
  "invoiceBill": (
    getter: (data) => data.invoiceBill,
    setter: (data, value) => data.invoiceBill = value as TypeOrderCustomInvoiceBill?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceBill.toDynamic;
      return formatter(data.invoiceBill);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceBill.fromDynamic;
      data.invoiceBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustomInvoiceBill.deepCopy;
      newData.invoiceBill = copyer(oldData.invoiceBill);
    },
  ),
  "invoiceSubmit": (
    getter: (data) => data.invoiceSubmit,
    setter: (data, value) => data.invoiceSubmit = value as TypeOrderCustomInvoiceSubmit?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomInvoiceSubmit.toDynamic;
      return formatter(data.invoiceSubmit);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomInvoiceSubmit.fromDynamic;
      data.invoiceSubmit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustomInvoiceSubmit.deepCopy;
      newData.invoiceSubmit = copyer(oldData.invoiceSubmit);
    },
  ),
  "log": (
    getter: (data) => data.log,
    setter: (data, value) => data.log = value as TypeOrderCustomLog?,
    toDynamic: (data) {
      final formatter = TypeOrderCustomLog.toDynamic;
      return formatter(data.log);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderCustomLog.fromDynamic;
      data.log = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderCustomLog.deepCopy;
      newData.log = copyer(oldData.log);
    },
  ),
};

class TypeOrderCustom extends IDataBasic implements IDataDynamic {
  TypeOrderCustom({
    this.invoice,
    this.invoiceBack,
    this.invoiceBill,
    this.invoiceSubmit,
    this.log
  });

  static TypeOrderCustom? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustom();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustom_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustom: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustom? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustom_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustom? deepCopy(TypeOrderCustom? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustom();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustom_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustom copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustom_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustom_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeOrderCustomInvoice? invoice;

  TypeOrderCustomInvoiceBack? invoiceBack;

  TypeOrderCustomInvoiceBill? invoiceBill;

  TypeOrderCustomInvoiceSubmit? invoiceSubmit;

  TypeOrderCustomLog? log;

}

class FTypeOrderCustomInvoice extends IDataField {
  static const goodsRemark = FTypeOrderCustomInvoice('goodsRemark');
  static const taxNumber = FTypeOrderCustomInvoice('taxNumber');
  const FTypeOrderCustomInvoice(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoice> _TypeOrderCustomInvoice_fields = {
  "goodsRemark": (
    getter: (data) => data.goodsRemark,
    setter: (data, value) => data.goodsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.goodsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.goodsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.goodsRemark = copyer(oldData.goodsRemark);
    },
  ),
  "taxNumber": (
    getter: (data) => data.taxNumber,
    setter: (data, value) => data.taxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxNumber = copyer(oldData.taxNumber);
    },
  ),
};

class TypeOrderCustomInvoice extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoice({
    this.goodsRemark,
    this.taxNumber
  });

  static TypeOrderCustomInvoice? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoice();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoice_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoice: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoice? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoice_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomInvoice? deepCopy(TypeOrderCustomInvoice? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomInvoice();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomInvoice_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomInvoice copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoice_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoice_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? goodsRemark;

  String? taxNumber;

}

class FTypeOrderCustomInvoiceBack extends IDataField {
  static const backDate = FTypeOrderCustomInvoiceBack('backDate');
  static const state = FTypeOrderCustomInvoiceBack('state');
  const FTypeOrderCustomInvoiceBack(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBack> _TypeOrderCustomInvoiceBack_fields = {
  "backDate": (
    getter: (data) => data.backDate,
    setter: (data, value) => data.backDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.backDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.backDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.backDate = copyer(oldData.backDate);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderCustomInvoiceBackState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBackState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBackState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceBackState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
};

class TypeOrderCustomInvoiceBack extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBack({
    this.backDate,
    this.state
  });

  static TypeOrderCustomInvoiceBack? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBack();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBack_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBack: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBack? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBack_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomInvoiceBack? deepCopy(TypeOrderCustomInvoiceBack? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomInvoiceBack();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomInvoiceBack_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomInvoiceBack copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBack_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBack_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? backDate;

  TypeEnumOrderCustomInvoiceBackState? state;

}

class FTypeOrderCustomInvoiceBill extends IDataField {
  static const adjustedTotal = FTypeOrderCustomInvoiceBill('adjustedTotal');
  static const allTotal = FTypeOrderCustomInvoiceBill('allTotal');
  static const bills = FTypeOrderCustomInvoiceBill('bills');
  static const deferTotal = FTypeOrderCustomInvoiceBill('deferTotal');
  static const doneBillTotal = FTypeOrderCustomInvoiceBill('doneBillTotal');
  static const extraTotal = FTypeOrderCustomInvoiceBill('extraTotal');
  static const goodsTotal = FTypeOrderCustomInvoiceBill('goodsTotal');
  static const state = FTypeOrderCustomInvoiceBill('state');
  static const undoneBillTotal = FTypeOrderCustomInvoiceBill('undoneBillTotal');
  const FTypeOrderCustomInvoiceBill(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBill> _TypeOrderCustomInvoiceBill_fields = {
  "adjustedTotal": (
    getter: (data) => data.adjustedTotal,
    setter: (data, value) => data.adjustedTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adjustedTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adjustedTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adjustedTotal = copyer(oldData.adjustedTotal);
    },
  ),
  "allTotal": (
    getter: (data) => data.allTotal,
    setter: (data, value) => data.allTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.allTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.allTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.allTotal = copyer(oldData.allTotal);
    },
  ),
  "bills": (
    getter: (data) => data.bills,
    setter: (data, value) => data.bills = value as List<TypeOrderCustomInvoiceBillHistory>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderCustomInvoiceBillHistory>((single){
        final handler = TypeOrderCustomInvoiceBillHistory.toDynamic;
        return handler(single)!;
      });
      return formatter(data.bills);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderCustomInvoiceBillHistory>((single){
        final handler = TypeOrderCustomInvoiceBillHistory.fromDynamic;
        return handler(single)!;
      });
      data.bills = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderCustomInvoiceBillHistory>((single){
        final handler = TypeOrderCustomInvoiceBillHistory.deepCopy;
        return handler(single)!;
      });
      newData.bills = copyer(oldData.bills);
    },
  ),
  "deferTotal": (
    getter: (data) => data.deferTotal,
    setter: (data, value) => data.deferTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.deferTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.deferTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.deferTotal = copyer(oldData.deferTotal);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "extraTotal": (
    getter: (data) => data.extraTotal,
    setter: (data, value) => data.extraTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.extraTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.extraTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.extraTotal = copyer(oldData.extraTotal);
    },
  ),
  "goodsTotal": (
    getter: (data) => data.goodsTotal,
    setter: (data, value) => data.goodsTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.goodsTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.goodsTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.goodsTotal = copyer(oldData.goodsTotal);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderCustomInvoiceBillState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBillState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBillState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceBillState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
};

class TypeOrderCustomInvoiceBill extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBill({
    this.adjustedTotal,
    this.allTotal,
    this.bills,
    this.deferTotal,
    this.doneBillTotal,
    this.extraTotal,
    this.goodsTotal,
    this.state,
    this.undoneBillTotal
  });

  static TypeOrderCustomInvoiceBill? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBill();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBill_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBill: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBill? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBill_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomInvoiceBill? deepCopy(TypeOrderCustomInvoiceBill? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomInvoiceBill();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomInvoiceBill_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomInvoiceBill copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBill_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBill_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? adjustedTotal;

  String? allTotal;

  List<TypeOrderCustomInvoiceBillHistory>? bills;

  String? deferTotal;

  String? doneBillTotal;

  String? extraTotal;

  String? goodsTotal;

  TypeEnumOrderCustomInvoiceBillState? state;

  String? undoneBillTotal;

}

class FTypeOrderCustomInvoiceBillHistory extends IDataField {
  static const billDate = FTypeOrderCustomInvoiceBillHistory('billDate');
  static const billOrderId = FTypeOrderCustomInvoiceBillHistory('billOrderId');
  static const billOrderNumber = FTypeOrderCustomInvoiceBillHistory('billOrderNumber');
  static const billOrderType = FTypeOrderCustomInvoiceBillHistory('billOrderType');
  static const billTotal = FTypeOrderCustomInvoiceBillHistory('billTotal');
  static const cashAccountId = FTypeOrderCustomInvoiceBillHistory('cashAccountId');
  static const cashAccountName = FTypeOrderCustomInvoiceBillHistory('cashAccountName');
  const FTypeOrderCustomInvoiceBillHistory(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceBillHistory> _TypeOrderCustomInvoiceBillHistory_fields = {
  "billDate": (
    getter: (data) => data.billDate,
    setter: (data, value) => data.billDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billDate = copyer(oldData.billDate);
    },
  ),
  "billOrderId": (
    getter: (data) => data.billOrderId,
    setter: (data, value) => data.billOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.billOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.billOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.billOrderId = copyer(oldData.billOrderId);
    },
  ),
  "billOrderNumber": (
    getter: (data) => data.billOrderNumber,
    setter: (data, value) => data.billOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billOrderNumber = copyer(oldData.billOrderNumber);
    },
  ),
  "billOrderType": (
    getter: (data) => data.billOrderType,
    setter: (data, value) => data.billOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.billOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.billOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.billOrderType = copyer(oldData.billOrderType);
    },
  ),
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "cashAccountId": (
    getter: (data) => data.cashAccountId,
    setter: (data, value) => data.cashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.cashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.cashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.cashAccountId = copyer(oldData.cashAccountId);
    },
  ),
  "cashAccountName": (
    getter: (data) => data.cashAccountName,
    setter: (data, value) => data.cashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashAccountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashAccountName = copyer(oldData.cashAccountName);
    },
  ),
};

class TypeOrderCustomInvoiceBillHistory extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceBillHistory({
    this.billDate,
    this.billOrderId,
    this.billOrderNumber,
    this.billOrderType,
    this.billTotal,
    this.cashAccountId,
    this.cashAccountName
  });

  static TypeOrderCustomInvoiceBillHistory? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceBillHistory();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceBillHistory: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceBillHistory? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceBillHistory_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomInvoiceBillHistory? deepCopy(TypeOrderCustomInvoiceBillHistory? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomInvoiceBillHistory();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomInvoiceBillHistory_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomInvoiceBillHistory copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceBillHistory_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billDate;

  int? billOrderId;

  String? billOrderNumber;

  TypeEnumOrderType? billOrderType;

  String? billTotal;

  int? cashAccountId;

  String? cashAccountName;

}

class FTypeOrderCustomInvoiceSubmit extends IDataField {
  static const contactId = FTypeOrderCustomInvoiceSubmit('contactId');
  static const contactInfo = FTypeOrderCustomInvoiceSubmit('contactInfo');
  static const contractNumber = FTypeOrderCustomInvoiceSubmit('contractNumber');
  static const invoiceDate = FTypeOrderCustomInvoiceSubmit('invoiceDate');
  static const invoiceNumber = FTypeOrderCustomInvoiceSubmit('invoiceNumber');
  static const invoiceReceiveDate = FTypeOrderCustomInvoiceSubmit('invoiceReceiveDate');
  static const invoiceTotal = FTypeOrderCustomInvoiceSubmit('invoiceTotal');
  static const state = FTypeOrderCustomInvoiceSubmit('state');
  const FTypeOrderCustomInvoiceSubmit(super.key);
}

final FieldReflectInfo<TypeOrderCustomInvoiceSubmit> _TypeOrderCustomInvoiceSubmit_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactInfo": (
    getter: (data) => data.contactInfo,
    setter: (data, value) => data.contactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.contactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.contactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.contactInfo = copyer(oldData.contactInfo);
    },
  ),
  "contractNumber": (
    getter: (data) => data.contractNumber,
    setter: (data, value) => data.contractNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contractNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contractNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contractNumber = copyer(oldData.contractNumber);
    },
  ),
  "invoiceDate": (
    getter: (data) => data.invoiceDate,
    setter: (data, value) => data.invoiceDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceDate = copyer(oldData.invoiceDate);
    },
  ),
  "invoiceNumber": (
    getter: (data) => data.invoiceNumber,
    setter: (data, value) => data.invoiceNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceNumber = copyer(oldData.invoiceNumber);
    },
  ),
  "invoiceReceiveDate": (
    getter: (data) => data.invoiceReceiveDate,
    setter: (data, value) => data.invoiceReceiveDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceReceiveDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceReceiveDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceReceiveDate = copyer(oldData.invoiceReceiveDate);
    },
  ),
  "invoiceTotal": (
    getter: (data) => data.invoiceTotal,
    setter: (data, value) => data.invoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceTotal = copyer(oldData.invoiceTotal);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderCustomInvoiceSubmitState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceSubmitState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceSubmitState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceSubmitState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
};

class TypeOrderCustomInvoiceSubmit extends IDataBasic implements IDataDynamic {
  TypeOrderCustomInvoiceSubmit({
    this.contactId,
    this.contactInfo,
    this.contractNumber,
    this.invoiceDate,
    this.invoiceNumber,
    this.invoiceReceiveDate,
    this.invoiceTotal,
    this.state
  });

  static TypeOrderCustomInvoiceSubmit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomInvoiceSubmit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomInvoiceSubmit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomInvoiceSubmit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomInvoiceSubmit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomInvoiceSubmit? deepCopy(TypeOrderCustomInvoiceSubmit? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomInvoiceSubmit();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomInvoiceSubmit_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomInvoiceSubmit copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomInvoiceSubmit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  TypeContact? contactInfo;

  String? contractNumber;

  String? invoiceDate;

  String? invoiceNumber;

  String? invoiceReceiveDate;

  String? invoiceTotal;

  TypeEnumOrderCustomInvoiceSubmitState? state;

}

class FTypeOrderCustomLog extends IDataField {
  static const logs = FTypeOrderCustomLog('logs');
  const FTypeOrderCustomLog(super.key);
}

final FieldReflectInfo<TypeOrderCustomLog> _TypeOrderCustomLog_fields = {
  "logs": (
    getter: (data) => data.logs,
    setter: (data, value) => data.logs = value as List<TypeOrderCustomLogSingle>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderCustomLogSingle>((single){
        final handler = TypeOrderCustomLogSingle.toDynamic;
        return handler(single)!;
      });
      return formatter(data.logs);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderCustomLogSingle>((single){
        final handler = TypeOrderCustomLogSingle.fromDynamic;
        return handler(single)!;
      });
      data.logs = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderCustomLogSingle>((single){
        final handler = TypeOrderCustomLogSingle.deepCopy;
        return handler(single)!;
      });
      newData.logs = copyer(oldData.logs);
    },
  ),
};

class TypeOrderCustomLog extends IDataBasic implements IDataDynamic {
  TypeOrderCustomLog({
    this.logs
  });

  static TypeOrderCustomLog? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomLog();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomLog_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomLog: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomLog? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomLog_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomLog? deepCopy(TypeOrderCustomLog? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomLog();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomLog_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomLog copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomLog_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomLog_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderCustomLogSingle>? logs;

}

class FTypeOrderCustomLogSingle extends IDataField {
  static const date = FTypeOrderCustomLogSingle('date');
  static const employeeId = FTypeOrderCustomLogSingle('employeeId');
  static const employeeName = FTypeOrderCustomLogSingle('employeeName');
  static const msg = FTypeOrderCustomLogSingle('msg');
  const FTypeOrderCustomLogSingle(super.key);
}

final FieldReflectInfo<TypeOrderCustomLogSingle> _TypeOrderCustomLogSingle_fields = {
  "date": (
    getter: (data) => data.date,
    setter: (data, value) => data.date = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.date);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.date = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.date = copyer(oldData.date);
    },
  ),
  "employeeId": (
    getter: (data) => data.employeeId,
    setter: (data, value) => data.employeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.employeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.employeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.employeeId = copyer(oldData.employeeId);
    },
  ),
  "employeeName": (
    getter: (data) => data.employeeName,
    setter: (data, value) => data.employeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.employeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.employeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.employeeName = copyer(oldData.employeeName);
    },
  ),
  "msg": (
    getter: (data) => data.msg,
    setter: (data, value) => data.msg = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.msg);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.msg = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.msg = copyer(oldData.msg);
    },
  ),
};

class TypeOrderCustomLogSingle extends IDataBasic implements IDataDynamic {
  TypeOrderCustomLogSingle({
    this.date,
    this.employeeId,
    this.employeeName,
    this.msg
  });

  static TypeOrderCustomLogSingle? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderCustomLogSingle();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderCustomLogSingle_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderCustomLogSingle: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderCustomLogSingle? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderCustomLogSingle_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderCustomLogSingle? deepCopy(TypeOrderCustomLogSingle? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderCustomLogSingle();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderCustomLogSingle_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderCustomLogSingle copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderCustomLogSingle_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderCustomLogSingle_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? date;

  int? employeeId;

  String? employeeName;

  String? msg;

}

class FTypeOrderGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeOrderGroupQueryDTO('beginOrderDate');
  static const data = FTypeOrderGroupQueryDTO('data');
  static const endOrderDate = FTypeOrderGroupQueryDTO('endOrderDate');
  static const pageIndex = FTypeOrderGroupQueryDTO('pageIndex');
  static const pageSize = FTypeOrderGroupQueryDTO('pageSize');
  static const sum = FTypeOrderGroupQueryDTO('sum');
  const FTypeOrderGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderGroupQueryDTO> _TypeOrderGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data.beginOrderDate,
    setter: (data, value) => data.beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginOrderDate = copyer(oldData.beginOrderDate);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderGroupQueryDataDTO>((single){
        final handler = TypeOrderGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderGroupQueryDataDTO>((single){
        final handler = TypeOrderGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderGroupQueryDataDTO>((single){
        final handler = TypeOrderGroupQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "endOrderDate": (
    getter: (data) => data.endOrderDate,
    setter: (data, value) => data.endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endOrderDate = copyer(oldData.endOrderDate);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderGroupQueryDataDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderGroupQueryDataDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderGroupQueryDataDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderGroupQueryDTO({
    this.beginOrderDate,
    this.data,
    this.endOrderDate,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderGroupQueryDTO? deepCopy(TypeOrderGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderGroupQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderGroupQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderGroupQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginOrderDate;

  List<TypeOrderGroupQueryDataDTO>? data;

  String? endOrderDate;

  int? pageIndex;

  int? pageSize;

  TypeOrderGroupQueryDataDTO? sum;

}

class FTypeOrderGroupQueryDataDTO extends IDataField {
  static const beginOrderDate = FTypeOrderGroupQueryDataDTO('beginOrderDate');
  static const billCount = FTypeOrderGroupQueryDataDTO('billCount');
  static const billTotal = FTypeOrderGroupQueryDataDTO('billTotal');
  static const contactId = FTypeOrderGroupQueryDataDTO('contactId');
  static const count = FTypeOrderGroupQueryDataDTO('count');
  static const discountTotal = FTypeOrderGroupQueryDataDTO('discountTotal');
  static const doneBillTotal = FTypeOrderGroupQueryDataDTO('doneBillTotal');
  static const endOrderDate = FTypeOrderGroupQueryDataDTO('endOrderDate');
  static const hasFinishBillCount = FTypeOrderGroupQueryDataDTO('hasFinishBillCount');
  static const hasNotFinishBillCount = FTypeOrderGroupQueryDataDTO('hasNotFinishBillCount');
  static const id = FTypeOrderGroupQueryDataDTO('id');
  static const manageEmployeeId = FTypeOrderGroupQueryDataDTO('manageEmployeeId');
  static const name = FTypeOrderGroupQueryDataDTO('name');
  static const preTaxTotal = FTypeOrderGroupQueryDataDTO('preTaxTotal');
  static const total = FTypeOrderGroupQueryDataDTO('total');
  static const undoneBillTotal = FTypeOrderGroupQueryDataDTO('undoneBillTotal');
  const FTypeOrderGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderGroupQueryDataDTO> _TypeOrderGroupQueryDataDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data.beginOrderDate,
    setter: (data, value) => data.beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginOrderDate = copyer(oldData.beginOrderDate);
    },
  ),
  "billCount": (
    getter: (data) => data.billCount,
    setter: (data, value) => data.billCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.billCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.billCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.billCount = copyer(oldData.billCount);
    },
  ),
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "endOrderDate": (
    getter: (data) => data.endOrderDate,
    setter: (data, value) => data.endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endOrderDate = copyer(oldData.endOrderDate);
    },
  ),
  "hasFinishBillCount": (
    getter: (data) => data.hasFinishBillCount,
    setter: (data, value) => data.hasFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasFinishBillCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasFinishBillCount = copyer(oldData.hasFinishBillCount);
    },
  ),
  "hasNotFinishBillCount": (
    getter: (data) => data.hasNotFinishBillCount,
    setter: (data, value) => data.hasNotFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasNotFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasNotFinishBillCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasNotFinishBillCount = copyer(oldData.hasNotFinishBillCount);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
};

class TypeOrderGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderGroupQueryDataDTO({
    this.beginOrderDate,
    this.billCount,
    this.billTotal,
    this.contactId,
    this.count,
    this.discountTotal,
    this.doneBillTotal,
    this.endOrderDate,
    this.hasFinishBillCount,
    this.hasNotFinishBillCount,
    this.id,
    this.manageEmployeeId,
    this.name,
    this.preTaxTotal,
    this.total,
    this.undoneBillTotal
  });

  static TypeOrderGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderGroupQueryDataDTO? deepCopy(TypeOrderGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderGroupQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderGroupQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginOrderDate;

  int? billCount;

  String? billTotal;

  int? contactId;

  int? count;

  String? discountTotal;

  String? doneBillTotal;

  String? endOrderDate;

  int? hasFinishBillCount;

  int? hasNotFinishBillCount;

  String? id;

  int? manageEmployeeId;

  String? name;

  String? preTaxTotal;

  String? total;

  String? undoneBillTotal;

}

class FTypeOrderInvoiceQueryDTO extends IDataField {
  static const data = FTypeOrderInvoiceQueryDTO('data');
  static const pageIndex = FTypeOrderInvoiceQueryDTO('pageIndex');
  static const pageSize = FTypeOrderInvoiceQueryDTO('pageSize');
  static const sum = FTypeOrderInvoiceQueryDTO('sum');
  const FTypeOrderInvoiceQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQueryDTO> _TypeOrderInvoiceQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderInvoiceQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderInvoiceQueryDataDTO>((single){
        final handler = TypeOrderInvoiceQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderInvoiceQueryDataDTO>((single){
        final handler = TypeOrderInvoiceQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderInvoiceQueryDataDTO>((single){
        final handler = TypeOrderInvoiceQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderInvoiceQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderInvoiceQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderInvoiceQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderInvoiceQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderInvoiceQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderInvoiceQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderInvoiceQueryDTO? deepCopy(TypeOrderInvoiceQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderInvoiceQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderInvoiceQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderInvoiceQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderInvoiceQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeOrderInvoiceQuerySumDTO? sum;

}

class FTypeOrderInvoiceQueryDataDTO extends IDataField {
  static const contactId = FTypeOrderInvoiceQueryDataDTO('contactId');
  static const contactName = FTypeOrderInvoiceQueryDataDTO('contactName');
  static const drawEmployeeId = FTypeOrderInvoiceQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderInvoiceQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderInvoiceQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderInvoiceQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderInvoiceQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderInvoiceQueryDataDTO('entryAccountTime');
  static const id = FTypeOrderInvoiceQueryDataDTO('id');
  static const invoiceBackDate = FTypeOrderInvoiceQueryDataDTO('invoiceBackDate');
  static const invoiceBackState = FTypeOrderInvoiceQueryDataDTO('invoiceBackState');
  static const invoiceBillAdjustedTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillAdjustedTotal');
  static const invoiceBillAllTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillAllTotal');
  static const invoiceBillDeferTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillDeferTotal');
  static const invoiceBillDoneBillTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillDoneBillTotal');
  static const invoiceBillExtraTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillExtraTotal');
  static const invoiceBillGoodsTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillGoodsTotal');
  static const invoiceBillState = FTypeOrderInvoiceQueryDataDTO('invoiceBillState');
  static const invoiceBillUndoneBillTotal = FTypeOrderInvoiceQueryDataDTO('invoiceBillUndoneBillTotal');
  static const invoiceGoodsRemark = FTypeOrderInvoiceQueryDataDTO('invoiceGoodsRemark');
  static const invoiceSubmitContactId = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContactId');
  static const invoiceSubmitContactName = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContactName');
  static const invoiceSubmitContractNumber = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitContractNumber');
  static const invoiceSubmitInvoiceDate = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceDate');
  static const invoiceSubmitInvoiceNumber = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceNumber');
  static const invoiceSubmitInvoiceReceiveDate = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceReceiveDate');
  static const invoiceSubmitInvoiceTotal = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitInvoiceTotal');
  static const invoiceSubmitState = FTypeOrderInvoiceQueryDataDTO('invoiceSubmitState');
  static const invoiceTaxNumber = FTypeOrderInvoiceQueryDataDTO('invoiceTaxNumber');
  static const manageEmployeeId = FTypeOrderInvoiceQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderInvoiceQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderInvoiceQueryDataDTO('number');
  static const orderDate = FTypeOrderInvoiceQueryDataDTO('orderDate');
  static const printTimes = FTypeOrderInvoiceQueryDataDTO('printTimes');
  static const remark = FTypeOrderInvoiceQueryDataDTO('remark');
  static const state = FTypeOrderInvoiceQueryDataDTO('state');
  static const summaryRemark = FTypeOrderInvoiceQueryDataDTO('summaryRemark');
  static const type = FTypeOrderInvoiceQueryDataDTO('type');
  const FTypeOrderInvoiceQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQueryDataDTO> _TypeOrderInvoiceQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "drawEmployeeName": (
    getter: (data) => data.drawEmployeeName,
    setter: (data, value) => data.drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawEmployeeName = copyer(oldData.drawEmployeeName);
    },
  ),
  "drawTime": (
    getter: (data) => data.drawTime,
    setter: (data, value) => data.drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawTime = copyer(oldData.drawTime);
    },
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data.entryAccountEmployeeId,
    setter: (data, value) => data.entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.entryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.entryAccountEmployeeId = copyer(oldData.entryAccountEmployeeId);
    },
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data.entryAccountEmployeeName,
    setter: (data, value) => data.entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountEmployeeName = copyer(oldData.entryAccountEmployeeName);
    },
  ),
  "entryAccountTime": (
    getter: (data) => data.entryAccountTime,
    setter: (data, value) => data.entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountTime = copyer(oldData.entryAccountTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "invoiceBackDate": (
    getter: (data) => data.invoiceBackDate,
    setter: (data, value) => data.invoiceBackDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBackDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBackDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBackDate = copyer(oldData.invoiceBackDate);
    },
  ),
  "invoiceBackState": (
    getter: (data) => data.invoiceBackState,
    setter: (data, value) => data.invoiceBackState = value as TypeEnumOrderCustomInvoiceBackState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBackState.toDynamic;
      return formatter(data.invoiceBackState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBackState.fromDynamic;
      data.invoiceBackState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceBackState.deepCopy;
      newData.invoiceBackState = copyer(oldData.invoiceBackState);
    },
  ),
  "invoiceBillAdjustedTotal": (
    getter: (data) => data.invoiceBillAdjustedTotal,
    setter: (data, value) => data.invoiceBillAdjustedTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillAdjustedTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillAdjustedTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillAdjustedTotal = copyer(oldData.invoiceBillAdjustedTotal);
    },
  ),
  "invoiceBillAllTotal": (
    getter: (data) => data.invoiceBillAllTotal,
    setter: (data, value) => data.invoiceBillAllTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillAllTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillAllTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillAllTotal = copyer(oldData.invoiceBillAllTotal);
    },
  ),
  "invoiceBillDeferTotal": (
    getter: (data) => data.invoiceBillDeferTotal,
    setter: (data, value) => data.invoiceBillDeferTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillDeferTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillDeferTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillDeferTotal = copyer(oldData.invoiceBillDeferTotal);
    },
  ),
  "invoiceBillDoneBillTotal": (
    getter: (data) => data.invoiceBillDoneBillTotal,
    setter: (data, value) => data.invoiceBillDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillDoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillDoneBillTotal = copyer(oldData.invoiceBillDoneBillTotal);
    },
  ),
  "invoiceBillExtraTotal": (
    getter: (data) => data.invoiceBillExtraTotal,
    setter: (data, value) => data.invoiceBillExtraTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillExtraTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillExtraTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillExtraTotal = copyer(oldData.invoiceBillExtraTotal);
    },
  ),
  "invoiceBillGoodsTotal": (
    getter: (data) => data.invoiceBillGoodsTotal,
    setter: (data, value) => data.invoiceBillGoodsTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillGoodsTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillGoodsTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillGoodsTotal = copyer(oldData.invoiceBillGoodsTotal);
    },
  ),
  "invoiceBillState": (
    getter: (data) => data.invoiceBillState,
    setter: (data, value) => data.invoiceBillState = value as TypeEnumOrderCustomInvoiceBillState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceBillState.toDynamic;
      return formatter(data.invoiceBillState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceBillState.fromDynamic;
      data.invoiceBillState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceBillState.deepCopy;
      newData.invoiceBillState = copyer(oldData.invoiceBillState);
    },
  ),
  "invoiceBillUndoneBillTotal": (
    getter: (data) => data.invoiceBillUndoneBillTotal,
    setter: (data, value) => data.invoiceBillUndoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceBillUndoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceBillUndoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceBillUndoneBillTotal = copyer(oldData.invoiceBillUndoneBillTotal);
    },
  ),
  "invoiceGoodsRemark": (
    getter: (data) => data.invoiceGoodsRemark,
    setter: (data, value) => data.invoiceGoodsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceGoodsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceGoodsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceGoodsRemark = copyer(oldData.invoiceGoodsRemark);
    },
  ),
  "invoiceSubmitContactId": (
    getter: (data) => data.invoiceSubmitContactId,
    setter: (data, value) => data.invoiceSubmitContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.invoiceSubmitContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.invoiceSubmitContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.invoiceSubmitContactId = copyer(oldData.invoiceSubmitContactId);
    },
  ),
  "invoiceSubmitContactName": (
    getter: (data) => data.invoiceSubmitContactName,
    setter: (data, value) => data.invoiceSubmitContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitContactName = copyer(oldData.invoiceSubmitContactName);
    },
  ),
  "invoiceSubmitContractNumber": (
    getter: (data) => data.invoiceSubmitContractNumber,
    setter: (data, value) => data.invoiceSubmitContractNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitContractNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitContractNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitContractNumber = copyer(oldData.invoiceSubmitContractNumber);
    },
  ),
  "invoiceSubmitInvoiceDate": (
    getter: (data) => data.invoiceSubmitInvoiceDate,
    setter: (data, value) => data.invoiceSubmitInvoiceDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitInvoiceDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitInvoiceDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitInvoiceDate = copyer(oldData.invoiceSubmitInvoiceDate);
    },
  ),
  "invoiceSubmitInvoiceNumber": (
    getter: (data) => data.invoiceSubmitInvoiceNumber,
    setter: (data, value) => data.invoiceSubmitInvoiceNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitInvoiceNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitInvoiceNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitInvoiceNumber = copyer(oldData.invoiceSubmitInvoiceNumber);
    },
  ),
  "invoiceSubmitInvoiceReceiveDate": (
    getter: (data) => data.invoiceSubmitInvoiceReceiveDate,
    setter: (data, value) => data.invoiceSubmitInvoiceReceiveDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitInvoiceReceiveDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitInvoiceReceiveDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitInvoiceReceiveDate = copyer(oldData.invoiceSubmitInvoiceReceiveDate);
    },
  ),
  "invoiceSubmitInvoiceTotal": (
    getter: (data) => data.invoiceSubmitInvoiceTotal,
    setter: (data, value) => data.invoiceSubmitInvoiceTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceSubmitInvoiceTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceSubmitInvoiceTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceSubmitInvoiceTotal = copyer(oldData.invoiceSubmitInvoiceTotal);
    },
  ),
  "invoiceSubmitState": (
    getter: (data) => data.invoiceSubmitState,
    setter: (data, value) => data.invoiceSubmitState = value as TypeEnumOrderCustomInvoiceSubmitState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderCustomInvoiceSubmitState.toDynamic;
      return formatter(data.invoiceSubmitState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderCustomInvoiceSubmitState.fromDynamic;
      data.invoiceSubmitState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderCustomInvoiceSubmitState.deepCopy;
      newData.invoiceSubmitState = copyer(oldData.invoiceSubmitState);
    },
  ),
  "invoiceTaxNumber": (
    getter: (data) => data.invoiceTaxNumber,
    setter: (data, value) => data.invoiceTaxNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.invoiceTaxNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.invoiceTaxNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.invoiceTaxNumber = copyer(oldData.invoiceTaxNumber);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "manageEmployeeName": (
    getter: (data) => data.manageEmployeeName,
    setter: (data, value) => data.manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.manageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.manageEmployeeName = copyer(oldData.manageEmployeeName);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "printTimes": (
    getter: (data) => data.printTimes,
    setter: (data, value) => data.printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.printTimes = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.printTimes = copyer(oldData.printTimes);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "summaryRemark": (
    getter: (data) => data.summaryRemark,
    setter: (data, value) => data.summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.summaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.summaryRemark = copyer(oldData.summaryRemark);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
};

class TypeOrderInvoiceQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQueryDataDTO({
    this.contactId,
    this.contactName,
    this.drawEmployeeId,
    this.drawEmployeeName,
    this.drawTime,
    this.entryAccountEmployeeId,
    this.entryAccountEmployeeName,
    this.entryAccountTime,
    this.id,
    this.invoiceBackDate,
    this.invoiceBackState,
    this.invoiceBillAdjustedTotal,
    this.invoiceBillAllTotal,
    this.invoiceBillDeferTotal,
    this.invoiceBillDoneBillTotal,
    this.invoiceBillExtraTotal,
    this.invoiceBillGoodsTotal,
    this.invoiceBillState,
    this.invoiceBillUndoneBillTotal,
    this.invoiceGoodsRemark,
    this.invoiceSubmitContactId,
    this.invoiceSubmitContactName,
    this.invoiceSubmitContractNumber,
    this.invoiceSubmitInvoiceDate,
    this.invoiceSubmitInvoiceNumber,
    this.invoiceSubmitInvoiceReceiveDate,
    this.invoiceSubmitInvoiceTotal,
    this.invoiceSubmitState,
    this.invoiceTaxNumber,
    this.manageEmployeeId,
    this.manageEmployeeName,
    this.number,
    this.orderDate,
    this.printTimes,
    this.remark,
    this.state,
    this.summaryRemark,
    this.type
  });

  static TypeOrderInvoiceQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderInvoiceQueryDataDTO? deepCopy(TypeOrderInvoiceQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderInvoiceQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderInvoiceQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderInvoiceQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  String? contactName;

  int? drawEmployeeId;

  String? drawEmployeeName;

  String? drawTime;

  int? entryAccountEmployeeId;

  String? entryAccountEmployeeName;

  String? entryAccountTime;

  int? id;

  String? invoiceBackDate;

  TypeEnumOrderCustomInvoiceBackState? invoiceBackState;

  String? invoiceBillAdjustedTotal;

  String? invoiceBillAllTotal;

  String? invoiceBillDeferTotal;

  String? invoiceBillDoneBillTotal;

  String? invoiceBillExtraTotal;

  String? invoiceBillGoodsTotal;

  TypeEnumOrderCustomInvoiceBillState? invoiceBillState;

  String? invoiceBillUndoneBillTotal;

  String? invoiceGoodsRemark;

  int? invoiceSubmitContactId;

  String? invoiceSubmitContactName;

  String? invoiceSubmitContractNumber;

  String? invoiceSubmitInvoiceDate;

  String? invoiceSubmitInvoiceNumber;

  String? invoiceSubmitInvoiceReceiveDate;

  String? invoiceSubmitInvoiceTotal;

  TypeEnumOrderCustomInvoiceSubmitState? invoiceSubmitState;

  String? invoiceTaxNumber;

  int? manageEmployeeId;

  String? manageEmployeeName;

  String? number;

  String? orderDate;

  int? printTimes;

  String? remark;

  TypeEnumOrderState? state;

  String? summaryRemark;

  TypeEnumOrderType? type;

}

class FTypeOrderInvoiceQuerySumDTO extends IDataField {
  static const count = FTypeOrderInvoiceQuerySumDTO('count');
  const FTypeOrderInvoiceQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderInvoiceQuerySumDTO> _TypeOrderInvoiceQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
};

class TypeOrderInvoiceQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderInvoiceQuerySumDTO({
    this.count
  });

  static TypeOrderInvoiceQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderInvoiceQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderInvoiceQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderInvoiceQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderInvoiceQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderInvoiceQuerySumDTO? deepCopy(TypeOrderInvoiceQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderInvoiceQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderInvoiceQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderInvoiceQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderInvoiceQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

}

class FTypeOrderItem extends IDataField {
  static const aliasItemName = FTypeOrderItem('aliasItemName');
  static const aliasItemNumber = FTypeOrderItem('aliasItemNumber');
  static const amount = FTypeOrderItem('amount');
  static const basicAmount = FTypeOrderItem('basicAmount');
  static const basicUnitInfo = FTypeOrderItem('basicUnitInfo');
  static const bomCostPrice = FTypeOrderItem('bomCostPrice');
  static const bomCostTotal = FTypeOrderItem('bomCostTotal');
  static const bomPrice = FTypeOrderItem('bomPrice');
  static const bomTotal = FTypeOrderItem('bomTotal');
  static const costPrice = FTypeOrderItem('costPrice');
  static const costTotal = FTypeOrderItem('costTotal');
  static const customField1 = FTypeOrderItem('customField1');
  static const customField2 = FTypeOrderItem('customField2');
  static const customField3 = FTypeOrderItem('customField3');
  static const customField4 = FTypeOrderItem('customField4');
  static const customField5 = FTypeOrderItem('customField5');
  static const customField6 = FTypeOrderItem('customField6');
  static const customField7 = FTypeOrderItem('customField7');
  static const customField8 = FTypeOrderItem('customField8');
  static const discount = FTypeOrderItem('discount');
  static const discountPrice = FTypeOrderItem('discountPrice');
  static const discountTotal = FTypeOrderItem('discountTotal');
  static const doneExecuteAmount = FTypeOrderItem('doneExecuteAmount');
  static const fee = FTypeOrderItem('fee');
  static const feePrice = FTypeOrderItem('feePrice');
  static const feeTotal = FTypeOrderItem('feeTotal');
  static const id = FTypeOrderItem('id');
  static const itemId = FTypeOrderItem('itemId');
  static const itemInfo = FTypeOrderItem('itemInfo');
  static const itemPurchasePrice = FTypeOrderItem('itemPurchasePrice');
  static const itemWholeSalesPrice = FTypeOrderItem('itemWholeSalesPrice');
  static const newAmount = FTypeOrderItem('newAmount');
  static const oldAmount = FTypeOrderItem('oldAmount');
  static const oldPrice = FTypeOrderItem('oldPrice');
  static const oldTotal = FTypeOrderItem('oldTotal');
  static const orderDirection = FTypeOrderItem('orderDirection');
  static const orderState = FTypeOrderItem('orderState');
  static const orderStockType = FTypeOrderItem('orderStockType');
  static const orderSubContractStockType = FTypeOrderItem('orderSubContractStockType');
  static const preTaxPrice = FTypeOrderItem('preTaxPrice');
  static const preTaxTotal = FTypeOrderItem('preTaxTotal');
  static const price = FTypeOrderItem('price');
  static const profitRate = FTypeOrderItem('profitRate');
  static const profitTotal = FTypeOrderItem('profitTotal');
  static const refChangeItemId = FTypeOrderItem('refChangeItemId');
  static const refParentItemId = FTypeOrderItem('refParentItemId');
  static const remark = FTypeOrderItem('remark');
  static const stockExecutes = FTypeOrderItem('stockExecutes');
  static const stockLocation = FTypeOrderItem('stockLocation');
  static const stockRemains = FTypeOrderItem('stockRemains');
  static const storeId = FTypeOrderItem('storeId');
  static const subContractStockRemains = FTypeOrderItem('subContractStockRemains');
  static const tax = FTypeOrderItem('tax');
  static const taxOnlyTotal = FTypeOrderItem('taxOnlyTotal');
  static const total = FTypeOrderItem('total');
  static const undoneExecuteAmount = FTypeOrderItem('undoneExecuteAmount');
  static const unitConvert = FTypeOrderItem('unitConvert');
  static const unitId = FTypeOrderItem('unitId');
  static const unitInfo = FTypeOrderItem('unitInfo');
  const FTypeOrderItem(super.key);
}

final FieldReflectInfo<TypeOrderItem> _TypeOrderItem_fields = {
  "aliasItemName": (
    getter: (data) => data.aliasItemName,
    setter: (data, value) => data.aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemName = copyer(oldData.aliasItemName);
    },
  ),
  "aliasItemNumber": (
    getter: (data) => data.aliasItemNumber,
    setter: (data, value) => data.aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemNumber = copyer(oldData.aliasItemNumber);
    },
  ),
  "amount": (
    getter: (data) => data.amount,
    setter: (data, value) => data.amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.amount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.amount = copyer(oldData.amount);
    },
  ),
  "basicAmount": (
    getter: (data) => data.basicAmount,
    setter: (data, value) => data.basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.basicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.basicAmount = copyer(oldData.basicAmount);
    },
  ),
  "basicUnitInfo": (
    getter: (data) => data.basicUnitInfo,
    setter: (data, value) => data.basicUnitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.basicUnitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.basicUnitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.basicUnitInfo = copyer(oldData.basicUnitInfo);
    },
  ),
  "bomCostPrice": (
    getter: (data) => data.bomCostPrice,
    setter: (data, value) => data.bomCostPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomCostPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomCostPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomCostPrice = copyer(oldData.bomCostPrice);
    },
  ),
  "bomCostTotal": (
    getter: (data) => data.bomCostTotal,
    setter: (data, value) => data.bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomCostTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomCostTotal = copyer(oldData.bomCostTotal);
    },
  ),
  "bomPrice": (
    getter: (data) => data.bomPrice,
    setter: (data, value) => data.bomPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomPrice = copyer(oldData.bomPrice);
    },
  ),
  "bomTotal": (
    getter: (data) => data.bomTotal,
    setter: (data, value) => data.bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomTotal = copyer(oldData.bomTotal);
    },
  ),
  "costPrice": (
    getter: (data) => data.costPrice,
    setter: (data, value) => data.costPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costPrice = copyer(oldData.costPrice);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "customField1": (
    getter: (data) => data.customField1,
    setter: (data, value) => data.customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField1 = copyer(oldData.customField1);
    },
  ),
  "customField2": (
    getter: (data) => data.customField2,
    setter: (data, value) => data.customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField2 = copyer(oldData.customField2);
    },
  ),
  "customField3": (
    getter: (data) => data.customField3,
    setter: (data, value) => data.customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField3 = copyer(oldData.customField3);
    },
  ),
  "customField4": (
    getter: (data) => data.customField4,
    setter: (data, value) => data.customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField4 = copyer(oldData.customField4);
    },
  ),
  "customField5": (
    getter: (data) => data.customField5,
    setter: (data, value) => data.customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField5 = copyer(oldData.customField5);
    },
  ),
  "customField6": (
    getter: (data) => data.customField6,
    setter: (data, value) => data.customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField6 = copyer(oldData.customField6);
    },
  ),
  "customField7": (
    getter: (data) => data.customField7,
    setter: (data, value) => data.customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField7 = copyer(oldData.customField7);
    },
  ),
  "customField8": (
    getter: (data) => data.customField8,
    setter: (data, value) => data.customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField8 = copyer(oldData.customField8);
    },
  ),
  "discount": (
    getter: (data) => data.discount,
    setter: (data, value) => data.discount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discount = copyer(oldData.discount);
    },
  ),
  "discountPrice": (
    getter: (data) => data.discountPrice,
    setter: (data, value) => data.discountPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountPrice = copyer(oldData.discountPrice);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "fee": (
    getter: (data) => data.fee,
    setter: (data, value) => data.fee = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.fee);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.fee = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.fee = copyer(oldData.fee);
    },
  ),
  "feePrice": (
    getter: (data) => data.feePrice,
    setter: (data, value) => data.feePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feePrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feePrice = copyer(oldData.feePrice);
    },
  ),
  "feeTotal": (
    getter: (data) => data.feeTotal,
    setter: (data, value) => data.feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeTotal = copyer(oldData.feeTotal);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemInfo": (
    getter: (data) => data.itemInfo,
    setter: (data, value) => data.itemInfo = value as TypeItem?,
    toDynamic: (data) {
      final formatter = TypeItem.toDynamic;
      return formatter(data.itemInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeItem.fromDynamic;
      data.itemInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeItem.deepCopy;
      newData.itemInfo = copyer(oldData.itemInfo);
    },
  ),
  "itemPurchasePrice": (
    getter: (data) => data.itemPurchasePrice,
    setter: (data, value) => data.itemPurchasePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemPurchasePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemPurchasePrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemPurchasePrice = copyer(oldData.itemPurchasePrice);
    },
  ),
  "itemWholeSalesPrice": (
    getter: (data) => data.itemWholeSalesPrice,
    setter: (data, value) => data.itemWholeSalesPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemWholeSalesPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemWholeSalesPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemWholeSalesPrice = copyer(oldData.itemWholeSalesPrice);
    },
  ),
  "newAmount": (
    getter: (data) => data.newAmount,
    setter: (data, value) => data.newAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.newAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.newAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.newAmount = copyer(oldData.newAmount);
    },
  ),
  "oldAmount": (
    getter: (data) => data.oldAmount,
    setter: (data, value) => data.oldAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.oldAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.oldAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.oldAmount = copyer(oldData.oldAmount);
    },
  ),
  "oldPrice": (
    getter: (data) => data.oldPrice,
    setter: (data, value) => data.oldPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.oldPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.oldPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.oldPrice = copyer(oldData.oldPrice);
    },
  ),
  "oldTotal": (
    getter: (data) => data.oldTotal,
    setter: (data, value) => data.oldTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.oldTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.oldTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.oldTotal = copyer(oldData.oldTotal);
    },
  ),
  "orderDirection": (
    getter: (data) => data.orderDirection,
    setter: (data, value) => data.orderDirection = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDirection);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDirection = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDirection = copyer(oldData.orderDirection);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderStockType": (
    getter: (data) => data.orderStockType,
    setter: (data, value) => data.orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderStockType = copyer(oldData.orderStockType);
    },
  ),
  "orderSubContractStockType": (
    getter: (data) => data.orderSubContractStockType,
    setter: (data, value) => data.orderSubContractStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderSubContractStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderSubContractStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderSubContractStockType = copyer(oldData.orderSubContractStockType);
    },
  ),
  "preTaxPrice": (
    getter: (data) => data.preTaxPrice,
    setter: (data, value) => data.preTaxPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxPrice = copyer(oldData.preTaxPrice);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "refChangeItemId": (
    getter: (data) => data.refChangeItemId,
    setter: (data, value) => data.refChangeItemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.refChangeItemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.refChangeItemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.refChangeItemId = copyer(oldData.refChangeItemId);
    },
  ),
  "refParentItemId": (
    getter: (data) => data.refParentItemId,
    setter: (data, value) => data.refParentItemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.refParentItemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.refParentItemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.refParentItemId = copyer(oldData.refParentItemId);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "stockExecutes": (
    getter: (data) => data.stockExecutes,
    setter: (data, value) => data.stockExecutes = value as List<TypeOrderItemExecute>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemExecute>((single){
        final handler = TypeOrderItemExecute.toDynamic;
        return handler(single)!;
      });
      return formatter(data.stockExecutes);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemExecute>((single){
        final handler = TypeOrderItemExecute.fromDynamic;
        return handler(single)!;
      });
      data.stockExecutes = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItemExecute>((single){
        final handler = TypeOrderItemExecute.deepCopy;
        return handler(single)!;
      });
      newData.stockExecutes = copyer(oldData.stockExecutes);
    },
  ),
  "stockLocation": (
    getter: (data) => data.stockLocation,
    setter: (data, value) => data.stockLocation = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockLocation);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockLocation = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockLocation = copyer(oldData.stockLocation);
    },
  ),
  "stockRemains": (
    getter: (data) => data.stockRemains,
    setter: (data, value) => data.stockRemains = value as List<TypeOrderItemRemain>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.toDynamic;
        return handler(single)!;
      });
      return formatter(data.stockRemains);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.fromDynamic;
        return handler(single)!;
      });
      data.stockRemains = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.deepCopy;
        return handler(single)!;
      });
      newData.stockRemains = copyer(oldData.stockRemains);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "subContractStockRemains": (
    getter: (data) => data.subContractStockRemains,
    setter: (data, value) => data.subContractStockRemains = value as List<TypeOrderItemRemain>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.toDynamic;
        return handler(single)!;
      });
      return formatter(data.subContractStockRemains);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.fromDynamic;
        return handler(single)!;
      });
      data.subContractStockRemains = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItemRemain>((single){
        final handler = TypeOrderItemRemain.deepCopy;
        return handler(single)!;
      });
      newData.subContractStockRemains = copyer(oldData.subContractStockRemains);
    },
  ),
  "tax": (
    getter: (data) => data.tax,
    setter: (data, value) => data.tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.tax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.tax = copyer(oldData.tax);
    },
  ),
  "taxOnlyTotal": (
    getter: (data) => data.taxOnlyTotal,
    setter: (data, value) => data.taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxOnlyTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxOnlyTotal = copyer(oldData.taxOnlyTotal);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
  "unitConvert": (
    getter: (data) => data.unitConvert,
    setter: (data, value) => data.unitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvert = copyer(oldData.unitConvert);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitInfo": (
    getter: (data) => data.unitInfo,
    setter: (data, value) => data.unitInfo = value as TypeUnit?,
    toDynamic: (data) {
      final formatter = TypeUnit.toDynamic;
      return formatter(data.unitInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeUnit.fromDynamic;
      data.unitInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeUnit.deepCopy;
      newData.unitInfo = copyer(oldData.unitInfo);
    },
  ),
};

class TypeOrderItem extends IDataBasic implements IDataDynamic {
  TypeOrderItem({
    this.aliasItemName,
    this.aliasItemNumber,
    this.amount,
    this.basicAmount,
    this.basicUnitInfo,
    this.bomCostPrice,
    this.bomCostTotal,
    this.bomPrice,
    this.bomTotal,
    this.costPrice,
    this.costTotal,
    this.customField1,
    this.customField2,
    this.customField3,
    this.customField4,
    this.customField5,
    this.customField6,
    this.customField7,
    this.customField8,
    this.discount,
    this.discountPrice,
    this.discountTotal,
    this.doneExecuteAmount,
    this.fee,
    this.feePrice,
    this.feeTotal,
    this.id,
    this.itemId,
    this.itemInfo,
    this.itemPurchasePrice,
    this.itemWholeSalesPrice,
    this.newAmount,
    this.oldAmount,
    this.oldPrice,
    this.oldTotal,
    this.orderDirection,
    this.orderState,
    this.orderStockType,
    this.orderSubContractStockType,
    this.preTaxPrice,
    this.preTaxTotal,
    this.price,
    this.profitRate,
    this.profitTotal,
    this.refChangeItemId,
    this.refParentItemId,
    this.remark,
    this.stockExecutes,
    this.stockLocation,
    this.stockRemains,
    this.storeId,
    this.subContractStockRemains,
    this.tax,
    this.taxOnlyTotal,
    this.total,
    this.undoneExecuteAmount,
    this.unitConvert,
    this.unitId,
    this.unitInfo
  });

  static TypeOrderItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItem? deepCopy(TypeOrderItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? aliasItemName;

  String? aliasItemNumber;

  String? amount;

  String? basicAmount;

  TypeUnit? basicUnitInfo;

  String? bomCostPrice;

  String? bomCostTotal;

  String? bomPrice;

  String? bomTotal;

  String? costPrice;

  String? costTotal;

  String? customField1;

  String? customField2;

  String? customField3;

  String? customField4;

  String? customField5;

  String? customField6;

  String? customField7;

  String? customField8;

  String? discount;

  String? discountPrice;

  String? discountTotal;

  String? doneExecuteAmount;

  String? fee;

  String? feePrice;

  String? feeTotal;

  int? id;

  int? itemId;

  TypeItem? itemInfo;

  String? itemPurchasePrice;

  String? itemWholeSalesPrice;

  String? newAmount;

  String? oldAmount;

  String? oldPrice;

  String? oldTotal;

  int? orderDirection;

  TypeEnumOrderState? orderState;

  int? orderStockType;

  int? orderSubContractStockType;

  String? preTaxPrice;

  String? preTaxTotal;

  String? price;

  String? profitRate;

  String? profitTotal;

  int? refChangeItemId;

  int? refParentItemId;

  String? remark;

  List<TypeOrderItemExecute>? stockExecutes;

  String? stockLocation;

  List<TypeOrderItemRemain>? stockRemains;

  int? storeId;

  List<TypeOrderItemRemain>? subContractStockRemains;

  String? tax;

  String? taxOnlyTotal;

  String? total;

  String? undoneExecuteAmount;

  String? unitConvert;

  int? unitId;

  TypeUnit? unitInfo;

}

class FTypeOrderItemExecute extends IDataField {
  static const amount = FTypeOrderItemExecute('amount');
  static const orderId = FTypeOrderItemExecute('orderId');
  static const orderNumber = FTypeOrderItemExecute('orderNumber');
  static const orderType = FTypeOrderItemExecute('orderType');
  const FTypeOrderItemExecute(super.key);
}

final FieldReflectInfo<TypeOrderItemExecute> _TypeOrderItemExecute_fields = {
  "amount": (
    getter: (data) => data.amount,
    setter: (data, value) => data.amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.amount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.amount = copyer(oldData.amount);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
};

class TypeOrderItemExecute extends IDataBasic implements IDataDynamic {
  TypeOrderItemExecute({
    this.amount,
    this.orderId,
    this.orderNumber,
    this.orderType
  });

  static TypeOrderItemExecute? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemExecute();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemExecute_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemExecute: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemExecute? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemExecute_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemExecute? deepCopy(TypeOrderItemExecute? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemExecute();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemExecute_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemExecute copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemExecute_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemExecute_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? amount;

  int? orderId;

  String? orderNumber;

  TypeEnumOrderType? orderType;

}

class FTypeOrderItemGroupQueryDTO extends IDataField {
  static const beginOrderDate = FTypeOrderItemGroupQueryDTO('beginOrderDate');
  static const data = FTypeOrderItemGroupQueryDTO('data');
  static const endOrderDate = FTypeOrderItemGroupQueryDTO('endOrderDate');
  static const pageIndex = FTypeOrderItemGroupQueryDTO('pageIndex');
  static const pageSize = FTypeOrderItemGroupQueryDTO('pageSize');
  static const sum = FTypeOrderItemGroupQueryDTO('sum');
  const FTypeOrderItemGroupQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemGroupQueryDTO> _TypeOrderItemGroupQueryDTO_fields = {
  "beginOrderDate": (
    getter: (data) => data.beginOrderDate,
    setter: (data, value) => data.beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginOrderDate = copyer(oldData.beginOrderDate);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderItemGroupQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemGroupQueryDataDTO>((single){
        final handler = TypeOrderItemGroupQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemGroupQueryDataDTO>((single){
        final handler = TypeOrderItemGroupQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItemGroupQueryDataDTO>((single){
        final handler = TypeOrderItemGroupQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "endOrderDate": (
    getter: (data) => data.endOrderDate,
    setter: (data, value) => data.endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endOrderDate = copyer(oldData.endOrderDate);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderItemGroupQueryDataDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderItemGroupQueryDataDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderItemGroupQueryDataDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderItemGroupQueryDataDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderItemGroupQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemGroupQueryDTO({
    this.beginOrderDate,
    this.data,
    this.endOrderDate,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderItemGroupQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemGroupQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemGroupQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemGroupQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemGroupQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemGroupQueryDTO? deepCopy(TypeOrderItemGroupQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemGroupQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemGroupQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemGroupQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemGroupQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginOrderDate;

  List<TypeOrderItemGroupQueryDataDTO>? data;

  String? endOrderDate;

  int? pageIndex;

  int? pageSize;

  TypeOrderItemGroupQueryDataDTO? sum;

}

class FTypeOrderItemGroupQueryDataDTO extends IDataField {
  static const averageCostPricePerAmount = FTypeOrderItemGroupQueryDataDTO('averageCostPricePerAmount');
  static const averagePricePerAmount = FTypeOrderItemGroupQueryDataDTO('averagePricePerAmount');
  static const averageTotalPerContact = FTypeOrderItemGroupQueryDataDTO('averageTotalPerContact');
  static const averageTotalPerOrder = FTypeOrderItemGroupQueryDataDTO('averageTotalPerOrder');
  static const beginOrderDate = FTypeOrderItemGroupQueryDataDTO('beginOrderDate');
  static const contactCount = FTypeOrderItemGroupQueryDataDTO('contactCount');
  static const contactId = FTypeOrderItemGroupQueryDataDTO('contactId');
  static const costTotal = FTypeOrderItemGroupQueryDataDTO('costTotal');
  static const count = FTypeOrderItemGroupQueryDataDTO('count');
  static const discountTotal = FTypeOrderItemGroupQueryDataDTO('discountTotal');
  static const endOrderDate = FTypeOrderItemGroupQueryDataDTO('endOrderDate');
  static const id = FTypeOrderItemGroupQueryDataDTO('id');
  static const itemId = FTypeOrderItemGroupQueryDataDTO('itemId');
  static const itemModelRemark = FTypeOrderItemGroupQueryDataDTO('itemModelRemark');
  static const itemSpecsRemark = FTypeOrderItemGroupQueryDataDTO('itemSpecsRemark');
  static const manageEmployeeId = FTypeOrderItemGroupQueryDataDTO('manageEmployeeId');
  static const name = FTypeOrderItemGroupQueryDataDTO('name');
  static const normalTotalAmount = FTypeOrderItemGroupQueryDataDTO('normalTotalAmount');
  static const orderCount = FTypeOrderItemGroupQueryDataDTO('orderCount');
  static const preTaxTotal = FTypeOrderItemGroupQueryDataDTO('preTaxTotal');
  static const profitRate = FTypeOrderItemGroupQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderItemGroupQueryDataDTO('profitTotal');
  static const returnRate = FTypeOrderItemGroupQueryDataDTO('returnRate');
  static const returnTotalAmount = FTypeOrderItemGroupQueryDataDTO('returnTotalAmount');
  static const total = FTypeOrderItemGroupQueryDataDTO('total');
  static const totalAmount = FTypeOrderItemGroupQueryDataDTO('totalAmount');
  static const totalBasicAmount = FTypeOrderItemGroupQueryDataDTO('totalBasicAmount');
  static const totalUnitConvertAmount = FTypeOrderItemGroupQueryDataDTO('totalUnitConvertAmount');
  static const unitConvertDesc = FTypeOrderItemGroupQueryDataDTO('unitConvertDesc');
  static const unitId = FTypeOrderItemGroupQueryDataDTO('unitId');
  static const unitName = FTypeOrderItemGroupQueryDataDTO('unitName');
  const FTypeOrderItemGroupQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemGroupQueryDataDTO> _TypeOrderItemGroupQueryDataDTO_fields = {
  "averageCostPricePerAmount": (
    getter: (data) => data.averageCostPricePerAmount,
    setter: (data, value) => data.averageCostPricePerAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.averageCostPricePerAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.averageCostPricePerAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.averageCostPricePerAmount = copyer(oldData.averageCostPricePerAmount);
    },
  ),
  "averagePricePerAmount": (
    getter: (data) => data.averagePricePerAmount,
    setter: (data, value) => data.averagePricePerAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.averagePricePerAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.averagePricePerAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.averagePricePerAmount = copyer(oldData.averagePricePerAmount);
    },
  ),
  "averageTotalPerContact": (
    getter: (data) => data.averageTotalPerContact,
    setter: (data, value) => data.averageTotalPerContact = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.averageTotalPerContact);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.averageTotalPerContact = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.averageTotalPerContact = copyer(oldData.averageTotalPerContact);
    },
  ),
  "averageTotalPerOrder": (
    getter: (data) => data.averageTotalPerOrder,
    setter: (data, value) => data.averageTotalPerOrder = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.averageTotalPerOrder);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.averageTotalPerOrder = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.averageTotalPerOrder = copyer(oldData.averageTotalPerOrder);
    },
  ),
  "beginOrderDate": (
    getter: (data) => data.beginOrderDate,
    setter: (data, value) => data.beginOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginOrderDate = copyer(oldData.beginOrderDate);
    },
  ),
  "contactCount": (
    getter: (data) => data.contactCount,
    setter: (data, value) => data.contactCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactCount = copyer(oldData.contactCount);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "endOrderDate": (
    getter: (data) => data.endOrderDate,
    setter: (data, value) => data.endOrderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endOrderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endOrderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endOrderDate = copyer(oldData.endOrderDate);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "normalTotalAmount": (
    getter: (data) => data.normalTotalAmount,
    setter: (data, value) => data.normalTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.normalTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.normalTotalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.normalTotalAmount = copyer(oldData.normalTotalAmount);
    },
  ),
  "orderCount": (
    getter: (data) => data.orderCount,
    setter: (data, value) => data.orderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderCount = copyer(oldData.orderCount);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "returnRate": (
    getter: (data) => data.returnRate,
    setter: (data, value) => data.returnRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.returnRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.returnRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.returnRate = copyer(oldData.returnRate);
    },
  ),
  "returnTotalAmount": (
    getter: (data) => data.returnTotalAmount,
    setter: (data, value) => data.returnTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.returnTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.returnTotalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.returnTotalAmount = copyer(oldData.returnTotalAmount);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "totalAmount": (
    getter: (data) => data.totalAmount,
    setter: (data, value) => data.totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalAmount = copyer(oldData.totalAmount);
    },
  ),
  "totalBasicAmount": (
    getter: (data) => data.totalBasicAmount,
    setter: (data, value) => data.totalBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalBasicAmount = copyer(oldData.totalBasicAmount);
    },
  ),
  "totalUnitConvertAmount": (
    getter: (data) => data.totalUnitConvertAmount,
    setter: (data, value) => data.totalUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalUnitConvertAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalUnitConvertAmount = copyer(oldData.totalUnitConvertAmount);
    },
  ),
  "unitConvertDesc": (
    getter: (data) => data.unitConvertDesc,
    setter: (data, value) => data.unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertDesc = copyer(oldData.unitConvertDesc);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitName": (
    getter: (data) => data.unitName,
    setter: (data, value) => data.unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitName = copyer(oldData.unitName);
    },
  ),
};

class TypeOrderItemGroupQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemGroupQueryDataDTO({
    this.averageCostPricePerAmount,
    this.averagePricePerAmount,
    this.averageTotalPerContact,
    this.averageTotalPerOrder,
    this.beginOrderDate,
    this.contactCount,
    this.contactId,
    this.costTotal,
    this.count,
    this.discountTotal,
    this.endOrderDate,
    this.id,
    this.itemId,
    this.itemModelRemark,
    this.itemSpecsRemark,
    this.manageEmployeeId,
    this.name,
    this.normalTotalAmount,
    this.orderCount,
    this.preTaxTotal,
    this.profitRate,
    this.profitTotal,
    this.returnRate,
    this.returnTotalAmount,
    this.total,
    this.totalAmount,
    this.totalBasicAmount,
    this.totalUnitConvertAmount,
    this.unitConvertDesc,
    this.unitId,
    this.unitName
  });

  static TypeOrderItemGroupQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemGroupQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemGroupQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemGroupQueryDataDTO? deepCopy(TypeOrderItemGroupQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemGroupQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemGroupQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemGroupQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemGroupQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? averageCostPricePerAmount;

  String? averagePricePerAmount;

  String? averageTotalPerContact;

  String? averageTotalPerOrder;

  String? beginOrderDate;

  int? contactCount;

  int? contactId;

  String? costTotal;

  int? count;

  String? discountTotal;

  String? endOrderDate;

  String? id;

  int? itemId;

  String? itemModelRemark;

  String? itemSpecsRemark;

  int? manageEmployeeId;

  String? name;

  String? normalTotalAmount;

  int? orderCount;

  String? preTaxTotal;

  String? profitRate;

  String? profitTotal;

  String? returnRate;

  String? returnTotalAmount;

  String? total;

  String? totalAmount;

  String? totalBasicAmount;

  String? totalUnitConvertAmount;

  String? unitConvertDesc;

  int? unitId;

  String? unitName;

}

class FTypeOrderItemQueryDTO extends IDataField {
  static const data = FTypeOrderItemQueryDTO('data');
  static const pageIndex = FTypeOrderItemQueryDTO('pageIndex');
  static const pageSize = FTypeOrderItemQueryDTO('pageSize');
  static const sum = FTypeOrderItemQueryDTO('sum');
  const FTypeOrderItemQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQueryDTO> _TypeOrderItemQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderItemQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderItemQueryDataDTO>((single){
        final handler = TypeOrderItemQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderItemQueryDataDTO>((single){
        final handler = TypeOrderItemQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderItemQueryDataDTO>((single){
        final handler = TypeOrderItemQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderItemQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderItemQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderItemQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderItemQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderItemQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderItemQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemQueryDTO? deepCopy(TypeOrderItemQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderItemQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeOrderItemQuerySumDTO? sum;

}

class FTypeOrderItemQueryDataDTO extends IDataField {
  static const aliasItemName = FTypeOrderItemQueryDataDTO('aliasItemName');
  static const aliasItemNumber = FTypeOrderItemQueryDataDTO('aliasItemNumber');
  static const amount = FTypeOrderItemQueryDataDTO('amount');
  static const attachmentCount = FTypeOrderItemQueryDataDTO('attachmentCount');
  static const attachmentSize = FTypeOrderItemQueryDataDTO('attachmentSize');
  static const basicAmount = FTypeOrderItemQueryDataDTO('basicAmount');
  static const commonAmount = FTypeOrderItemQueryDataDTO('commonAmount');
  static const commonUnitName = FTypeOrderItemQueryDataDTO('commonUnitName');
  static const costPrice = FTypeOrderItemQueryDataDTO('costPrice');
  static const costTotal = FTypeOrderItemQueryDataDTO('costTotal');
  static const customField1 = FTypeOrderItemQueryDataDTO('customField1');
  static const customField2 = FTypeOrderItemQueryDataDTO('customField2');
  static const customField3 = FTypeOrderItemQueryDataDTO('customField3');
  static const customField4 = FTypeOrderItemQueryDataDTO('customField4');
  static const customField5 = FTypeOrderItemQueryDataDTO('customField5');
  static const customField6 = FTypeOrderItemQueryDataDTO('customField6');
  static const customField7 = FTypeOrderItemQueryDataDTO('customField7');
  static const customField8 = FTypeOrderItemQueryDataDTO('customField8');
  static const discountPrice = FTypeOrderItemQueryDataDTO('discountPrice');
  static const discountTotal = FTypeOrderItemQueryDataDTO('discountTotal');
  static const doneExecuteAmount = FTypeOrderItemQueryDataDTO('doneExecuteAmount');
  static const id = FTypeOrderItemQueryDataDTO('id');
  static const image1 = FTypeOrderItemQueryDataDTO('image1');
  static const itemId = FTypeOrderItemQueryDataDTO('itemId');
  static const itemImageInfo1 = FTypeOrderItemQueryDataDTO('itemImageInfo1');
  static const itemModelRemark = FTypeOrderItemQueryDataDTO('itemModelRemark');
  static const itemName = FTypeOrderItemQueryDataDTO('itemName');
  static const itemNumber = FTypeOrderItemQueryDataDTO('itemNumber');
  static const itemSpecsRemark = FTypeOrderItemQueryDataDTO('itemSpecsRemark');
  static const itemStoreId = FTypeOrderItemQueryDataDTO('itemStoreId');
  static const itemStoreName = FTypeOrderItemQueryDataDTO('itemStoreName');
  static const itemsOrder = FTypeOrderItemQueryDataDTO('itemsOrder');
  static const orderContactId = FTypeOrderItemQueryDataDTO('orderContactId');
  static const orderContactName = FTypeOrderItemQueryDataDTO('orderContactName');
  static const orderCustomField1 = FTypeOrderItemQueryDataDTO('orderCustomField1');
  static const orderCustomField2 = FTypeOrderItemQueryDataDTO('orderCustomField2');
  static const orderCustomField3 = FTypeOrderItemQueryDataDTO('orderCustomField3');
  static const orderCustomField4 = FTypeOrderItemQueryDataDTO('orderCustomField4');
  static const orderCustomField5 = FTypeOrderItemQueryDataDTO('orderCustomField5');
  static const orderCustomField6 = FTypeOrderItemQueryDataDTO('orderCustomField6');
  static const orderCustomField7 = FTypeOrderItemQueryDataDTO('orderCustomField7');
  static const orderCustomField8 = FTypeOrderItemQueryDataDTO('orderCustomField8');
  static const orderDate = FTypeOrderItemQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeOrderItemQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeOrderItemQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeOrderItemQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeOrderItemQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeOrderItemQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeOrderItemQueryDataDTO('orderEntryAccountTime');
  static const orderHasStockExecute = FTypeOrderItemQueryDataDTO('orderHasStockExecute');
  static const orderId = FTypeOrderItemQueryDataDTO('orderId');
  static const orderInStoreId = FTypeOrderItemQueryDataDTO('orderInStoreId');
  static const orderInStoreName = FTypeOrderItemQueryDataDTO('orderInStoreName');
  static const orderManageEmployeeId = FTypeOrderItemQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeOrderItemQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeOrderItemQueryDataDTO('orderNumber');
  static const orderOutStoreId = FTypeOrderItemQueryDataDTO('orderOutStoreId');
  static const orderOutStoreName = FTypeOrderItemQueryDataDTO('orderOutStoreName');
  static const orderRedState = FTypeOrderItemQueryDataDTO('orderRedState');
  static const orderRemark = FTypeOrderItemQueryDataDTO('orderRemark');
  static const orderState = FTypeOrderItemQueryDataDTO('orderState');
  static const orderSummaryRemark = FTypeOrderItemQueryDataDTO('orderSummaryRemark');
  static const orderTotal = FTypeOrderItemQueryDataDTO('orderTotal');
  static const orderTotalAmount = FTypeOrderItemQueryDataDTO('orderTotalAmount');
  static const orderType = FTypeOrderItemQueryDataDTO('orderType');
  static const orderUndoneExecuteAmount = FTypeOrderItemQueryDataDTO('orderUndoneExecuteAmount');
  static const parentSourceOrderInfo = FTypeOrderItemQueryDataDTO('parentSourceOrderInfo');
  static const preTaxPrice = FTypeOrderItemQueryDataDTO('preTaxPrice');
  static const preTaxTotal = FTypeOrderItemQueryDataDTO('preTaxTotal');
  static const price = FTypeOrderItemQueryDataDTO('price');
  static const profitRate = FTypeOrderItemQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderItemQueryDataDTO('profitTotal');
  static const remark = FTypeOrderItemQueryDataDTO('remark');
  static const stockLocation = FTypeOrderItemQueryDataDTO('stockLocation');
  static const tax = FTypeOrderItemQueryDataDTO('tax');
  static const total = FTypeOrderItemQueryDataDTO('total');
  static const undoneExecuteAmount = FTypeOrderItemQueryDataDTO('undoneExecuteAmount');
  static const unitConvertAmount = FTypeOrderItemQueryDataDTO('unitConvertAmount');
  static const unitConvertDesc = FTypeOrderItemQueryDataDTO('unitConvertDesc');
  static const unitId = FTypeOrderItemQueryDataDTO('unitId');
  static const unitName = FTypeOrderItemQueryDataDTO('unitName');
  const FTypeOrderItemQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQueryDataDTO> _TypeOrderItemQueryDataDTO_fields = {
  "aliasItemName": (
    getter: (data) => data.aliasItemName,
    setter: (data, value) => data.aliasItemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemName = copyer(oldData.aliasItemName);
    },
  ),
  "aliasItemNumber": (
    getter: (data) => data.aliasItemNumber,
    setter: (data, value) => data.aliasItemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.aliasItemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.aliasItemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.aliasItemNumber = copyer(oldData.aliasItemNumber);
    },
  ),
  "amount": (
    getter: (data) => data.amount,
    setter: (data, value) => data.amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.amount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.amount = copyer(oldData.amount);
    },
  ),
  "attachmentCount": (
    getter: (data) => data.attachmentCount,
    setter: (data, value) => data.attachmentCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentCount = copyer(oldData.attachmentCount);
    },
  ),
  "attachmentSize": (
    getter: (data) => data.attachmentSize,
    setter: (data, value) => data.attachmentSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.attachmentSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.attachmentSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.attachmentSize = copyer(oldData.attachmentSize);
    },
  ),
  "basicAmount": (
    getter: (data) => data.basicAmount,
    setter: (data, value) => data.basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.basicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.basicAmount = copyer(oldData.basicAmount);
    },
  ),
  "commonAmount": (
    getter: (data) => data.commonAmount,
    setter: (data, value) => data.commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonAmount = copyer(oldData.commonAmount);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "costPrice": (
    getter: (data) => data.costPrice,
    setter: (data, value) => data.costPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costPrice = copyer(oldData.costPrice);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "customField1": (
    getter: (data) => data.customField1,
    setter: (data, value) => data.customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField1 = copyer(oldData.customField1);
    },
  ),
  "customField2": (
    getter: (data) => data.customField2,
    setter: (data, value) => data.customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField2 = copyer(oldData.customField2);
    },
  ),
  "customField3": (
    getter: (data) => data.customField3,
    setter: (data, value) => data.customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField3 = copyer(oldData.customField3);
    },
  ),
  "customField4": (
    getter: (data) => data.customField4,
    setter: (data, value) => data.customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField4 = copyer(oldData.customField4);
    },
  ),
  "customField5": (
    getter: (data) => data.customField5,
    setter: (data, value) => data.customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField5 = copyer(oldData.customField5);
    },
  ),
  "customField6": (
    getter: (data) => data.customField6,
    setter: (data, value) => data.customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField6 = copyer(oldData.customField6);
    },
  ),
  "customField7": (
    getter: (data) => data.customField7,
    setter: (data, value) => data.customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField7 = copyer(oldData.customField7);
    },
  ),
  "customField8": (
    getter: (data) => data.customField8,
    setter: (data, value) => data.customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField8 = copyer(oldData.customField8);
    },
  ),
  "discountPrice": (
    getter: (data) => data.discountPrice,
    setter: (data, value) => data.discountPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountPrice = copyer(oldData.discountPrice);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "image1": (
    getter: (data) => data.image1,
    setter: (data, value) => data.image1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.image1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.image1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.image1 = copyer(oldData.image1);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemImageInfo1": (
    getter: (data) => data.itemImageInfo1,
    setter: (data, value) => data.itemImageInfo1 = value as TypeImageInfo?,
    toDynamic: (data) {
      final formatter = TypeImageInfo.toDynamic;
      return formatter(data.itemImageInfo1);
    },
    fromDynamic: (data, value) {
      final parser = TypeImageInfo.fromDynamic;
      data.itemImageInfo1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeImageInfo.deepCopy;
      newData.itemImageInfo1 = copyer(oldData.itemImageInfo1);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemStoreId": (
    getter: (data) => data.itemStoreId,
    setter: (data, value) => data.itemStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemStoreId = copyer(oldData.itemStoreId);
    },
  ),
  "itemStoreName": (
    getter: (data) => data.itemStoreName,
    setter: (data, value) => data.itemStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemStoreName = copyer(oldData.itemStoreName);
    },
  ),
  "itemsOrder": (
    getter: (data) => data.itemsOrder,
    setter: (data, value) => data.itemsOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemsOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemsOrder = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemsOrder = copyer(oldData.itemsOrder);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderCustomField1": (
    getter: (data) => data.orderCustomField1,
    setter: (data, value) => data.orderCustomField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField1 = copyer(oldData.orderCustomField1);
    },
  ),
  "orderCustomField2": (
    getter: (data) => data.orderCustomField2,
    setter: (data, value) => data.orderCustomField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField2 = copyer(oldData.orderCustomField2);
    },
  ),
  "orderCustomField3": (
    getter: (data) => data.orderCustomField3,
    setter: (data, value) => data.orderCustomField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField3 = copyer(oldData.orderCustomField3);
    },
  ),
  "orderCustomField4": (
    getter: (data) => data.orderCustomField4,
    setter: (data, value) => data.orderCustomField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField4 = copyer(oldData.orderCustomField4);
    },
  ),
  "orderCustomField5": (
    getter: (data) => data.orderCustomField5,
    setter: (data, value) => data.orderCustomField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField5 = copyer(oldData.orderCustomField5);
    },
  ),
  "orderCustomField6": (
    getter: (data) => data.orderCustomField6,
    setter: (data, value) => data.orderCustomField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField6 = copyer(oldData.orderCustomField6);
    },
  ),
  "orderCustomField7": (
    getter: (data) => data.orderCustomField7,
    setter: (data, value) => data.orderCustomField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField7 = copyer(oldData.orderCustomField7);
    },
  ),
  "orderCustomField8": (
    getter: (data) => data.orderCustomField8,
    setter: (data, value) => data.orderCustomField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderCustomField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderCustomField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderCustomField8 = copyer(oldData.orderCustomField8);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderHasStockExecute": (
    getter: (data) => data.orderHasStockExecute,
    setter: (data, value) => data.orderHasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderHasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderHasStockExecute = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderHasStockExecute = copyer(oldData.orderHasStockExecute);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderInStoreId": (
    getter: (data) => data.orderInStoreId,
    setter: (data, value) => data.orderInStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderInStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderInStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderInStoreId = copyer(oldData.orderInStoreId);
    },
  ),
  "orderInStoreName": (
    getter: (data) => data.orderInStoreName,
    setter: (data, value) => data.orderInStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderInStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderInStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderInStoreName = copyer(oldData.orderInStoreName);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderOutStoreId": (
    getter: (data) => data.orderOutStoreId,
    setter: (data, value) => data.orderOutStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderOutStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderOutStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderOutStoreId = copyer(oldData.orderOutStoreId);
    },
  ),
  "orderOutStoreName": (
    getter: (data) => data.orderOutStoreName,
    setter: (data, value) => data.orderOutStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderOutStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderOutStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderOutStoreName = copyer(oldData.orderOutStoreName);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderRemark": (
    getter: (data) => data.orderRemark,
    setter: (data, value) => data.orderRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderRemark = copyer(oldData.orderRemark);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderSummaryRemark": (
    getter: (data) => data.orderSummaryRemark,
    setter: (data, value) => data.orderSummaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSummaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSummaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSummaryRemark = copyer(oldData.orderSummaryRemark);
    },
  ),
  "orderTotal": (
    getter: (data) => data.orderTotal,
    setter: (data, value) => data.orderTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderTotal = copyer(oldData.orderTotal);
    },
  ),
  "orderTotalAmount": (
    getter: (data) => data.orderTotalAmount,
    setter: (data, value) => data.orderTotalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderTotalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderTotalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderTotalAmount = copyer(oldData.orderTotalAmount);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "orderUndoneExecuteAmount": (
    getter: (data) => data.orderUndoneExecuteAmount,
    setter: (data, value) => data.orderUndoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderUndoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderUndoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderUndoneExecuteAmount = copyer(oldData.orderUndoneExecuteAmount);
    },
  ),
  "parentSourceOrderInfo": (
    getter: (data) => data.parentSourceOrderInfo,
    setter: (data, value) => data.parentSourceOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.parentSourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.parentSourceOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.parentSourceOrderInfo = copyer(oldData.parentSourceOrderInfo);
    },
  ),
  "preTaxPrice": (
    getter: (data) => data.preTaxPrice,
    setter: (data, value) => data.preTaxPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxPrice = copyer(oldData.preTaxPrice);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "stockLocation": (
    getter: (data) => data.stockLocation,
    setter: (data, value) => data.stockLocation = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockLocation);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockLocation = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockLocation = copyer(oldData.stockLocation);
    },
  ),
  "tax": (
    getter: (data) => data.tax,
    setter: (data, value) => data.tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.tax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.tax = copyer(oldData.tax);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
  "unitConvertAmount": (
    getter: (data) => data.unitConvertAmount,
    setter: (data, value) => data.unitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertAmount = copyer(oldData.unitConvertAmount);
    },
  ),
  "unitConvertDesc": (
    getter: (data) => data.unitConvertDesc,
    setter: (data, value) => data.unitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitConvertDesc = copyer(oldData.unitConvertDesc);
    },
  ),
  "unitId": (
    getter: (data) => data.unitId,
    setter: (data, value) => data.unitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.unitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.unitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.unitId = copyer(oldData.unitId);
    },
  ),
  "unitName": (
    getter: (data) => data.unitName,
    setter: (data, value) => data.unitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.unitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.unitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.unitName = copyer(oldData.unitName);
    },
  ),
};

class TypeOrderItemQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQueryDataDTO({
    this.aliasItemName,
    this.aliasItemNumber,
    this.amount,
    this.attachmentCount,
    this.attachmentSize,
    this.basicAmount,
    this.commonAmount,
    this.commonUnitName,
    this.costPrice,
    this.costTotal,
    this.customField1,
    this.customField2,
    this.customField3,
    this.customField4,
    this.customField5,
    this.customField6,
    this.customField7,
    this.customField8,
    this.discountPrice,
    this.discountTotal,
    this.doneExecuteAmount,
    this.id,
    this.image1,
    this.itemId,
    this.itemImageInfo1,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemSpecsRemark,
    this.itemStoreId,
    this.itemStoreName,
    this.itemsOrder,
    this.orderContactId,
    this.orderContactName,
    this.orderCustomField1,
    this.orderCustomField2,
    this.orderCustomField3,
    this.orderCustomField4,
    this.orderCustomField5,
    this.orderCustomField6,
    this.orderCustomField7,
    this.orderCustomField8,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderHasStockExecute,
    this.orderId,
    this.orderInStoreId,
    this.orderInStoreName,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderOutStoreId,
    this.orderOutStoreName,
    this.orderRedState,
    this.orderRemark,
    this.orderState,
    this.orderSummaryRemark,
    this.orderTotal,
    this.orderTotalAmount,
    this.orderType,
    this.orderUndoneExecuteAmount,
    this.parentSourceOrderInfo,
    this.preTaxPrice,
    this.preTaxTotal,
    this.price,
    this.profitRate,
    this.profitTotal,
    this.remark,
    this.stockLocation,
    this.tax,
    this.total,
    this.undoneExecuteAmount,
    this.unitConvertAmount,
    this.unitConvertDesc,
    this.unitId,
    this.unitName
  });

  static TypeOrderItemQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemQueryDataDTO? deepCopy(TypeOrderItemQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? aliasItemName;

  String? aliasItemNumber;

  String? amount;

  int? attachmentCount;

  int? attachmentSize;

  String? basicAmount;

  String? commonAmount;

  String? commonUnitName;

  String? costPrice;

  String? costTotal;

  String? customField1;

  String? customField2;

  String? customField3;

  String? customField4;

  String? customField5;

  String? customField6;

  String? customField7;

  String? customField8;

  String? discountPrice;

  String? discountTotal;

  String? doneExecuteAmount;

  int? id;

  String? image1;

  int? itemId;

  TypeImageInfo? itemImageInfo1;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  String? itemSpecsRemark;

  int? itemStoreId;

  String? itemStoreName;

  int? itemsOrder;

  int? orderContactId;

  String? orderContactName;

  String? orderCustomField1;

  String? orderCustomField2;

  String? orderCustomField3;

  String? orderCustomField4;

  String? orderCustomField5;

  String? orderCustomField6;

  String? orderCustomField7;

  String? orderCustomField8;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderHasStockExecute;

  int? orderId;

  int? orderInStoreId;

  String? orderInStoreName;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  int? orderOutStoreId;

  String? orderOutStoreName;

  TypeEnumOrderRedState? orderRedState;

  String? orderRemark;

  TypeEnumOrderState? orderState;

  String? orderSummaryRemark;

  String? orderTotal;

  String? orderTotalAmount;

  TypeEnumOrderType? orderType;

  String? orderUndoneExecuteAmount;

  String? parentSourceOrderInfo;

  String? preTaxPrice;

  String? preTaxTotal;

  String? price;

  String? profitRate;

  String? profitTotal;

  String? remark;

  String? stockLocation;

  String? tax;

  String? total;

  String? undoneExecuteAmount;

  String? unitConvertAmount;

  String? unitConvertDesc;

  int? unitId;

  String? unitName;

}

class FTypeOrderItemQuerySumDTO extends IDataField {
  static const amount = FTypeOrderItemQuerySumDTO('amount');
  static const commonAmount = FTypeOrderItemQuerySumDTO('commonAmount');
  static const costTotal = FTypeOrderItemQuerySumDTO('costTotal');
  static const count = FTypeOrderItemQuerySumDTO('count');
  static const discountTotal = FTypeOrderItemQuerySumDTO('discountTotal');
  static const doneExecuteAmount = FTypeOrderItemQuerySumDTO('doneExecuteAmount');
  static const draftOrderCount = FTypeOrderItemQuerySumDTO('draftOrderCount');
  static const feeTotal = FTypeOrderItemQuerySumDTO('feeTotal');
  static const normalOrderCount = FTypeOrderItemQuerySumDTO('normalOrderCount');
  static const orderCount = FTypeOrderItemQuerySumDTO('orderCount');
  static const preTaxTotal = FTypeOrderItemQuerySumDTO('preTaxTotal');
  static const profitRate = FTypeOrderItemQuerySumDTO('profitRate');
  static const profitTotal = FTypeOrderItemQuerySumDTO('profitTotal');
  static const returnOrderCount = FTypeOrderItemQuerySumDTO('returnOrderCount');
  static const total = FTypeOrderItemQuerySumDTO('total');
  static const undoneExecuteAmount = FTypeOrderItemQuerySumDTO('undoneExecuteAmount');
  const FTypeOrderItemQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderItemQuerySumDTO> _TypeOrderItemQuerySumDTO_fields = {
  "amount": (
    getter: (data) => data.amount,
    setter: (data, value) => data.amount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.amount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.amount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.amount = copyer(oldData.amount);
    },
  ),
  "commonAmount": (
    getter: (data) => data.commonAmount,
    setter: (data, value) => data.commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonAmount = copyer(oldData.commonAmount);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "draftOrderCount": (
    getter: (data) => data.draftOrderCount,
    setter: (data, value) => data.draftOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.draftOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.draftOrderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.draftOrderCount = copyer(oldData.draftOrderCount);
    },
  ),
  "feeTotal": (
    getter: (data) => data.feeTotal,
    setter: (data, value) => data.feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeTotal = copyer(oldData.feeTotal);
    },
  ),
  "normalOrderCount": (
    getter: (data) => data.normalOrderCount,
    setter: (data, value) => data.normalOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.normalOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.normalOrderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.normalOrderCount = copyer(oldData.normalOrderCount);
    },
  ),
  "orderCount": (
    getter: (data) => data.orderCount,
    setter: (data, value) => data.orderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderCount = copyer(oldData.orderCount);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "returnOrderCount": (
    getter: (data) => data.returnOrderCount,
    setter: (data, value) => data.returnOrderCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.returnOrderCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.returnOrderCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.returnOrderCount = copyer(oldData.returnOrderCount);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
};

class TypeOrderItemQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderItemQuerySumDTO({
    this.amount,
    this.commonAmount,
    this.costTotal,
    this.count,
    this.discountTotal,
    this.doneExecuteAmount,
    this.draftOrderCount,
    this.feeTotal,
    this.normalOrderCount,
    this.orderCount,
    this.preTaxTotal,
    this.profitRate,
    this.profitTotal,
    this.returnOrderCount,
    this.total,
    this.undoneExecuteAmount
  });

  static TypeOrderItemQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemQuerySumDTO? deepCopy(TypeOrderItemQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? amount;

  String? commonAmount;

  String? costTotal;

  int? count;

  String? discountTotal;

  String? doneExecuteAmount;

  int? draftOrderCount;

  String? feeTotal;

  int? normalOrderCount;

  int? orderCount;

  String? preTaxTotal;

  String? profitRate;

  String? profitTotal;

  int? returnOrderCount;

  String? total;

  String? undoneExecuteAmount;

}

class FTypeOrderItemRemain extends IDataField {
  static const basicAmount = FTypeOrderItemRemain('basicAmount');
  static const costTotal = FTypeOrderItemRemain('costTotal');
  static const stockRemainId = FTypeOrderItemRemain('stockRemainId');
  static const stockRemainType = FTypeOrderItemRemain('stockRemainType');
  const FTypeOrderItemRemain(super.key);
}

final FieldReflectInfo<TypeOrderItemRemain> _TypeOrderItemRemain_fields = {
  "basicAmount": (
    getter: (data) => data.basicAmount,
    setter: (data, value) => data.basicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.basicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.basicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.basicAmount = copyer(oldData.basicAmount);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "stockRemainId": (
    getter: (data) => data.stockRemainId,
    setter: (data, value) => data.stockRemainId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.stockRemainId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.stockRemainId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.stockRemainId = copyer(oldData.stockRemainId);
    },
  ),
  "stockRemainType": (
    getter: (data) => data.stockRemainType,
    setter: (data, value) => data.stockRemainType = value as TypeEnumOrderOrderItemStockRemainType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderOrderItemStockRemainType.toDynamic;
      return formatter(data.stockRemainType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderOrderItemStockRemainType.fromDynamic;
      data.stockRemainType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderOrderItemStockRemainType.deepCopy;
      newData.stockRemainType = copyer(oldData.stockRemainType);
    },
  ),
};

class TypeOrderItemRemain extends IDataBasic implements IDataDynamic {
  TypeOrderItemRemain({
    this.basicAmount,
    this.costTotal,
    this.stockRemainId,
    this.stockRemainType
  });

  static TypeOrderItemRemain? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderItemRemain();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderItemRemain_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderItemRemain: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderItemRemain? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderItemRemain_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderItemRemain? deepCopy(TypeOrderItemRemain? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderItemRemain();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderItemRemain_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderItemRemain copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderItemRemain_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderItemRemain_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? basicAmount;

  String? costTotal;

  int? stockRemainId;

  TypeEnumOrderOrderItemStockRemainType? stockRemainType;

}

class FTypeOrderNumberAndInsertId extends IDataField {
  static const insertUniqueId = FTypeOrderNumberAndInsertId('insertUniqueId');
  static const number = FTypeOrderNumberAndInsertId('number');
  const FTypeOrderNumberAndInsertId(super.key);
}

final FieldReflectInfo<TypeOrderNumberAndInsertId> _TypeOrderNumberAndInsertId_fields = {
  "insertUniqueId": (
    getter: (data) => data.insertUniqueId,
    setter: (data, value) => data.insertUniqueId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.insertUniqueId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.insertUniqueId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.insertUniqueId = copyer(oldData.insertUniqueId);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
};

class TypeOrderNumberAndInsertId extends IDataBasic implements IDataDynamic {
  TypeOrderNumberAndInsertId({
    this.insertUniqueId,
    this.number
  });

  static TypeOrderNumberAndInsertId? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderNumberAndInsertId();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderNumberAndInsertId_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderNumberAndInsertId: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderNumberAndInsertId? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderNumberAndInsertId_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderNumberAndInsertId? deepCopy(TypeOrderNumberAndInsertId? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderNumberAndInsertId();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderNumberAndInsertId_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderNumberAndInsertId copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderNumberAndInsertId_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderNumberAndInsertId_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? insertUniqueId;

  String? number;

}

class FTypeOrderProfitFlow extends IDataField {
  static const adpChange = FTypeOrderProfitFlow('adpChange');
  static const adrChange = FTypeOrderProfitFlow('adrChange');
  static const apChange = FTypeOrderProfitFlow('apChange');
  static const arChange = FTypeOrderProfitFlow('arChange');
  static const businessOrderId = FTypeOrderProfitFlow('businessOrderId');
  static const cashChange = FTypeOrderProfitFlow('cashChange');
  static const cashCreditChange = FTypeOrderProfitFlow('cashCreditChange');
  static const cashDebitChange = FTypeOrderProfitFlow('cashDebitChange');
  static const contactId = FTypeOrderProfitFlow('contactId');
  static const discount = FTypeOrderProfitFlow('discount');
  static const drawEmployeeId = FTypeOrderProfitFlow('drawEmployeeId');
  static const id = FTypeOrderProfitFlow('id');
  static const manageEmployeeId = FTypeOrderProfitFlow('manageEmployeeId');
  static const netProfit = FTypeOrderProfitFlow('netProfit');
  static const otherExpense = FTypeOrderProfitFlow('otherExpense');
  static const otherIncome = FTypeOrderProfitFlow('otherIncome');
  static const salesCost = FTypeOrderProfitFlow('salesCost');
  static const salesIncome = FTypeOrderProfitFlow('salesIncome');
  static const salesProfit = FTypeOrderProfitFlow('salesProfit');
  static const salesProfitRate = FTypeOrderProfitFlow('salesProfitRate');
  static const spendAdvancePayable = FTypeOrderProfitFlow('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderProfitFlow('spendAdvanceReceivable');
  static const stockChange = FTypeOrderProfitFlow('stockChange');
  static const stockCreditChange = FTypeOrderProfitFlow('stockCreditChange');
  static const stockDebitChange = FTypeOrderProfitFlow('stockDebitChange');
  static const storeId = FTypeOrderProfitFlow('storeId');
  const FTypeOrderProfitFlow(super.key);
}

final FieldReflectInfo<TypeOrderProfitFlow> _TypeOrderProfitFlow_fields = {
  "adpChange": (
    getter: (data) => data.adpChange,
    setter: (data, value) => data.adpChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adpChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adpChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adpChange = copyer(oldData.adpChange);
    },
  ),
  "adrChange": (
    getter: (data) => data.adrChange,
    setter: (data, value) => data.adrChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.adrChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.adrChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.adrChange = copyer(oldData.adrChange);
    },
  ),
  "apChange": (
    getter: (data) => data.apChange,
    setter: (data, value) => data.apChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.apChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.apChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.apChange = copyer(oldData.apChange);
    },
  ),
  "arChange": (
    getter: (data) => data.arChange,
    setter: (data, value) => data.arChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.arChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.arChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.arChange = copyer(oldData.arChange);
    },
  ),
  "businessOrderId": (
    getter: (data) => data.businessOrderId,
    setter: (data, value) => data.businessOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.businessOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.businessOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.businessOrderId = copyer(oldData.businessOrderId);
    },
  ),
  "cashChange": (
    getter: (data) => data.cashChange,
    setter: (data, value) => data.cashChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashChange = copyer(oldData.cashChange);
    },
  ),
  "cashCreditChange": (
    getter: (data) => data.cashCreditChange,
    setter: (data, value) => data.cashCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashCreditChange = copyer(oldData.cashCreditChange);
    },
  ),
  "cashDebitChange": (
    getter: (data) => data.cashDebitChange,
    setter: (data, value) => data.cashDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.cashDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.cashDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.cashDebitChange = copyer(oldData.cashDebitChange);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "discount": (
    getter: (data) => data.discount,
    setter: (data, value) => data.discount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discount = copyer(oldData.discount);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "netProfit": (
    getter: (data) => data.netProfit,
    setter: (data, value) => data.netProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.netProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.netProfit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.netProfit = copyer(oldData.netProfit);
    },
  ),
  "otherExpense": (
    getter: (data) => data.otherExpense,
    setter: (data, value) => data.otherExpense = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.otherExpense);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.otherExpense = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.otherExpense = copyer(oldData.otherExpense);
    },
  ),
  "otherIncome": (
    getter: (data) => data.otherIncome,
    setter: (data, value) => data.otherIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.otherIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.otherIncome = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.otherIncome = copyer(oldData.otherIncome);
    },
  ),
  "salesCost": (
    getter: (data) => data.salesCost,
    setter: (data, value) => data.salesCost = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesCost);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesCost = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesCost = copyer(oldData.salesCost);
    },
  ),
  "salesIncome": (
    getter: (data) => data.salesIncome,
    setter: (data, value) => data.salesIncome = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesIncome);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesIncome = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesIncome = copyer(oldData.salesIncome);
    },
  ),
  "salesProfit": (
    getter: (data) => data.salesProfit,
    setter: (data, value) => data.salesProfit = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesProfit);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesProfit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesProfit = copyer(oldData.salesProfit);
    },
  ),
  "salesProfitRate": (
    getter: (data) => data.salesProfitRate,
    setter: (data, value) => data.salesProfitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesProfitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesProfitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesProfitRate = copyer(oldData.salesProfitRate);
    },
  ),
  "spendAdvancePayable": (
    getter: (data) => data.spendAdvancePayable,
    setter: (data, value) => data.spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvancePayable = copyer(oldData.spendAdvancePayable);
    },
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data.spendAdvanceReceivable,
    setter: (data, value) => data.spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvanceReceivable = copyer(oldData.spendAdvanceReceivable);
    },
  ),
  "stockChange": (
    getter: (data) => data.stockChange,
    setter: (data, value) => data.stockChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockChange = copyer(oldData.stockChange);
    },
  ),
  "stockCreditChange": (
    getter: (data) => data.stockCreditChange,
    setter: (data, value) => data.stockCreditChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockCreditChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockCreditChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockCreditChange = copyer(oldData.stockCreditChange);
    },
  ),
  "stockDebitChange": (
    getter: (data) => data.stockDebitChange,
    setter: (data, value) => data.stockDebitChange = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockDebitChange);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockDebitChange = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockDebitChange = copyer(oldData.stockDebitChange);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
};

class TypeOrderProfitFlow extends IDataBasic implements IDataDynamic {
  TypeOrderProfitFlow({
    this.adpChange,
    this.adrChange,
    this.apChange,
    this.arChange,
    this.businessOrderId,
    this.cashChange,
    this.cashCreditChange,
    this.cashDebitChange,
    this.contactId,
    this.discount,
    this.drawEmployeeId,
    this.id,
    this.manageEmployeeId,
    this.netProfit,
    this.otherExpense,
    this.otherIncome,
    this.salesCost,
    this.salesIncome,
    this.salesProfit,
    this.salesProfitRate,
    this.spendAdvancePayable,
    this.spendAdvanceReceivable,
    this.stockChange,
    this.stockCreditChange,
    this.stockDebitChange,
    this.storeId
  });

  static TypeOrderProfitFlow? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderProfitFlow();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderProfitFlow_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderProfitFlow: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderProfitFlow? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderProfitFlow_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderProfitFlow? deepCopy(TypeOrderProfitFlow? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderProfitFlow();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderProfitFlow_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderProfitFlow copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderProfitFlow_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderProfitFlow_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? adpChange;

  String? adrChange;

  String? apChange;

  String? arChange;

  int? businessOrderId;

  String? cashChange;

  String? cashCreditChange;

  String? cashDebitChange;

  int? contactId;

  String? discount;

  int? drawEmployeeId;

  int? id;

  int? manageEmployeeId;

  String? netProfit;

  String? otherExpense;

  String? otherIncome;

  String? salesCost;

  String? salesIncome;

  String? salesProfit;

  String? salesProfitRate;

  String? spendAdvancePayable;

  String? spendAdvanceReceivable;

  String? stockChange;

  String? stockCreditChange;

  String? stockDebitChange;

  int? storeId;

}

class FTypeOrderQueryDTO extends IDataField {
  static const data = FTypeOrderQueryDTO('data');
  static const pageIndex = FTypeOrderQueryDTO('pageIndex');
  static const pageSize = FTypeOrderQueryDTO('pageSize');
  static const sum = FTypeOrderQueryDTO('sum');
  const FTypeOrderQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderQueryDTO> _TypeOrderQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderQueryDataDTO>((single){
        final handler = TypeOrderQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderQueryDataDTO>((single){
        final handler = TypeOrderQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderQueryDataDTO>((single){
        final handler = TypeOrderQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderQueryDTO? deepCopy(TypeOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeOrderQuerySumDTO? sum;

}

class FTypeOrderQueryDataDTO extends IDataField {
  static const accountDocumentOrderId = FTypeOrderQueryDataDTO('accountDocumentOrderId');
  static const billTotal = FTypeOrderQueryDataDTO('billTotal');
  static const billType = FTypeOrderQueryDataDTO('billType');
  static const bomCostTotal = FTypeOrderQueryDataDTO('bomCostTotal');
  static const bomTotal = FTypeOrderQueryDataDTO('bomTotal');
  static const contactId = FTypeOrderQueryDataDTO('contactId');
  static const contactName = FTypeOrderQueryDataDTO('contactName');
  static const contactPersonAddress = FTypeOrderQueryDataDTO('contactPersonAddress');
  static const contactPersonName = FTypeOrderQueryDataDTO('contactPersonName');
  static const contactPersonPhone = FTypeOrderQueryDataDTO('contactPersonPhone');
  static const costTotal = FTypeOrderQueryDataDTO('costTotal');
  static const customField1 = FTypeOrderQueryDataDTO('customField1');
  static const customField2 = FTypeOrderQueryDataDTO('customField2');
  static const customField3 = FTypeOrderQueryDataDTO('customField3');
  static const customField4 = FTypeOrderQueryDataDTO('customField4');
  static const customField5 = FTypeOrderQueryDataDTO('customField5');
  static const customField6 = FTypeOrderQueryDataDTO('customField6');
  static const customField7 = FTypeOrderQueryDataDTO('customField7');
  static const customField8 = FTypeOrderQueryDataDTO('customField8');
  static const discountTotal = FTypeOrderQueryDataDTO('discountTotal');
  static const documentType = FTypeOrderQueryDataDTO('documentType');
  static const doneBillTotal = FTypeOrderQueryDataDTO('doneBillTotal');
  static const doneExecuteAmount = FTypeOrderQueryDataDTO('doneExecuteAmount');
  static const drawEmployeeId = FTypeOrderQueryDataDTO('drawEmployeeId');
  static const drawEmployeeName = FTypeOrderQueryDataDTO('drawEmployeeName');
  static const drawTime = FTypeOrderQueryDataDTO('drawTime');
  static const entryAccountEmployeeId = FTypeOrderQueryDataDTO('entryAccountEmployeeId');
  static const entryAccountEmployeeName = FTypeOrderQueryDataDTO('entryAccountEmployeeName');
  static const entryAccountTime = FTypeOrderQueryDataDTO('entryAccountTime');
  static const feeTotal = FTypeOrderQueryDataDTO('feeTotal');
  static const hasBeenIssued = FTypeOrderQueryDataDTO('hasBeenIssued');
  static const hasBeenPurchased = FTypeOrderQueryDataDTO('hasBeenPurchased');
  static const hasBeenUsed = FTypeOrderQueryDataDTO('hasBeenUsed');
  static const hasFinishBill = FTypeOrderQueryDataDTO('hasFinishBill');
  static const hasStockExecute = FTypeOrderQueryDataDTO('hasStockExecute');
  static const id = FTypeOrderQueryDataDTO('id');
  static const inStoreId = FTypeOrderQueryDataDTO('inStoreId');
  static const inStoreName = FTypeOrderQueryDataDTO('inStoreName');
  static const manageEmployeeId = FTypeOrderQueryDataDTO('manageEmployeeId');
  static const manageEmployeeName = FTypeOrderQueryDataDTO('manageEmployeeName');
  static const number = FTypeOrderQueryDataDTO('number');
  static const orderDate = FTypeOrderQueryDataDTO('orderDate');
  static const outStoreId = FTypeOrderQueryDataDTO('outStoreId');
  static const outStoreName = FTypeOrderQueryDataDTO('outStoreName');
  static const payCashAccountId = FTypeOrderQueryDataDTO('payCashAccountId');
  static const payCashAccountName = FTypeOrderQueryDataDTO('payCashAccountName');
  static const payCashTotal = FTypeOrderQueryDataDTO('payCashTotal');
  static const payDiscount = FTypeOrderQueryDataDTO('payDiscount');
  static const preTaxTotal = FTypeOrderQueryDataDTO('preTaxTotal');
  static const printTimes = FTypeOrderQueryDataDTO('printTimes');
  static const profitRate = FTypeOrderQueryDataDTO('profitRate');
  static const profitTotal = FTypeOrderQueryDataDTO('profitTotal');
  static const receiveCashAccountId = FTypeOrderQueryDataDTO('receiveCashAccountId');
  static const receiveCashAccountName = FTypeOrderQueryDataDTO('receiveCashAccountName');
  static const receiveCashTotal = FTypeOrderQueryDataDTO('receiveCashTotal');
  static const receiveDiscount = FTypeOrderQueryDataDTO('receiveDiscount');
  static const redReverseOrderId = FTypeOrderQueryDataDTO('redReverseOrderId');
  static const redState = FTypeOrderQueryDataDTO('redState');
  static const remark = FTypeOrderQueryDataDTO('remark');
  static const sourceOrderInfo = FTypeOrderQueryDataDTO('sourceOrderInfo');
  static const spendAdvancePayable = FTypeOrderQueryDataDTO('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderQueryDataDTO('spendAdvanceReceivable');
  static const state = FTypeOrderQueryDataDTO('state');
  static const storeId = FTypeOrderQueryDataDTO('storeId');
  static const storeName = FTypeOrderQueryDataDTO('storeName');
  static const subType = FTypeOrderQueryDataDTO('subType');
  static const summaryRemark = FTypeOrderQueryDataDTO('summaryRemark');
  static const targetOrderInfo = FTypeOrderQueryDataDTO('targetOrderInfo');
  static const tax = FTypeOrderQueryDataDTO('tax');
  static const taxOnlyTotal = FTypeOrderQueryDataDTO('taxOnlyTotal');
  static const total = FTypeOrderQueryDataDTO('total');
  static const totalAmount = FTypeOrderQueryDataDTO('totalAmount');
  static const type = FTypeOrderQueryDataDTO('type');
  static const undoneBillTotal = FTypeOrderQueryDataDTO('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrderQueryDataDTO('undoneExecuteAmount');
  const FTypeOrderQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderQueryDataDTO> _TypeOrderQueryDataDTO_fields = {
  "accountDocumentOrderId": (
    getter: (data) => data.accountDocumentOrderId,
    setter: (data, value) => data.accountDocumentOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.accountDocumentOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.accountDocumentOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.accountDocumentOrderId = copyer(oldData.accountDocumentOrderId);
    },
  ),
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "billType": (
    getter: (data) => data.billType,
    setter: (data, value) => data.billType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data.billType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data.billType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderBillType.deepCopy;
      newData.billType = copyer(oldData.billType);
    },
  ),
  "bomCostTotal": (
    getter: (data) => data.bomCostTotal,
    setter: (data, value) => data.bomCostTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomCostTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomCostTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomCostTotal = copyer(oldData.bomCostTotal);
    },
  ),
  "bomTotal": (
    getter: (data) => data.bomTotal,
    setter: (data, value) => data.bomTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bomTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bomTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bomTotal = copyer(oldData.bomTotal);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "contactPersonAddress": (
    getter: (data) => data.contactPersonAddress,
    setter: (data, value) => data.contactPersonAddress = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonAddress);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonAddress = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonAddress = copyer(oldData.contactPersonAddress);
    },
  ),
  "contactPersonName": (
    getter: (data) => data.contactPersonName,
    setter: (data, value) => data.contactPersonName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonName = copyer(oldData.contactPersonName);
    },
  ),
  "contactPersonPhone": (
    getter: (data) => data.contactPersonPhone,
    setter: (data, value) => data.contactPersonPhone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactPersonPhone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactPersonPhone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactPersonPhone = copyer(oldData.contactPersonPhone);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "customField1": (
    getter: (data) => data.customField1,
    setter: (data, value) => data.customField1 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField1);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField1 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField1 = copyer(oldData.customField1);
    },
  ),
  "customField2": (
    getter: (data) => data.customField2,
    setter: (data, value) => data.customField2 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField2);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField2 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField2 = copyer(oldData.customField2);
    },
  ),
  "customField3": (
    getter: (data) => data.customField3,
    setter: (data, value) => data.customField3 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField3);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField3 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField3 = copyer(oldData.customField3);
    },
  ),
  "customField4": (
    getter: (data) => data.customField4,
    setter: (data, value) => data.customField4 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField4);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField4 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField4 = copyer(oldData.customField4);
    },
  ),
  "customField5": (
    getter: (data) => data.customField5,
    setter: (data, value) => data.customField5 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField5);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField5 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField5 = copyer(oldData.customField5);
    },
  ),
  "customField6": (
    getter: (data) => data.customField6,
    setter: (data, value) => data.customField6 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField6);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField6 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField6 = copyer(oldData.customField6);
    },
  ),
  "customField7": (
    getter: (data) => data.customField7,
    setter: (data, value) => data.customField7 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField7);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField7 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField7 = copyer(oldData.customField7);
    },
  ),
  "customField8": (
    getter: (data) => data.customField8,
    setter: (data, value) => data.customField8 = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.customField8);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.customField8 = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.customField8 = copyer(oldData.customField8);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "documentType": (
    getter: (data) => data.documentType,
    setter: (data, value) => data.documentType = value as TypeEnumOrderDocumentType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderDocumentType.toDynamic;
      return formatter(data.documentType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderDocumentType.fromDynamic;
      data.documentType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderDocumentType.deepCopy;
      newData.documentType = copyer(oldData.documentType);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "drawEmployeeId": (
    getter: (data) => data.drawEmployeeId,
    setter: (data, value) => data.drawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.drawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.drawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.drawEmployeeId = copyer(oldData.drawEmployeeId);
    },
  ),
  "drawEmployeeName": (
    getter: (data) => data.drawEmployeeName,
    setter: (data, value) => data.drawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawEmployeeName = copyer(oldData.drawEmployeeName);
    },
  ),
  "drawTime": (
    getter: (data) => data.drawTime,
    setter: (data, value) => data.drawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.drawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.drawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.drawTime = copyer(oldData.drawTime);
    },
  ),
  "entryAccountEmployeeId": (
    getter: (data) => data.entryAccountEmployeeId,
    setter: (data, value) => data.entryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.entryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.entryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.entryAccountEmployeeId = copyer(oldData.entryAccountEmployeeId);
    },
  ),
  "entryAccountEmployeeName": (
    getter: (data) => data.entryAccountEmployeeName,
    setter: (data, value) => data.entryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountEmployeeName = copyer(oldData.entryAccountEmployeeName);
    },
  ),
  "entryAccountTime": (
    getter: (data) => data.entryAccountTime,
    setter: (data, value) => data.entryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.entryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.entryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.entryAccountTime = copyer(oldData.entryAccountTime);
    },
  ),
  "feeTotal": (
    getter: (data) => data.feeTotal,
    setter: (data, value) => data.feeTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.feeTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.feeTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.feeTotal = copyer(oldData.feeTotal);
    },
  ),
  "hasBeenIssued": (
    getter: (data) => data.hasBeenIssued,
    setter: (data, value) => data.hasBeenIssued = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenIssued);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenIssued = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenIssued = copyer(oldData.hasBeenIssued);
    },
  ),
  "hasBeenPurchased": (
    getter: (data) => data.hasBeenPurchased,
    setter: (data, value) => data.hasBeenPurchased = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenPurchased);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenPurchased = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenPurchased = copyer(oldData.hasBeenPurchased);
    },
  ),
  "hasBeenUsed": (
    getter: (data) => data.hasBeenUsed,
    setter: (data, value) => data.hasBeenUsed = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBeenUsed);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBeenUsed = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBeenUsed = copyer(oldData.hasBeenUsed);
    },
  ),
  "hasFinishBill": (
    getter: (data) => data.hasFinishBill,
    setter: (data, value) => data.hasFinishBill = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasFinishBill);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasFinishBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasFinishBill = copyer(oldData.hasFinishBill);
    },
  ),
  "hasStockExecute": (
    getter: (data) => data.hasStockExecute,
    setter: (data, value) => data.hasStockExecute = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasStockExecute);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasStockExecute = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasStockExecute = copyer(oldData.hasStockExecute);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "inStoreId": (
    getter: (data) => data.inStoreId,
    setter: (data, value) => data.inStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.inStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.inStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.inStoreId = copyer(oldData.inStoreId);
    },
  ),
  "inStoreName": (
    getter: (data) => data.inStoreName,
    setter: (data, value) => data.inStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inStoreName = copyer(oldData.inStoreName);
    },
  ),
  "manageEmployeeId": (
    getter: (data) => data.manageEmployeeId,
    setter: (data, value) => data.manageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.manageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.manageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.manageEmployeeId = copyer(oldData.manageEmployeeId);
    },
  ),
  "manageEmployeeName": (
    getter: (data) => data.manageEmployeeName,
    setter: (data, value) => data.manageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.manageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.manageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.manageEmployeeName = copyer(oldData.manageEmployeeName);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "outStoreId": (
    getter: (data) => data.outStoreId,
    setter: (data, value) => data.outStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.outStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.outStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.outStoreId = copyer(oldData.outStoreId);
    },
  ),
  "outStoreName": (
    getter: (data) => data.outStoreName,
    setter: (data, value) => data.outStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outStoreName = copyer(oldData.outStoreName);
    },
  ),
  "payCashAccountId": (
    getter: (data) => data.payCashAccountId,
    setter: (data, value) => data.payCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.payCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.payCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.payCashAccountId = copyer(oldData.payCashAccountId);
    },
  ),
  "payCashAccountName": (
    getter: (data) => data.payCashAccountName,
    setter: (data, value) => data.payCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payCashAccountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payCashAccountName = copyer(oldData.payCashAccountName);
    },
  ),
  "payCashTotal": (
    getter: (data) => data.payCashTotal,
    setter: (data, value) => data.payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payCashTotal = copyer(oldData.payCashTotal);
    },
  ),
  "payDiscount": (
    getter: (data) => data.payDiscount,
    setter: (data, value) => data.payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payDiscount = copyer(oldData.payDiscount);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "printTimes": (
    getter: (data) => data.printTimes,
    setter: (data, value) => data.printTimes = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.printTimes);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.printTimes = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.printTimes = copyer(oldData.printTimes);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "receiveCashAccountId": (
    getter: (data) => data.receiveCashAccountId,
    setter: (data, value) => data.receiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.receiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.receiveCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.receiveCashAccountId = copyer(oldData.receiveCashAccountId);
    },
  ),
  "receiveCashAccountName": (
    getter: (data) => data.receiveCashAccountName,
    setter: (data, value) => data.receiveCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashAccountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashAccountName = copyer(oldData.receiveCashAccountName);
    },
  ),
  "receiveCashTotal": (
    getter: (data) => data.receiveCashTotal,
    setter: (data, value) => data.receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashTotal = copyer(oldData.receiveCashTotal);
    },
  ),
  "receiveDiscount": (
    getter: (data) => data.receiveDiscount,
    setter: (data, value) => data.receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveDiscount = copyer(oldData.receiveDiscount);
    },
  ),
  "redReverseOrderId": (
    getter: (data) => data.redReverseOrderId,
    setter: (data, value) => data.redReverseOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.redReverseOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.redReverseOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.redReverseOrderId = copyer(oldData.redReverseOrderId);
    },
  ),
  "redState": (
    getter: (data) => data.redState,
    setter: (data, value) => data.redState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.redState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.redState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.redState = copyer(oldData.redState);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "sourceOrderInfo": (
    getter: (data) => data.sourceOrderInfo,
    setter: (data, value) => data.sourceOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sourceOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sourceOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sourceOrderInfo = copyer(oldData.sourceOrderInfo);
    },
  ),
  "spendAdvancePayable": (
    getter: (data) => data.spendAdvancePayable,
    setter: (data, value) => data.spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvancePayable = copyer(oldData.spendAdvancePayable);
    },
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data.spendAdvanceReceivable,
    setter: (data, value) => data.spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvanceReceivable = copyer(oldData.spendAdvanceReceivable);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "subType": (
    getter: (data) => data.subType,
    setter: (data, value) => data.subType = value as TypeEnumOrderSubType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderSubType.toDynamic;
      return formatter(data.subType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderSubType.fromDynamic;
      data.subType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderSubType.deepCopy;
      newData.subType = copyer(oldData.subType);
    },
  ),
  "summaryRemark": (
    getter: (data) => data.summaryRemark,
    setter: (data, value) => data.summaryRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.summaryRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.summaryRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.summaryRemark = copyer(oldData.summaryRemark);
    },
  ),
  "targetOrderInfo": (
    getter: (data) => data.targetOrderInfo,
    setter: (data, value) => data.targetOrderInfo = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.targetOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.targetOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.targetOrderInfo = copyer(oldData.targetOrderInfo);
    },
  ),
  "tax": (
    getter: (data) => data.tax,
    setter: (data, value) => data.tax = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.tax);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.tax = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.tax = copyer(oldData.tax);
    },
  ),
  "taxOnlyTotal": (
    getter: (data) => data.taxOnlyTotal,
    setter: (data, value) => data.taxOnlyTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.taxOnlyTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.taxOnlyTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.taxOnlyTotal = copyer(oldData.taxOnlyTotal);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "totalAmount": (
    getter: (data) => data.totalAmount,
    setter: (data, value) => data.totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalAmount = copyer(oldData.totalAmount);
    },
  ),
  "type": (
    getter: (data) => data.type,
    setter: (data, value) => data.type = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.type);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.type = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.type = copyer(oldData.type);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
};

class TypeOrderQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQueryDataDTO({
    this.accountDocumentOrderId,
    this.billTotal,
    this.billType,
    this.bomCostTotal,
    this.bomTotal,
    this.contactId,
    this.contactName,
    this.contactPersonAddress,
    this.contactPersonName,
    this.contactPersonPhone,
    this.costTotal,
    this.customField1,
    this.customField2,
    this.customField3,
    this.customField4,
    this.customField5,
    this.customField6,
    this.customField7,
    this.customField8,
    this.discountTotal,
    this.documentType,
    this.doneBillTotal,
    this.doneExecuteAmount,
    this.drawEmployeeId,
    this.drawEmployeeName,
    this.drawTime,
    this.entryAccountEmployeeId,
    this.entryAccountEmployeeName,
    this.entryAccountTime,
    this.feeTotal,
    this.hasBeenIssued,
    this.hasBeenPurchased,
    this.hasBeenUsed,
    this.hasFinishBill,
    this.hasStockExecute,
    this.id,
    this.inStoreId,
    this.inStoreName,
    this.manageEmployeeId,
    this.manageEmployeeName,
    this.number,
    this.orderDate,
    this.outStoreId,
    this.outStoreName,
    this.payCashAccountId,
    this.payCashAccountName,
    this.payCashTotal,
    this.payDiscount,
    this.preTaxTotal,
    this.printTimes,
    this.profitRate,
    this.profitTotal,
    this.receiveCashAccountId,
    this.receiveCashAccountName,
    this.receiveCashTotal,
    this.receiveDiscount,
    this.redReverseOrderId,
    this.redState,
    this.remark,
    this.sourceOrderInfo,
    this.spendAdvancePayable,
    this.spendAdvanceReceivable,
    this.state,
    this.storeId,
    this.storeName,
    this.subType,
    this.summaryRemark,
    this.targetOrderInfo,
    this.tax,
    this.taxOnlyTotal,
    this.total,
    this.totalAmount,
    this.type,
    this.undoneBillTotal,
    this.undoneExecuteAmount
  });

  static TypeOrderQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderQueryDataDTO? deepCopy(TypeOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? accountDocumentOrderId;

  String? billTotal;

  TypeEnumOrderBillType? billType;

  String? bomCostTotal;

  String? bomTotal;

  int? contactId;

  String? contactName;

  String? contactPersonAddress;

  String? contactPersonName;

  String? contactPersonPhone;

  String? costTotal;

  String? customField1;

  String? customField2;

  String? customField3;

  String? customField4;

  String? customField5;

  String? customField6;

  String? customField7;

  String? customField8;

  String? discountTotal;

  TypeEnumOrderDocumentType? documentType;

  String? doneBillTotal;

  String? doneExecuteAmount;

  int? drawEmployeeId;

  String? drawEmployeeName;

  String? drawTime;

  int? entryAccountEmployeeId;

  String? entryAccountEmployeeName;

  String? entryAccountTime;

  String? feeTotal;

  int? hasBeenIssued;

  int? hasBeenPurchased;

  int? hasBeenUsed;

  int? hasFinishBill;

  int? hasStockExecute;

  int? id;

  int? inStoreId;

  String? inStoreName;

  int? manageEmployeeId;

  String? manageEmployeeName;

  String? number;

  String? orderDate;

  int? outStoreId;

  String? outStoreName;

  int? payCashAccountId;

  String? payCashAccountName;

  String? payCashTotal;

  String? payDiscount;

  String? preTaxTotal;

  int? printTimes;

  String? profitRate;

  String? profitTotal;

  int? receiveCashAccountId;

  String? receiveCashAccountName;

  String? receiveCashTotal;

  String? receiveDiscount;

  int? redReverseOrderId;

  TypeEnumOrderRedState? redState;

  String? remark;

  String? sourceOrderInfo;

  String? spendAdvancePayable;

  String? spendAdvanceReceivable;

  TypeEnumOrderState? state;

  int? storeId;

  String? storeName;

  TypeEnumOrderSubType? subType;

  String? summaryRemark;

  String? targetOrderInfo;

  String? tax;

  String? taxOnlyTotal;

  String? total;

  String? totalAmount;

  TypeEnumOrderType? type;

  String? undoneBillTotal;

  String? undoneExecuteAmount;

}

class FTypeOrderQuerySumDTO extends IDataField {
  static const billTotal = FTypeOrderQuerySumDTO('billTotal');
  static const costTotal = FTypeOrderQuerySumDTO('costTotal');
  static const count = FTypeOrderQuerySumDTO('count');
  static const discountTotal = FTypeOrderQuerySumDTO('discountTotal');
  static const doneBillTotal = FTypeOrderQuerySumDTO('doneBillTotal');
  static const doneExecuteAmount = FTypeOrderQuerySumDTO('doneExecuteAmount');
  static const hasFinishBillCount = FTypeOrderQuerySumDTO('hasFinishBillCount');
  static const hasNotFinishBillCount = FTypeOrderQuerySumDTO('hasNotFinishBillCount');
  static const payCashTotal = FTypeOrderQuerySumDTO('payCashTotal');
  static const payDiscount = FTypeOrderQuerySumDTO('payDiscount');
  static const preTaxTotal = FTypeOrderQuerySumDTO('preTaxTotal');
  static const profitRate = FTypeOrderQuerySumDTO('profitRate');
  static const profitTotal = FTypeOrderQuerySumDTO('profitTotal');
  static const receiveCashTotal = FTypeOrderQuerySumDTO('receiveCashTotal');
  static const receiveDiscount = FTypeOrderQuerySumDTO('receiveDiscount');
  static const spendAdvancePayable = FTypeOrderQuerySumDTO('spendAdvancePayable');
  static const spendAdvanceReceivable = FTypeOrderQuerySumDTO('spendAdvanceReceivable');
  static const total = FTypeOrderQuerySumDTO('total');
  static const totalAmount = FTypeOrderQuerySumDTO('totalAmount');
  static const undoneBillTotal = FTypeOrderQuerySumDTO('undoneBillTotal');
  static const undoneExecuteAmount = FTypeOrderQuerySumDTO('undoneExecuteAmount');
  const FTypeOrderQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderQuerySumDTO> _TypeOrderQuerySumDTO_fields = {
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "costTotal": (
    getter: (data) => data.costTotal,
    setter: (data, value) => data.costTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.costTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.costTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.costTotal = copyer(oldData.costTotal);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "discountTotal": (
    getter: (data) => data.discountTotal,
    setter: (data, value) => data.discountTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountTotal = copyer(oldData.discountTotal);
    },
  ),
  "doneBillTotal": (
    getter: (data) => data.doneBillTotal,
    setter: (data, value) => data.doneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneBillTotal = copyer(oldData.doneBillTotal);
    },
  ),
  "doneExecuteAmount": (
    getter: (data) => data.doneExecuteAmount,
    setter: (data, value) => data.doneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.doneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.doneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.doneExecuteAmount = copyer(oldData.doneExecuteAmount);
    },
  ),
  "hasFinishBillCount": (
    getter: (data) => data.hasFinishBillCount,
    setter: (data, value) => data.hasFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasFinishBillCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasFinishBillCount = copyer(oldData.hasFinishBillCount);
    },
  ),
  "hasNotFinishBillCount": (
    getter: (data) => data.hasNotFinishBillCount,
    setter: (data, value) => data.hasNotFinishBillCount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasNotFinishBillCount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasNotFinishBillCount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasNotFinishBillCount = copyer(oldData.hasNotFinishBillCount);
    },
  ),
  "payCashTotal": (
    getter: (data) => data.payCashTotal,
    setter: (data, value) => data.payCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payCashTotal = copyer(oldData.payCashTotal);
    },
  ),
  "payDiscount": (
    getter: (data) => data.payDiscount,
    setter: (data, value) => data.payDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.payDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.payDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.payDiscount = copyer(oldData.payDiscount);
    },
  ),
  "preTaxTotal": (
    getter: (data) => data.preTaxTotal,
    setter: (data, value) => data.preTaxTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.preTaxTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.preTaxTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.preTaxTotal = copyer(oldData.preTaxTotal);
    },
  ),
  "profitRate": (
    getter: (data) => data.profitRate,
    setter: (data, value) => data.profitRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitRate = copyer(oldData.profitRate);
    },
  ),
  "profitTotal": (
    getter: (data) => data.profitTotal,
    setter: (data, value) => data.profitTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.profitTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.profitTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.profitTotal = copyer(oldData.profitTotal);
    },
  ),
  "receiveCashTotal": (
    getter: (data) => data.receiveCashTotal,
    setter: (data, value) => data.receiveCashTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveCashTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveCashTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveCashTotal = copyer(oldData.receiveCashTotal);
    },
  ),
  "receiveDiscount": (
    getter: (data) => data.receiveDiscount,
    setter: (data, value) => data.receiveDiscount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.receiveDiscount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.receiveDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.receiveDiscount = copyer(oldData.receiveDiscount);
    },
  ),
  "spendAdvancePayable": (
    getter: (data) => data.spendAdvancePayable,
    setter: (data, value) => data.spendAdvancePayable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvancePayable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvancePayable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvancePayable = copyer(oldData.spendAdvancePayable);
    },
  ),
  "spendAdvanceReceivable": (
    getter: (data) => data.spendAdvanceReceivable,
    setter: (data, value) => data.spendAdvanceReceivable = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.spendAdvanceReceivable);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.spendAdvanceReceivable = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.spendAdvanceReceivable = copyer(oldData.spendAdvanceReceivable);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
  "totalAmount": (
    getter: (data) => data.totalAmount,
    setter: (data, value) => data.totalAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.totalAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.totalAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.totalAmount = copyer(oldData.totalAmount);
    },
  ),
  "undoneBillTotal": (
    getter: (data) => data.undoneBillTotal,
    setter: (data, value) => data.undoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneBillTotal = copyer(oldData.undoneBillTotal);
    },
  ),
  "undoneExecuteAmount": (
    getter: (data) => data.undoneExecuteAmount,
    setter: (data, value) => data.undoneExecuteAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.undoneExecuteAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.undoneExecuteAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.undoneExecuteAmount = copyer(oldData.undoneExecuteAmount);
    },
  ),
};

class TypeOrderQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderQuerySumDTO({
    this.billTotal,
    this.costTotal,
    this.count,
    this.discountTotal,
    this.doneBillTotal,
    this.doneExecuteAmount,
    this.hasFinishBillCount,
    this.hasNotFinishBillCount,
    this.payCashTotal,
    this.payDiscount,
    this.preTaxTotal,
    this.profitRate,
    this.profitTotal,
    this.receiveCashTotal,
    this.receiveDiscount,
    this.spendAdvancePayable,
    this.spendAdvanceReceivable,
    this.total,
    this.totalAmount,
    this.undoneBillTotal,
    this.undoneExecuteAmount
  });

  static TypeOrderQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderQuerySumDTO? deepCopy(TypeOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billTotal;

  String? costTotal;

  int? count;

  String? discountTotal;

  String? doneBillTotal;

  String? doneExecuteAmount;

  int? hasFinishBillCount;

  int? hasNotFinishBillCount;

  String? payCashTotal;

  String? payDiscount;

  String? preTaxTotal;

  String? profitRate;

  String? profitTotal;

  String? receiveCashTotal;

  String? receiveDiscount;

  String? spendAdvancePayable;

  String? spendAdvanceReceivable;

  String? total;

  String? totalAmount;

  String? undoneBillTotal;

  String? undoneExecuteAmount;

}

class FTypeOrderSourceOrderItem extends IDataField {
  static const orderId = FTypeOrderSourceOrderItem('orderId');
  static const orderNumber = FTypeOrderSourceOrderItem('orderNumber');
  static const orderType = FTypeOrderSourceOrderItem('orderType');
  const FTypeOrderSourceOrderItem(super.key);
}

final FieldReflectInfo<TypeOrderSourceOrderItem> _TypeOrderSourceOrderItem_fields = {
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
};

class TypeOrderSourceOrderItem extends IDataBasic implements IDataDynamic {
  TypeOrderSourceOrderItem({
    this.orderId,
    this.orderNumber,
    this.orderType
  });

  static TypeOrderSourceOrderItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSourceOrderItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSourceOrderItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSourceOrderItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSourceOrderItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSourceOrderItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSourceOrderItem? deepCopy(TypeOrderSourceOrderItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSourceOrderItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSourceOrderItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSourceOrderItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSourceOrderItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSourceOrderItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? orderId;

  String? orderNumber;

  TypeEnumOrderType? orderType;

}

class FTypeOrderSubOrder extends IDataField {
  static const billTotal = FTypeOrderSubOrder('billTotal');
  static const discountBill = FTypeOrderSubOrder('discountBill');
  static const id = FTypeOrderSubOrder('id');
  static const moneyBill = FTypeOrderSubOrder('moneyBill');
  static const remark = FTypeOrderSubOrder('remark');
  static const subOrderBillType = FTypeOrderSubOrder('subOrderBillType');
  static const subOrderContactId = FTypeOrderSubOrder('subOrderContactId');
  static const subOrderId = FTypeOrderSubOrder('subOrderId');
  static const subOrderInfo = FTypeOrderSubOrder('subOrderInfo');
  static const subOrderNumber = FTypeOrderSubOrder('subOrderNumber');
  static const subOrderType = FTypeOrderSubOrder('subOrderType');
  const FTypeOrderSubOrder(super.key);
}

final FieldReflectInfo<TypeOrderSubOrder> _TypeOrderSubOrder_fields = {
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "discountBill": (
    getter: (data) => data.discountBill,
    setter: (data, value) => data.discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountBill = copyer(oldData.discountBill);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "moneyBill": (
    getter: (data) => data.moneyBill,
    setter: (data, value) => data.moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.moneyBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.moneyBill = copyer(oldData.moneyBill);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "subOrderBillType": (
    getter: (data) => data.subOrderBillType,
    setter: (data, value) => data.subOrderBillType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data.subOrderBillType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data.subOrderBillType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderBillType.deepCopy;
      newData.subOrderBillType = copyer(oldData.subOrderBillType);
    },
  ),
  "subOrderContactId": (
    getter: (data) => data.subOrderContactId,
    setter: (data, value) => data.subOrderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.subOrderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.subOrderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.subOrderContactId = copyer(oldData.subOrderContactId);
    },
  ),
  "subOrderId": (
    getter: (data) => data.subOrderId,
    setter: (data, value) => data.subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.subOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.subOrderId = copyer(oldData.subOrderId);
    },
  ),
  "subOrderInfo": (
    getter: (data) => data.subOrderInfo,
    setter: (data, value) => data.subOrderInfo = value as TypeAutoInjectLiteOrder?,
    toDynamic: (data) {
      final formatter = TypeAutoInjectLiteOrder.toDynamic;
      return formatter(data.subOrderInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAutoInjectLiteOrder.fromDynamic;
      data.subOrderInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAutoInjectLiteOrder.deepCopy;
      newData.subOrderInfo = copyer(oldData.subOrderInfo);
    },
  ),
  "subOrderNumber": (
    getter: (data) => data.subOrderNumber,
    setter: (data, value) => data.subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderNumber = copyer(oldData.subOrderNumber);
    },
  ),
  "subOrderType": (
    getter: (data) => data.subOrderType,
    setter: (data, value) => data.subOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.subOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.subOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.subOrderType = copyer(oldData.subOrderType);
    },
  ),
};

class TypeOrderSubOrder extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrder({
    this.billTotal,
    this.discountBill,
    this.id,
    this.moneyBill,
    this.remark,
    this.subOrderBillType,
    this.subOrderContactId,
    this.subOrderId,
    this.subOrderInfo,
    this.subOrderNumber,
    this.subOrderType
  });

  static TypeOrderSubOrder? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrder();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrder_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrder: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrder? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrder_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSubOrder? deepCopy(TypeOrderSubOrder? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSubOrder();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSubOrder_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSubOrder copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrder_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrder_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billTotal;

  String? discountBill;

  int? id;

  String? moneyBill;

  String? remark;

  TypeEnumOrderBillType? subOrderBillType;

  int? subOrderContactId;

  int? subOrderId;

  TypeAutoInjectLiteOrder? subOrderInfo;

  String? subOrderNumber;

  TypeEnumOrderType? subOrderType;

}

class FTypeOrderSubOrderQueryDTO extends IDataField {
  static const data = FTypeOrderSubOrderQueryDTO('data');
  static const pageIndex = FTypeOrderSubOrderQueryDTO('pageIndex');
  static const pageSize = FTypeOrderSubOrderQueryDTO('pageSize');
  static const sum = FTypeOrderSubOrderQueryDTO('sum');
  const FTypeOrderSubOrderQueryDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQueryDTO> _TypeOrderSubOrderQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOrderSubOrderQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOrderSubOrderQueryDataDTO>((single){
        final handler = TypeOrderSubOrderQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOrderSubOrderQueryDataDTO>((single){
        final handler = TypeOrderSubOrderQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOrderSubOrderQueryDataDTO>((single){
        final handler = TypeOrderSubOrderQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeOrderSubOrderQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeOrderSubOrderQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeOrderSubOrderQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeOrderSubOrderQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeOrderSubOrderQueryDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeOrderSubOrderQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSubOrderQueryDTO? deepCopy(TypeOrderSubOrderQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSubOrderQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSubOrderQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSubOrderQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeOrderSubOrderQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeOrderSubOrderQuerySumDTO? sum;

}

class FTypeOrderSubOrderQueryDataDTO extends IDataField {
  static const billTotal = FTypeOrderSubOrderQueryDataDTO('billTotal');
  static const discountBill = FTypeOrderSubOrderQueryDataDTO('discountBill');
  static const id = FTypeOrderSubOrderQueryDataDTO('id');
  static const moneyBill = FTypeOrderSubOrderQueryDataDTO('moneyBill');
  static const orderBillType = FTypeOrderSubOrderQueryDataDTO('orderBillType');
  static const orderContactId = FTypeOrderSubOrderQueryDataDTO('orderContactId');
  static const orderContactName = FTypeOrderSubOrderQueryDataDTO('orderContactName');
  static const orderDate = FTypeOrderSubOrderQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeOrderSubOrderQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeOrderSubOrderQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeOrderSubOrderQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeOrderSubOrderQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeOrderSubOrderQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeOrderSubOrderQueryDataDTO('orderNumber');
  static const orderPayCashAccountId = FTypeOrderSubOrderQueryDataDTO('orderPayCashAccountId');
  static const orderPayCashAccountName = FTypeOrderSubOrderQueryDataDTO('orderPayCashAccountName');
  static const orderReceiveCashAccountId = FTypeOrderSubOrderQueryDataDTO('orderReceiveCashAccountId');
  static const orderReceiveCashAccountName = FTypeOrderSubOrderQueryDataDTO('orderReceiveCashAccountName');
  static const orderRedState = FTypeOrderSubOrderQueryDataDTO('orderRedState');
  static const orderRemark = FTypeOrderSubOrderQueryDataDTO('orderRemark');
  static const orderState = FTypeOrderSubOrderQueryDataDTO('orderState');
  static const orderType = FTypeOrderSubOrderQueryDataDTO('orderType');
  static const remark = FTypeOrderSubOrderQueryDataDTO('remark');
  static const subOrderBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderBillTotal');
  static const subOrderDoneBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderDoneBillTotal');
  static const subOrderId = FTypeOrderSubOrderQueryDataDTO('subOrderId');
  static const subOrderNumber = FTypeOrderSubOrderQueryDataDTO('subOrderNumber');
  static const subOrderStoreId = FTypeOrderSubOrderQueryDataDTO('subOrderStoreId');
  static const subOrderStoreName = FTypeOrderSubOrderQueryDataDTO('subOrderStoreName');
  static const subOrderType = FTypeOrderSubOrderQueryDataDTO('subOrderType');
  static const subOrderUnDoneBillTotal = FTypeOrderSubOrderQueryDataDTO('subOrderUnDoneBillTotal');
  const FTypeOrderSubOrderQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQueryDataDTO> _TypeOrderSubOrderQueryDataDTO_fields = {
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "discountBill": (
    getter: (data) => data.discountBill,
    setter: (data, value) => data.discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountBill = copyer(oldData.discountBill);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "moneyBill": (
    getter: (data) => data.moneyBill,
    setter: (data, value) => data.moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.moneyBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.moneyBill = copyer(oldData.moneyBill);
    },
  ),
  "orderBillType": (
    getter: (data) => data.orderBillType,
    setter: (data, value) => data.orderBillType = value as TypeEnumOrderBillType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderBillType.toDynamic;
      return formatter(data.orderBillType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderBillType.fromDynamic;
      data.orderBillType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderBillType.deepCopy;
      newData.orderBillType = copyer(oldData.orderBillType);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderPayCashAccountId": (
    getter: (data) => data.orderPayCashAccountId,
    setter: (data, value) => data.orderPayCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderPayCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderPayCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderPayCashAccountId = copyer(oldData.orderPayCashAccountId);
    },
  ),
  "orderPayCashAccountName": (
    getter: (data) => data.orderPayCashAccountName,
    setter: (data, value) => data.orderPayCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderPayCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderPayCashAccountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderPayCashAccountName = copyer(oldData.orderPayCashAccountName);
    },
  ),
  "orderReceiveCashAccountId": (
    getter: (data) => data.orderReceiveCashAccountId,
    setter: (data, value) => data.orderReceiveCashAccountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderReceiveCashAccountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderReceiveCashAccountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderReceiveCashAccountId = copyer(oldData.orderReceiveCashAccountId);
    },
  ),
  "orderReceiveCashAccountName": (
    getter: (data) => data.orderReceiveCashAccountName,
    setter: (data, value) => data.orderReceiveCashAccountName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderReceiveCashAccountName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderReceiveCashAccountName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderReceiveCashAccountName = copyer(oldData.orderReceiveCashAccountName);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderRemark": (
    getter: (data) => data.orderRemark,
    setter: (data, value) => data.orderRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderRemark = copyer(oldData.orderRemark);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "subOrderBillTotal": (
    getter: (data) => data.subOrderBillTotal,
    setter: (data, value) => data.subOrderBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderBillTotal = copyer(oldData.subOrderBillTotal);
    },
  ),
  "subOrderDoneBillTotal": (
    getter: (data) => data.subOrderDoneBillTotal,
    setter: (data, value) => data.subOrderDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderDoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderDoneBillTotal = copyer(oldData.subOrderDoneBillTotal);
    },
  ),
  "subOrderId": (
    getter: (data) => data.subOrderId,
    setter: (data, value) => data.subOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.subOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.subOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.subOrderId = copyer(oldData.subOrderId);
    },
  ),
  "subOrderNumber": (
    getter: (data) => data.subOrderNumber,
    setter: (data, value) => data.subOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderNumber = copyer(oldData.subOrderNumber);
    },
  ),
  "subOrderStoreId": (
    getter: (data) => data.subOrderStoreId,
    setter: (data, value) => data.subOrderStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.subOrderStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.subOrderStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.subOrderStoreId = copyer(oldData.subOrderStoreId);
    },
  ),
  "subOrderStoreName": (
    getter: (data) => data.subOrderStoreName,
    setter: (data, value) => data.subOrderStoreName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderStoreName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderStoreName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderStoreName = copyer(oldData.subOrderStoreName);
    },
  ),
  "subOrderType": (
    getter: (data) => data.subOrderType,
    setter: (data, value) => data.subOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.subOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.subOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.subOrderType = copyer(oldData.subOrderType);
    },
  ),
  "subOrderUnDoneBillTotal": (
    getter: (data) => data.subOrderUnDoneBillTotal,
    setter: (data, value) => data.subOrderUnDoneBillTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.subOrderUnDoneBillTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.subOrderUnDoneBillTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.subOrderUnDoneBillTotal = copyer(oldData.subOrderUnDoneBillTotal);
    },
  ),
};

class TypeOrderSubOrderQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQueryDataDTO({
    this.billTotal,
    this.discountBill,
    this.id,
    this.moneyBill,
    this.orderBillType,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderPayCashAccountId,
    this.orderPayCashAccountName,
    this.orderReceiveCashAccountId,
    this.orderReceiveCashAccountName,
    this.orderRedState,
    this.orderRemark,
    this.orderState,
    this.orderType,
    this.remark,
    this.subOrderBillTotal,
    this.subOrderDoneBillTotal,
    this.subOrderId,
    this.subOrderNumber,
    this.subOrderStoreId,
    this.subOrderStoreName,
    this.subOrderType,
    this.subOrderUnDoneBillTotal
  });

  static TypeOrderSubOrderQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSubOrderQueryDataDTO? deepCopy(TypeOrderSubOrderQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSubOrderQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSubOrderQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSubOrderQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billTotal;

  String? discountBill;

  int? id;

  String? moneyBill;

  TypeEnumOrderBillType? orderBillType;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  int? orderPayCashAccountId;

  String? orderPayCashAccountName;

  int? orderReceiveCashAccountId;

  String? orderReceiveCashAccountName;

  TypeEnumOrderRedState? orderRedState;

  String? orderRemark;

  TypeEnumOrderState? orderState;

  TypeEnumOrderType? orderType;

  String? remark;

  String? subOrderBillTotal;

  String? subOrderDoneBillTotal;

  int? subOrderId;

  String? subOrderNumber;

  int? subOrderStoreId;

  String? subOrderStoreName;

  TypeEnumOrderType? subOrderType;

  String? subOrderUnDoneBillTotal;

}

class FTypeOrderSubOrderQuerySumDTO extends IDataField {
  static const billTotal = FTypeOrderSubOrderQuerySumDTO('billTotal');
  static const count = FTypeOrderSubOrderQuerySumDTO('count');
  static const discountBill = FTypeOrderSubOrderQuerySumDTO('discountBill');
  static const moneyBill = FTypeOrderSubOrderQuerySumDTO('moneyBill');
  const FTypeOrderSubOrderQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeOrderSubOrderQuerySumDTO> _TypeOrderSubOrderQuerySumDTO_fields = {
  "billTotal": (
    getter: (data) => data.billTotal,
    setter: (data, value) => data.billTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.billTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.billTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.billTotal = copyer(oldData.billTotal);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "discountBill": (
    getter: (data) => data.discountBill,
    setter: (data, value) => data.discountBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.discountBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.discountBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.discountBill = copyer(oldData.discountBill);
    },
  ),
  "moneyBill": (
    getter: (data) => data.moneyBill,
    setter: (data, value) => data.moneyBill = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.moneyBill);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.moneyBill = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.moneyBill = copyer(oldData.moneyBill);
    },
  ),
};

class TypeOrderSubOrderQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeOrderSubOrderQuerySumDTO({
    this.billTotal,
    this.count,
    this.discountBill,
    this.moneyBill
  });

  static TypeOrderSubOrderQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubOrderQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubOrderQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSubOrderQuerySumDTO? deepCopy(TypeOrderSubOrderQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSubOrderQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSubOrderQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSubOrderQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubOrderQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? billTotal;

  int? count;

  String? discountBill;

  String? moneyBill;

}

class FTypeOrderSubject extends IDataField {
  static const accountId = FTypeOrderSubject('accountId');
  static const accountInfo = FTypeOrderSubject('accountInfo');
  static const auxiliaryContactId = FTypeOrderSubject('auxiliaryContactId');
  static const auxiliaryContactInfo = FTypeOrderSubject('auxiliaryContactInfo');
  static const auxiliaryEmployeeId = FTypeOrderSubject('auxiliaryEmployeeId');
  static const auxiliaryEmployeeInfo = FTypeOrderSubject('auxiliaryEmployeeInfo');
  static const auxiliaryStoreId = FTypeOrderSubject('auxiliaryStoreId');
  static const auxiliaryStoreInfo = FTypeOrderSubject('auxiliaryStoreInfo');
  static const id = FTypeOrderSubject('id');
  static const remark = FTypeOrderSubject('remark');
  static const total = FTypeOrderSubject('total');
  const FTypeOrderSubject(super.key);
}

final FieldReflectInfo<TypeOrderSubject> _TypeOrderSubject_fields = {
  "accountId": (
    getter: (data) => data.accountId,
    setter: (data, value) => data.accountId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.accountId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.accountId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.accountId = copyer(oldData.accountId);
    },
  ),
  "accountInfo": (
    getter: (data) => data.accountInfo,
    setter: (data, value) => data.accountInfo = value as TypeAccount?,
    toDynamic: (data) {
      final formatter = TypeAccount.toDynamic;
      return formatter(data.accountInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeAccount.fromDynamic;
      data.accountInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAccount.deepCopy;
      newData.accountInfo = copyer(oldData.accountInfo);
    },
  ),
  "auxiliaryContactId": (
    getter: (data) => data.auxiliaryContactId,
    setter: (data, value) => data.auxiliaryContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryContactId = copyer(oldData.auxiliaryContactId);
    },
  ),
  "auxiliaryContactInfo": (
    getter: (data) => data.auxiliaryContactInfo,
    setter: (data, value) => data.auxiliaryContactInfo = value as TypeContact?,
    toDynamic: (data) {
      final formatter = TypeContact.toDynamic;
      return formatter(data.auxiliaryContactInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeContact.fromDynamic;
      data.auxiliaryContactInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeContact.deepCopy;
      newData.auxiliaryContactInfo = copyer(oldData.auxiliaryContactInfo);
    },
  ),
  "auxiliaryEmployeeId": (
    getter: (data) => data.auxiliaryEmployeeId,
    setter: (data, value) => data.auxiliaryEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryEmployeeId = copyer(oldData.auxiliaryEmployeeId);
    },
  ),
  "auxiliaryEmployeeInfo": (
    getter: (data) => data.auxiliaryEmployeeInfo,
    setter: (data, value) => data.auxiliaryEmployeeInfo = value as TypeEmployee?,
    toDynamic: (data) {
      final formatter = TypeEmployee.toDynamic;
      return formatter(data.auxiliaryEmployeeInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeEmployee.fromDynamic;
      data.auxiliaryEmployeeInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEmployee.deepCopy;
      newData.auxiliaryEmployeeInfo = copyer(oldData.auxiliaryEmployeeInfo);
    },
  ),
  "auxiliaryStoreId": (
    getter: (data) => data.auxiliaryStoreId,
    setter: (data, value) => data.auxiliaryStoreId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.auxiliaryStoreId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.auxiliaryStoreId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.auxiliaryStoreId = copyer(oldData.auxiliaryStoreId);
    },
  ),
  "auxiliaryStoreInfo": (
    getter: (data) => data.auxiliaryStoreInfo,
    setter: (data, value) => data.auxiliaryStoreInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.auxiliaryStoreInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.auxiliaryStoreInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.auxiliaryStoreInfo = copyer(oldData.auxiliaryStoreInfo);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeOrderSubject extends IDataBasic implements IDataDynamic {
  TypeOrderSubject({
    this.accountId,
    this.accountInfo,
    this.auxiliaryContactId,
    this.auxiliaryContactInfo,
    this.auxiliaryEmployeeId,
    this.auxiliaryEmployeeInfo,
    this.auxiliaryStoreId,
    this.auxiliaryStoreInfo,
    this.id,
    this.remark,
    this.total
  });

  static TypeOrderSubject? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOrderSubject();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOrderSubject_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOrderSubject: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOrderSubject? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOrderSubject_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOrderSubject? deepCopy(TypeOrderSubject? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOrderSubject();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOrderSubject_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOrderSubject copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOrderSubject_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOrderSubject_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? accountId;

  TypeAccount? accountInfo;

  int? auxiliaryContactId;

  TypeContact? auxiliaryContactInfo;

  int? auxiliaryEmployeeId;

  TypeEmployee? auxiliaryEmployeeInfo;

  int? auxiliaryStoreId;

  TypeStore? auxiliaryStoreInfo;

  int? id;

  String? remark;

  String? total;

}

class FTypeOutput extends IDataField {
  static const constraints = FTypeOutput('constraints');
  static const state = FTypeOutput('state');
  const FTypeOutput(super.key);
}

final FieldReflectInfo<TypeOutput> _TypeOutput_fields = {
  "constraints": (
    getter: (data) => data.constraints,
    setter: (data, value) => data.constraints = value as List<TypeCombineConstraint>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeCombineConstraint>((single){
        final handler = TypeCombineConstraint.toDynamic;
        return handler(single)!;
      });
      return formatter(data.constraints);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeCombineConstraint>((single){
        final handler = TypeCombineConstraint.fromDynamic;
        return handler(single)!;
      });
      data.constraints = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeCombineConstraint>((single){
        final handler = TypeCombineConstraint.deepCopy;
        return handler(single)!;
      });
      newData.constraints = copyer(oldData.constraints);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeColumnState?,
    toDynamic: (data) {
      final formatter = TypeColumnState.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeColumnState.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeColumnState.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
};

class TypeOutput extends IDataBasic implements IDataDynamic {
  TypeOutput({
    this.constraints,
    this.state
  });

  static TypeOutput? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeOutput();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeOutput_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeOutput: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeOutput? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeOutput_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeOutput? deepCopy(TypeOutput? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeOutput();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeOutput_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeOutput copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeOutput_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeOutput_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeCombineConstraint>? constraints;

  TypeColumnState? state;

}

class FTypePageListAccount extends IDataField {
  static const count = FTypePageListAccount('count');
  static const data = FTypePageListAccount('data');
  static const pageIndex = FTypePageListAccount('pageIndex');
  static const pageSize = FTypePageListAccount('pageSize');
  const FTypePageListAccount(super.key);
}

final FieldReflectInfo<TypePageListAccount> _TypePageListAccount_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAccount>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAccount>((single){
        final handler = TypeAccount.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
        final handler = TypeAccount.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAccount>((single){
        final handler = TypeAccount.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListAccount extends IDataBasic implements IDataDynamic {
  TypePageListAccount({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListAccount? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAccount();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAccount_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAccount: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAccount? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAccount_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListAccount? deepCopy(TypePageListAccount? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListAccount();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListAccount_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListAccount copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAccount_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAccount_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeAccount>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListAssembleTemplate extends IDataField {
  static const count = FTypePageListAssembleTemplate('count');
  static const data = FTypePageListAssembleTemplate('data');
  static const pageIndex = FTypePageListAssembleTemplate('pageIndex');
  static const pageSize = FTypePageListAssembleTemplate('pageSize');
  const FTypePageListAssembleTemplate(super.key);
}

final FieldReflectInfo<TypePageListAssembleTemplate> _TypePageListAssembleTemplate_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAssembleTemplate>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAssembleTemplate>((single){
        final handler = TypeAssembleTemplate.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAssembleTemplate>((single){
        final handler = TypeAssembleTemplate.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAssembleTemplate>((single){
        final handler = TypeAssembleTemplate.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListAssembleTemplate extends IDataBasic implements IDataDynamic {
  TypePageListAssembleTemplate({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListAssembleTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAssembleTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAssembleTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAssembleTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAssembleTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListAssembleTemplate? deepCopy(TypePageListAssembleTemplate? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListAssembleTemplate();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListAssembleTemplate_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListAssembleTemplate copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAssembleTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeAssembleTemplate>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListAttachment extends IDataField {
  static const count = FTypePageListAttachment('count');
  static const data = FTypePageListAttachment('data');
  static const pageIndex = FTypePageListAttachment('pageIndex');
  static const pageSize = FTypePageListAttachment('pageSize');
  const FTypePageListAttachment(super.key);
}

final FieldReflectInfo<TypePageListAttachment> _TypePageListAttachment_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeAttachment>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAttachment>((single){
        final handler = TypeAttachment.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAttachment>((single){
        final handler = TypeAttachment.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAttachment>((single){
        final handler = TypeAttachment.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListAttachment extends IDataBasic implements IDataDynamic {
  TypePageListAttachment({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListAttachment? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListAttachment();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListAttachment_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListAttachment: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListAttachment? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListAttachment_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListAttachment? deepCopy(TypePageListAttachment? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListAttachment();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListAttachment_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListAttachment copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListAttachment_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListAttachment_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeAttachment>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListBackendTask extends IDataField {
  static const count = FTypePageListBackendTask('count');
  static const data = FTypePageListBackendTask('data');
  static const pageIndex = FTypePageListBackendTask('pageIndex');
  static const pageSize = FTypePageListBackendTask('pageSize');
  const FTypePageListBackendTask(super.key);
}

final FieldReflectInfo<TypePageListBackendTask> _TypePageListBackendTask_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeBackendTask>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeBackendTask>((single){
        final handler = TypeBackendTask.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeBackendTask>((single){
        final handler = TypeBackendTask.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeBackendTask>((single){
        final handler = TypeBackendTask.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListBackendTask extends IDataBasic implements IDataDynamic {
  TypePageListBackendTask({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListBackendTask? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListBackendTask();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListBackendTask_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListBackendTask: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListBackendTask? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListBackendTask_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListBackendTask? deepCopy(TypePageListBackendTask? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListBackendTask();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListBackendTask_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListBackendTask copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListBackendTask_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListBackendTask_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeBackendTask>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListContact extends IDataField {
  static const count = FTypePageListContact('count');
  static const data = FTypePageListContact('data');
  static const pageIndex = FTypePageListContact('pageIndex');
  static const pageSize = FTypePageListContact('pageSize');
  const FTypePageListContact(super.key);
}

final FieldReflectInfo<TypePageListContact> _TypePageListContact_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeContact>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeContact>((single){
        final handler = TypeContact.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
        final handler = TypeContact.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeContact>((single){
        final handler = TypeContact.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListContact extends IDataBasic implements IDataDynamic {
  TypePageListContact({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListContact? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListContact();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListContact_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListContact: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListContact? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListContact_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListContact? deepCopy(TypePageListContact? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListContact();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListContact_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListContact copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListContact_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListContact_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeContact>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListEmployee extends IDataField {
  static const count = FTypePageListEmployee('count');
  static const data = FTypePageListEmployee('data');
  static const pageIndex = FTypePageListEmployee('pageIndex');
  static const pageSize = FTypePageListEmployee('pageSize');
  const FTypePageListEmployee(super.key);
}

final FieldReflectInfo<TypePageListEmployee> _TypePageListEmployee_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeEmployee>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeEmployee>((single){
        final handler = TypeEmployee.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeEmployee>((single){
        final handler = TypeEmployee.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeEmployee>((single){
        final handler = TypeEmployee.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListEmployee extends IDataBasic implements IDataDynamic {
  TypePageListEmployee({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListEmployee? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListEmployee();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListEmployee_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListEmployee: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListEmployee? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListEmployee_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListEmployee? deepCopy(TypePageListEmployee? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListEmployee();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListEmployee_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListEmployee copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListEmployee_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListEmployee_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeEmployee>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListItem extends IDataField {
  static const count = FTypePageListItem('count');
  static const data = FTypePageListItem('data');
  static const pageIndex = FTypePageListItem('pageIndex');
  static const pageSize = FTypePageListItem('pageSize');
  const FTypePageListItem(super.key);
}

final FieldReflectInfo<TypePageListItem> _TypePageListItem_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeItem>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeItem>((single){
        final handler = TypeItem.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
        final handler = TypeItem.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeItem>((single){
        final handler = TypeItem.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListItem extends IDataBasic implements IDataDynamic {
  TypePageListItem({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListItem? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListItem();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListItem_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListItem: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListItem? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListItem_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListItem? deepCopy(TypePageListItem? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListItem();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListItem_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListItem copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListItem_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListItem_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeItem>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListOperator extends IDataField {
  static const count = FTypePageListOperator('count');
  static const data = FTypePageListOperator('data');
  static const pageIndex = FTypePageListOperator('pageIndex');
  static const pageSize = FTypePageListOperator('pageSize');
  const FTypePageListOperator(super.key);
}

final FieldReflectInfo<TypePageListOperator> _TypePageListOperator_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeOperator>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeOperator>((single){
        final handler = TypeOperator.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeOperator>((single){
        final handler = TypeOperator.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeOperator>((single){
        final handler = TypeOperator.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListOperator extends IDataBasic implements IDataDynamic {
  TypePageListOperator({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListOperator? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListOperator();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListOperator_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListOperator: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListOperator? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListOperator_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListOperator? deepCopy(TypePageListOperator? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListOperator();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListOperator_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListOperator copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListOperator_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListOperator_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeOperator>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListStore extends IDataField {
  static const count = FTypePageListStore('count');
  static const data = FTypePageListStore('data');
  static const pageIndex = FTypePageListStore('pageIndex');
  static const pageSize = FTypePageListStore('pageSize');
  const FTypePageListStore(super.key);
}

final FieldReflectInfo<TypePageListStore> _TypePageListStore_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStore>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStore>((single){
        final handler = TypeStore.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
        final handler = TypeStore.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStore>((single){
        final handler = TypeStore.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListStore extends IDataBasic implements IDataDynamic {
  TypePageListStore({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListStore? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListStore();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListStore_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListStore: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListStore? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListStore_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListStore? deepCopy(TypePageListStore? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListStore();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListStore_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListStore copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListStore_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListStore_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeStore>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePageListUnit extends IDataField {
  static const count = FTypePageListUnit('count');
  static const data = FTypePageListUnit('data');
  static const pageIndex = FTypePageListUnit('pageIndex');
  static const pageSize = FTypePageListUnit('pageSize');
  const FTypePageListUnit(super.key);
}

final FieldReflectInfo<TypePageListUnit> _TypePageListUnit_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeUnit>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeUnit>((single){
        final handler = TypeUnit.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeUnit>((single){
        final handler = TypeUnit.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeUnit>((single){
        final handler = TypeUnit.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
};

class TypePageListUnit extends IDataBasic implements IDataDynamic {
  TypePageListUnit({
    this.count,
    this.data,
    this.pageIndex,
    this.pageSize
  });

  static TypePageListUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePageListUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePageListUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePageListUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePageListUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePageListUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePageListUnit? deepCopy(TypePageListUnit? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePageListUnit();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePageListUnit_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePageListUnit copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePageListUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePageListUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  List<TypeUnit>? data;

  int? pageIndex;

  int? pageSize;

}

class FTypePriceTrack extends IDataField {
  static const contactId = FTypePriceTrack('contactId');
  static const createTime = FTypePriceTrack('createTime');
  static const id = FTypePriceTrack('id');
  static const itemId = FTypePriceTrack('itemId');
  static const lastTrackPrice = FTypePriceTrack('lastTrackPrice');
  static const lastTrackTime = FTypePriceTrack('lastTrackTime');
  static const mode = FTypePriceTrack('mode');
  static const modifyTime = FTypePriceTrack('modifyTime');
  static const sourceOrderId = FTypePriceTrack('sourceOrderId');
  static const sourceOrderNumber = FTypePriceTrack('sourceOrderNumber');
  static const sourceOrderType = FTypePriceTrack('sourceOrderType');
  const FTypePriceTrack(super.key);
}

final FieldReflectInfo<TypePriceTrack> _TypePriceTrack_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "lastTrackPrice": (
    getter: (data) => data.lastTrackPrice,
    setter: (data, value) => data.lastTrackPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.lastTrackPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.lastTrackPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.lastTrackPrice = copyer(oldData.lastTrackPrice);
    },
  ),
  "lastTrackTime": (
    getter: (data) => data.lastTrackTime,
    setter: (data, value) => data.lastTrackTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.lastTrackTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.lastTrackTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.lastTrackTime = copyer(oldData.lastTrackTime);
    },
  ),
  "mode": (
    getter: (data) => data.mode,
    setter: (data, value) => data.mode = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.mode);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.mode = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.mode = copyer(oldData.mode);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "sourceOrderId": (
    getter: (data) => data.sourceOrderId,
    setter: (data, value) => data.sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sourceOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sourceOrderId = copyer(oldData.sourceOrderId);
    },
  ),
  "sourceOrderNumber": (
    getter: (data) => data.sourceOrderNumber,
    setter: (data, value) => data.sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sourceOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sourceOrderNumber = copyer(oldData.sourceOrderNumber);
    },
  ),
  "sourceOrderType": (
    getter: (data) => data.sourceOrderType,
    setter: (data, value) => data.sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.sourceOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.sourceOrderType = copyer(oldData.sourceOrderType);
    },
  ),
};

class TypePriceTrack extends IDataBasic implements IDataDynamic {
  TypePriceTrack({
    this.contactId,
    this.createTime,
    this.id,
    this.itemId,
    this.lastTrackPrice,
    this.lastTrackTime,
    this.mode,
    this.modifyTime,
    this.sourceOrderId,
    this.sourceOrderNumber,
    this.sourceOrderType
  });

  static TypePriceTrack? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrack();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrack_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrack: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrack? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrack_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePriceTrack? deepCopy(TypePriceTrack? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePriceTrack();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePriceTrack_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePriceTrack copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrack_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrack_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  String? createTime;

  String? id;

  int? itemId;

  String? lastTrackPrice;

  String? lastTrackTime;

  int? mode;

  String? modifyTime;

  int? sourceOrderId;

  String? sourceOrderNumber;

  TypeEnumOrderType? sourceOrderType;

}

class FTypePriceTrackQueryDTO extends IDataField {
  static const data = FTypePriceTrackQueryDTO('data');
  static const pageIndex = FTypePriceTrackQueryDTO('pageIndex');
  static const pageSize = FTypePriceTrackQueryDTO('pageSize');
  static const sum = FTypePriceTrackQueryDTO('sum');
  const FTypePriceTrackQueryDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQueryDTO> _TypePriceTrackQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypePriceTrackQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypePriceTrackQueryDataDTO>((single){
        final handler = TypePriceTrackQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypePriceTrackQueryDataDTO>((single){
        final handler = TypePriceTrackQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypePriceTrackQueryDataDTO>((single){
        final handler = TypePriceTrackQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypePriceTrackQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypePriceTrackQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypePriceTrackQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypePriceTrackQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypePriceTrackQueryDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypePriceTrackQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePriceTrackQueryDTO? deepCopy(TypePriceTrackQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePriceTrackQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePriceTrackQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePriceTrackQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypePriceTrackQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypePriceTrackQuerySumDTO? sum;

}

class FTypePriceTrackQueryDataDTO extends IDataField {
  static const contactId = FTypePriceTrackQueryDataDTO('contactId');
  static const contactName = FTypePriceTrackQueryDataDTO('contactName');
  static const contactNumber = FTypePriceTrackQueryDataDTO('contactNumber');
  static const contactParentId = FTypePriceTrackQueryDataDTO('contactParentId');
  static const contactParentName = FTypePriceTrackQueryDataDTO('contactParentName');
  static const id = FTypePriceTrackQueryDataDTO('id');
  static const itemCommonUnitConvert = FTypePriceTrackQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypePriceTrackQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypePriceTrackQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypePriceTrackQueryDataDTO('itemId');
  static const itemIsEnabled = FTypePriceTrackQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypePriceTrackQueryDataDTO('itemModelRemark');
  static const itemName = FTypePriceTrackQueryDataDTO('itemName');
  static const itemNumber = FTypePriceTrackQueryDataDTO('itemNumber');
  static const itemRemark = FTypePriceTrackQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypePriceTrackQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypePriceTrackQueryDataDTO('itemUnitConvertDesc');
  static const lastTrackPrice = FTypePriceTrackQueryDataDTO('lastTrackPrice');
  static const lastTrackTime = FTypePriceTrackQueryDataDTO('lastTrackTime');
  static const sourceOrderId = FTypePriceTrackQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypePriceTrackQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypePriceTrackQueryDataDTO('sourceOrderType');
  const FTypePriceTrackQueryDataDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQueryDataDTO> _TypePriceTrackQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "contactNumber": (
    getter: (data) => data.contactNumber,
    setter: (data, value) => data.contactNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactNumber = copyer(oldData.contactNumber);
    },
  ),
  "contactParentId": (
    getter: (data) => data.contactParentId,
    setter: (data, value) => data.contactParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactParentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactParentId = copyer(oldData.contactParentId);
    },
  ),
  "contactParentName": (
    getter: (data) => data.contactParentName,
    setter: (data, value) => data.contactParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactParentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactParentName = copyer(oldData.contactParentName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "lastTrackPrice": (
    getter: (data) => data.lastTrackPrice,
    setter: (data, value) => data.lastTrackPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.lastTrackPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.lastTrackPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.lastTrackPrice = copyer(oldData.lastTrackPrice);
    },
  ),
  "lastTrackTime": (
    getter: (data) => data.lastTrackTime,
    setter: (data, value) => data.lastTrackTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.lastTrackTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.lastTrackTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.lastTrackTime = copyer(oldData.lastTrackTime);
    },
  ),
  "sourceOrderId": (
    getter: (data) => data.sourceOrderId,
    setter: (data, value) => data.sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sourceOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sourceOrderId = copyer(oldData.sourceOrderId);
    },
  ),
  "sourceOrderNumber": (
    getter: (data) => data.sourceOrderNumber,
    setter: (data, value) => data.sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sourceOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sourceOrderNumber = copyer(oldData.sourceOrderNumber);
    },
  ),
  "sourceOrderType": (
    getter: (data) => data.sourceOrderType,
    setter: (data, value) => data.sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.sourceOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.sourceOrderType = copyer(oldData.sourceOrderType);
    },
  ),
};

class TypePriceTrackQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQueryDataDTO({
    this.contactId,
    this.contactName,
    this.contactNumber,
    this.contactParentId,
    this.contactParentName,
    this.id,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemId,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemRemark,
    this.itemSpecsRemark,
    this.itemUnitConvertDesc,
    this.lastTrackPrice,
    this.lastTrackTime,
    this.sourceOrderId,
    this.sourceOrderNumber,
    this.sourceOrderType
  });

  static TypePriceTrackQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePriceTrackQueryDataDTO? deepCopy(TypePriceTrackQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePriceTrackQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePriceTrackQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePriceTrackQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  String? contactName;

  String? contactNumber;

  int? contactParentId;

  String? contactParentName;

  String? id;

  String? itemCommonUnitConvert;

  String? itemCommonUnitId;

  String? itemCommonUnitName;

  int? itemId;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  String? itemRemark;

  String? itemSpecsRemark;

  String? itemUnitConvertDesc;

  String? lastTrackPrice;

  String? lastTrackTime;

  int? sourceOrderId;

  String? sourceOrderNumber;

  TypeEnumOrderType? sourceOrderType;

}

class FTypePriceTrackQuerySumDTO extends IDataField {
  static const count = FTypePriceTrackQuerySumDTO('count');
  const FTypePriceTrackQuerySumDTO(super.key);
}

final FieldReflectInfo<TypePriceTrackQuerySumDTO> _TypePriceTrackQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
};

class TypePriceTrackQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypePriceTrackQuerySumDTO({
    this.count
  });

  static TypePriceTrackQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePriceTrackQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePriceTrackQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePriceTrackQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePriceTrackQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePriceTrackQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePriceTrackQuerySumDTO? deepCopy(TypePriceTrackQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePriceTrackQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePriceTrackQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePriceTrackQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePriceTrackQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePriceTrackQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

}

class FTypePrintTemplate extends IDataField {
  static const createTime = FTypePrintTemplate('createTime');
  static const id = FTypePrintTemplate('id');
  static const modifyTime = FTypePrintTemplate('modifyTime');
  static const name = FTypePrintTemplate('name');
  static const printScript = FTypePrintTemplate('printScript');
  static const sceneId = FTypePrintTemplate('sceneId');
  static const sortWeight = FTypePrintTemplate('sortWeight');
  static const templateScript = FTypePrintTemplate('templateScript');
  const FTypePrintTemplate(super.key);
}

final FieldReflectInfo<TypePrintTemplate> _TypePrintTemplate_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "printScript": (
    getter: (data) => data.printScript,
    setter: (data, value) => data.printScript = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.printScript);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.printScript = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.printScript = copyer(oldData.printScript);
    },
  ),
  "sceneId": (
    getter: (data) => data.sceneId,
    setter: (data, value) => data.sceneId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sceneId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sceneId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sceneId = copyer(oldData.sceneId);
    },
  ),
  "sortWeight": (
    getter: (data) => data.sortWeight,
    setter: (data, value) => data.sortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sortWeight = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sortWeight = copyer(oldData.sortWeight);
    },
  ),
  "templateScript": (
    getter: (data) => data.templateScript,
    setter: (data, value) => data.templateScript = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.templateScript);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.templateScript = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.templateScript = copyer(oldData.templateScript);
    },
  ),
};

class TypePrintTemplate extends IDataBasic implements IDataDynamic {
  TypePrintTemplate({
    this.createTime,
    this.id,
    this.modifyTime,
    this.name,
    this.printScript,
    this.sceneId,
    this.sortWeight,
    this.templateScript
  });

  static TypePrintTemplate? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypePrintTemplate();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypePrintTemplate_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypePrintTemplate: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypePrintTemplate? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypePrintTemplate_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypePrintTemplate? deepCopy(TypePrintTemplate? data) {
    if (data == null) {
      return null;
    }
    final newData = TypePrintTemplate();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypePrintTemplate_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypePrintTemplate copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypePrintTemplate_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypePrintTemplate_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? id;

  String? modifyTime;

  String? name;

  String? printScript;

  String? sceneId;

  int? sortWeight;

  String? templateScript;

}

class FTypeQueryCrossTabColumn extends IDataField {
  static const field = FTypeQueryCrossTabColumn('field');
  static const groupId = FTypeQueryCrossTabColumn('groupId');
  static const name = FTypeQueryCrossTabColumn('name');
  const FTypeQueryCrossTabColumn(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabColumn> _TypeQueryCrossTabColumn_fields = {
  "field": (
    getter: (data) => data.field,
    setter: (data, value) => data.field = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.field);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.field = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.field = copyer(oldData.field);
    },
  ),
  "groupId": (
    getter: (data) => data.groupId,
    setter: (data, value) => data.groupId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.groupId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.groupId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.groupId = copyer(oldData.groupId);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
};

class TypeQueryCrossTabColumn extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabColumn({
    this.field,
    this.groupId,
    this.name
  });

  static TypeQueryCrossTabColumn? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabColumn();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabColumn_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabColumn: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabColumn? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabColumn_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeQueryCrossTabColumn? deepCopy(TypeQueryCrossTabColumn? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeQueryCrossTabColumn();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeQueryCrossTabColumn_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeQueryCrossTabColumn copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabColumn_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabColumn_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? field;

  String? groupId;

  String? name;

}

class FTypeQueryCrossTabGroupColumn extends IDataField {
  static const beginDate = FTypeQueryCrossTabGroupColumn('beginDate');
  static const endDate = FTypeQueryCrossTabGroupColumn('endDate');
  static const id = FTypeQueryCrossTabGroupColumn('id');
  static const name = FTypeQueryCrossTabGroupColumn('name');
  const FTypeQueryCrossTabGroupColumn(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabGroupColumn> _TypeQueryCrossTabGroupColumn_fields = {
  "beginDate": (
    getter: (data) => data.beginDate,
    setter: (data, value) => data.beginDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginDate = copyer(oldData.beginDate);
    },
  ),
  "endDate": (
    getter: (data) => data.endDate,
    setter: (data, value) => data.endDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endDate = copyer(oldData.endDate);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
};

class TypeQueryCrossTabGroupColumn extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabGroupColumn({
    this.beginDate,
    this.endDate,
    this.id,
    this.name
  });

  static TypeQueryCrossTabGroupColumn? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabGroupColumn();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabGroupColumn_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabGroupColumn: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabGroupColumn? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabGroupColumn_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeQueryCrossTabGroupColumn? deepCopy(TypeQueryCrossTabGroupColumn? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeQueryCrossTabGroupColumn();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeQueryCrossTabGroupColumn_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeQueryCrossTabGroupColumn copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabGroupColumn_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabGroupColumn_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginDate;

  String? endDate;

  String? id;

  String? name;

}

class FTypeQueryCrossTabResult extends IDataField {
  static const beginDate = FTypeQueryCrossTabResult('beginDate');
  static const cells = FTypeQueryCrossTabResult('cells');
  static const columns = FTypeQueryCrossTabResult('columns');
  static const endDate = FTypeQueryCrossTabResult('endDate');
  static const groups = FTypeQueryCrossTabResult('groups');
  static const pageIndex = FTypeQueryCrossTabResult('pageIndex');
  static const pageSize = FTypeQueryCrossTabResult('pageSize');
  static const sum = FTypeQueryCrossTabResult('sum');
  const FTypeQueryCrossTabResult(super.key);
}

final FieldReflectInfo<TypeQueryCrossTabResult> _TypeQueryCrossTabResult_fields = {
  "beginDate": (
    getter: (data) => data.beginDate,
    setter: (data, value) => data.beginDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.beginDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.beginDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.beginDate = copyer(oldData.beginDate);
    },
  ),
  "cells": (
    getter: (data) => data.cells,
    setter: (data, value) => data.cells = value as List<List<Object>>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<List<Object>>((single){
        final handler = ListHelper.wrapToDynamic<Object>((single){
          final handler = ObjectHelper.toDynamic;
          return handler(single)!;
        });
        return handler(single)!;
      });
      return formatter(data.cells);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<List<Object>>((single){
        final handler = ListHelper.wrapFromDynamic<Object>((single){
          final handler = ObjectHelper.fromDynamic;
          return handler(single)!;
        });
        return handler(single)!;
      });
      data.cells = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<List<Object>>((single){
        final handler = ListHelper.wrapDeepCopy<Object>((single){
          final handler = ObjectHelper.deepCopy;
          return handler(single)!;
        });
        return handler(single)!;
      });
      newData.cells = copyer(oldData.cells);
    },
  ),
  "columns": (
    getter: (data) => data.columns,
    setter: (data, value) => data.columns = value as List<TypeQueryCrossTabColumn>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeQueryCrossTabColumn>((single){
        final handler = TypeQueryCrossTabColumn.toDynamic;
        return handler(single)!;
      });
      return formatter(data.columns);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeQueryCrossTabColumn>((single){
        final handler = TypeQueryCrossTabColumn.fromDynamic;
        return handler(single)!;
      });
      data.columns = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeQueryCrossTabColumn>((single){
        final handler = TypeQueryCrossTabColumn.deepCopy;
        return handler(single)!;
      });
      newData.columns = copyer(oldData.columns);
    },
  ),
  "endDate": (
    getter: (data) => data.endDate,
    setter: (data, value) => data.endDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.endDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.endDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.endDate = copyer(oldData.endDate);
    },
  ),
  "groups": (
    getter: (data) => data.groups,
    setter: (data, value) => data.groups = value as List<TypeQueryCrossTabGroupColumn>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeQueryCrossTabGroupColumn>((single){
        final handler = TypeQueryCrossTabGroupColumn.toDynamic;
        return handler(single)!;
      });
      return formatter(data.groups);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeQueryCrossTabGroupColumn>((single){
        final handler = TypeQueryCrossTabGroupColumn.fromDynamic;
        return handler(single)!;
      });
      data.groups = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeQueryCrossTabGroupColumn>((single){
        final handler = TypeQueryCrossTabGroupColumn.deepCopy;
        return handler(single)!;
      });
      newData.groups = copyer(oldData.groups);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as List<Object>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<Object>((single){
        final handler = ObjectHelper.toDynamic;
        return handler(single)!;
      });
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<Object>((single){
        final handler = ObjectHelper.fromDynamic;
        return handler(single)!;
      });
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<Object>((single){
        final handler = ObjectHelper.deepCopy;
        return handler(single)!;
      });
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeQueryCrossTabResult extends IDataBasic implements IDataDynamic {
  TypeQueryCrossTabResult({
    this.beginDate,
    this.cells,
    this.columns,
    this.endDate,
    this.groups,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeQueryCrossTabResult? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeQueryCrossTabResult();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeQueryCrossTabResult_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeQueryCrossTabResult: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeQueryCrossTabResult? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeQueryCrossTabResult_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeQueryCrossTabResult? deepCopy(TypeQueryCrossTabResult? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeQueryCrossTabResult();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeQueryCrossTabResult_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeQueryCrossTabResult copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeQueryCrossTabResult_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeQueryCrossTabResult_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? beginDate;

  List<List<Object>>? cells;

  List<TypeQueryCrossTabColumn>? columns;

  String? endDate;

  List<TypeQueryCrossTabGroupColumn>? groups;

  int? pageIndex;

  int? pageSize;

  List<Object>? sum;

}

class FTypeStock extends IDataField {
  static const bookAmount = FTypeStock('bookAmount');
  static const bookTotal = FTypeStock('bookTotal');
  static const createTime = FTypeStock('createTime');
  static const hasBusinessLink = FTypeStock('hasBusinessLink');
  static const id = FTypeStock('id');
  static const initialAmount = FTypeStock('initialAmount');
  static const initialPrice = FTypeStock('initialPrice');
  static const initialUnitId = FTypeStock('initialUnitId');
  static const itemId = FTypeStock('itemId');
  static const locations = FTypeStock('locations');
  static const modifyTime = FTypeStock('modifyTime');
  static const price = FTypeStock('price');
  static const purchaseTransitAmount = FTypeStock('purchaseTransitAmount');
  static const purchaseTransitRemark = FTypeStock('purchaseTransitRemark');
  static const remainAge = FTypeStock('remainAge');
  static const remainAgeSum = FTypeStock('remainAgeSum');
  static const storeId = FTypeStock('storeId');
  static const waitingInAmount = FTypeStock('waitingInAmount');
  static const waitingOutAmount = FTypeStock('waitingOutAmount');
  const FTypeStock(super.key);
}

final FieldReflectInfo<TypeStock> _TypeStock_fields = {
  "bookAmount": (
    getter: (data) => data.bookAmount,
    setter: (data, value) => data.bookAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bookAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bookAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bookAmount = copyer(oldData.bookAmount);
    },
  ),
  "bookTotal": (
    getter: (data) => data.bookTotal,
    setter: (data, value) => data.bookTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bookTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bookTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bookTotal = copyer(oldData.bookTotal);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "initialAmount": (
    getter: (data) => data.initialAmount,
    setter: (data, value) => data.initialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialAmount = copyer(oldData.initialAmount);
    },
  ),
  "initialPrice": (
    getter: (data) => data.initialPrice,
    setter: (data, value) => data.initialPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.initialPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.initialPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.initialPrice = copyer(oldData.initialPrice);
    },
  ),
  "initialUnitId": (
    getter: (data) => data.initialUnitId,
    setter: (data, value) => data.initialUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.initialUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.initialUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.initialUnitId = copyer(oldData.initialUnitId);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "locations": (
    getter: (data) => data.locations,
    setter: (data, value) => data.locations = value as List<TypeStockLocationDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.locations);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.fromDynamic;
        return handler(single)!;
      });
      data.locations = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.deepCopy;
        return handler(single)!;
      });
      newData.locations = copyer(oldData.locations);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "purchaseTransitAmount": (
    getter: (data) => data.purchaseTransitAmount,
    setter: (data, value) => data.purchaseTransitAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitAmount = copyer(oldData.purchaseTransitAmount);
    },
  ),
  "purchaseTransitRemark": (
    getter: (data) => data.purchaseTransitRemark,
    setter: (data, value) => data.purchaseTransitRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitRemark = copyer(oldData.purchaseTransitRemark);
    },
  ),
  "remainAge": (
    getter: (data) => data.remainAge,
    setter: (data, value) => data.remainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remainAge = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remainAge = copyer(oldData.remainAge);
    },
  ),
  "remainAgeSum": (
    getter: (data) => data.remainAgeSum,
    setter: (data, value) => data.remainAgeSum = value as double?,
    toDynamic: (data) {
      final formatter = DoubleHelper.toDynamic;
      return formatter(data.remainAgeSum);
    },
    fromDynamic: (data, value) {
      final parser = DoubleHelper.fromDynamic;
      data.remainAgeSum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = DoubleHelper.deepCopy;
      newData.remainAgeSum = copyer(oldData.remainAgeSum);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "waitingInAmount": (
    getter: (data) => data.waitingInAmount,
    setter: (data, value) => data.waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingInAmount = copyer(oldData.waitingInAmount);
    },
  ),
  "waitingOutAmount": (
    getter: (data) => data.waitingOutAmount,
    setter: (data, value) => data.waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingOutAmount = copyer(oldData.waitingOutAmount);
    },
  ),
};

class TypeStock extends IDataBasic implements IDataDynamic {
  TypeStock({
    this.bookAmount,
    this.bookTotal,
    this.createTime,
    this.hasBusinessLink,
    this.id,
    this.initialAmount,
    this.initialPrice,
    this.initialUnitId,
    this.itemId,
    this.locations,
    this.modifyTime,
    this.price,
    this.purchaseTransitAmount,
    this.purchaseTransitRemark,
    this.remainAge,
    this.remainAgeSum,
    this.storeId,
    this.waitingInAmount,
    this.waitingOutAmount
  });

  static TypeStock? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStock();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStock_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStock: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStock? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStock_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStock? deepCopy(TypeStock? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStock();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStock_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStock copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStock_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStock_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? bookAmount;

  String? bookTotal;

  String? createTime;

  int? hasBusinessLink;

  String? id;

  String? initialAmount;

  String? initialPrice;

  int? initialUnitId;

  int? itemId;

  List<TypeStockLocationDTO>? locations;

  String? modifyTime;

  String? price;

  String? purchaseTransitAmount;

  String? purchaseTransitRemark;

  String? remainAge;

  double? remainAgeSum;

  int? storeId;

  String? waitingInAmount;

  String? waitingOutAmount;

}

class FTypeStockDetailQueryDTO extends IDataField {
  static const data = FTypeStockDetailQueryDTO('data');
  static const pageIndex = FTypeStockDetailQueryDTO('pageIndex');
  static const pageSize = FTypeStockDetailQueryDTO('pageSize');
  static const sum = FTypeStockDetailQueryDTO('sum');
  const FTypeStockDetailQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQueryDTO> _TypeStockDetailQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockDetailQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockDetailQueryDataDTO>((single){
        final handler = TypeStockDetailQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockDetailQueryDataDTO>((single){
        final handler = TypeStockDetailQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockDetailQueryDataDTO>((single){
        final handler = TypeStockDetailQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockDetailQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockDetailQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockDetailQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockDetailQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockDetailQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockDetailQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockDetailQueryDTO? deepCopy(TypeStockDetailQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockDetailQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockDetailQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockDetailQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockDetailQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockDetailQuerySumDTO? sum;

}

class FTypeStockDetailQueryDataDTO extends IDataField {
  static const commonAmount = FTypeStockDetailQueryDataDTO('commonAmount');
  static const commonPrice = FTypeStockDetailQueryDataDTO('commonPrice');
  static const commonUnitId = FTypeStockDetailQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockDetailQueryDataDTO('commonUnitName');
  static const id = FTypeStockDetailQueryDataDTO('id');
  static const itemId = FTypeStockDetailQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockDetailQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockDetailQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockDetailQueryDataDTO('itemSpecsRemark');
  static const itemsOrder = FTypeStockDetailQueryDataDTO('itemsOrder');
  static const orderContactId = FTypeStockDetailQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockDetailQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockDetailQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockDetailQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockDetailQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockDetailQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockDetailQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockDetailQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockDetailQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockDetailQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockDetailQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockDetailQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockDetailQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockDetailQueryDataDTO('orderRedState');
  static const orderState = FTypeStockDetailQueryDataDTO('orderState');
  static const orderStockType = FTypeStockDetailQueryDataDTO('orderStockType');
  static const orderType = FTypeStockDetailQueryDataDTO('orderType');
  static const remark = FTypeStockDetailQueryDataDTO('remark');
  static const storeId = FTypeStockDetailQueryDataDTO('storeId');
  static const storeName = FTypeStockDetailQueryDataDTO('storeName');
  static const total = FTypeStockDetailQueryDataDTO('total');
  const FTypeStockDetailQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQueryDataDTO> _TypeStockDetailQueryDataDTO_fields = {
  "commonAmount": (
    getter: (data) => data.commonAmount,
    setter: (data, value) => data.commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonAmount = copyer(oldData.commonAmount);
    },
  ),
  "commonPrice": (
    getter: (data) => data.commonPrice,
    setter: (data, value) => data.commonPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonPrice = copyer(oldData.commonPrice);
    },
  ),
  "commonUnitId": (
    getter: (data) => data.commonUnitId,
    setter: (data, value) => data.commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.commonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.commonUnitId = copyer(oldData.commonUnitId);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemsOrder": (
    getter: (data) => data.itemsOrder,
    setter: (data, value) => data.itemsOrder = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemsOrder);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemsOrder = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemsOrder = copyer(oldData.itemsOrder);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderStockType": (
    getter: (data) => data.orderStockType,
    setter: (data, value) => data.orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderStockType = copyer(oldData.orderStockType);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockDetailQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQueryDataDTO({
    this.commonAmount,
    this.commonPrice,
    this.commonUnitId,
    this.commonUnitName,
    this.id,
    this.itemId,
    this.itemModelRemark,
    this.itemName,
    this.itemSpecsRemark,
    this.itemsOrder,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderStockType,
    this.orderType,
    this.remark,
    this.storeId,
    this.storeName,
    this.total
  });

  static TypeStockDetailQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockDetailQueryDataDTO? deepCopy(TypeStockDetailQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockDetailQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockDetailQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockDetailQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? commonAmount;

  String? commonPrice;

  int? commonUnitId;

  String? commonUnitName;

  int? id;

  int? itemId;

  String? itemModelRemark;

  String? itemName;

  String? itemSpecsRemark;

  int? itemsOrder;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  int? orderStockType;

  TypeEnumOrderType? orderType;

  String? remark;

  int? storeId;

  String? storeName;

  String? total;

}

class FTypeStockDetailQuerySumDTO extends IDataField {
  static const commonAmount = FTypeStockDetailQuerySumDTO('commonAmount');
  static const count = FTypeStockDetailQuerySumDTO('count');
  static const total = FTypeStockDetailQuerySumDTO('total');
  const FTypeStockDetailQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockDetailQuerySumDTO> _TypeStockDetailQuerySumDTO_fields = {
  "commonAmount": (
    getter: (data) => data.commonAmount,
    setter: (data, value) => data.commonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonAmount = copyer(oldData.commonAmount);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockDetailQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockDetailQuerySumDTO({
    this.commonAmount,
    this.count,
    this.total
  });

  static TypeStockDetailQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockDetailQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockDetailQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockDetailQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockDetailQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockDetailQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockDetailQuerySumDTO? deepCopy(TypeStockDetailQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockDetailQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockDetailQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockDetailQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockDetailQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockDetailQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? commonAmount;

  int? count;

  String? total;

}

class FTypeStockFlowQueryDTO extends IDataField {
  static const data = FTypeStockFlowQueryDTO('data');
  static const pageIndex = FTypeStockFlowQueryDTO('pageIndex');
  static const pageSize = FTypeStockFlowQueryDTO('pageSize');
  static const sum = FTypeStockFlowQueryDTO('sum');
  const FTypeStockFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQueryDTO> _TypeStockFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockFlowQueryDataDTO>((single){
        final handler = TypeStockFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockFlowQueryDataDTO>((single){
        final handler = TypeStockFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockFlowQueryDataDTO>((single){
        final handler = TypeStockFlowQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockFlowQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockFlowQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockFlowQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockFlowQueryDTO? deepCopy(TypeStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockFlowQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockFlowQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockFlowQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockFlowQuerySumDTO? sum;

}

class FTypeStockFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeStockFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockFlowQueryDataDTO('commonUnitName');
  static const id = FTypeStockFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeStockFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeStockFlowQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockFlowQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockFlowQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockFlowQueryDataDTO('itemSpecsRemark');
  static const orderContactId = FTypeStockFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeStockFlowQueryDataDTO('orderState');
  static const orderStockType = FTypeStockFlowQueryDataDTO('orderStockType');
  static const orderType = FTypeStockFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeStockFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeStockFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeStockFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeStockFlowQueryDataDTO('previousTotal');
  static const price = FTypeStockFlowQueryDataDTO('price');
  static const remark = FTypeStockFlowQueryDataDTO('remark');
  static const storeId = FTypeStockFlowQueryDataDTO('storeId');
  static const storeName = FTypeStockFlowQueryDataDTO('storeName');
  static const total = FTypeStockFlowQueryDataDTO('total');
  const FTypeStockFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQueryDataDTO> _TypeStockFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data.commonUnitId,
    setter: (data, value) => data.commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.commonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.commonUnitId = copyer(oldData.commonUnitId);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderStockType": (
    getter: (data) => data.orderStockType,
    setter: (data, value) => data.orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderStockType = copyer(oldData.orderStockType);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "previousCommonAmount": (
    getter: (data) => data.previousCommonAmount,
    setter: (data, value) => data.previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousCommonAmount = copyer(oldData.previousCommonAmount);
    },
  ),
  "previousPrice": (
    getter: (data) => data.previousPrice,
    setter: (data, value) => data.previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousPrice = copyer(oldData.previousPrice);
    },
  ),
  "previousTotal": (
    getter: (data) => data.previousTotal,
    setter: (data, value) => data.previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousTotal = copyer(oldData.previousTotal);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQueryDataDTO({
    this.commonUnitId,
    this.commonUnitName,
    this.id,
    this.inboundCommonAmount,
    this.itemId,
    this.itemModelRemark,
    this.itemName,
    this.itemSpecsRemark,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderStockType,
    this.orderType,
    this.outboundCommonAmount,
    this.previousCommonAmount,
    this.previousPrice,
    this.previousTotal,
    this.price,
    this.remark,
    this.storeId,
    this.storeName,
    this.total
  });

  static TypeStockFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockFlowQueryDataDTO? deepCopy(TypeStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockFlowQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockFlowQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? commonUnitId;

  String? commonUnitName;

  int? id;

  String? inboundCommonAmount;

  int? itemId;

  String? itemModelRemark;

  String? itemName;

  String? itemSpecsRemark;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  int? orderStockType;

  TypeEnumOrderType? orderType;

  String? outboundCommonAmount;

  String? previousCommonAmount;

  String? previousPrice;

  String? previousTotal;

  String? price;

  String? remark;

  int? storeId;

  String? storeName;

  String? total;

}

class FTypeStockFlowQuerySumDTO extends IDataField {
  static const count = FTypeStockFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeStockFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeStockFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeStockFlowQuerySumDTO('total');
  const FTypeStockFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockFlowQuerySumDTO> _TypeStockFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockFlowQuerySumDTO({
    this.count,
    this.inboundCommonAmount,
    this.outboundCommonAmount,
    this.total
  });

  static TypeStockFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockFlowQuerySumDTO? deepCopy(TypeStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockFlowQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockFlowQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? inboundCommonAmount;

  String? outboundCommonAmount;

  String? total;

}

class FTypeStockLocationDTO extends IDataField {
  static const hasStock = FTypeStockLocationDTO('hasStock');
  static const name = FTypeStockLocationDTO('name');
  const FTypeStockLocationDTO(super.key);
}

final FieldReflectInfo<TypeStockLocationDTO> _TypeStockLocationDTO_fields = {
  "hasStock": (
    getter: (data) => data.hasStock,
    setter: (data, value) => data.hasStock = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasStock);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasStock = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasStock = copyer(oldData.hasStock);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
};

class TypeStockLocationDTO extends IDataBasic implements IDataDynamic {
  TypeStockLocationDTO({
    this.hasStock,
    this.name
  });

  static TypeStockLocationDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockLocationDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockLocationDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockLocationDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockLocationDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockLocationDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockLocationDTO? deepCopy(TypeStockLocationDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockLocationDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockLocationDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockLocationDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockLocationDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockLocationDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? hasStock;

  String? name;

}

class FTypeStockPrice extends IDataField {
  static const id = FTypeStockPrice('id');
  static const latestRemainContactId = FTypeStockPrice('latestRemainContactId');
  static const latestRemainContactName = FTypeStockPrice('latestRemainContactName');
  static const latestRemainPrice = FTypeStockPrice('latestRemainPrice');
  static const locations = FTypeStockPrice('locations');
  static const stockAmount = FTypeStockPrice('stockAmount');
  static const stockAveragePrice = FTypeStockPrice('stockAveragePrice');
  const FTypeStockPrice(super.key);
}

final FieldReflectInfo<TypeStockPrice> _TypeStockPrice_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "latestRemainContactId": (
    getter: (data) => data.latestRemainContactId,
    setter: (data, value) => data.latestRemainContactId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.latestRemainContactId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.latestRemainContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.latestRemainContactId = copyer(oldData.latestRemainContactId);
    },
  ),
  "latestRemainContactName": (
    getter: (data) => data.latestRemainContactName,
    setter: (data, value) => data.latestRemainContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.latestRemainContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.latestRemainContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.latestRemainContactName = copyer(oldData.latestRemainContactName);
    },
  ),
  "latestRemainPrice": (
    getter: (data) => data.latestRemainPrice,
    setter: (data, value) => data.latestRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.latestRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.latestRemainPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.latestRemainPrice = copyer(oldData.latestRemainPrice);
    },
  ),
  "locations": (
    getter: (data) => data.locations,
    setter: (data, value) => data.locations = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.locations);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.locations = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.locations = copyer(oldData.locations);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockAveragePrice": (
    getter: (data) => data.stockAveragePrice,
    setter: (data, value) => data.stockAveragePrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAveragePrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAveragePrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAveragePrice = copyer(oldData.stockAveragePrice);
    },
  ),
};

class TypeStockPrice extends IDataBasic implements IDataDynamic {
  TypeStockPrice({
    this.id,
    this.latestRemainContactId,
    this.latestRemainContactName,
    this.latestRemainPrice,
    this.locations,
    this.stockAmount,
    this.stockAveragePrice
  });

  static TypeStockPrice? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockPrice();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockPrice_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockPrice: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockPrice? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockPrice_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockPrice? deepCopy(TypeStockPrice? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockPrice();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockPrice_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockPrice copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockPrice_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockPrice_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? id;

  String? latestRemainContactId;

  String? latestRemainContactName;

  String? latestRemainPrice;

  String? locations;

  String? stockAmount;

  String? stockAveragePrice;

}

class FTypeStockQueryDTO extends IDataField {
  static const data = FTypeStockQueryDTO('data');
  static const pageIndex = FTypeStockQueryDTO('pageIndex');
  static const pageSize = FTypeStockQueryDTO('pageSize');
  static const sum = FTypeStockQueryDTO('sum');
  const FTypeStockQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockQueryDTO> _TypeStockQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockQueryDataDTO>((single){
        final handler = TypeStockQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockQueryDataDTO>((single){
        final handler = TypeStockQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockQueryDataDTO>((single){
        final handler = TypeStockQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockQueryDTO? deepCopy(TypeStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockQuerySumDTO? sum;

}

class FTypeStockQueryDataDTO extends IDataField {
  static const availableAmount = FTypeStockQueryDataDTO('availableAmount');
  static const id = FTypeStockQueryDataDTO('id');
  static const itemBasicUnitId = FTypeStockQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeStockQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeStockQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeStockQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeStockQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockQueryDataDTO('itemName');
  static const itemNumber = FTypeStockQueryDataDTO('itemNumber');
  static const itemParentId = FTypeStockQueryDataDTO('itemParentId');
  static const itemParentName = FTypeStockQueryDataDTO('itemParentName');
  static const itemRemark = FTypeStockQueryDataDTO('itemRemark');
  static const itemSortWeight = FTypeStockQueryDataDTO('itemSortWeight');
  static const itemSpecsRemark = FTypeStockQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeStockQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeStockQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeStockQueryDataDTO('itemUnitConverts');
  static const stockAmount = FTypeStockQueryDataDTO('stockAmount');
  static const stockBasicAmount = FTypeStockQueryDataDTO('stockBasicAmount');
  static const stockInitialAmount = FTypeStockQueryDataDTO('stockInitialAmount');
  static const stockInitialPrice = FTypeStockQueryDataDTO('stockInitialPrice');
  static const stockInitialTotal = FTypeStockQueryDataDTO('stockInitialTotal');
  static const stockInitialUnit = FTypeStockQueryDataDTO('stockInitialUnit');
  static const stockInitialUnitId = FTypeStockQueryDataDTO('stockInitialUnitId');
  static const stockLocations = FTypeStockQueryDataDTO('stockLocations');
  static const stockPrice = FTypeStockQueryDataDTO('stockPrice');
  static const stockPurchaseTransitAmount = FTypeStockQueryDataDTO('stockPurchaseTransitAmount');
  static const stockPurchaseTransitRemark = FTypeStockQueryDataDTO('stockPurchaseTransitRemark');
  static const stockRemainAge = FTypeStockQueryDataDTO('stockRemainAge');
  static const stockTotal = FTypeStockQueryDataDTO('stockTotal');
  static const storeId = FTypeStockQueryDataDTO('storeId');
  static const storeName = FTypeStockQueryDataDTO('storeName');
  static const storeNumber = FTypeStockQueryDataDTO('storeNumber');
  static const waitingInAmount = FTypeStockQueryDataDTO('waitingInAmount');
  static const waitingOutAmount = FTypeStockQueryDataDTO('waitingOutAmount');
  const FTypeStockQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockQueryDataDTO> _TypeStockQueryDataDTO_fields = {
  "availableAmount": (
    getter: (data) => data.availableAmount,
    setter: (data, value) => data.availableAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableAmount = copyer(oldData.availableAmount);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemBasicUnitId": (
    getter: (data) => data.itemBasicUnitId,
    setter: (data, value) => data.itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitId = copyer(oldData.itemBasicUnitId);
    },
  ),
  "itemBasicUnitName": (
    getter: (data) => data.itemBasicUnitName,
    setter: (data, value) => data.itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitName = copyer(oldData.itemBasicUnitName);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemParentId": (
    getter: (data) => data.itemParentId,
    setter: (data, value) => data.itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemParentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemParentId = copyer(oldData.itemParentId);
    },
  ),
  "itemParentName": (
    getter: (data) => data.itemParentName,
    setter: (data, value) => data.itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemParentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemParentName = copyer(oldData.itemParentName);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSortWeight": (
    getter: (data) => data.itemSortWeight,
    setter: (data, value) => data.itemSortWeight = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemSortWeight);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemSortWeight = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemSortWeight = copyer(oldData.itemSortWeight);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemTreePath": (
    getter: (data) => data.itemTreePath,
    setter: (data, value) => data.itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemTreePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemTreePath = copyer(oldData.itemTreePath);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "itemUnitConverts": (
    getter: (data) => data.itemUnitConverts,
    setter: (data, value) => data.itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data.itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data.itemUnitConverts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.deepCopy;
        return handler(single)!;
      });
      newData.itemUnitConverts = copyer(oldData.itemUnitConverts);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockBasicAmount": (
    getter: (data) => data.stockBasicAmount,
    setter: (data, value) => data.stockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockBasicAmount = copyer(oldData.stockBasicAmount);
    },
  ),
  "stockInitialAmount": (
    getter: (data) => data.stockInitialAmount,
    setter: (data, value) => data.stockInitialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockInitialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockInitialAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockInitialAmount = copyer(oldData.stockInitialAmount);
    },
  ),
  "stockInitialPrice": (
    getter: (data) => data.stockInitialPrice,
    setter: (data, value) => data.stockInitialPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockInitialPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockInitialPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockInitialPrice = copyer(oldData.stockInitialPrice);
    },
  ),
  "stockInitialTotal": (
    getter: (data) => data.stockInitialTotal,
    setter: (data, value) => data.stockInitialTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockInitialTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockInitialTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockInitialTotal = copyer(oldData.stockInitialTotal);
    },
  ),
  "stockInitialUnit": (
    getter: (data) => data.stockInitialUnit,
    setter: (data, value) => data.stockInitialUnit = value as TypeAutoInjectLiteUnit?,
    toDynamic: (data) {
      final formatter = TypeAutoInjectLiteUnit.toDynamic;
      return formatter(data.stockInitialUnit);
    },
    fromDynamic: (data, value) {
      final parser = TypeAutoInjectLiteUnit.fromDynamic;
      data.stockInitialUnit = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeAutoInjectLiteUnit.deepCopy;
      newData.stockInitialUnit = copyer(oldData.stockInitialUnit);
    },
  ),
  "stockInitialUnitId": (
    getter: (data) => data.stockInitialUnitId,
    setter: (data, value) => data.stockInitialUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.stockInitialUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.stockInitialUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.stockInitialUnitId = copyer(oldData.stockInitialUnitId);
    },
  ),
  "stockLocations": (
    getter: (data) => data.stockLocations,
    setter: (data, value) => data.stockLocations = value as List<TypeStockLocationDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.stockLocations);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.fromDynamic;
        return handler(single)!;
      });
      data.stockLocations = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockLocationDTO>((single){
        final handler = TypeStockLocationDTO.deepCopy;
        return handler(single)!;
      });
      newData.stockLocations = copyer(oldData.stockLocations);
    },
  ),
  "stockPrice": (
    getter: (data) => data.stockPrice,
    setter: (data, value) => data.stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPrice = copyer(oldData.stockPrice);
    },
  ),
  "stockPurchaseTransitAmount": (
    getter: (data) => data.stockPurchaseTransitAmount,
    setter: (data, value) => data.stockPurchaseTransitAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPurchaseTransitAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPurchaseTransitAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPurchaseTransitAmount = copyer(oldData.stockPurchaseTransitAmount);
    },
  ),
  "stockPurchaseTransitRemark": (
    getter: (data) => data.stockPurchaseTransitRemark,
    setter: (data, value) => data.stockPurchaseTransitRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPurchaseTransitRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPurchaseTransitRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPurchaseTransitRemark = copyer(oldData.stockPurchaseTransitRemark);
    },
  ),
  "stockRemainAge": (
    getter: (data) => data.stockRemainAge,
    setter: (data, value) => data.stockRemainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAge = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAge = copyer(oldData.stockRemainAge);
    },
  ),
  "stockTotal": (
    getter: (data) => data.stockTotal,
    setter: (data, value) => data.stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockTotal = copyer(oldData.stockTotal);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "storeNumber": (
    getter: (data) => data.storeNumber,
    setter: (data, value) => data.storeNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeNumber = copyer(oldData.storeNumber);
    },
  ),
  "waitingInAmount": (
    getter: (data) => data.waitingInAmount,
    setter: (data, value) => data.waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingInAmount = copyer(oldData.waitingInAmount);
    },
  ),
  "waitingOutAmount": (
    getter: (data) => data.waitingOutAmount,
    setter: (data, value) => data.waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingOutAmount = copyer(oldData.waitingOutAmount);
    },
  ),
};

class TypeStockQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockQueryDataDTO({
    this.availableAmount,
    this.id,
    this.itemBasicUnitId,
    this.itemBasicUnitName,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemId,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemParentId,
    this.itemParentName,
    this.itemRemark,
    this.itemSortWeight,
    this.itemSpecsRemark,
    this.itemTreePath,
    this.itemUnitConvertDesc,
    this.itemUnitConverts,
    this.stockAmount,
    this.stockBasicAmount,
    this.stockInitialAmount,
    this.stockInitialPrice,
    this.stockInitialTotal,
    this.stockInitialUnit,
    this.stockInitialUnitId,
    this.stockLocations,
    this.stockPrice,
    this.stockPurchaseTransitAmount,
    this.stockPurchaseTransitRemark,
    this.stockRemainAge,
    this.stockTotal,
    this.storeId,
    this.storeName,
    this.storeNumber,
    this.waitingInAmount,
    this.waitingOutAmount
  });

  static TypeStockQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockQueryDataDTO? deepCopy(TypeStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? availableAmount;

  String? id;

  String? itemBasicUnitId;

  String? itemBasicUnitName;

  String? itemCommonUnitConvert;

  String? itemCommonUnitId;

  String? itemCommonUnitName;

  int? itemId;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  int? itemParentId;

  String? itemParentName;

  String? itemRemark;

  int? itemSortWeight;

  String? itemSpecsRemark;

  String? itemTreePath;

  String? itemUnitConvertDesc;

  List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts;

  String? stockAmount;

  String? stockBasicAmount;

  String? stockInitialAmount;

  String? stockInitialPrice;

  String? stockInitialTotal;

  TypeAutoInjectLiteUnit? stockInitialUnit;

  int? stockInitialUnitId;

  List<TypeStockLocationDTO>? stockLocations;

  String? stockPrice;

  String? stockPurchaseTransitAmount;

  String? stockPurchaseTransitRemark;

  String? stockRemainAge;

  String? stockTotal;

  int? storeId;

  String? storeName;

  String? storeNumber;

  String? waitingInAmount;

  String? waitingOutAmount;

}

class FTypeStockQuerySumDTO extends IDataField {
  static const availableAmount = FTypeStockQuerySumDTO('availableAmount');
  static const count = FTypeStockQuerySumDTO('count');
  static const stockAmount = FTypeStockQuerySumDTO('stockAmount');
  static const stockInitialAmount = FTypeStockQuerySumDTO('stockInitialAmount');
  static const stockInitialTotal = FTypeStockQuerySumDTO('stockInitialTotal');
  static const stockPrice = FTypeStockQuerySumDTO('stockPrice');
  static const stockTotal = FTypeStockQuerySumDTO('stockTotal');
  static const validAmount = FTypeStockQuerySumDTO('validAmount');
  static const validTotal = FTypeStockQuerySumDTO('validTotal');
  static const waitingInAmount = FTypeStockQuerySumDTO('waitingInAmount');
  static const waitingOutAmount = FTypeStockQuerySumDTO('waitingOutAmount');
  const FTypeStockQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockQuerySumDTO> _TypeStockQuerySumDTO_fields = {
  "availableAmount": (
    getter: (data) => data.availableAmount,
    setter: (data, value) => data.availableAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableAmount = copyer(oldData.availableAmount);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockInitialAmount": (
    getter: (data) => data.stockInitialAmount,
    setter: (data, value) => data.stockInitialAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockInitialAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockInitialAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockInitialAmount = copyer(oldData.stockInitialAmount);
    },
  ),
  "stockInitialTotal": (
    getter: (data) => data.stockInitialTotal,
    setter: (data, value) => data.stockInitialTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockInitialTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockInitialTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockInitialTotal = copyer(oldData.stockInitialTotal);
    },
  ),
  "stockPrice": (
    getter: (data) => data.stockPrice,
    setter: (data, value) => data.stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPrice = copyer(oldData.stockPrice);
    },
  ),
  "stockTotal": (
    getter: (data) => data.stockTotal,
    setter: (data, value) => data.stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockTotal = copyer(oldData.stockTotal);
    },
  ),
  "validAmount": (
    getter: (data) => data.validAmount,
    setter: (data, value) => data.validAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.validAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.validAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.validAmount = copyer(oldData.validAmount);
    },
  ),
  "validTotal": (
    getter: (data) => data.validTotal,
    setter: (data, value) => data.validTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.validTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.validTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.validTotal = copyer(oldData.validTotal);
    },
  ),
  "waitingInAmount": (
    getter: (data) => data.waitingInAmount,
    setter: (data, value) => data.waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingInAmount = copyer(oldData.waitingInAmount);
    },
  ),
  "waitingOutAmount": (
    getter: (data) => data.waitingOutAmount,
    setter: (data, value) => data.waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingOutAmount = copyer(oldData.waitingOutAmount);
    },
  ),
};

class TypeStockQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockQuerySumDTO({
    this.availableAmount,
    this.count,
    this.stockAmount,
    this.stockInitialAmount,
    this.stockInitialTotal,
    this.stockPrice,
    this.stockTotal,
    this.validAmount,
    this.validTotal,
    this.waitingInAmount,
    this.waitingOutAmount
  });

  static TypeStockQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockQuerySumDTO? deepCopy(TypeStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? availableAmount;

  int? count;

  String? stockAmount;

  String? stockInitialAmount;

  String? stockInitialTotal;

  String? stockPrice;

  String? stockTotal;

  String? validAmount;

  String? validTotal;

  String? waitingInAmount;

  String? waitingOutAmount;

}

class FTypeStockRemainFlowQueryDTO extends IDataField {
  static const data = FTypeStockRemainFlowQueryDTO('data');
  static const pageIndex = FTypeStockRemainFlowQueryDTO('pageIndex');
  static const pageSize = FTypeStockRemainFlowQueryDTO('pageSize');
  static const sum = FTypeStockRemainFlowQueryDTO('sum');
  const FTypeStockRemainFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQueryDTO> _TypeStockRemainFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockRemainFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockRemainFlowQueryDataDTO>((single){
        final handler = TypeStockRemainFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockRemainFlowQueryDataDTO>((single){
        final handler = TypeStockRemainFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockRemainFlowQueryDataDTO>((single){
        final handler = TypeStockRemainFlowQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockRemainFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockRemainFlowQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockRemainFlowQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockRemainFlowQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockRemainFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockRemainFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainFlowQueryDTO? deepCopy(TypeStockRemainFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainFlowQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainFlowQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainFlowQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockRemainFlowQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockRemainFlowQuerySumDTO? sum;

}

class FTypeStockRemainFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeStockRemainFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeStockRemainFlowQueryDataDTO('commonUnitName');
  static const id = FTypeStockRemainFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeStockRemainFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeStockRemainFlowQueryDataDTO('itemId');
  static const itemModelRemark = FTypeStockRemainFlowQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockRemainFlowQueryDataDTO('itemName');
  static const itemSpecsRemark = FTypeStockRemainFlowQueryDataDTO('itemSpecsRemark');
  static const orderContactId = FTypeStockRemainFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeStockRemainFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeStockRemainFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeStockRemainFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeStockRemainFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeStockRemainFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeStockRemainFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeStockRemainFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeStockRemainFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeStockRemainFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeStockRemainFlowQueryDataDTO('orderState');
  static const orderStockType = FTypeStockRemainFlowQueryDataDTO('orderStockType');
  static const orderType = FTypeStockRemainFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeStockRemainFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeStockRemainFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeStockRemainFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeStockRemainFlowQueryDataDTO('previousTotal');
  static const price = FTypeStockRemainFlowQueryDataDTO('price');
  static const remark = FTypeStockRemainFlowQueryDataDTO('remark');
  static const storeId = FTypeStockRemainFlowQueryDataDTO('storeId');
  static const storeName = FTypeStockRemainFlowQueryDataDTO('storeName');
  static const total = FTypeStockRemainFlowQueryDataDTO('total');
  const FTypeStockRemainFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQueryDataDTO> _TypeStockRemainFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data.commonUnitId,
    setter: (data, value) => data.commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.commonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.commonUnitId = copyer(oldData.commonUnitId);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderStockType": (
    getter: (data) => data.orderStockType,
    setter: (data, value) => data.orderStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderStockType = copyer(oldData.orderStockType);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "previousCommonAmount": (
    getter: (data) => data.previousCommonAmount,
    setter: (data, value) => data.previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousCommonAmount = copyer(oldData.previousCommonAmount);
    },
  ),
  "previousPrice": (
    getter: (data) => data.previousPrice,
    setter: (data, value) => data.previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousPrice = copyer(oldData.previousPrice);
    },
  ),
  "previousTotal": (
    getter: (data) => data.previousTotal,
    setter: (data, value) => data.previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousTotal = copyer(oldData.previousTotal);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockRemainFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQueryDataDTO({
    this.commonUnitId,
    this.commonUnitName,
    this.id,
    this.inboundCommonAmount,
    this.itemId,
    this.itemModelRemark,
    this.itemName,
    this.itemSpecsRemark,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderStockType,
    this.orderType,
    this.outboundCommonAmount,
    this.previousCommonAmount,
    this.previousPrice,
    this.previousTotal,
    this.price,
    this.remark,
    this.storeId,
    this.storeName,
    this.total
  });

  static TypeStockRemainFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainFlowQueryDataDTO? deepCopy(TypeStockRemainFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainFlowQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainFlowQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? commonUnitId;

  String? commonUnitName;

  int? id;

  String? inboundCommonAmount;

  int? itemId;

  String? itemModelRemark;

  String? itemName;

  String? itemSpecsRemark;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  int? orderStockType;

  TypeEnumOrderType? orderType;

  String? outboundCommonAmount;

  String? previousCommonAmount;

  String? previousPrice;

  String? previousTotal;

  String? price;

  String? remark;

  int? storeId;

  String? storeName;

  String? total;

}

class FTypeStockRemainFlowQuerySumDTO extends IDataField {
  static const count = FTypeStockRemainFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeStockRemainFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeStockRemainFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeStockRemainFlowQuerySumDTO('total');
  const FTypeStockRemainFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainFlowQuerySumDTO> _TypeStockRemainFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeStockRemainFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainFlowQuerySumDTO({
    this.count,
    this.inboundCommonAmount,
    this.outboundCommonAmount,
    this.total
  });

  static TypeStockRemainFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainFlowQuerySumDTO? deepCopy(TypeStockRemainFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainFlowQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainFlowQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? inboundCommonAmount;

  String? outboundCommonAmount;

  String? total;

}

class FTypeStockRemainQueryDTO extends IDataField {
  static const data = FTypeStockRemainQueryDTO('data');
  static const pageIndex = FTypeStockRemainQueryDTO('pageIndex');
  static const pageSize = FTypeStockRemainQueryDTO('pageSize');
  static const sum = FTypeStockRemainQueryDTO('sum');
  const FTypeStockRemainQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQueryDTO> _TypeStockRemainQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockRemainQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockRemainQueryDataDTO>((single){
        final handler = TypeStockRemainQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockRemainQueryDataDTO>((single){
        final handler = TypeStockRemainQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockRemainQueryDataDTO>((single){
        final handler = TypeStockRemainQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockRemainQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockRemainQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockRemainQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockRemainQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockRemainQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockRemainQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainQueryDTO? deepCopy(TypeStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockRemainQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockRemainQuerySumDTO? sum;

}

class FTypeStockRemainQueryDataDTO extends IDataField {
  static const id = FTypeStockRemainQueryDataDTO('id');
  static const itemBasicUnitId = FTypeStockRemainQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeStockRemainQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeStockRemainQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockRemainQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockRemainQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeStockRemainQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeStockRemainQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockRemainQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockRemainQueryDataDTO('itemName');
  static const itemNumber = FTypeStockRemainQueryDataDTO('itemNumber');
  static const itemRemark = FTypeStockRemainQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeStockRemainQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypeStockRemainQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeStockRemainQueryDataDTO('itemUnitConverts');
  static const sourceOrderId = FTypeStockRemainQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypeStockRemainQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypeStockRemainQueryDataDTO('sourceOrderType');
  static const stockId = FTypeStockRemainQueryDataDTO('stockId');
  static const stockRemainAmount = FTypeStockRemainQueryDataDTO('stockRemainAmount');
  static const stockRemainBasicAmount = FTypeStockRemainQueryDataDTO('stockRemainBasicAmount');
  static const stockRemainPrice = FTypeStockRemainQueryDataDTO('stockRemainPrice');
  static const stockRemainPutOnShelfTime = FTypeStockRemainQueryDataDTO('stockRemainPutOnShelfTime');
  static const stockRemainRemark = FTypeStockRemainQueryDataDTO('stockRemainRemark');
  static const stockRemainTotal = FTypeStockRemainQueryDataDTO('stockRemainTotal');
  static const storeId = FTypeStockRemainQueryDataDTO('storeId');
  static const storeName = FTypeStockRemainQueryDataDTO('storeName');
  const FTypeStockRemainQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQueryDataDTO> _TypeStockRemainQueryDataDTO_fields = {
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemBasicUnitId": (
    getter: (data) => data.itemBasicUnitId,
    setter: (data, value) => data.itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitId = copyer(oldData.itemBasicUnitId);
    },
  ),
  "itemBasicUnitName": (
    getter: (data) => data.itemBasicUnitName,
    setter: (data, value) => data.itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitName = copyer(oldData.itemBasicUnitName);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "itemUnitConverts": (
    getter: (data) => data.itemUnitConverts,
    setter: (data, value) => data.itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data.itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data.itemUnitConverts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.deepCopy;
        return handler(single)!;
      });
      newData.itemUnitConverts = copyer(oldData.itemUnitConverts);
    },
  ),
  "sourceOrderId": (
    getter: (data) => data.sourceOrderId,
    setter: (data, value) => data.sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sourceOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sourceOrderId = copyer(oldData.sourceOrderId);
    },
  ),
  "sourceOrderNumber": (
    getter: (data) => data.sourceOrderNumber,
    setter: (data, value) => data.sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sourceOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sourceOrderNumber = copyer(oldData.sourceOrderNumber);
    },
  ),
  "sourceOrderType": (
    getter: (data) => data.sourceOrderType,
    setter: (data, value) => data.sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.sourceOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.sourceOrderType = copyer(oldData.sourceOrderType);
    },
  ),
  "stockId": (
    getter: (data) => data.stockId,
    setter: (data, value) => data.stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockId = copyer(oldData.stockId);
    },
  ),
  "stockRemainAmount": (
    getter: (data) => data.stockRemainAmount,
    setter: (data, value) => data.stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAmount = copyer(oldData.stockRemainAmount);
    },
  ),
  "stockRemainBasicAmount": (
    getter: (data) => data.stockRemainBasicAmount,
    setter: (data, value) => data.stockRemainBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainBasicAmount = copyer(oldData.stockRemainBasicAmount);
    },
  ),
  "stockRemainPrice": (
    getter: (data) => data.stockRemainPrice,
    setter: (data, value) => data.stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPrice = copyer(oldData.stockRemainPrice);
    },
  ),
  "stockRemainPutOnShelfTime": (
    getter: (data) => data.stockRemainPutOnShelfTime,
    setter: (data, value) => data.stockRemainPutOnShelfTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPutOnShelfTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPutOnShelfTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPutOnShelfTime = copyer(oldData.stockRemainPutOnShelfTime);
    },
  ),
  "stockRemainRemark": (
    getter: (data) => data.stockRemainRemark,
    setter: (data, value) => data.stockRemainRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainRemark = copyer(oldData.stockRemainRemark);
    },
  ),
  "stockRemainTotal": (
    getter: (data) => data.stockRemainTotal,
    setter: (data, value) => data.stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainTotal = copyer(oldData.stockRemainTotal);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
};

class TypeStockRemainQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQueryDataDTO({
    this.id,
    this.itemBasicUnitId,
    this.itemBasicUnitName,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemId,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemRemark,
    this.itemSpecsRemark,
    this.itemUnitConvertDesc,
    this.itemUnitConverts,
    this.sourceOrderId,
    this.sourceOrderNumber,
    this.sourceOrderType,
    this.stockId,
    this.stockRemainAmount,
    this.stockRemainBasicAmount,
    this.stockRemainPrice,
    this.stockRemainPutOnShelfTime,
    this.stockRemainRemark,
    this.stockRemainTotal,
    this.storeId,
    this.storeName
  });

  static TypeStockRemainQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainQueryDataDTO? deepCopy(TypeStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? id;

  String? itemBasicUnitId;

  String? itemBasicUnitName;

  String? itemCommonUnitConvert;

  String? itemCommonUnitId;

  String? itemCommonUnitName;

  int? itemId;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  String? itemRemark;

  String? itemSpecsRemark;

  String? itemUnitConvertDesc;

  List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts;

  int? sourceOrderId;

  String? sourceOrderNumber;

  TypeEnumOrderType? sourceOrderType;

  String? stockId;

  String? stockRemainAmount;

  String? stockRemainBasicAmount;

  String? stockRemainPrice;

  String? stockRemainPutOnShelfTime;

  String? stockRemainRemark;

  String? stockRemainTotal;

  int? storeId;

  String? storeName;

}

class FTypeStockRemainQuerySumDTO extends IDataField {
  static const count = FTypeStockRemainQuerySumDTO('count');
  static const stockRemainAmount = FTypeStockRemainQuerySumDTO('stockRemainAmount');
  static const stockRemainPrice = FTypeStockRemainQuerySumDTO('stockRemainPrice');
  static const stockRemainTotal = FTypeStockRemainQuerySumDTO('stockRemainTotal');
  const FTypeStockRemainQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockRemainQuerySumDTO> _TypeStockRemainQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "stockRemainAmount": (
    getter: (data) => data.stockRemainAmount,
    setter: (data, value) => data.stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAmount = copyer(oldData.stockRemainAmount);
    },
  ),
  "stockRemainPrice": (
    getter: (data) => data.stockRemainPrice,
    setter: (data, value) => data.stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPrice = copyer(oldData.stockRemainPrice);
    },
  ),
  "stockRemainTotal": (
    getter: (data) => data.stockRemainTotal,
    setter: (data, value) => data.stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainTotal = copyer(oldData.stockRemainTotal);
    },
  ),
};

class TypeStockRemainQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockRemainQuerySumDTO({
    this.count,
    this.stockRemainAmount,
    this.stockRemainPrice,
    this.stockRemainTotal
  });

  static TypeStockRemainQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockRemainQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockRemainQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockRemainQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockRemainQuerySumDTO? deepCopy(TypeStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockRemainQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockRemainQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? stockRemainAmount;

  String? stockRemainPrice;

  String? stockRemainTotal;

}

class FTypeStockReplenishQueryDTO extends IDataField {
  static const data = FTypeStockReplenishQueryDTO('data');
  static const pageIndex = FTypeStockReplenishQueryDTO('pageIndex');
  static const pageSize = FTypeStockReplenishQueryDTO('pageSize');
  static const sum = FTypeStockReplenishQueryDTO('sum');
  const FTypeStockReplenishQueryDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQueryDTO> _TypeStockReplenishQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeStockReplenishQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStockReplenishQueryDataDTO>((single){
        final handler = TypeStockReplenishQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStockReplenishQueryDataDTO>((single){
        final handler = TypeStockReplenishQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStockReplenishQueryDataDTO>((single){
        final handler = TypeStockReplenishQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeStockReplenishQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeStockReplenishQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeStockReplenishQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStockReplenishQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeStockReplenishQueryDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeStockReplenishQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockReplenishQueryDTO? deepCopy(TypeStockReplenishQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockReplenishQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockReplenishQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockReplenishQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStockReplenishQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeStockReplenishQuerySumDTO? sum;

}

class FTypeStockReplenishQueryDataDTO extends IDataField {
  static const availableStockAmount = FTypeStockReplenishQueryDataDTO('availableStockAmount');
  static const availableStockDay = FTypeStockReplenishQueryDataDTO('availableStockDay');
  static const id = FTypeStockReplenishQueryDataDTO('id');
  static const isRegularType = FTypeStockReplenishQueryDataDTO('isRegularType');
  static const itemCommonUnitConvert = FTypeStockReplenishQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeStockReplenishQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeStockReplenishQueryDataDTO('itemCommonUnitName');
  static const itemIsEnabled = FTypeStockReplenishQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeStockReplenishQueryDataDTO('itemModelRemark');
  static const itemName = FTypeStockReplenishQueryDataDTO('itemName');
  static const itemNumber = FTypeStockReplenishQueryDataDTO('itemNumber');
  static const itemParentId = FTypeStockReplenishQueryDataDTO('itemParentId');
  static const itemParentName = FTypeStockReplenishQueryDataDTO('itemParentName');
  static const itemRemark = FTypeStockReplenishQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeStockReplenishQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeStockReplenishQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeStockReplenishQueryDataDTO('itemUnitConvertDesc');
  static const orderSalesAmount = FTypeStockReplenishQueryDataDTO('orderSalesAmount');
  static const orderSalesAmountPerDay = FTypeStockReplenishQueryDataDTO('orderSalesAmountPerDay');
  static const orderSalesTotal = FTypeStockReplenishQueryDataDTO('orderSalesTotal');
  static const planPurchaseAmount = FTypeStockReplenishQueryDataDTO('planPurchaseAmount');
  static const planPurchaseBasicAmount = FTypeStockReplenishQueryDataDTO('planPurchaseBasicAmount');
  static const planPurchaseUnitConvertAmount = FTypeStockReplenishQueryDataDTO('planPurchaseUnitConvertAmount');
  static const purchaseTransitStockAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockAmount');
  static const purchaseTransitStockBasicAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockBasicAmount');
  static const purchaseTransitStockRemark = FTypeStockReplenishQueryDataDTO('purchaseTransitStockRemark');
  static const purchaseTransitStockUnitConvertAmount = FTypeStockReplenishQueryDataDTO('purchaseTransitStockUnitConvertAmount');
  static const stockAmount = FTypeStockReplenishQueryDataDTO('stockAmount');
  static const stockId = FTypeStockReplenishQueryDataDTO('stockId');
  static const stockWaitingInAmount = FTypeStockReplenishQueryDataDTO('stockWaitingInAmount');
  static const stockWaitingOutAmount = FTypeStockReplenishQueryDataDTO('stockWaitingOutAmount');
  const FTypeStockReplenishQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQueryDataDTO> _TypeStockReplenishQueryDataDTO_fields = {
  "availableStockAmount": (
    getter: (data) => data.availableStockAmount,
    setter: (data, value) => data.availableStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableStockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableStockAmount = copyer(oldData.availableStockAmount);
    },
  ),
  "availableStockDay": (
    getter: (data) => data.availableStockDay,
    setter: (data, value) => data.availableStockDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableStockDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableStockDay = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableStockDay = copyer(oldData.availableStockDay);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isRegularType": (
    getter: (data) => data.isRegularType,
    setter: (data, value) => data.isRegularType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isRegularType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isRegularType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isRegularType = copyer(oldData.isRegularType);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemParentId": (
    getter: (data) => data.itemParentId,
    setter: (data, value) => data.itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemParentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemParentId = copyer(oldData.itemParentId);
    },
  ),
  "itemParentName": (
    getter: (data) => data.itemParentName,
    setter: (data, value) => data.itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemParentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemParentName = copyer(oldData.itemParentName);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemTreePath": (
    getter: (data) => data.itemTreePath,
    setter: (data, value) => data.itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemTreePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemTreePath = copyer(oldData.itemTreePath);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "orderSalesAmount": (
    getter: (data) => data.orderSalesAmount,
    setter: (data, value) => data.orderSalesAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesAmount = copyer(oldData.orderSalesAmount);
    },
  ),
  "orderSalesAmountPerDay": (
    getter: (data) => data.orderSalesAmountPerDay,
    setter: (data, value) => data.orderSalesAmountPerDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesAmountPerDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesAmountPerDay = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesAmountPerDay = copyer(oldData.orderSalesAmountPerDay);
    },
  ),
  "orderSalesTotal": (
    getter: (data) => data.orderSalesTotal,
    setter: (data, value) => data.orderSalesTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesTotal = copyer(oldData.orderSalesTotal);
    },
  ),
  "planPurchaseAmount": (
    getter: (data) => data.planPurchaseAmount,
    setter: (data, value) => data.planPurchaseAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.planPurchaseAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.planPurchaseAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.planPurchaseAmount = copyer(oldData.planPurchaseAmount);
    },
  ),
  "planPurchaseBasicAmount": (
    getter: (data) => data.planPurchaseBasicAmount,
    setter: (data, value) => data.planPurchaseBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.planPurchaseBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.planPurchaseBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.planPurchaseBasicAmount = copyer(oldData.planPurchaseBasicAmount);
    },
  ),
  "planPurchaseUnitConvertAmount": (
    getter: (data) => data.planPurchaseUnitConvertAmount,
    setter: (data, value) => data.planPurchaseUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.planPurchaseUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.planPurchaseUnitConvertAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.planPurchaseUnitConvertAmount = copyer(oldData.planPurchaseUnitConvertAmount);
    },
  ),
  "purchaseTransitStockAmount": (
    getter: (data) => data.purchaseTransitStockAmount,
    setter: (data, value) => data.purchaseTransitStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitStockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitStockAmount = copyer(oldData.purchaseTransitStockAmount);
    },
  ),
  "purchaseTransitStockBasicAmount": (
    getter: (data) => data.purchaseTransitStockBasicAmount,
    setter: (data, value) => data.purchaseTransitStockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitStockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitStockBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitStockBasicAmount = copyer(oldData.purchaseTransitStockBasicAmount);
    },
  ),
  "purchaseTransitStockRemark": (
    getter: (data) => data.purchaseTransitStockRemark,
    setter: (data, value) => data.purchaseTransitStockRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitStockRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitStockRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitStockRemark = copyer(oldData.purchaseTransitStockRemark);
    },
  ),
  "purchaseTransitStockUnitConvertAmount": (
    getter: (data) => data.purchaseTransitStockUnitConvertAmount,
    setter: (data, value) => data.purchaseTransitStockUnitConvertAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitStockUnitConvertAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitStockUnitConvertAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitStockUnitConvertAmount = copyer(oldData.purchaseTransitStockUnitConvertAmount);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockId": (
    getter: (data) => data.stockId,
    setter: (data, value) => data.stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockId = copyer(oldData.stockId);
    },
  ),
  "stockWaitingInAmount": (
    getter: (data) => data.stockWaitingInAmount,
    setter: (data, value) => data.stockWaitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockWaitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockWaitingInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockWaitingInAmount = copyer(oldData.stockWaitingInAmount);
    },
  ),
  "stockWaitingOutAmount": (
    getter: (data) => data.stockWaitingOutAmount,
    setter: (data, value) => data.stockWaitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockWaitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockWaitingOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockWaitingOutAmount = copyer(oldData.stockWaitingOutAmount);
    },
  ),
};

class TypeStockReplenishQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQueryDataDTO({
    this.availableStockAmount,
    this.availableStockDay,
    this.id,
    this.isRegularType,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemParentId,
    this.itemParentName,
    this.itemRemark,
    this.itemSpecsRemark,
    this.itemTreePath,
    this.itemUnitConvertDesc,
    this.orderSalesAmount,
    this.orderSalesAmountPerDay,
    this.orderSalesTotal,
    this.planPurchaseAmount,
    this.planPurchaseBasicAmount,
    this.planPurchaseUnitConvertAmount,
    this.purchaseTransitStockAmount,
    this.purchaseTransitStockBasicAmount,
    this.purchaseTransitStockRemark,
    this.purchaseTransitStockUnitConvertAmount,
    this.stockAmount,
    this.stockId,
    this.stockWaitingInAmount,
    this.stockWaitingOutAmount
  });

  static TypeStockReplenishQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockReplenishQueryDataDTO? deepCopy(TypeStockReplenishQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockReplenishQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockReplenishQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockReplenishQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? availableStockAmount;

  String? availableStockDay;

  int? id;

  int? isRegularType;

  String? itemCommonUnitConvert;

  int? itemCommonUnitId;

  String? itemCommonUnitName;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  int? itemParentId;

  String? itemParentName;

  String? itemRemark;

  String? itemSpecsRemark;

  String? itemTreePath;

  String? itemUnitConvertDesc;

  String? orderSalesAmount;

  String? orderSalesAmountPerDay;

  String? orderSalesTotal;

  String? planPurchaseAmount;

  String? planPurchaseBasicAmount;

  String? planPurchaseUnitConvertAmount;

  String? purchaseTransitStockAmount;

  String? purchaseTransitStockBasicAmount;

  String? purchaseTransitStockRemark;

  String? purchaseTransitStockUnitConvertAmount;

  String? stockAmount;

  String? stockId;

  String? stockWaitingInAmount;

  String? stockWaitingOutAmount;

}

class FTypeStockReplenishQuerySumDTO extends IDataField {
  static const availableStockAmount = FTypeStockReplenishQuerySumDTO('availableStockAmount');
  static const availableStockDay = FTypeStockReplenishQuerySumDTO('availableStockDay');
  static const count = FTypeStockReplenishQuerySumDTO('count');
  static const orderSalesAmount = FTypeStockReplenishQuerySumDTO('orderSalesAmount');
  static const orderSalesCostTotalPerDay = FTypeStockReplenishQuerySumDTO('orderSalesCostTotalPerDay');
  static const orderSalesTotal = FTypeStockReplenishQuerySumDTO('orderSalesTotal');
  static const purchaseTransitStockTotal = FTypeStockReplenishQuerySumDTO('purchaseTransitStockTotal');
  static const stockAmount = FTypeStockReplenishQuerySumDTO('stockAmount');
  static const stockTotal = FTypeStockReplenishQuerySumDTO('stockTotal');
  const FTypeStockReplenishQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeStockReplenishQuerySumDTO> _TypeStockReplenishQuerySumDTO_fields = {
  "availableStockAmount": (
    getter: (data) => data.availableStockAmount,
    setter: (data, value) => data.availableStockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableStockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableStockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableStockAmount = copyer(oldData.availableStockAmount);
    },
  ),
  "availableStockDay": (
    getter: (data) => data.availableStockDay,
    setter: (data, value) => data.availableStockDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.availableStockDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.availableStockDay = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.availableStockDay = copyer(oldData.availableStockDay);
    },
  ),
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "orderSalesAmount": (
    getter: (data) => data.orderSalesAmount,
    setter: (data, value) => data.orderSalesAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesAmount = copyer(oldData.orderSalesAmount);
    },
  ),
  "orderSalesCostTotalPerDay": (
    getter: (data) => data.orderSalesCostTotalPerDay,
    setter: (data, value) => data.orderSalesCostTotalPerDay = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesCostTotalPerDay);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesCostTotalPerDay = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesCostTotalPerDay = copyer(oldData.orderSalesCostTotalPerDay);
    },
  ),
  "orderSalesTotal": (
    getter: (data) => data.orderSalesTotal,
    setter: (data, value) => data.orderSalesTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderSalesTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderSalesTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderSalesTotal = copyer(oldData.orderSalesTotal);
    },
  ),
  "purchaseTransitStockTotal": (
    getter: (data) => data.purchaseTransitStockTotal,
    setter: (data, value) => data.purchaseTransitStockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseTransitStockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseTransitStockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseTransitStockTotal = copyer(oldData.purchaseTransitStockTotal);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockTotal": (
    getter: (data) => data.stockTotal,
    setter: (data, value) => data.stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockTotal = copyer(oldData.stockTotal);
    },
  ),
};

class TypeStockReplenishQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeStockReplenishQuerySumDTO({
    this.availableStockAmount,
    this.availableStockDay,
    this.count,
    this.orderSalesAmount,
    this.orderSalesCostTotalPerDay,
    this.orderSalesTotal,
    this.purchaseTransitStockTotal,
    this.stockAmount,
    this.stockTotal
  });

  static TypeStockReplenishQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStockReplenishQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStockReplenishQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStockReplenishQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStockReplenishQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStockReplenishQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStockReplenishQuerySumDTO? deepCopy(TypeStockReplenishQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStockReplenishQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStockReplenishQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStockReplenishQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStockReplenishQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStockReplenishQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? availableStockAmount;

  String? availableStockDay;

  int? count;

  String? orderSalesAmount;

  String? orderSalesCostTotalPerDay;

  String? orderSalesTotal;

  String? purchaseTransitStockTotal;

  String? stockAmount;

  String? stockTotal;

}

class FTypeStore extends IDataField {
  static const children = FTypeStore('children');
  static const createTime = FTypeStore('createTime');
  static const hasBusinessLink = FTypeStore('hasBusinessLink');
  static const id = FTypeStore('id');
  static const isCategory = FTypeStore('isCategory');
  static const isEnabled = FTypeStore('isEnabled');
  static const isSystem = FTypeStore('isSystem');
  static const modifyTime = FTypeStore('modifyTime');
  static const name = FTypeStore('name');
  static const number = FTypeStore('number');
  static const parentId = FTypeStore('parentId');
  static const parentInfo = FTypeStore('parentInfo');
  static const phone = FTypeStore('phone');
  static const remark = FTypeStore('remark');
  static const treeLevel = FTypeStore('treeLevel');
  static const treePath = FTypeStore('treePath');
  const FTypeStore(super.key);
}

final FieldReflectInfo<TypeStore> _TypeStore_fields = {
  "children": (
    getter: (data) => data.children,
    setter: (data, value) => data.children = value as List<TypeStore>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeStore>((single){
        final handler = TypeStore.toDynamic;
        return handler(single)!;
      });
      return formatter(data.children);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
        final handler = TypeStore.fromDynamic;
        return handler(single)!;
      });
      data.children = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeStore>((single){
        final handler = TypeStore.deepCopy;
        return handler(single)!;
      });
      newData.children = copyer(oldData.children);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isCategory": (
    getter: (data) => data.isCategory,
    setter: (data, value) => data.isCategory = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isCategory);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isCategory = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isCategory = copyer(oldData.isCategory);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "isSystem": (
    getter: (data) => data.isSystem,
    setter: (data, value) => data.isSystem = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.isSystem);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.isSystem = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.isSystem = copyer(oldData.isSystem);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "number": (
    getter: (data) => data.number,
    setter: (data, value) => data.number = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.number);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.number = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.number = copyer(oldData.number);
    },
  ),
  "parentId": (
    getter: (data) => data.parentId,
    setter: (data, value) => data.parentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.parentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.parentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.parentId = copyer(oldData.parentId);
    },
  ),
  "parentInfo": (
    getter: (data) => data.parentInfo,
    setter: (data, value) => data.parentInfo = value as TypeStore?,
    toDynamic: (data) {
      final formatter = TypeStore.toDynamic;
      return formatter(data.parentInfo);
    },
    fromDynamic: (data, value) {
      final parser = TypeStore.fromDynamic;
      data.parentInfo = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeStore.deepCopy;
      newData.parentInfo = copyer(oldData.parentInfo);
    },
  ),
  "phone": (
    getter: (data) => data.phone,
    setter: (data, value) => data.phone = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.phone);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.phone = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.phone = copyer(oldData.phone);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "treeLevel": (
    getter: (data) => data.treeLevel,
    setter: (data, value) => data.treeLevel = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.treeLevel);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.treeLevel = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.treeLevel = copyer(oldData.treeLevel);
    },
  ),
  "treePath": (
    getter: (data) => data.treePath,
    setter: (data, value) => data.treePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.treePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.treePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.treePath = copyer(oldData.treePath);
    },
  ),
};

class TypeStore extends IDataBasic implements IDataDynamic {
  TypeStore({
    this.children,
    this.createTime,
    this.hasBusinessLink,
    this.id,
    this.isCategory,
    this.isEnabled,
    this.isSystem,
    this.modifyTime,
    this.name,
    this.number,
    this.parentId,
    this.parentInfo,
    this.phone,
    this.remark,
    this.treeLevel,
    this.treePath
  });

  static TypeStore? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeStore();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeStore_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeStore: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeStore? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeStore_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeStore? deepCopy(TypeStore? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeStore();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeStore_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeStore copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeStore_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeStore_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeStore>? children;

  String? createTime;

  int? hasBusinessLink;

  int? id;

  int? isCategory;

  TypeEnumSoftEnableIsEnable? isEnabled;

  int? isSystem;

  String? modifyTime;

  String? name;

  String? number;

  int? parentId;

  TypeStore? parentInfo;

  String? phone;

  String? remark;

  int? treeLevel;

  String? treePath;

}

class FTypeSubContractStock extends IDataField {
  static const bookAmount = FTypeSubContractStock('bookAmount');
  static const bookTotal = FTypeSubContractStock('bookTotal');
  static const contactId = FTypeSubContractStock('contactId');
  static const createTime = FTypeSubContractStock('createTime');
  static const hasBusinessLink = FTypeSubContractStock('hasBusinessLink');
  static const id = FTypeSubContractStock('id');
  static const itemId = FTypeSubContractStock('itemId');
  static const modifyTime = FTypeSubContractStock('modifyTime');
  static const price = FTypeSubContractStock('price');
  static const remainAge = FTypeSubContractStock('remainAge');
  static const remainAgeSum = FTypeSubContractStock('remainAgeSum');
  static const waitingInAmount = FTypeSubContractStock('waitingInAmount');
  static const waitingOutAmount = FTypeSubContractStock('waitingOutAmount');
  const FTypeSubContractStock(super.key);
}

final FieldReflectInfo<TypeSubContractStock> _TypeSubContractStock_fields = {
  "bookAmount": (
    getter: (data) => data.bookAmount,
    setter: (data, value) => data.bookAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bookAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bookAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bookAmount = copyer(oldData.bookAmount);
    },
  ),
  "bookTotal": (
    getter: (data) => data.bookTotal,
    setter: (data, value) => data.bookTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.bookTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.bookTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.bookTotal = copyer(oldData.bookTotal);
    },
  ),
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "hasBusinessLink": (
    getter: (data) => data.hasBusinessLink,
    setter: (data, value) => data.hasBusinessLink = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasBusinessLink);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasBusinessLink = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasBusinessLink = copyer(oldData.hasBusinessLink);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "remainAge": (
    getter: (data) => data.remainAge,
    setter: (data, value) => data.remainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remainAge = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remainAge = copyer(oldData.remainAge);
    },
  ),
  "remainAgeSum": (
    getter: (data) => data.remainAgeSum,
    setter: (data, value) => data.remainAgeSum = value as double?,
    toDynamic: (data) {
      final formatter = DoubleHelper.toDynamic;
      return formatter(data.remainAgeSum);
    },
    fromDynamic: (data, value) {
      final parser = DoubleHelper.fromDynamic;
      data.remainAgeSum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = DoubleHelper.deepCopy;
      newData.remainAgeSum = copyer(oldData.remainAgeSum);
    },
  ),
  "waitingInAmount": (
    getter: (data) => data.waitingInAmount,
    setter: (data, value) => data.waitingInAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingInAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingInAmount = copyer(oldData.waitingInAmount);
    },
  ),
  "waitingOutAmount": (
    getter: (data) => data.waitingOutAmount,
    setter: (data, value) => data.waitingOutAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.waitingOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.waitingOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.waitingOutAmount = copyer(oldData.waitingOutAmount);
    },
  ),
};

class TypeSubContractStock extends IDataBasic implements IDataDynamic {
  TypeSubContractStock({
    this.bookAmount,
    this.bookTotal,
    this.contactId,
    this.createTime,
    this.hasBusinessLink,
    this.id,
    this.itemId,
    this.modifyTime,
    this.price,
    this.remainAge,
    this.remainAgeSum,
    this.waitingInAmount,
    this.waitingOutAmount
  });

  static TypeSubContractStock? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStock();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStock_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStock: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStock? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStock_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStock? deepCopy(TypeSubContractStock? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStock();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStock_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStock copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStock_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStock_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? bookAmount;

  String? bookTotal;

  int? contactId;

  String? createTime;

  int? hasBusinessLink;

  String? id;

  int? itemId;

  String? modifyTime;

  String? price;

  String? remainAge;

  double? remainAgeSum;

  String? waitingInAmount;

  String? waitingOutAmount;

}

class FTypeSubContractStockFlowQueryDTO extends IDataField {
  static const data = FTypeSubContractStockFlowQueryDTO('data');
  static const pageIndex = FTypeSubContractStockFlowQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockFlowQueryDTO('pageSize');
  static const sum = FTypeSubContractStockFlowQueryDTO('sum');
  const FTypeSubContractStockFlowQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQueryDTO> _TypeSubContractStockFlowQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeSubContractStockFlowQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockFlowQueryDataDTO>((single){
        final handler = TypeSubContractStockFlowQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockFlowQueryDataDTO>((single){
        final handler = TypeSubContractStockFlowQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeSubContractStockFlowQueryDataDTO>((single){
        final handler = TypeSubContractStockFlowQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeSubContractStockFlowQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockFlowQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockFlowQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSubContractStockFlowQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeSubContractStockFlowQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeSubContractStockFlowQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockFlowQueryDTO? deepCopy(TypeSubContractStockFlowQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockFlowQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockFlowQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockFlowQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockFlowQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeSubContractStockFlowQuerySumDTO? sum;

}

class FTypeSubContractStockFlowQueryDataDTO extends IDataField {
  static const commonUnitId = FTypeSubContractStockFlowQueryDataDTO('commonUnitId');
  static const commonUnitName = FTypeSubContractStockFlowQueryDataDTO('commonUnitName');
  static const id = FTypeSubContractStockFlowQueryDataDTO('id');
  static const inboundCommonAmount = FTypeSubContractStockFlowQueryDataDTO('inboundCommonAmount');
  static const itemId = FTypeSubContractStockFlowQueryDataDTO('itemId');
  static const itemName = FTypeSubContractStockFlowQueryDataDTO('itemName');
  static const orderContactId = FTypeSubContractStockFlowQueryDataDTO('orderContactId');
  static const orderContactName = FTypeSubContractStockFlowQueryDataDTO('orderContactName');
  static const orderDate = FTypeSubContractStockFlowQueryDataDTO('orderDate');
  static const orderDrawEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderDrawEmployeeId');
  static const orderDrawEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderDrawEmployeeName');
  static const orderDrawTime = FTypeSubContractStockFlowQueryDataDTO('orderDrawTime');
  static const orderEntryAccountEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountEmployeeId');
  static const orderEntryAccountEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountEmployeeName');
  static const orderEntryAccountTime = FTypeSubContractStockFlowQueryDataDTO('orderEntryAccountTime');
  static const orderId = FTypeSubContractStockFlowQueryDataDTO('orderId');
  static const orderManageEmployeeId = FTypeSubContractStockFlowQueryDataDTO('orderManageEmployeeId');
  static const orderManageEmployeeName = FTypeSubContractStockFlowQueryDataDTO('orderManageEmployeeName');
  static const orderNumber = FTypeSubContractStockFlowQueryDataDTO('orderNumber');
  static const orderRedState = FTypeSubContractStockFlowQueryDataDTO('orderRedState');
  static const orderState = FTypeSubContractStockFlowQueryDataDTO('orderState');
  static const orderSubContractStockType = FTypeSubContractStockFlowQueryDataDTO('orderSubContractStockType');
  static const orderType = FTypeSubContractStockFlowQueryDataDTO('orderType');
  static const outboundCommonAmount = FTypeSubContractStockFlowQueryDataDTO('outboundCommonAmount');
  static const previousCommonAmount = FTypeSubContractStockFlowQueryDataDTO('previousCommonAmount');
  static const previousPrice = FTypeSubContractStockFlowQueryDataDTO('previousPrice');
  static const previousTotal = FTypeSubContractStockFlowQueryDataDTO('previousTotal');
  static const price = FTypeSubContractStockFlowQueryDataDTO('price');
  static const remark = FTypeSubContractStockFlowQueryDataDTO('remark');
  static const storeId = FTypeSubContractStockFlowQueryDataDTO('storeId');
  static const storeName = FTypeSubContractStockFlowQueryDataDTO('storeName');
  static const total = FTypeSubContractStockFlowQueryDataDTO('total');
  const FTypeSubContractStockFlowQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQueryDataDTO> _TypeSubContractStockFlowQueryDataDTO_fields = {
  "commonUnitId": (
    getter: (data) => data.commonUnitId,
    setter: (data, value) => data.commonUnitId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.commonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.commonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.commonUnitId = copyer(oldData.commonUnitId);
    },
  ),
  "commonUnitName": (
    getter: (data) => data.commonUnitName,
    setter: (data, value) => data.commonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.commonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.commonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.commonUnitName = copyer(oldData.commonUnitName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "orderContactId": (
    getter: (data) => data.orderContactId,
    setter: (data, value) => data.orderContactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderContactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderContactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderContactId = copyer(oldData.orderContactId);
    },
  ),
  "orderContactName": (
    getter: (data) => data.orderContactName,
    setter: (data, value) => data.orderContactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderContactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderContactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderContactName = copyer(oldData.orderContactName);
    },
  ),
  "orderDate": (
    getter: (data) => data.orderDate,
    setter: (data, value) => data.orderDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDate = copyer(oldData.orderDate);
    },
  ),
  "orderDrawEmployeeId": (
    getter: (data) => data.orderDrawEmployeeId,
    setter: (data, value) => data.orderDrawEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderDrawEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderDrawEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderDrawEmployeeId = copyer(oldData.orderDrawEmployeeId);
    },
  ),
  "orderDrawEmployeeName": (
    getter: (data) => data.orderDrawEmployeeName,
    setter: (data, value) => data.orderDrawEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawEmployeeName = copyer(oldData.orderDrawEmployeeName);
    },
  ),
  "orderDrawTime": (
    getter: (data) => data.orderDrawTime,
    setter: (data, value) => data.orderDrawTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderDrawTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderDrawTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderDrawTime = copyer(oldData.orderDrawTime);
    },
  ),
  "orderEntryAccountEmployeeId": (
    getter: (data) => data.orderEntryAccountEmployeeId,
    setter: (data, value) => data.orderEntryAccountEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderEntryAccountEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderEntryAccountEmployeeId = copyer(oldData.orderEntryAccountEmployeeId);
    },
  ),
  "orderEntryAccountEmployeeName": (
    getter: (data) => data.orderEntryAccountEmployeeName,
    setter: (data, value) => data.orderEntryAccountEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountEmployeeName = copyer(oldData.orderEntryAccountEmployeeName);
    },
  ),
  "orderEntryAccountTime": (
    getter: (data) => data.orderEntryAccountTime,
    setter: (data, value) => data.orderEntryAccountTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderEntryAccountTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderEntryAccountTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderEntryAccountTime = copyer(oldData.orderEntryAccountTime);
    },
  ),
  "orderId": (
    getter: (data) => data.orderId,
    setter: (data, value) => data.orderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderId = copyer(oldData.orderId);
    },
  ),
  "orderManageEmployeeId": (
    getter: (data) => data.orderManageEmployeeId,
    setter: (data, value) => data.orderManageEmployeeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderManageEmployeeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderManageEmployeeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderManageEmployeeId = copyer(oldData.orderManageEmployeeId);
    },
  ),
  "orderManageEmployeeName": (
    getter: (data) => data.orderManageEmployeeName,
    setter: (data, value) => data.orderManageEmployeeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderManageEmployeeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderManageEmployeeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderManageEmployeeName = copyer(oldData.orderManageEmployeeName);
    },
  ),
  "orderNumber": (
    getter: (data) => data.orderNumber,
    setter: (data, value) => data.orderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.orderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.orderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.orderNumber = copyer(oldData.orderNumber);
    },
  ),
  "orderRedState": (
    getter: (data) => data.orderRedState,
    setter: (data, value) => data.orderRedState = value as TypeEnumOrderRedState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderRedState.toDynamic;
      return formatter(data.orderRedState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderRedState.fromDynamic;
      data.orderRedState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderRedState.deepCopy;
      newData.orderRedState = copyer(oldData.orderRedState);
    },
  ),
  "orderState": (
    getter: (data) => data.orderState,
    setter: (data, value) => data.orderState = value as TypeEnumOrderState?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderState.toDynamic;
      return formatter(data.orderState);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderState.fromDynamic;
      data.orderState = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderState.deepCopy;
      newData.orderState = copyer(oldData.orderState);
    },
  ),
  "orderSubContractStockType": (
    getter: (data) => data.orderSubContractStockType,
    setter: (data, value) => data.orderSubContractStockType = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.orderSubContractStockType);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.orderSubContractStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.orderSubContractStockType = copyer(oldData.orderSubContractStockType);
    },
  ),
  "orderType": (
    getter: (data) => data.orderType,
    setter: (data, value) => data.orderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.orderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.orderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.orderType = copyer(oldData.orderType);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "previousCommonAmount": (
    getter: (data) => data.previousCommonAmount,
    setter: (data, value) => data.previousCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousCommonAmount = copyer(oldData.previousCommonAmount);
    },
  ),
  "previousPrice": (
    getter: (data) => data.previousPrice,
    setter: (data, value) => data.previousPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousPrice = copyer(oldData.previousPrice);
    },
  ),
  "previousTotal": (
    getter: (data) => data.previousTotal,
    setter: (data, value) => data.previousTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.previousTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.previousTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.previousTotal = copyer(oldData.previousTotal);
    },
  ),
  "price": (
    getter: (data) => data.price,
    setter: (data, value) => data.price = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.price);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.price = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.price = copyer(oldData.price);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
  "storeId": (
    getter: (data) => data.storeId,
    setter: (data, value) => data.storeId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.storeId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.storeId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.storeId = copyer(oldData.storeId);
    },
  ),
  "storeName": (
    getter: (data) => data.storeName,
    setter: (data, value) => data.storeName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.storeName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.storeName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.storeName = copyer(oldData.storeName);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeSubContractStockFlowQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQueryDataDTO({
    this.commonUnitId,
    this.commonUnitName,
    this.id,
    this.inboundCommonAmount,
    this.itemId,
    this.itemName,
    this.orderContactId,
    this.orderContactName,
    this.orderDate,
    this.orderDrawEmployeeId,
    this.orderDrawEmployeeName,
    this.orderDrawTime,
    this.orderEntryAccountEmployeeId,
    this.orderEntryAccountEmployeeName,
    this.orderEntryAccountTime,
    this.orderId,
    this.orderManageEmployeeId,
    this.orderManageEmployeeName,
    this.orderNumber,
    this.orderRedState,
    this.orderState,
    this.orderSubContractStockType,
    this.orderType,
    this.outboundCommonAmount,
    this.previousCommonAmount,
    this.previousPrice,
    this.previousTotal,
    this.price,
    this.remark,
    this.storeId,
    this.storeName,
    this.total
  });

  static TypeSubContractStockFlowQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockFlowQueryDataDTO? deepCopy(TypeSubContractStockFlowQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockFlowQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockFlowQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockFlowQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? commonUnitId;

  String? commonUnitName;

  int? id;

  String? inboundCommonAmount;

  int? itemId;

  String? itemName;

  int? orderContactId;

  String? orderContactName;

  String? orderDate;

  int? orderDrawEmployeeId;

  String? orderDrawEmployeeName;

  String? orderDrawTime;

  int? orderEntryAccountEmployeeId;

  String? orderEntryAccountEmployeeName;

  String? orderEntryAccountTime;

  int? orderId;

  int? orderManageEmployeeId;

  String? orderManageEmployeeName;

  String? orderNumber;

  TypeEnumOrderRedState? orderRedState;

  TypeEnumOrderState? orderState;

  int? orderSubContractStockType;

  TypeEnumOrderType? orderType;

  String? outboundCommonAmount;

  String? previousCommonAmount;

  String? previousPrice;

  String? previousTotal;

  String? price;

  String? remark;

  int? storeId;

  String? storeName;

  String? total;

}

class FTypeSubContractStockFlowQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockFlowQuerySumDTO('count');
  static const inboundCommonAmount = FTypeSubContractStockFlowQuerySumDTO('inboundCommonAmount');
  static const outboundCommonAmount = FTypeSubContractStockFlowQuerySumDTO('outboundCommonAmount');
  static const total = FTypeSubContractStockFlowQuerySumDTO('total');
  const FTypeSubContractStockFlowQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockFlowQuerySumDTO> _TypeSubContractStockFlowQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "inboundCommonAmount": (
    getter: (data) => data.inboundCommonAmount,
    setter: (data, value) => data.inboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.inboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.inboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.inboundCommonAmount = copyer(oldData.inboundCommonAmount);
    },
  ),
  "outboundCommonAmount": (
    getter: (data) => data.outboundCommonAmount,
    setter: (data, value) => data.outboundCommonAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.outboundCommonAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.outboundCommonAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.outboundCommonAmount = copyer(oldData.outboundCommonAmount);
    },
  ),
  "total": (
    getter: (data) => data.total,
    setter: (data, value) => data.total = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.total);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.total = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.total = copyer(oldData.total);
    },
  ),
};

class TypeSubContractStockFlowQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockFlowQuerySumDTO({
    this.count,
    this.inboundCommonAmount,
    this.outboundCommonAmount,
    this.total
  });

  static TypeSubContractStockFlowQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockFlowQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockFlowQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockFlowQuerySumDTO? deepCopy(TypeSubContractStockFlowQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockFlowQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockFlowQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockFlowQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockFlowQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? inboundCommonAmount;

  String? outboundCommonAmount;

  String? total;

}

class FTypeSubContractStockQueryDTO extends IDataField {
  static const data = FTypeSubContractStockQueryDTO('data');
  static const pageIndex = FTypeSubContractStockQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockQueryDTO('pageSize');
  static const sum = FTypeSubContractStockQueryDTO('sum');
  const FTypeSubContractStockQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQueryDTO> _TypeSubContractStockQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeSubContractStockQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockQueryDataDTO>((single){
        final handler = TypeSubContractStockQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockQueryDataDTO>((single){
        final handler = TypeSubContractStockQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeSubContractStockQueryDataDTO>((single){
        final handler = TypeSubContractStockQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeSubContractStockQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSubContractStockQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeSubContractStockQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeSubContractStockQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockQueryDTO? deepCopy(TypeSubContractStockQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeSubContractStockQuerySumDTO? sum;

}

class FTypeSubContractStockQueryDataDTO extends IDataField {
  static const contactId = FTypeSubContractStockQueryDataDTO('contactId');
  static const contactName = FTypeSubContractStockQueryDataDTO('contactName');
  static const contactNumber = FTypeSubContractStockQueryDataDTO('contactNumber');
  static const id = FTypeSubContractStockQueryDataDTO('id');
  static const itemBasicUnitId = FTypeSubContractStockQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeSubContractStockQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeSubContractStockQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeSubContractStockQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeSubContractStockQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeSubContractStockQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeSubContractStockQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeSubContractStockQueryDataDTO('itemModelRemark');
  static const itemName = FTypeSubContractStockQueryDataDTO('itemName');
  static const itemNumber = FTypeSubContractStockQueryDataDTO('itemNumber');
  static const itemParentId = FTypeSubContractStockQueryDataDTO('itemParentId');
  static const itemParentName = FTypeSubContractStockQueryDataDTO('itemParentName');
  static const itemRemark = FTypeSubContractStockQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeSubContractStockQueryDataDTO('itemSpecsRemark');
  static const itemTreePath = FTypeSubContractStockQueryDataDTO('itemTreePath');
  static const itemUnitConvertDesc = FTypeSubContractStockQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeSubContractStockQueryDataDTO('itemUnitConverts');
  static const stockAmount = FTypeSubContractStockQueryDataDTO('stockAmount');
  static const stockBasicAmount = FTypeSubContractStockQueryDataDTO('stockBasicAmount');
  static const stockPrice = FTypeSubContractStockQueryDataDTO('stockPrice');
  static const stockRemainAge = FTypeSubContractStockQueryDataDTO('stockRemainAge');
  static const stockTotal = FTypeSubContractStockQueryDataDTO('stockTotal');
  const FTypeSubContractStockQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQueryDataDTO> _TypeSubContractStockQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "contactNumber": (
    getter: (data) => data.contactNumber,
    setter: (data, value) => data.contactNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactNumber = copyer(oldData.contactNumber);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemBasicUnitId": (
    getter: (data) => data.itemBasicUnitId,
    setter: (data, value) => data.itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitId = copyer(oldData.itemBasicUnitId);
    },
  ),
  "itemBasicUnitName": (
    getter: (data) => data.itemBasicUnitName,
    setter: (data, value) => data.itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitName = copyer(oldData.itemBasicUnitName);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemParentId": (
    getter: (data) => data.itemParentId,
    setter: (data, value) => data.itemParentId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemParentId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemParentId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemParentId = copyer(oldData.itemParentId);
    },
  ),
  "itemParentName": (
    getter: (data) => data.itemParentName,
    setter: (data, value) => data.itemParentName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemParentName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemParentName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemParentName = copyer(oldData.itemParentName);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemTreePath": (
    getter: (data) => data.itemTreePath,
    setter: (data, value) => data.itemTreePath = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemTreePath);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemTreePath = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemTreePath = copyer(oldData.itemTreePath);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "itemUnitConverts": (
    getter: (data) => data.itemUnitConverts,
    setter: (data, value) => data.itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data.itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data.itemUnitConverts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.deepCopy;
        return handler(single)!;
      });
      newData.itemUnitConverts = copyer(oldData.itemUnitConverts);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockBasicAmount": (
    getter: (data) => data.stockBasicAmount,
    setter: (data, value) => data.stockBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockBasicAmount = copyer(oldData.stockBasicAmount);
    },
  ),
  "stockPrice": (
    getter: (data) => data.stockPrice,
    setter: (data, value) => data.stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPrice = copyer(oldData.stockPrice);
    },
  ),
  "stockRemainAge": (
    getter: (data) => data.stockRemainAge,
    setter: (data, value) => data.stockRemainAge = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAge);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAge = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAge = copyer(oldData.stockRemainAge);
    },
  ),
  "stockTotal": (
    getter: (data) => data.stockTotal,
    setter: (data, value) => data.stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockTotal = copyer(oldData.stockTotal);
    },
  ),
};

class TypeSubContractStockQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQueryDataDTO({
    this.contactId,
    this.contactName,
    this.contactNumber,
    this.id,
    this.itemBasicUnitId,
    this.itemBasicUnitName,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemId,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemParentId,
    this.itemParentName,
    this.itemRemark,
    this.itemSpecsRemark,
    this.itemTreePath,
    this.itemUnitConvertDesc,
    this.itemUnitConverts,
    this.stockAmount,
    this.stockBasicAmount,
    this.stockPrice,
    this.stockRemainAge,
    this.stockTotal
  });

  static TypeSubContractStockQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockQueryDataDTO? deepCopy(TypeSubContractStockQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  String? contactName;

  String? contactNumber;

  String? id;

  String? itemBasicUnitId;

  String? itemBasicUnitName;

  String? itemCommonUnitConvert;

  String? itemCommonUnitId;

  String? itemCommonUnitName;

  int? itemId;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  int? itemParentId;

  String? itemParentName;

  String? itemRemark;

  String? itemSpecsRemark;

  String? itemTreePath;

  String? itemUnitConvertDesc;

  List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts;

  String? stockAmount;

  String? stockBasicAmount;

  String? stockPrice;

  String? stockRemainAge;

  String? stockTotal;

}

class FTypeSubContractStockQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockQuerySumDTO('count');
  static const stockAmount = FTypeSubContractStockQuerySumDTO('stockAmount');
  static const stockPrice = FTypeSubContractStockQuerySumDTO('stockPrice');
  static const stockTotal = FTypeSubContractStockQuerySumDTO('stockTotal');
  static const validAmount = FTypeSubContractStockQuerySumDTO('validAmount');
  static const validTotal = FTypeSubContractStockQuerySumDTO('validTotal');
  const FTypeSubContractStockQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockQuerySumDTO> _TypeSubContractStockQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "stockAmount": (
    getter: (data) => data.stockAmount,
    setter: (data, value) => data.stockAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockAmount = copyer(oldData.stockAmount);
    },
  ),
  "stockPrice": (
    getter: (data) => data.stockPrice,
    setter: (data, value) => data.stockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockPrice = copyer(oldData.stockPrice);
    },
  ),
  "stockTotal": (
    getter: (data) => data.stockTotal,
    setter: (data, value) => data.stockTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockTotal = copyer(oldData.stockTotal);
    },
  ),
  "validAmount": (
    getter: (data) => data.validAmount,
    setter: (data, value) => data.validAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.validAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.validAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.validAmount = copyer(oldData.validAmount);
    },
  ),
  "validTotal": (
    getter: (data) => data.validTotal,
    setter: (data, value) => data.validTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.validTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.validTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.validTotal = copyer(oldData.validTotal);
    },
  ),
};

class TypeSubContractStockQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockQuerySumDTO({
    this.count,
    this.stockAmount,
    this.stockPrice,
    this.stockTotal,
    this.validAmount,
    this.validTotal
  });

  static TypeSubContractStockQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockQuerySumDTO? deepCopy(TypeSubContractStockQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? stockAmount;

  String? stockPrice;

  String? stockTotal;

  String? validAmount;

  String? validTotal;

}

class FTypeSubContractStockRemainQueryDTO extends IDataField {
  static const data = FTypeSubContractStockRemainQueryDTO('data');
  static const pageIndex = FTypeSubContractStockRemainQueryDTO('pageIndex');
  static const pageSize = FTypeSubContractStockRemainQueryDTO('pageSize');
  static const sum = FTypeSubContractStockRemainQueryDTO('sum');
  const FTypeSubContractStockRemainQueryDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQueryDTO> _TypeSubContractStockRemainQueryDTO_fields = {
  "data": (
    getter: (data) => data.data,
    setter: (data, value) => data.data = value as List<TypeSubContractStockRemainQueryDataDTO>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeSubContractStockRemainQueryDataDTO>((single){
        final handler = TypeSubContractStockRemainQueryDataDTO.toDynamic;
        return handler(single)!;
      });
      return formatter(data.data);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeSubContractStockRemainQueryDataDTO>((single){
        final handler = TypeSubContractStockRemainQueryDataDTO.fromDynamic;
        return handler(single)!;
      });
      data.data = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeSubContractStockRemainQueryDataDTO>((single){
        final handler = TypeSubContractStockRemainQueryDataDTO.deepCopy;
        return handler(single)!;
      });
      newData.data = copyer(oldData.data);
    },
  ),
  "pageIndex": (
    getter: (data) => data.pageIndex,
    setter: (data, value) => data.pageIndex = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageIndex);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageIndex = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageIndex = copyer(oldData.pageIndex);
    },
  ),
  "pageSize": (
    getter: (data) => data.pageSize,
    setter: (data, value) => data.pageSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.pageSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.pageSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.pageSize = copyer(oldData.pageSize);
    },
  ),
  "sum": (
    getter: (data) => data.sum,
    setter: (data, value) => data.sum = value as TypeSubContractStockRemainQuerySumDTO?,
    toDynamic: (data) {
      final formatter = TypeSubContractStockRemainQuerySumDTO.toDynamic;
      return formatter(data.sum);
    },
    fromDynamic: (data, value) {
      final parser = TypeSubContractStockRemainQuerySumDTO.fromDynamic;
      data.sum = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSubContractStockRemainQuerySumDTO.deepCopy;
      newData.sum = copyer(oldData.sum);
    },
  ),
};

class TypeSubContractStockRemainQueryDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQueryDTO({
    this.data,
    this.pageIndex,
    this.pageSize,
    this.sum
  });

  static TypeSubContractStockRemainQueryDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQueryDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQueryDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockRemainQueryDTO? deepCopy(TypeSubContractStockRemainQueryDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockRemainQueryDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockRemainQueryDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockRemainQueryDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQueryDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  List<TypeSubContractStockRemainQueryDataDTO>? data;

  int? pageIndex;

  int? pageSize;

  TypeSubContractStockRemainQuerySumDTO? sum;

}

class FTypeSubContractStockRemainQueryDataDTO extends IDataField {
  static const contactId = FTypeSubContractStockRemainQueryDataDTO('contactId');
  static const contactName = FTypeSubContractStockRemainQueryDataDTO('contactName');
  static const id = FTypeSubContractStockRemainQueryDataDTO('id');
  static const itemBasicUnitId = FTypeSubContractStockRemainQueryDataDTO('itemBasicUnitId');
  static const itemBasicUnitName = FTypeSubContractStockRemainQueryDataDTO('itemBasicUnitName');
  static const itemCommonUnitConvert = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitConvert');
  static const itemCommonUnitId = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitId');
  static const itemCommonUnitName = FTypeSubContractStockRemainQueryDataDTO('itemCommonUnitName');
  static const itemId = FTypeSubContractStockRemainQueryDataDTO('itemId');
  static const itemIsEnabled = FTypeSubContractStockRemainQueryDataDTO('itemIsEnabled');
  static const itemModelRemark = FTypeSubContractStockRemainQueryDataDTO('itemModelRemark');
  static const itemName = FTypeSubContractStockRemainQueryDataDTO('itemName');
  static const itemNumber = FTypeSubContractStockRemainQueryDataDTO('itemNumber');
  static const itemRemark = FTypeSubContractStockRemainQueryDataDTO('itemRemark');
  static const itemSpecsRemark = FTypeSubContractStockRemainQueryDataDTO('itemSpecsRemark');
  static const itemUnitConvertDesc = FTypeSubContractStockRemainQueryDataDTO('itemUnitConvertDesc');
  static const itemUnitConverts = FTypeSubContractStockRemainQueryDataDTO('itemUnitConverts');
  static const sourceOrderId = FTypeSubContractStockRemainQueryDataDTO('sourceOrderId');
  static const sourceOrderNumber = FTypeSubContractStockRemainQueryDataDTO('sourceOrderNumber');
  static const sourceOrderType = FTypeSubContractStockRemainQueryDataDTO('sourceOrderType');
  static const stockId = FTypeSubContractStockRemainQueryDataDTO('stockId');
  static const stockRemainAmount = FTypeSubContractStockRemainQueryDataDTO('stockRemainAmount');
  static const stockRemainBasicAmount = FTypeSubContractStockRemainQueryDataDTO('stockRemainBasicAmount');
  static const stockRemainPrice = FTypeSubContractStockRemainQueryDataDTO('stockRemainPrice');
  static const stockRemainPutOnShelfTime = FTypeSubContractStockRemainQueryDataDTO('stockRemainPutOnShelfTime');
  static const stockRemainRemark = FTypeSubContractStockRemainQueryDataDTO('stockRemainRemark');
  static const stockRemainTotal = FTypeSubContractStockRemainQueryDataDTO('stockRemainTotal');
  const FTypeSubContractStockRemainQueryDataDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQueryDataDTO> _TypeSubContractStockRemainQueryDataDTO_fields = {
  "contactId": (
    getter: (data) => data.contactId,
    setter: (data, value) => data.contactId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.contactId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.contactId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.contactId = copyer(oldData.contactId);
    },
  ),
  "contactName": (
    getter: (data) => data.contactName,
    setter: (data, value) => data.contactName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.contactName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.contactName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.contactName = copyer(oldData.contactName);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "itemBasicUnitId": (
    getter: (data) => data.itemBasicUnitId,
    setter: (data, value) => data.itemBasicUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitId = copyer(oldData.itemBasicUnitId);
    },
  ),
  "itemBasicUnitName": (
    getter: (data) => data.itemBasicUnitName,
    setter: (data, value) => data.itemBasicUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemBasicUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemBasicUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemBasicUnitName = copyer(oldData.itemBasicUnitName);
    },
  ),
  "itemCommonUnitConvert": (
    getter: (data) => data.itemCommonUnitConvert,
    setter: (data, value) => data.itemCommonUnitConvert = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitConvert);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitConvert = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitConvert = copyer(oldData.itemCommonUnitConvert);
    },
  ),
  "itemCommonUnitId": (
    getter: (data) => data.itemCommonUnitId,
    setter: (data, value) => data.itemCommonUnitId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitId = copyer(oldData.itemCommonUnitId);
    },
  ),
  "itemCommonUnitName": (
    getter: (data) => data.itemCommonUnitName,
    setter: (data, value) => data.itemCommonUnitName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemCommonUnitName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemCommonUnitName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemCommonUnitName = copyer(oldData.itemCommonUnitName);
    },
  ),
  "itemId": (
    getter: (data) => data.itemId,
    setter: (data, value) => data.itemId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.itemId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.itemId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.itemId = copyer(oldData.itemId);
    },
  ),
  "itemIsEnabled": (
    getter: (data) => data.itemIsEnabled,
    setter: (data, value) => data.itemIsEnabled = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemIsEnabled);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemIsEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemIsEnabled = copyer(oldData.itemIsEnabled);
    },
  ),
  "itemModelRemark": (
    getter: (data) => data.itemModelRemark,
    setter: (data, value) => data.itemModelRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemModelRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemModelRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemModelRemark = copyer(oldData.itemModelRemark);
    },
  ),
  "itemName": (
    getter: (data) => data.itemName,
    setter: (data, value) => data.itemName = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemName);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemName = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemName = copyer(oldData.itemName);
    },
  ),
  "itemNumber": (
    getter: (data) => data.itemNumber,
    setter: (data, value) => data.itemNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemNumber = copyer(oldData.itemNumber);
    },
  ),
  "itemRemark": (
    getter: (data) => data.itemRemark,
    setter: (data, value) => data.itemRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemRemark = copyer(oldData.itemRemark);
    },
  ),
  "itemSpecsRemark": (
    getter: (data) => data.itemSpecsRemark,
    setter: (data, value) => data.itemSpecsRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemSpecsRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemSpecsRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemSpecsRemark = copyer(oldData.itemSpecsRemark);
    },
  ),
  "itemUnitConvertDesc": (
    getter: (data) => data.itemUnitConvertDesc,
    setter: (data, value) => data.itemUnitConvertDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.itemUnitConvertDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.itemUnitConvertDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.itemUnitConvertDesc = copyer(oldData.itemUnitConvertDesc);
    },
  ),
  "itemUnitConverts": (
    getter: (data) => data.itemUnitConverts,
    setter: (data, value) => data.itemUnitConverts = value as List<TypeAutoInjectLiteItemUnitConvert>?,
    toDynamic: (data) {
      final formatter = ListHelper.wrapToDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.toDynamic;
        return handler(single)!;
      });
      return formatter(data.itemUnitConverts);
    },
    fromDynamic: (data, value) {
      final parser = ListHelper.wrapFromDynamic<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.fromDynamic;
        return handler(single)!;
      });
      data.itemUnitConverts = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = ListHelper.wrapDeepCopy<TypeAutoInjectLiteItemUnitConvert>((single){
        final handler = TypeAutoInjectLiteItemUnitConvert.deepCopy;
        return handler(single)!;
      });
      newData.itemUnitConverts = copyer(oldData.itemUnitConverts);
    },
  ),
  "sourceOrderId": (
    getter: (data) => data.sourceOrderId,
    setter: (data, value) => data.sourceOrderId = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.sourceOrderId);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.sourceOrderId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.sourceOrderId = copyer(oldData.sourceOrderId);
    },
  ),
  "sourceOrderNumber": (
    getter: (data) => data.sourceOrderNumber,
    setter: (data, value) => data.sourceOrderNumber = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.sourceOrderNumber);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.sourceOrderNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.sourceOrderNumber = copyer(oldData.sourceOrderNumber);
    },
  ),
  "sourceOrderType": (
    getter: (data) => data.sourceOrderType,
    setter: (data, value) => data.sourceOrderType = value as TypeEnumOrderType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderType.toDynamic;
      return formatter(data.sourceOrderType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderType.fromDynamic;
      data.sourceOrderType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderType.deepCopy;
      newData.sourceOrderType = copyer(oldData.sourceOrderType);
    },
  ),
  "stockId": (
    getter: (data) => data.stockId,
    setter: (data, value) => data.stockId = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockId);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockId = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockId = copyer(oldData.stockId);
    },
  ),
  "stockRemainAmount": (
    getter: (data) => data.stockRemainAmount,
    setter: (data, value) => data.stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAmount = copyer(oldData.stockRemainAmount);
    },
  ),
  "stockRemainBasicAmount": (
    getter: (data) => data.stockRemainBasicAmount,
    setter: (data, value) => data.stockRemainBasicAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainBasicAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainBasicAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainBasicAmount = copyer(oldData.stockRemainBasicAmount);
    },
  ),
  "stockRemainPrice": (
    getter: (data) => data.stockRemainPrice,
    setter: (data, value) => data.stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPrice = copyer(oldData.stockRemainPrice);
    },
  ),
  "stockRemainPutOnShelfTime": (
    getter: (data) => data.stockRemainPutOnShelfTime,
    setter: (data, value) => data.stockRemainPutOnShelfTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPutOnShelfTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPutOnShelfTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPutOnShelfTime = copyer(oldData.stockRemainPutOnShelfTime);
    },
  ),
  "stockRemainRemark": (
    getter: (data) => data.stockRemainRemark,
    setter: (data, value) => data.stockRemainRemark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainRemark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainRemark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainRemark = copyer(oldData.stockRemainRemark);
    },
  ),
  "stockRemainTotal": (
    getter: (data) => data.stockRemainTotal,
    setter: (data, value) => data.stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainTotal = copyer(oldData.stockRemainTotal);
    },
  ),
};

class TypeSubContractStockRemainQueryDataDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQueryDataDTO({
    this.contactId,
    this.contactName,
    this.id,
    this.itemBasicUnitId,
    this.itemBasicUnitName,
    this.itemCommonUnitConvert,
    this.itemCommonUnitId,
    this.itemCommonUnitName,
    this.itemId,
    this.itemIsEnabled,
    this.itemModelRemark,
    this.itemName,
    this.itemNumber,
    this.itemRemark,
    this.itemSpecsRemark,
    this.itemUnitConvertDesc,
    this.itemUnitConverts,
    this.sourceOrderId,
    this.sourceOrderNumber,
    this.sourceOrderType,
    this.stockId,
    this.stockRemainAmount,
    this.stockRemainBasicAmount,
    this.stockRemainPrice,
    this.stockRemainPutOnShelfTime,
    this.stockRemainRemark,
    this.stockRemainTotal
  });

  static TypeSubContractStockRemainQueryDataDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQueryDataDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQueryDataDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockRemainQueryDataDTO? deepCopy(TypeSubContractStockRemainQueryDataDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockRemainQueryDataDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockRemainQueryDataDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockRemainQueryDataDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQueryDataDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? contactId;

  String? contactName;

  String? id;

  String? itemBasicUnitId;

  String? itemBasicUnitName;

  String? itemCommonUnitConvert;

  String? itemCommonUnitId;

  String? itemCommonUnitName;

  int? itemId;

  String? itemIsEnabled;

  String? itemModelRemark;

  String? itemName;

  String? itemNumber;

  String? itemRemark;

  String? itemSpecsRemark;

  String? itemUnitConvertDesc;

  List<TypeAutoInjectLiteItemUnitConvert>? itemUnitConverts;

  int? sourceOrderId;

  String? sourceOrderNumber;

  TypeEnumOrderType? sourceOrderType;

  String? stockId;

  String? stockRemainAmount;

  String? stockRemainBasicAmount;

  String? stockRemainPrice;

  String? stockRemainPutOnShelfTime;

  String? stockRemainRemark;

  String? stockRemainTotal;

}

class FTypeSubContractStockRemainQuerySumDTO extends IDataField {
  static const count = FTypeSubContractStockRemainQuerySumDTO('count');
  static const stockRemainAmount = FTypeSubContractStockRemainQuerySumDTO('stockRemainAmount');
  static const stockRemainPrice = FTypeSubContractStockRemainQuerySumDTO('stockRemainPrice');
  static const stockRemainTotal = FTypeSubContractStockRemainQuerySumDTO('stockRemainTotal');
  const FTypeSubContractStockRemainQuerySumDTO(super.key);
}

final FieldReflectInfo<TypeSubContractStockRemainQuerySumDTO> _TypeSubContractStockRemainQuerySumDTO_fields = {
  "count": (
    getter: (data) => data.count,
    setter: (data, value) => data.count = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.count);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.count = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.count = copyer(oldData.count);
    },
  ),
  "stockRemainAmount": (
    getter: (data) => data.stockRemainAmount,
    setter: (data, value) => data.stockRemainAmount = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainAmount);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainAmount = copyer(oldData.stockRemainAmount);
    },
  ),
  "stockRemainPrice": (
    getter: (data) => data.stockRemainPrice,
    setter: (data, value) => data.stockRemainPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainPrice = copyer(oldData.stockRemainPrice);
    },
  ),
  "stockRemainTotal": (
    getter: (data) => data.stockRemainTotal,
    setter: (data, value) => data.stockRemainTotal = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.stockRemainTotal);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.stockRemainTotal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.stockRemainTotal = copyer(oldData.stockRemainTotal);
    },
  ),
};

class TypeSubContractStockRemainQuerySumDTO extends IDataBasic implements IDataDynamic {
  TypeSubContractStockRemainQuerySumDTO({
    this.count,
    this.stockRemainAmount,
    this.stockRemainPrice,
    this.stockRemainTotal
  });

  static TypeSubContractStockRemainQuerySumDTO? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSubContractStockRemainQuerySumDTO();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSubContractStockRemainQuerySumDTO: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSubContractStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSubContractStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSubContractStockRemainQuerySumDTO? deepCopy(TypeSubContractStockRemainQuerySumDTO? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSubContractStockRemainQuerySumDTO();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSubContractStockRemainQuerySumDTO_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSubContractStockRemainQuerySumDTO copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSubContractStockRemainQuerySumDTO_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? count;

  String? stockRemainAmount;

  String? stockRemainPrice;

  String? stockRemainTotal;

}

class FTypeSystemConfigAccountData extends IDataField {
  static const hasOpenAccount = FTypeSystemConfigAccountData('hasOpenAccount');
  static const openAccountDate = FTypeSystemConfigAccountData('openAccountDate');
  const FTypeSystemConfigAccountData(super.key);
}

final FieldReflectInfo<TypeSystemConfigAccountData> _TypeSystemConfigAccountData_fields = {
  "hasOpenAccount": (
    getter: (data) => data.hasOpenAccount,
    setter: (data, value) => data.hasOpenAccount = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.hasOpenAccount);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.hasOpenAccount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.hasOpenAccount = copyer(oldData.hasOpenAccount);
    },
  ),
  "openAccountDate": (
    getter: (data) => data.openAccountDate,
    setter: (data, value) => data.openAccountDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.openAccountDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.openAccountDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.openAccountDate = copyer(oldData.openAccountDate);
    },
  ),
};

class TypeSystemConfigAccountData extends IDataBasic implements IDataDynamic {
  TypeSystemConfigAccountData({
    this.hasOpenAccount,
    this.openAccountDate
  });

  static TypeSystemConfigAccountData? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigAccountData();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigAccountData_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigAccountData: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigAccountData? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigAccountData_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigAccountData? deepCopy(TypeSystemConfigAccountData? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigAccountData();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigAccountData_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigAccountData copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigAccountData_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigAccountData_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? hasOpenAccount;

  String? openAccountDate;

}

class FTypeSystemConfigIndustrySetting extends IDataField {
  static const isItemDefaultRegularType = FTypeSystemConfigIndustrySetting('isItemDefaultRegularType');
  const FTypeSystemConfigIndustrySetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigIndustrySetting> _TypeSystemConfigIndustrySetting_fields = {
  "isItemDefaultRegularType": (
    getter: (data) => data.isItemDefaultRegularType,
    setter: (data, value) => data.isItemDefaultRegularType = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isItemDefaultRegularType);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isItemDefaultRegularType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isItemDefaultRegularType = copyer(oldData.isItemDefaultRegularType);
    },
  ),
};

class TypeSystemConfigIndustrySetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigIndustrySetting({
    this.isItemDefaultRegularType
  });

  static TypeSystemConfigIndustrySetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigIndustrySetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigIndustrySetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigIndustrySetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigIndustrySetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigIndustrySetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigIndustrySetting? deepCopy(TypeSystemConfigIndustrySetting? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigIndustrySetting();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigIndustrySetting_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigIndustrySetting copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigIndustrySetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigIndustrySetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  bool? isItemDefaultRegularType;

}

class FTypeSystemConfigOrderSetting extends IDataField {
  static const importOrderBatchSize = FTypeSystemConfigOrderSetting('importOrderBatchSize');
  static const importOrderIsAutoNumber = FTypeSystemConfigOrderSetting('importOrderIsAutoNumber');
  static const isAllowEditNumber = FTypeSystemConfigOrderSetting('isAllowEditNumber');
  static const isAllowExcessiveInAmount = FTypeSystemConfigOrderSetting('isAllowExcessiveInAmount');
  static const isAllowExcessiveOutAmount = FTypeSystemConfigOrderSetting('isAllowExcessiveOutAmount');
  static const isDisableExportWhenSalesItemQueryHasDraft = FTypeSystemConfigOrderSetting('isDisableExportWhenSalesItemQueryHasDraft');
  static const isEnablePurchaseDefaultTaxRate = FTypeSystemConfigOrderSetting('isEnablePurchaseDefaultTaxRate');
  static const isEnablePurchaseDiscount = FTypeSystemConfigOrderSetting('isEnablePurchaseDiscount');
  static const isEnablePurchaseInPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('isEnablePurchaseInPriceGreaterThanStockPrice');
  static const isEnablePurchaseInPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('isEnablePurchaseInPriceLowerThanStockPrice');
  static const isEnableSalesDefaultTaxRate = FTypeSystemConfigOrderSetting('isEnableSalesDefaultTaxRate');
  static const isEnableSalesDiscount = FTypeSystemConfigOrderSetting('isEnableSalesDiscount');
  static const isEnableSalesOutPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('isEnableSalesOutPriceGreaterThanStockPrice');
  static const isEnableSalesOutPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('isEnableSalesOutPriceLowerThanStockPrice');
  static const numberDateType = FTypeSystemConfigOrderSetting('numberDateType');
  static const numberIdLength = FTypeSystemConfigOrderSetting('numberIdLength');
  static const orderItemDuplicateIdStrategy = FTypeSystemConfigOrderSetting('orderItemDuplicateIdStrategy');
  static const priceRoundScale = FTypeSystemConfigOrderSetting('priceRoundScale');
  static const purchaseDefaultTaxRate = FTypeSystemConfigOrderSetting('purchaseDefaultTaxRate');
  static const purchaseInPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('purchaseInPriceGreaterThanStockPrice');
  static const purchaseInPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('purchaseInPriceLowerThanStockPrice');
  static const salesDefaultTaxRate = FTypeSystemConfigOrderSetting('salesDefaultTaxRate');
  static const salesOutPriceGreaterThanStockPrice = FTypeSystemConfigOrderSetting('salesOutPriceGreaterThanStockPrice');
  static const salesOutPriceLowerThanStockPrice = FTypeSystemConfigOrderSetting('salesOutPriceLowerThanStockPrice');
  static const totalRoundScale = FTypeSystemConfigOrderSetting('totalRoundScale');
  const FTypeSystemConfigOrderSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigOrderSetting> _TypeSystemConfigOrderSetting_fields = {
  "importOrderBatchSize": (
    getter: (data) => data.importOrderBatchSize,
    setter: (data, value) => data.importOrderBatchSize = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.importOrderBatchSize);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.importOrderBatchSize = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.importOrderBatchSize = copyer(oldData.importOrderBatchSize);
    },
  ),
  "importOrderIsAutoNumber": (
    getter: (data) => data.importOrderIsAutoNumber,
    setter: (data, value) => data.importOrderIsAutoNumber = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.importOrderIsAutoNumber);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.importOrderIsAutoNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.importOrderIsAutoNumber = copyer(oldData.importOrderIsAutoNumber);
    },
  ),
  "isAllowEditNumber": (
    getter: (data) => data.isAllowEditNumber,
    setter: (data, value) => data.isAllowEditNumber = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isAllowEditNumber);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isAllowEditNumber = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isAllowEditNumber = copyer(oldData.isAllowEditNumber);
    },
  ),
  "isAllowExcessiveInAmount": (
    getter: (data) => data.isAllowExcessiveInAmount,
    setter: (data, value) => data.isAllowExcessiveInAmount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isAllowExcessiveInAmount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isAllowExcessiveInAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isAllowExcessiveInAmount = copyer(oldData.isAllowExcessiveInAmount);
    },
  ),
  "isAllowExcessiveOutAmount": (
    getter: (data) => data.isAllowExcessiveOutAmount,
    setter: (data, value) => data.isAllowExcessiveOutAmount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isAllowExcessiveOutAmount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isAllowExcessiveOutAmount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isAllowExcessiveOutAmount = copyer(oldData.isAllowExcessiveOutAmount);
    },
  ),
  "isDisableExportWhenSalesItemQueryHasDraft": (
    getter: (data) => data.isDisableExportWhenSalesItemQueryHasDraft,
    setter: (data, value) => data.isDisableExportWhenSalesItemQueryHasDraft = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isDisableExportWhenSalesItemQueryHasDraft);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isDisableExportWhenSalesItemQueryHasDraft = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isDisableExportWhenSalesItemQueryHasDraft = copyer(oldData.isDisableExportWhenSalesItemQueryHasDraft);
    },
  ),
  "isEnablePurchaseDefaultTaxRate": (
    getter: (data) => data.isEnablePurchaseDefaultTaxRate,
    setter: (data, value) => data.isEnablePurchaseDefaultTaxRate = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnablePurchaseDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnablePurchaseDefaultTaxRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnablePurchaseDefaultTaxRate = copyer(oldData.isEnablePurchaseDefaultTaxRate);
    },
  ),
  "isEnablePurchaseDiscount": (
    getter: (data) => data.isEnablePurchaseDiscount,
    setter: (data, value) => data.isEnablePurchaseDiscount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnablePurchaseDiscount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnablePurchaseDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnablePurchaseDiscount = copyer(oldData.isEnablePurchaseDiscount);
    },
  ),
  "isEnablePurchaseInPriceGreaterThanStockPrice": (
    getter: (data) => data.isEnablePurchaseInPriceGreaterThanStockPrice,
    setter: (data, value) => data.isEnablePurchaseInPriceGreaterThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnablePurchaseInPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnablePurchaseInPriceGreaterThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnablePurchaseInPriceGreaterThanStockPrice = copyer(oldData.isEnablePurchaseInPriceGreaterThanStockPrice);
    },
  ),
  "isEnablePurchaseInPriceLowerThanStockPrice": (
    getter: (data) => data.isEnablePurchaseInPriceLowerThanStockPrice,
    setter: (data, value) => data.isEnablePurchaseInPriceLowerThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnablePurchaseInPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnablePurchaseInPriceLowerThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnablePurchaseInPriceLowerThanStockPrice = copyer(oldData.isEnablePurchaseInPriceLowerThanStockPrice);
    },
  ),
  "isEnableSalesDefaultTaxRate": (
    getter: (data) => data.isEnableSalesDefaultTaxRate,
    setter: (data, value) => data.isEnableSalesDefaultTaxRate = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSalesDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSalesDefaultTaxRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSalesDefaultTaxRate = copyer(oldData.isEnableSalesDefaultTaxRate);
    },
  ),
  "isEnableSalesDiscount": (
    getter: (data) => data.isEnableSalesDiscount,
    setter: (data, value) => data.isEnableSalesDiscount = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSalesDiscount);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSalesDiscount = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSalesDiscount = copyer(oldData.isEnableSalesDiscount);
    },
  ),
  "isEnableSalesOutPriceGreaterThanStockPrice": (
    getter: (data) => data.isEnableSalesOutPriceGreaterThanStockPrice,
    setter: (data, value) => data.isEnableSalesOutPriceGreaterThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSalesOutPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSalesOutPriceGreaterThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSalesOutPriceGreaterThanStockPrice = copyer(oldData.isEnableSalesOutPriceGreaterThanStockPrice);
    },
  ),
  "isEnableSalesOutPriceLowerThanStockPrice": (
    getter: (data) => data.isEnableSalesOutPriceLowerThanStockPrice,
    setter: (data, value) => data.isEnableSalesOutPriceLowerThanStockPrice = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSalesOutPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSalesOutPriceLowerThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSalesOutPriceLowerThanStockPrice = copyer(oldData.isEnableSalesOutPriceLowerThanStockPrice);
    },
  ),
  "numberDateType": (
    getter: (data) => data.numberDateType,
    setter: (data, value) => data.numberDateType = value as TypeEnumOrderNumberDateType?,
    toDynamic: (data) {
      final formatter = TypeEnumOrderNumberDateType.toDynamic;
      return formatter(data.numberDateType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumOrderNumberDateType.fromDynamic;
      data.numberDateType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumOrderNumberDateType.deepCopy;
      newData.numberDateType = copyer(oldData.numberDateType);
    },
  ),
  "numberIdLength": (
    getter: (data) => data.numberIdLength,
    setter: (data, value) => data.numberIdLength = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.numberIdLength);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.numberIdLength = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.numberIdLength = copyer(oldData.numberIdLength);
    },
  ),
  "orderItemDuplicateIdStrategy": (
    getter: (data) => data.orderItemDuplicateIdStrategy,
    setter: (data, value) => data.orderItemDuplicateIdStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data.orderItemDuplicateIdStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data.orderItemDuplicateIdStrategy = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumResourceDuplicateNameStrategy.deepCopy;
      newData.orderItemDuplicateIdStrategy = copyer(oldData.orderItemDuplicateIdStrategy);
    },
  ),
  "priceRoundScale": (
    getter: (data) => data.priceRoundScale,
    setter: (data, value) => data.priceRoundScale = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.priceRoundScale);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.priceRoundScale = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.priceRoundScale = copyer(oldData.priceRoundScale);
    },
  ),
  "purchaseDefaultTaxRate": (
    getter: (data) => data.purchaseDefaultTaxRate,
    setter: (data, value) => data.purchaseDefaultTaxRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseDefaultTaxRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseDefaultTaxRate = copyer(oldData.purchaseDefaultTaxRate);
    },
  ),
  "purchaseInPriceGreaterThanStockPrice": (
    getter: (data) => data.purchaseInPriceGreaterThanStockPrice,
    setter: (data, value) => data.purchaseInPriceGreaterThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseInPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseInPriceGreaterThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseInPriceGreaterThanStockPrice = copyer(oldData.purchaseInPriceGreaterThanStockPrice);
    },
  ),
  "purchaseInPriceLowerThanStockPrice": (
    getter: (data) => data.purchaseInPriceLowerThanStockPrice,
    setter: (data, value) => data.purchaseInPriceLowerThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.purchaseInPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.purchaseInPriceLowerThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.purchaseInPriceLowerThanStockPrice = copyer(oldData.purchaseInPriceLowerThanStockPrice);
    },
  ),
  "salesDefaultTaxRate": (
    getter: (data) => data.salesDefaultTaxRate,
    setter: (data, value) => data.salesDefaultTaxRate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesDefaultTaxRate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesDefaultTaxRate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesDefaultTaxRate = copyer(oldData.salesDefaultTaxRate);
    },
  ),
  "salesOutPriceGreaterThanStockPrice": (
    getter: (data) => data.salesOutPriceGreaterThanStockPrice,
    setter: (data, value) => data.salesOutPriceGreaterThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesOutPriceGreaterThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesOutPriceGreaterThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesOutPriceGreaterThanStockPrice = copyer(oldData.salesOutPriceGreaterThanStockPrice);
    },
  ),
  "salesOutPriceLowerThanStockPrice": (
    getter: (data) => data.salesOutPriceLowerThanStockPrice,
    setter: (data, value) => data.salesOutPriceLowerThanStockPrice = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.salesOutPriceLowerThanStockPrice);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.salesOutPriceLowerThanStockPrice = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.salesOutPriceLowerThanStockPrice = copyer(oldData.salesOutPriceLowerThanStockPrice);
    },
  ),
  "totalRoundScale": (
    getter: (data) => data.totalRoundScale,
    setter: (data, value) => data.totalRoundScale = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.totalRoundScale);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.totalRoundScale = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.totalRoundScale = copyer(oldData.totalRoundScale);
    },
  ),
};

class TypeSystemConfigOrderSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigOrderSetting({
    this.importOrderBatchSize,
    this.importOrderIsAutoNumber,
    this.isAllowEditNumber,
    this.isAllowExcessiveInAmount,
    this.isAllowExcessiveOutAmount,
    this.isDisableExportWhenSalesItemQueryHasDraft,
    this.isEnablePurchaseDefaultTaxRate,
    this.isEnablePurchaseDiscount,
    this.isEnablePurchaseInPriceGreaterThanStockPrice,
    this.isEnablePurchaseInPriceLowerThanStockPrice,
    this.isEnableSalesDefaultTaxRate,
    this.isEnableSalesDiscount,
    this.isEnableSalesOutPriceGreaterThanStockPrice,
    this.isEnableSalesOutPriceLowerThanStockPrice,
    this.numberDateType,
    this.numberIdLength,
    this.orderItemDuplicateIdStrategy,
    this.priceRoundScale,
    this.purchaseDefaultTaxRate,
    this.purchaseInPriceGreaterThanStockPrice,
    this.purchaseInPriceLowerThanStockPrice,
    this.salesDefaultTaxRate,
    this.salesOutPriceGreaterThanStockPrice,
    this.salesOutPriceLowerThanStockPrice,
    this.totalRoundScale
  });

  static TypeSystemConfigOrderSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigOrderSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigOrderSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigOrderSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigOrderSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigOrderSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigOrderSetting? deepCopy(TypeSystemConfigOrderSetting? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigOrderSetting();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigOrderSetting_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigOrderSetting copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigOrderSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigOrderSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  int? importOrderBatchSize;

  bool? importOrderIsAutoNumber;

  bool? isAllowEditNumber;

  bool? isAllowExcessiveInAmount;

  bool? isAllowExcessiveOutAmount;

  bool? isDisableExportWhenSalesItemQueryHasDraft;

  bool? isEnablePurchaseDefaultTaxRate;

  bool? isEnablePurchaseDiscount;

  bool? isEnablePurchaseInPriceGreaterThanStockPrice;

  bool? isEnablePurchaseInPriceLowerThanStockPrice;

  bool? isEnableSalesDefaultTaxRate;

  bool? isEnableSalesDiscount;

  bool? isEnableSalesOutPriceGreaterThanStockPrice;

  bool? isEnableSalesOutPriceLowerThanStockPrice;

  TypeEnumOrderNumberDateType? numberDateType;

  int? numberIdLength;

  TypeEnumResourceDuplicateNameStrategy? orderItemDuplicateIdStrategy;

  int? priceRoundScale;

  String? purchaseDefaultTaxRate;

  String? purchaseInPriceGreaterThanStockPrice;

  String? purchaseInPriceLowerThanStockPrice;

  String? salesDefaultTaxRate;

  String? salesOutPriceGreaterThanStockPrice;

  String? salesOutPriceLowerThanStockPrice;

  int? totalRoundScale;

}

class FTypeSystemConfigResourceSetting extends IDataField {
  static const contactDuplicateNameStrategy = FTypeSystemConfigResourceSetting('contactDuplicateNameStrategy');
  static const contactSortStrategy = FTypeSystemConfigResourceSetting('contactSortStrategy');
  static const isEnableItemCustom = FTypeSystemConfigResourceSetting('isEnableItemCustom');
  static const isEnableSelectContactByModal = FTypeSystemConfigResourceSetting('isEnableSelectContactByModal');
  static const isEnableSelectItemByModal = FTypeSystemConfigResourceSetting('isEnableSelectItemByModal');
  static const isEnableShowCategoryWhenFilterContact = FTypeSystemConfigResourceSetting('isEnableShowCategoryWhenFilterContact');
  static const itemDuplicateNameStrategy = FTypeSystemConfigResourceSetting('itemDuplicateNameStrategy');
  static const itemSortStrategy = FTypeSystemConfigResourceSetting('itemSortStrategy');
  const FTypeSystemConfigResourceSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigResourceSetting> _TypeSystemConfigResourceSetting_fields = {
  "contactDuplicateNameStrategy": (
    getter: (data) => data.contactDuplicateNameStrategy,
    setter: (data, value) => data.contactDuplicateNameStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data.contactDuplicateNameStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data.contactDuplicateNameStrategy = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumResourceDuplicateNameStrategy.deepCopy;
      newData.contactDuplicateNameStrategy = copyer(oldData.contactDuplicateNameStrategy);
    },
  ),
  "contactSortStrategy": (
    getter: (data) => data.contactSortStrategy,
    setter: (data, value) => data.contactSortStrategy = value as TypeEnumResourceSortStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceSortStrategy.toDynamic;
      return formatter(data.contactSortStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceSortStrategy.fromDynamic;
      data.contactSortStrategy = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumResourceSortStrategy.deepCopy;
      newData.contactSortStrategy = copyer(oldData.contactSortStrategy);
    },
  ),
  "isEnableItemCustom": (
    getter: (data) => data.isEnableItemCustom,
    setter: (data, value) => data.isEnableItemCustom = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableItemCustom);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableItemCustom = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableItemCustom = copyer(oldData.isEnableItemCustom);
    },
  ),
  "isEnableSelectContactByModal": (
    getter: (data) => data.isEnableSelectContactByModal,
    setter: (data, value) => data.isEnableSelectContactByModal = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSelectContactByModal);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSelectContactByModal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSelectContactByModal = copyer(oldData.isEnableSelectContactByModal);
    },
  ),
  "isEnableSelectItemByModal": (
    getter: (data) => data.isEnableSelectItemByModal,
    setter: (data, value) => data.isEnableSelectItemByModal = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableSelectItemByModal);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableSelectItemByModal = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableSelectItemByModal = copyer(oldData.isEnableSelectItemByModal);
    },
  ),
  "isEnableShowCategoryWhenFilterContact": (
    getter: (data) => data.isEnableShowCategoryWhenFilterContact,
    setter: (data, value) => data.isEnableShowCategoryWhenFilterContact = value as bool?,
    toDynamic: (data) {
      final formatter = BoolHelper.toDynamic;
      return formatter(data.isEnableShowCategoryWhenFilterContact);
    },
    fromDynamic: (data, value) {
      final parser = BoolHelper.fromDynamic;
      data.isEnableShowCategoryWhenFilterContact = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = BoolHelper.deepCopy;
      newData.isEnableShowCategoryWhenFilterContact = copyer(oldData.isEnableShowCategoryWhenFilterContact);
    },
  ),
  "itemDuplicateNameStrategy": (
    getter: (data) => data.itemDuplicateNameStrategy,
    setter: (data, value) => data.itemDuplicateNameStrategy = value as TypeEnumResourceDuplicateNameStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceDuplicateNameStrategy.toDynamic;
      return formatter(data.itemDuplicateNameStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceDuplicateNameStrategy.fromDynamic;
      data.itemDuplicateNameStrategy = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumResourceDuplicateNameStrategy.deepCopy;
      newData.itemDuplicateNameStrategy = copyer(oldData.itemDuplicateNameStrategy);
    },
  ),
  "itemSortStrategy": (
    getter: (data) => data.itemSortStrategy,
    setter: (data, value) => data.itemSortStrategy = value as TypeEnumResourceSortStrategy?,
    toDynamic: (data) {
      final formatter = TypeEnumResourceSortStrategy.toDynamic;
      return formatter(data.itemSortStrategy);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumResourceSortStrategy.fromDynamic;
      data.itemSortStrategy = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumResourceSortStrategy.deepCopy;
      newData.itemSortStrategy = copyer(oldData.itemSortStrategy);
    },
  ),
};

class TypeSystemConfigResourceSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigResourceSetting({
    this.contactDuplicateNameStrategy,
    this.contactSortStrategy,
    this.isEnableItemCustom,
    this.isEnableSelectContactByModal,
    this.isEnableSelectItemByModal,
    this.isEnableShowCategoryWhenFilterContact,
    this.itemDuplicateNameStrategy,
    this.itemSortStrategy
  });

  static TypeSystemConfigResourceSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigResourceSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigResourceSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigResourceSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigResourceSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigResourceSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigResourceSetting? deepCopy(TypeSystemConfigResourceSetting? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigResourceSetting();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigResourceSetting_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigResourceSetting copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigResourceSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigResourceSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumResourceDuplicateNameStrategy? contactDuplicateNameStrategy;

  TypeEnumResourceSortStrategy? contactSortStrategy;

  bool? isEnableItemCustom;

  bool? isEnableSelectContactByModal;

  bool? isEnableSelectItemByModal;

  bool? isEnableShowCategoryWhenFilterContact;

  TypeEnumResourceDuplicateNameStrategy? itemDuplicateNameStrategy;

  TypeEnumResourceSortStrategy? itemSortStrategy;

}

class FTypeSystemConfigSettingData extends IDataField {
  static const industrySetting = FTypeSystemConfigSettingData('industrySetting');
  static const orderSetting = FTypeSystemConfigSettingData('orderSetting');
  static const resourceSetting = FTypeSystemConfigSettingData('resourceSetting');
  static const stockSetting = FTypeSystemConfigSettingData('stockSetting');
  const FTypeSystemConfigSettingData(super.key);
}

final FieldReflectInfo<TypeSystemConfigSettingData> _TypeSystemConfigSettingData_fields = {
  "industrySetting": (
    getter: (data) => data.industrySetting,
    setter: (data, value) => data.industrySetting = value as TypeSystemConfigIndustrySetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigIndustrySetting.toDynamic;
      return formatter(data.industrySetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigIndustrySetting.fromDynamic;
      data.industrySetting = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSystemConfigIndustrySetting.deepCopy;
      newData.industrySetting = copyer(oldData.industrySetting);
    },
  ),
  "orderSetting": (
    getter: (data) => data.orderSetting,
    setter: (data, value) => data.orderSetting = value as TypeSystemConfigOrderSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigOrderSetting.toDynamic;
      return formatter(data.orderSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigOrderSetting.fromDynamic;
      data.orderSetting = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSystemConfigOrderSetting.deepCopy;
      newData.orderSetting = copyer(oldData.orderSetting);
    },
  ),
  "resourceSetting": (
    getter: (data) => data.resourceSetting,
    setter: (data, value) => data.resourceSetting = value as TypeSystemConfigResourceSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigResourceSetting.toDynamic;
      return formatter(data.resourceSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigResourceSetting.fromDynamic;
      data.resourceSetting = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSystemConfigResourceSetting.deepCopy;
      newData.resourceSetting = copyer(oldData.resourceSetting);
    },
  ),
  "stockSetting": (
    getter: (data) => data.stockSetting,
    setter: (data, value) => data.stockSetting = value as TypeSystemConfigStockSetting?,
    toDynamic: (data) {
      final formatter = TypeSystemConfigStockSetting.toDynamic;
      return formatter(data.stockSetting);
    },
    fromDynamic: (data, value) {
      final parser = TypeSystemConfigStockSetting.fromDynamic;
      data.stockSetting = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeSystemConfigStockSetting.deepCopy;
      newData.stockSetting = copyer(oldData.stockSetting);
    },
  ),
};

class TypeSystemConfigSettingData extends IDataBasic implements IDataDynamic {
  TypeSystemConfigSettingData({
    this.industrySetting,
    this.orderSetting,
    this.resourceSetting,
    this.stockSetting
  });

  static TypeSystemConfigSettingData? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigSettingData();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigSettingData_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigSettingData: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigSettingData? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigSettingData_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigSettingData? deepCopy(TypeSystemConfigSettingData? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigSettingData();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigSettingData_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigSettingData copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigSettingData_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigSettingData_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeSystemConfigIndustrySetting? industrySetting;

  TypeSystemConfigOrderSetting? orderSetting;

  TypeSystemConfigResourceSetting? resourceSetting;

  TypeSystemConfigStockSetting? stockSetting;

}

class FTypeSystemConfigStockSetting extends IDataField {
  static const availableStockType = FTypeSystemConfigStockSetting('availableStockType');
  const FTypeSystemConfigStockSetting(super.key);
}

final FieldReflectInfo<TypeSystemConfigStockSetting> _TypeSystemConfigStockSetting_fields = {
  "availableStockType": (
    getter: (data) => data.availableStockType,
    setter: (data, value) => data.availableStockType = value as TypeEnumAvailableStockType?,
    toDynamic: (data) {
      final formatter = TypeEnumAvailableStockType.toDynamic;
      return formatter(data.availableStockType);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumAvailableStockType.fromDynamic;
      data.availableStockType = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumAvailableStockType.deepCopy;
      newData.availableStockType = copyer(oldData.availableStockType);
    },
  ),
};

class TypeSystemConfigStockSetting extends IDataBasic implements IDataDynamic {
  TypeSystemConfigStockSetting({
    this.availableStockType
  });

  static TypeSystemConfigStockSetting? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeSystemConfigStockSetting();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeSystemConfigStockSetting_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeSystemConfigStockSetting: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeSystemConfigStockSetting? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeSystemConfigStockSetting_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeSystemConfigStockSetting? deepCopy(TypeSystemConfigStockSetting? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeSystemConfigStockSetting();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeSystemConfigStockSetting_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeSystemConfigStockSetting copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeSystemConfigStockSetting_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeSystemConfigStockSetting_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  TypeEnumAvailableStockType? availableStockType;

}

class FTypeTenantInfo extends IDataField {
  static const expireDate = FTypeTenantInfo('expireDate');
  static const id = FTypeTenantInfo('id');
  static const name = FTypeTenantInfo('name');
  static const operatorCountDesc = FTypeTenantInfo('operatorCountDesc');
  static const state = FTypeTenantInfo('state');
  const FTypeTenantInfo(super.key);
}

final FieldReflectInfo<TypeTenantInfo> _TypeTenantInfo_fields = {
  "expireDate": (
    getter: (data) => data.expireDate,
    setter: (data, value) => data.expireDate = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.expireDate);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.expireDate = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.expireDate = copyer(oldData.expireDate);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "operatorCountDesc": (
    getter: (data) => data.operatorCountDesc,
    setter: (data, value) => data.operatorCountDesc = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.operatorCountDesc);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.operatorCountDesc = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.operatorCountDesc = copyer(oldData.operatorCountDesc);
    },
  ),
  "state": (
    getter: (data) => data.state,
    setter: (data, value) => data.state = value as TypeEnumTenantStatePO?,
    toDynamic: (data) {
      final formatter = TypeEnumTenantStatePO.toDynamic;
      return formatter(data.state);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumTenantStatePO.fromDynamic;
      data.state = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumTenantStatePO.deepCopy;
      newData.state = copyer(oldData.state);
    },
  ),
};

class TypeTenantInfo extends IDataBasic implements IDataDynamic {
  TypeTenantInfo({
    this.expireDate,
    this.id,
    this.name,
    this.operatorCountDesc,
    this.state
  });

  static TypeTenantInfo? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeTenantInfo();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeTenantInfo_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeTenantInfo: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeTenantInfo? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeTenantInfo_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeTenantInfo? deepCopy(TypeTenantInfo? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeTenantInfo();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeTenantInfo_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeTenantInfo copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeTenantInfo_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeTenantInfo_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? expireDate;

  int? id;

  String? name;

  String? operatorCountDesc;

  TypeEnumTenantStatePO? state;

}

class FTypeUnit extends IDataField {
  static const createTime = FTypeUnit('createTime');
  static const id = FTypeUnit('id');
  static const isEnabled = FTypeUnit('isEnabled');
  static const modifyTime = FTypeUnit('modifyTime');
  static const name = FTypeUnit('name');
  static const remark = FTypeUnit('remark');
  const FTypeUnit(super.key);
}

final FieldReflectInfo<TypeUnit> _TypeUnit_fields = {
  "createTime": (
    getter: (data) => data.createTime,
    setter: (data, value) => data.createTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.createTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.createTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.createTime = copyer(oldData.createTime);
    },
  ),
  "id": (
    getter: (data) => data.id,
    setter: (data, value) => data.id = value as int?,
    toDynamic: (data) {
      final formatter = IntHelper.toDynamic;
      return formatter(data.id);
    },
    fromDynamic: (data, value) {
      final parser = IntHelper.fromDynamic;
      data.id = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = IntHelper.deepCopy;
      newData.id = copyer(oldData.id);
    },
  ),
  "isEnabled": (
    getter: (data) => data.isEnabled,
    setter: (data, value) => data.isEnabled = value as TypeEnumSoftEnableIsEnable?,
    toDynamic: (data) {
      final formatter = TypeEnumSoftEnableIsEnable.toDynamic;
      return formatter(data.isEnabled);
    },
    fromDynamic: (data, value) {
      final parser = TypeEnumSoftEnableIsEnable.fromDynamic;
      data.isEnabled = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = TypeEnumSoftEnableIsEnable.deepCopy;
      newData.isEnabled = copyer(oldData.isEnabled);
    },
  ),
  "modifyTime": (
    getter: (data) => data.modifyTime,
    setter: (data, value) => data.modifyTime = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.modifyTime);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.modifyTime = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.modifyTime = copyer(oldData.modifyTime);
    },
  ),
  "name": (
    getter: (data) => data.name,
    setter: (data, value) => data.name = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.name);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.name = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.name = copyer(oldData.name);
    },
  ),
  "remark": (
    getter: (data) => data.remark,
    setter: (data, value) => data.remark = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.remark);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.remark = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.remark = copyer(oldData.remark);
    },
  ),
};

class TypeUnit extends IDataBasic implements IDataDynamic {
  TypeUnit({
    this.createTime,
    this.id,
    this.isEnabled,
    this.modifyTime,
    this.name,
    this.remark
  });

  static TypeUnit? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeUnit();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeUnit_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeUnit: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeUnit? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeUnit_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeUnit? deepCopy(TypeUnit? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeUnit();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeUnit_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeUnit copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeUnit_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeUnit_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? createTime;

  int? id;

  TypeEnumSoftEnableIsEnable? isEnabled;

  String? modifyTime;

  String? name;

  String? remark;

}

class FTypeUploadToken extends IDataField {
  static const fileKey = FTypeUploadToken('fileKey');
  static const uploadToken = FTypeUploadToken('uploadToken');
  const FTypeUploadToken(super.key);
}

final FieldReflectInfo<TypeUploadToken> _TypeUploadToken_fields = {
  "fileKey": (
    getter: (data) => data.fileKey,
    setter: (data, value) => data.fileKey = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.fileKey);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.fileKey = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.fileKey = copyer(oldData.fileKey);
    },
  ),
  "uploadToken": (
    getter: (data) => data.uploadToken,
    setter: (data, value) => data.uploadToken = value as String?,
    toDynamic: (data) {
      final formatter = StringHelper.toDynamic;
      return formatter(data.uploadToken);
    },
    fromDynamic: (data, value) {
      final parser = StringHelper.fromDynamic;
      data.uploadToken = parser(value);
    },
    deepCopy: (newData, oldData) {
      final copyer = StringHelper.deepCopy;
      newData.uploadToken = copyer(oldData.uploadToken);
    },
  ),
};

class TypeUploadToken extends IDataBasic implements IDataDynamic {
  TypeUploadToken({
    this.fileKey,
    this.uploadToken
  });

  static TypeUploadToken? fromDynamic(Object? dy) {
    if (dy == null) {
      return null;
    } else if (dy is Map<String, dynamic>) {
      final data = TypeUploadToken();
      dy.forEach((key, dynamicValue) {
        final fieldInfo = _TypeUploadToken_fields[key];
        if (fieldInfo == null) {
          data.setExternalField(key, dynamicValue);
          return;
        }
        fieldInfo.fromDynamic(data, dynamicValue);
      });
      return data;
    }
    throw FormatException('can not parse to TypeUploadToken: [$dy]');
  }

  static Map<String, dynamic>? toDynamic(TypeUploadToken? data) {
    if (data == null) {
      return null;
    }
    final result = <String, dynamic>{};
    data.getExternalFields().forEach((key, value) {
      if (value != null) {
        result[key] = value;
      }
    });
    _TypeUploadToken_fields.forEach((key, fieldInfo) {
      final dynamicValue = fieldInfo.toDynamic(data);
      if (dynamicValue != null) {
        result[key] = dynamicValue;
      }
    });
    return result;
  }

  @override
  Map<String, dynamic> encodeDynamic() {
    return toDynamic(this)!;
  }

  static TypeUploadToken? deepCopy(TypeUploadToken? data) {
    if (data == null) {
      return null;
    }
    final newData = TypeUploadToken();
    newData._externalFields.clear();
    newData._externalFields.addAll(data._copyExternalFields());
    _TypeUploadToken_fields.forEach((key, fieldInfo) {
      fieldInfo.deepCopy(newData, data);
    });
    return newData;
  }

  @override
  TypeUploadToken copy() {
    return deepCopy(this)!;
  }

  @override
  String toString() {
    return encodeDynamic().toString();
  }

  @override
  Object? operator [](String name) {
    var fieldInfo = _TypeUploadToken_fields[name];
    if (fieldInfo == null) {
      return super[name];
    }
    return fieldInfo.getter(this);
  }

  @override
  void operator []=(String name, Object? value) {
    var fieldInfo = _TypeUploadToken_fields[name];
    if (fieldInfo == null) {
      super[name] = value;
      return;
    }
    fieldInfo.setter(this, value);
  }

  String? fileKey;

  String? uploadToken;

}


T DeepCopy<T>(T info) {
  if (info == null) {
    return info;
  } else if (info is IDataDynamic) {
    return info.copy() as T;
  } else if (info is bool) {
    return BoolHelper.deepCopy(info) as T;
  } else if (info is int) {
    return IntHelper.deepCopy(info) as T;
  } else if (info is double) {
    return DoubleHelper.deepCopy(info) as T;
  } else if (info is String) {
    return StringHelper.deepCopy(info) as T;
  } else if (info is List) {
    return info.map((single) => DeepCopy(single)).toList() as T;
  } else if (info is Map) {
    final data = {};
    info.forEach((key, value) {
      data[DeepCopy(key)] = DeepCopy(value);
    });
    return data as T;
  } else if (info is Set) {
    final data = <dynamic>{};
    for (final value in info) {
      data.add(value);
    }
    return data as T;
  } else {
    throw FormatException('can not deepCopy dynamic: ${info.runtimeType}');
  }
}

Object? DynamicEncode(Object? info) {
  if (info == null) {
    return info;
  } else if (info is IDataDynamic) {
    return info.encodeDynamic();
  } else if (info is bool) {
    return BoolHelper.toDynamic(info);
  } else if (info is int) {
    return IntHelper.toDynamic(info);
  } else if (info is double) {
    return DoubleHelper.toDynamic(info);
  } else if (info is String) {
    return StringHelper.toDynamic(info);
  } else if (info is List) {
    return info.map((single) => DynamicEncode(single)).toList();
  } else if (info is Map) {
    final data = {};
    info.forEach((key, value) {
      data[DynamicEncode(key)] = DynamicEncode(value);
    });
    return data;
  } else if (info is Set) {
    final data = <dynamic>{};
    for (final value in info) {
      data.add(value);
    }
    return data;
  } else {
    throw FormatException('can not convertTo dynamic: ${info.runtimeType}');
  }
}

Future<int?> ApiResourceAccountAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/account/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountConvertToCategory([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/convertToCategory",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAccountEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeAccount?> ApiResourceAccountGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/get",
    data: DynamicEncode(data),
  );
  final parser = TypeAccount.fromDynamic;
  return parser(result);
}

Future<List<TypeAccount>?> ApiResourceAccountGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeAccount>((single){
    final handler = TypeAccount.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceAccountGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListAccount?> ApiResourceAccountSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/account/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAccount.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAccountSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/account/setInitial",
    data: DynamicEncode(data),
  );
}

Future<TypeAccountGroupQueryDTO?> ApiReportAccountQueryByAccountGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/account/queryByAccountGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeAccountGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeAccountFlowQueryDTO?> ApiReportAccountQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/account/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeAccountFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeArapFlowQueryDTO?> ApiReportArapQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/arap/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeArapFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceAssembleTemplateAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAssembleTemplateDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAssembleTemplateDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceAssembleTemplateEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeAssembleTemplate?> ApiResourceAssembleTemplateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/get",
    data: DynamicEncode(data),
  );
  final parser = TypeAssembleTemplate.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceAssembleTemplateGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceAssembleTemplateMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/assembleTemplate/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListAssembleTemplate?> ApiResourceAssembleTemplateSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/assembleTemplate/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAssembleTemplate.fromDynamic;
  return parser(result);
}

Future<String?> ApiAssistAttachmentAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/add",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistAttachmentClearAllEmptyItemImage([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/clearAllEmptyItemImage",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistAttachmentClearAllEmptyOrderAttachment([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/attachment/clearAllEmptyOrderAttachment",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistAttachmentDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/attachment/del",
    data: DynamicEncode(data),
  );
}

Future<TypeUploadToken?> ApiAssistAttachmentGetUploadToken([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/attachment/getUploadToken",
    data: DynamicEncode(data),
  );
  final parser = TypeUploadToken.fromDynamic;
  return parser(result);
}

Future<TypePageListAttachment?> ApiAssistAttachmentSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/attachment/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListAttachment.fromDynamic;
  return parser(result);
}

Future<TypeAttachmentQueryDTO?> ApiReportAttachmentQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/attachment/query",
    data: DynamicEncode(data),
  );
  final parser = TypeAttachmentQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiAssistBackendTaskAddImportExcelTask([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/assist/backendTask/addImportExcelTask",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistBackendTaskDownloadResult([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/downloadResult",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistBackendTaskDownloadSample([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/downloadSample",
    data: DynamicEncode(data),
  );
}

Future<TypeBackendTask?> ApiAssistBackendTaskGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/get",
    data: DynamicEncode(data),
  );
  final parser = TypeBackendTask.fromDynamic;
  return parser(result);
}

Future<String?> ApiAssistBackendTaskGetData([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/getData",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistBackendTaskRestore([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/backendTask/restore",
    data: DynamicEncode(data),
  );
}

Future<TypePageListBackendTask?> ApiAssistBackendTaskSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/backendTask/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListBackendTask.fromDynamic;
  return parser(result);
}

Future<TypeOutput?> ApiAssistColumnConstraintAndStateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraintAndState/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOutput.fromDynamic;
  return parser(result);
}

Future<List<TypeColumnConstraintItem>?> ApiAssistColumnConstraintGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraint/get",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeColumnConstraintItem>((single){
    final handler = TypeColumnConstraintItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeColumnConstraintItem>?> ApiAssistColumnConstraintGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnConstraint/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeColumnConstraintItem>((single){
    final handler = TypeColumnConstraintItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiAssistColumnConstraintSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnConstraint/set",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistColumnConstraintSetBatch([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnConstraint/setBatch",
    data: DynamicEncode(data),
  );
}

Future<TypeColumnState?> ApiAssistColumnStateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/columnState/get",
    data: DynamicEncode(data),
  );
  final parser = TypeColumnState.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistColumnStateSetBasicInfo([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnState/setBasicInfo",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistColumnStateSetDefaultValueInfo([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/columnState/setDefaultValueInfo",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiResourceContactAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/contact/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeContact?> ApiResourceContactGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/get",
    data: DynamicEncode(data),
  );
  final parser = TypeContact.fromDynamic;
  return parser(result);
}

Future<List<TypeContact>?> ApiResourceContactGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
    final handler = TypeContact.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeContact>?> ApiResourceContactGetByName([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getByName",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeContact>((single){
    final handler = TypeContact.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceContactGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceContactGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceContactModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<TypePageListContact?> ApiResourceContactSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/contact/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListContact.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceContactSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/contact/setInitial",
    data: DynamicEncode(data),
  );
}

Future<TypeContactQueryDTO?> ApiReportContactQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/contact/query",
    data: DynamicEncode(data),
  );
  final parser = TypeContactQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiUserEmployeeAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/user/employee/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserEmployeeDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserEmployeeDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserEmployeeEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeEmployee?> ApiUserEmployeeGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/get",
    data: DynamicEncode(data),
  );
  final parser = TypeEmployee.fromDynamic;
  return parser(result);
}

Future<String?> ApiUserEmployeeGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserEmployeeMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/employee/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListEmployee?> ApiUserEmployeeSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/employee/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListEmployee.fromDynamic;
  return parser(result);
}

Future<TypeImageQueryDTO?> ApiReportImageQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/image/query",
    data: DynamicEncode(data),
  );
  final parser = TypeImageQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceItemAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/item/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceItemClearAllCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/clearAllCustom",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/enable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemExecuteCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/executeCustom",
    data: DynamicEncode(data),
  );
}

Future<TypeItem?> ApiResourceItemGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/get",
    data: DynamicEncode(data),
  );
  final parser = TypeItem.fromDynamic;
  return parser(result);
}

Future<List<TypeItem>?> ApiResourceItemGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
    final handler = TypeItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeItem>?> ApiResourceItemGetByName([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getByName",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeItem>((single){
    final handler = TypeItem.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceItemGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceItemGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceItemMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModBatchSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modBatchSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModIsRegularType([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modIsRegularType",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModPrice([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modPrice",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceItemReplaceUnit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/item/replaceUnit",
    data: DynamicEncode(data),
  );
}

Future<TypePageListItem?> ApiResourceItemSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/item/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListItem.fromDynamic;
  return parser(result);
}

Future<TypeItemUnitConvertQueryDTO?> ApiReportItemUnitConvertQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/itemUnitConvert/query",
    data: DynamicEncode(data),
  );
  final parser = TypeItemUnitConvertQueryDTO.fromDynamic;
  return parser(result);
}

Future<List<TypeOperatorPermission>?> ApiLoginOperatorGetAllPermission([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/loginOperator/getAllPermission",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
    final handler = TypeOperatorPermission.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeOperator?> ApiLoginOperatorIsLogin([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/loginOperator/isLogin",
    data: DynamicEncode(data),
  );
  final parser = TypeOperator.fromDynamic;
  return parser(result);
}

Future<void> ApiLoginOperatorModMyPassword([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/loginOperator/modMyPassword",
    data: DynamicEncode(data),
  );
}

Future<TypeMainIndexDataDTO?> ApiReportMainIndexQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/mainIndex/query",
    data: DynamicEncode(data),
  );
  final parser = TypeMainIndexDataDTO.fromDynamic;
  return parser(result);
}

Future<TypeMainIndexTodoDataDTO?> ApiReportMainIndexQueryTodo([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/mainIndex/queryTodo",
    data: DynamicEncode(data),
  );
  final parser = TypeMainIndexTodoDataDTO.fromDynamic;
  return parser(result);
}

Future<TypeMenuConfig?> ApiAssistMenuConfigGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/menuConfig/get",
    data: DynamicEncode(data),
  );
  final parser = TypeMenuConfig.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistMenuConfigSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/menuConfig/set",
    data: DynamicEncode(data),
  );
}

Future<List<TypeEnumInfo>?> EnumGetAll([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/enum/getAll",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeEnumInfo>((single){
    final handler = TypeEnumInfo.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<int?> ApiUserOperatorAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/user/operator/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiUserOperatorDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserOperatorDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiUserOperatorEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeOperator?> ApiUserOperatorGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operator/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOperator.fromDynamic;
  return parser(result);
}

Future<void> ApiUserOperatorMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operator/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListOperator?> ApiUserOperatorSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operator/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListOperator.fromDynamic;
  return parser(result);
}

Future<TypeOperatorPermissionInfo?> ApiUserOperatorPermissionGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOperatorPermissionInfo.fromDynamic;
  return parser(result);
}

Future<List<TypeEntityOperation>?> ApiUserOperatorPermissionGetAllOperation([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/getAllOperation",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeEntityOperation>((single){
    final handler = TypeEntityOperation.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeOperatorPermission>?> ApiUserOperatorPermissionGetByEntity([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/user/operatorPermission/getByEntity",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOperatorPermission>((single){
    final handler = TypeOperatorPermission.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiUserOperatorPermissionSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/user/operatorPermission/set",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<int?> ApiOrderOrderAddAndConfirm([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/addAndConfirm",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderBatchChangeItem([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/batchChangeItem",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderCancel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/cancel",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderChange([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/change",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderConfirm([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/confirm",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderCopy([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/copy",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/del",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderExecute([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/execute",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderExecuteCustom([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/executeCustom",
    data: DynamicEncode(data),
  );
}

Future<List<int>?> ApiOrderOrderGenerate([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/generate",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<int>((single){
    final handler = IntHelper.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeOrder?> ApiOrderOrderGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/get",
    data: DynamicEncode(data),
  );
  final parser = TypeOrder.fromDynamic;
  return parser(result);
}

Future<List<TypeOrder>?> ApiOrderOrderGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeOrder>((single){
    final handler = TypeOrder.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<int?> ApiOrderOrderGetNearOrderId([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getNearOrderId",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<TypeOrderNumberAndInsertId?> ApiOrderOrderGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/order/order/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderNumberAndInsertId.fromDynamic;
  return parser(result);
}

Future<void> ApiOrderOrderMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderModAndConfirm([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/modAndConfirm",
    data: DynamicEncode(data),
  );
}

Future<void> ApiOrderOrderRedReverse([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/order/order/redReverse",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiOrderOrderRedReverseAndCopy([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/order/order/redReverseAndCopy",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<TypeOrderInvoiceQueryDTO?> ApiReportOrderInvoiceQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderInvoice/query",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderInvoiceQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderItemQueryDTO?> ApiReportOrderItemQueryByItem([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItem",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderItemQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderItemGroupQueryDTO?> ApiReportOrderItemQueryByItemGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItemGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderItemGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeQueryCrossTabResult?> ApiReportOrderItemQueryByItemPivot([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderItem/queryByItemPivot",
    data: DynamicEncode(data),
  );
  final parser = TypeQueryCrossTabResult.fromDynamic;
  return parser(result);
}

Future<TypeOrderAttachmentQueryDTO?> ApiReportOrderQueryAttachmentByOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryAttachmentByOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderAttachmentQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderQueryDTO?> ApiReportOrderQueryByOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeOrderGroupQueryDTO?> ApiReportOrderQueryByOrderGroup([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrderGroup",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderGroupQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeQueryCrossTabResult?> ApiReportOrderQueryByOrderPivot([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/order/queryByOrderPivot",
    data: DynamicEncode(data),
  );
  final parser = TypeQueryCrossTabResult.fromDynamic;
  return parser(result);
}

Future<TypeOrderSubOrderQueryDTO?> ApiReportOrderSubOrderQueryBySubOrder([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/orderSubOrder/queryBySubOrder",
    data: DynamicEncode(data),
  );
  final parser = TypeOrderSubOrderQueryDTO.fromDynamic;
  return parser(result);
}

Future<List<TypePriceTrack>?> ApiResourcePriceTrackGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/priceTrack/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypePriceTrack>((single){
    final handler = TypePriceTrack.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypePriceTrackQueryDTO?> ApiReportPriceTrackReportQuery([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/priceTrackReport/query",
    data: DynamicEncode(data),
  );
  final parser = TypePriceTrackQueryDTO.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistPrintTemplateAdd([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/add",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistPrintTemplateDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/del",
    data: DynamicEncode(data),
  );
}

Future<TypePrintTemplate?> ApiAssistPrintTemplateGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/printTemplate/get",
    data: DynamicEncode(data),
  );
  final parser = TypePrintTemplate.fromDynamic;
  return parser(result);
}

Future<List<TypePrintTemplate>?> ApiAssistPrintTemplateGetByPrintSceneId([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/printTemplate/getByPrintSceneId",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypePrintTemplate>((single){
    final handler = TypePrintTemplate.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiAssistPrintTemplateMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/mod",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistPrintTemplateModSortWeight([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/printTemplate/modSortWeight",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockClearPurchaseTransit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/clearPurchaseTransit",
    data: DynamicEncode(data),
  );
}

Future<TypeStock?> ApiResourceStockGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/stock/get",
    data: DynamicEncode(data),
  );
  final parser = TypeStock.fromDynamic;
  return parser(result);
}

Future<List<TypeStock>?> ApiResourceStockGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/stock/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStock>((single){
    final handler = TypeStock.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<List<TypeStockPrice>?> ApiResourceStockGetBatchPrice([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/stock/getBatchPrice",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStockPrice>((single){
    final handler = TypeStockPrice.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<void> ApiResourceStockSetInitial([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setInitial",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockSetLocationRemark([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setLocationRemark",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStockSetPurchaseTransit([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/stock/setPurchaseTransit",
    data: DynamicEncode(data),
  );
}

Future<TypeStockReplenishQueryDTO?> ApiReportStockReplenishQueryBySales([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stockReplenish/queryBySales",
    data: DynamicEncode(data),
  );
  final parser = TypeStockReplenishQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockQueryDTO?> ApiReportStockQueryByStore([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryByStore",
    data: DynamicEncode(data),
  );
  final parser = TypeStockQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockDetailQueryDTO?> ApiReportStockQueryDetail([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryDetail",
    data: DynamicEncode(data),
  );
  final parser = TypeStockDetailQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockFlowQueryDTO?> ApiReportStockQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeStockFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockRemainQueryDTO?> ApiReportStockQueryRemain([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryRemain",
    data: DynamicEncode(data),
  );
  final parser = TypeStockRemainQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeStockRemainFlowQueryDTO?> ApiReportStockQueryRemainFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/stock/queryRemainFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeStockRemainFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<int?> ApiResourceStoreAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/store/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceStoreDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStoreDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceStoreEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeStore?> ApiResourceStoreGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/get",
    data: DynamicEncode(data),
  );
  final parser = TypeStore.fromDynamic;
  return parser(result);
}

Future<List<TypeStore>?> ApiResourceStoreGetAllCategory([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getAllCategory",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeStore>((single){
    final handler = TypeStore.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<String?> ApiResourceStoreGetNextCategoryNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getNextCategoryNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<String?> ApiResourceStoreGetNextNumber([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/getNextNumber",
    data: DynamicEncode(data),
  );
  final parser = StringHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceStoreMod([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/store/mod",
    data: DynamicEncode(data),
  );
}

Future<TypePageListStore?> ApiResourceStoreSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/store/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListStore.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStock?> ApiResourceSubContractStockGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/subContractStock/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStock.fromDynamic;
  return parser(result);
}

Future<List<TypeSubContractStock>?> ApiResourceSubContractStockGetBatch([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/subContractStock/getBatch",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeSubContractStock>((single){
    final handler = TypeSubContractStock.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypeSubContractStockQueryDTO?> ApiReportSubContractStockQueryByStore([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryByStore",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStockFlowQueryDTO?> ApiReportSubContractStockQueryFlow([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryFlow",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockFlowQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSubContractStockRemainQueryDTO?> ApiReportSubContractStockQueryRemain([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/report/subContractStock/queryRemain",
    data: DynamicEncode(data),
  );
  final parser = TypeSubContractStockRemainQueryDTO.fromDynamic;
  return parser(result);
}

Future<TypeSystemConfigAccountData?> ApiAssistSystemConfigAccountGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/systemConfigAccount/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSystemConfigAccountData.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistSystemConfigAccountOpen([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigAccount/open",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistSystemConfigAccountReset([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigAccount/reset",
    data: DynamicEncode(data),
  );
}

Future<TypeSystemConfigSettingData?> ApiAssistSystemConfigSettingGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/assist/systemConfigSetting/get",
    data: DynamicEncode(data),
  );
  final parser = TypeSystemConfigSettingData.fromDynamic;
  return parser(result);
}

Future<void> ApiAssistSystemConfigSettingReset([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigSetting/reset",
    data: DynamicEncode(data),
  );
}

Future<void> ApiAssistSystemConfigSettingSet([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/assist/systemConfigSetting/set",
    data: DynamicEncode(data),
  );
}

Future<TypeTenantInfo?> ApiTenantTenantGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/tenant/tenant/get",
    data: DynamicEncode(data),
  );
  final parser = TypeTenantInfo.fromDynamic;
  return parser(result);
}

Future<void> ApiTenantTenantResetSampleData([Object? data]) async{
  await myRequest(
    method: "GET",
    url: "/api/tenant/tenant/resetSampleData",
    data: DynamicEncode(data),
  );
}

Future<int?> ApiResourceUnitAdd([Object? data]) async{
  Object? result = await myRequest(
    method: "POST",
    url: "/api/resource/unit/add",
    data: DynamicEncode(data),
  );
  final parser = IntHelper.fromDynamic;
  return parser(result);
}

Future<void> ApiResourceUnitDel([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/del",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceUnitDisable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/disable",
    data: DynamicEncode(data),
  );
}

Future<void> ApiResourceUnitEnable([Object? data]) async{
  await myRequest(
    method: "POST",
    url: "/api/resource/unit/enable",
    data: DynamicEncode(data),
  );
}

Future<TypeUnit?> ApiResourceUnitGet([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/get",
    data: DynamicEncode(data),
  );
  final parser = TypeUnit.fromDynamic;
  return parser(result);
}

Future<List<TypeUnit>?> ApiResourceUnitGetAll([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/getAll",
    data: DynamicEncode(data),
  );
  final parser = ListHelper.wrapFromDynamic<TypeUnit>((single){
    final handler = TypeUnit.fromDynamic;
    return handler(single)!;
  });
  return parser(result);
}

Future<TypePageListUnit?> ApiResourceUnitSearch([Object? data]) async{
  Object? result = await myRequest(
    method: "GET",
    url: "/api/resource/unit/search",
    data: DynamicEncode(data),
  );
  final parser = TypePageListUnit.fromDynamic;
  return parser(result);
}

